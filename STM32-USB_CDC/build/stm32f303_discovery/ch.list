
build/stm32f303_discovery/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000279 	.word	0x08000279
 8000008:	0800027b 	.word	0x0800027b
 800000c:	0800027a 	.word	0x0800027a
 8000010:	0800027a 	.word	0x0800027a
 8000014:	0800027a 	.word	0x0800027a
 8000018:	0800027a 	.word	0x0800027a
 800001c:	0800027a 	.word	0x0800027a
 8000020:	0800027a 	.word	0x0800027a
 8000024:	0800027a 	.word	0x0800027a
 8000028:	0800027a 	.word	0x0800027a
 800002c:	08003411 	.word	0x08003411
 8000030:	0800027a 	.word	0x0800027a
 8000034:	0800027a 	.word	0x0800027a
 8000038:	0800027a 	.word	0x0800027a
 800003c:	0800027a 	.word	0x0800027a
 8000040:	0800027a 	.word	0x0800027a
 8000044:	0800027a 	.word	0x0800027a
 8000048:	0800027a 	.word	0x0800027a
 800004c:	0800027a 	.word	0x0800027a
 8000050:	0800027a 	.word	0x0800027a
 8000054:	0800027a 	.word	0x0800027a
 8000058:	0800027a 	.word	0x0800027a
 800005c:	0800027a 	.word	0x0800027a
 8000060:	0800027a 	.word	0x0800027a
 8000064:	0800027a 	.word	0x0800027a
 8000068:	0800027a 	.word	0x0800027a
 800006c:	0800027a 	.word	0x0800027a
 8000070:	0800027a 	.word	0x0800027a
 8000074:	0800027a 	.word	0x0800027a
 8000078:	0800027a 	.word	0x0800027a
 800007c:	0800027a 	.word	0x0800027a
 8000080:	0800027a 	.word	0x0800027a
 8000084:	0800027a 	.word	0x0800027a
 8000088:	0800027a 	.word	0x0800027a
 800008c:	0800027a 	.word	0x0800027a
 8000090:	0800027a 	.word	0x0800027a
 8000094:	0800027a 	.word	0x0800027a
 8000098:	0800027a 	.word	0x0800027a
 800009c:	0800027a 	.word	0x0800027a
 80000a0:	0800027a 	.word	0x0800027a
 80000a4:	0800027a 	.word	0x0800027a
 80000a8:	0800027a 	.word	0x0800027a
 80000ac:	0800027a 	.word	0x0800027a
 80000b0:	0800ae11 	.word	0x0800ae11
 80000b4:	0800027a 	.word	0x0800027a
 80000b8:	0800027a 	.word	0x0800027a
 80000bc:	0800027a 	.word	0x0800027a
 80000c0:	0800027a 	.word	0x0800027a
 80000c4:	0800027a 	.word	0x0800027a
 80000c8:	0800027a 	.word	0x0800027a
 80000cc:	0800027a 	.word	0x0800027a
 80000d0:	0800027a 	.word	0x0800027a
 80000d4:	0800027a 	.word	0x0800027a
 80000d8:	0800027a 	.word	0x0800027a
 80000dc:	0800027a 	.word	0x0800027a
 80000e0:	0800027a 	.word	0x0800027a
 80000e4:	0800027a 	.word	0x0800027a
 80000e8:	0800027a 	.word	0x0800027a
 80000ec:	0800027a 	.word	0x0800027a
 80000f0:	0800027a 	.word	0x0800027a
 80000f4:	0800027a 	.word	0x0800027a
 80000f8:	0800027a 	.word	0x0800027a
 80000fc:	0800027a 	.word	0x0800027a
 8000100:	0800027a 	.word	0x0800027a
 8000104:	0800027a 	.word	0x0800027a
 8000108:	0800027a 	.word	0x0800027a
 800010c:	0800027a 	.word	0x0800027a
 8000110:	0800027a 	.word	0x0800027a
 8000114:	0800027a 	.word	0x0800027a
 8000118:	0800027a 	.word	0x0800027a
 800011c:	0800027a 	.word	0x0800027a
 8000120:	0800027a 	.word	0x0800027a
 8000124:	0800027a 	.word	0x0800027a
 8000128:	0800027a 	.word	0x0800027a
 800012c:	0800027a 	.word	0x0800027a
 8000130:	0800027a 	.word	0x0800027a
 8000134:	0800027a 	.word	0x0800027a
 8000138:	0800027a 	.word	0x0800027a
 800013c:	0800027a 	.word	0x0800027a
 8000140:	0800027a 	.word	0x0800027a
 8000144:	0800027a 	.word	0x0800027a
 8000148:	0800027a 	.word	0x0800027a
 800014c:	0800027a 	.word	0x0800027a
 8000150:	0800027a 	.word	0x0800027a
 8000154:	0800027a 	.word	0x0800027a
 8000158:	0800027a 	.word	0x0800027a
 800015c:	0800027a 	.word	0x0800027a
 8000160:	0800027a 	.word	0x0800027a
 8000164:	0800027a 	.word	0x0800027a
 8000168:	0800027a 	.word	0x0800027a
 800016c:	0800aae1 	.word	0x0800aae1
 8000170:	0800027a 	.word	0x0800027a
 8000174:	0800027a 	.word	0x0800027a
 8000178:	0800027a 	.word	0x0800027a
 800017c:	0800027a 	.word	0x0800027a
 8000180:	0800027a 	.word	0x0800027a
 8000184:	0800027a 	.word	0x0800027a
 8000188:	0800027a 	.word	0x0800027a
 800018c:	0800027a 	.word	0x0800027a
 8000190:	0800027a 	.word	0x0800027a
 8000194:	0800027a 	.word	0x0800027a
 8000198:	0800027a 	.word	0x0800027a
 800019c:	0800027a 	.word	0x0800027a

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <endfiniloop+0x4>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <endfiniloop+0x8>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4826      	ldr	r0, [pc, #152]	; (8000248 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001bc:	f380 8814 	msr	CONTROL, r0
                isb
 80001c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80001c4:	f00a fee4 	bl	800af90 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80001c8:	f00a fbba 	bl	800a940 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80001cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001d0:	491e      	ldr	r1, [pc, #120]	; (800024c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <endfiniloop+0x4>)

080001d4 <msloop>:
msloop:
                cmp     r1, r2
 80001d4:	4291      	cmp	r1, r2
                itt     lo
 80001d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001dc:	e7fa      	bcc.n	80001d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001de:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <endfiniloop+0x8>)

080001e2 <psloop>:
psloop:
                cmp     r1, r2
 80001e2:	4291      	cmp	r1, r2
                itt     lo
 80001e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ea:	e7fa      	bcc.n	80001e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001ec:	4919      	ldr	r1, [pc, #100]	; (8000254 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <endfiniloop+0x20>)

080001f2 <dloop>:
dloop:
                cmp     r2, r3
 80001f2:	429a      	cmp	r2, r3
                ittt    lo
 80001f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001fe:	e7f8      	bcc.n	80001f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000200:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <endfiniloop+0x28>)

08000206 <bloop>:
bloop:
                cmp     r1, r2
 8000206:	4291      	cmp	r1, r2
                itt     lo
 8000208:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800020a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800020e:	e7fa      	bcc.n	8000206 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000210:	f00a fe76 	bl	800af00 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000214:	f00a feb4 	bl	800af80 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000218:	4c13      	ldr	r4, [pc, #76]	; (8000268 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800021a:	4d14      	ldr	r5, [pc, #80]	; (800026c <endfiniloop+0x30>)

0800021c <initloop>:
initloop:
                cmp     r4, r5
 800021c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800021e:	da03      	bge.n	8000228 <endinitloop>
                ldr     r1, [r4], #4
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000224:	4788      	blx	r1
                b       initloop
 8000226:	e7f9      	b.n	800021c <initloop>

08000228 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000228:	f008 f9b2 	bl	8008590 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800022c:	4c10      	ldr	r4, [pc, #64]	; (8000270 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800022e:	4d11      	ldr	r5, [pc, #68]	; (8000274 <endfiniloop+0x38>)

08000230 <finiloop>:
finiloop:
                cmp     r4, r5
 8000230:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000232:	da03      	bge.n	800023c <endfiniloop>
                ldr     r1, [r4], #4
 8000234:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000238:	4788      	blx	r1
                b       finiloop
 800023a:	e7f9      	b.n	8000230 <finiloop>

0800023c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800023c:	f00a be98 	b.w	800af70 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000240:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000244:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000248:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800024c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000250:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000254:	0800dfcc 	.word	0x0800dfcc
                ldr     r2, =_data_start
 8000258:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800025c:	20000c98 	.word	0x20000c98
                ldr     r1, =_bss_start
 8000260:	20000c98 	.word	0x20000c98
                ldr     r2, =_bss_end
 8000264:	200024f8 	.word	0x200024f8
                ldr     r4, =__init_array_start
 8000268:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 800026c:	080001a0 	.word	0x080001a0
                ldr     r4, =__fini_array_start
 8000270:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 8000274:	080001a0 	.word	0x080001a0

08000278 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000278:	e792      	b.n	80001a0 <_crt0_entry>

0800027a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 800027a:	f000 f800 	bl	800027e <_unhandled_exception>

0800027e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800027e:	e7fe      	b.n	800027e <_unhandled_exception>

08000280 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000288:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800028a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000290:	f003 f926 	bl	80034e0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000294:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000296:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800029a:	4628      	mov	r0, r5
                blx     r4
 800029c:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800029e:	2000      	movs	r0, #0
                bl      chThdExit
 80002a0:	f007 fcee 	bl	8007c80 <chThdExit>

080002a4 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002a4:	f003 f984 	bl	80035b0 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002a8:	f003 f8c2 	bl	8003430 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002ac:	f003 f918 	bl	80034e0 <_dbg_check_unlock>

080002b0 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002b0:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002b2:	e7fe      	b.n	80002b2 <_port_exit_from_isr+0x2>

080002b4 <memcpy>:
 80002b4:	4684      	mov	ip, r0
 80002b6:	ea41 0300 	orr.w	r3, r1, r0
 80002ba:	f013 0303 	ands.w	r3, r3, #3
 80002be:	d16d      	bne.n	800039c <memcpy+0xe8>
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d341      	bcc.n	8000348 <memcpy+0x94>
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	3a40      	subs	r2, #64	; 0x40
 8000346:	d2bd      	bcs.n	80002c4 <memcpy+0x10>
 8000348:	3230      	adds	r2, #48	; 0x30
 800034a:	d311      	bcc.n	8000370 <memcpy+0xbc>
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	3a10      	subs	r2, #16
 800036e:	d2ed      	bcs.n	800034c <memcpy+0x98>
 8000370:	320c      	adds	r2, #12
 8000372:	d305      	bcc.n	8000380 <memcpy+0xcc>
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a04      	subs	r2, #4
 800037e:	d2f9      	bcs.n	8000374 <memcpy+0xc0>
 8000380:	3204      	adds	r2, #4
 8000382:	d008      	beq.n	8000396 <memcpy+0xe2>
 8000384:	07d2      	lsls	r2, r2, #31
 8000386:	bf1c      	itt	ne
 8000388:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800038c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000390:	d301      	bcc.n	8000396 <memcpy+0xe2>
 8000392:	880b      	ldrh	r3, [r1, #0]
 8000394:	8003      	strh	r3, [r0, #0]
 8000396:	4660      	mov	r0, ip
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	2a08      	cmp	r2, #8
 800039e:	d313      	bcc.n	80003c8 <memcpy+0x114>
 80003a0:	078b      	lsls	r3, r1, #30
 80003a2:	d08d      	beq.n	80002c0 <memcpy+0xc>
 80003a4:	f010 0303 	ands.w	r3, r0, #3
 80003a8:	d08a      	beq.n	80002c0 <memcpy+0xc>
 80003aa:	f1c3 0304 	rsb	r3, r3, #4
 80003ae:	1ad2      	subs	r2, r2, r3
 80003b0:	07db      	lsls	r3, r3, #31
 80003b2:	bf1c      	itt	ne
 80003b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003b8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003bc:	d380      	bcc.n	80002c0 <memcpy+0xc>
 80003be:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003c2:	f820 3b02 	strh.w	r3, [r0], #2
 80003c6:	e77b      	b.n	80002c0 <memcpy+0xc>
 80003c8:	3a04      	subs	r2, #4
 80003ca:	d3d9      	bcc.n	8000380 <memcpy+0xcc>
 80003cc:	3a01      	subs	r2, #1
 80003ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003d2:	f800 3b01 	strb.w	r3, [r0], #1
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0x118>
 80003d8:	780b      	ldrb	r3, [r1, #0]
 80003da:	7003      	strb	r3, [r0, #0]
 80003dc:	784b      	ldrb	r3, [r1, #1]
 80003de:	7043      	strb	r3, [r0, #1]
 80003e0:	788b      	ldrb	r3, [r1, #2]
 80003e2:	7083      	strb	r3, [r0, #2]
 80003e4:	4660      	mov	r0, ip
 80003e6:	4770      	bx	lr
	...
 8000400:	eba2 0003 	sub.w	r0, r2, r3
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <strcmp>:
 8000408:	7802      	ldrb	r2, [r0, #0]
 800040a:	780b      	ldrb	r3, [r1, #0]
 800040c:	2a01      	cmp	r2, #1
 800040e:	bf28      	it	cs
 8000410:	429a      	cmpcs	r2, r3
 8000412:	d1f5      	bne.n	8000400 <memcpy+0x14c>
 8000414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000418:	ea40 0401 	orr.w	r4, r0, r1
 800041c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000420:	f06f 0c00 	mvn.w	ip, #0
 8000424:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000428:	b312      	cbz	r2, 8000470 <strcmp+0x68>
 800042a:	ea80 0401 	eor.w	r4, r0, r1
 800042e:	f014 0f07 	tst.w	r4, #7
 8000432:	d16a      	bne.n	800050a <strcmp+0x102>
 8000434:	f000 0407 	and.w	r4, r0, #7
 8000438:	f020 0007 	bic.w	r0, r0, #7
 800043c:	f004 0503 	and.w	r5, r4, #3
 8000440:	f021 0107 	bic.w	r1, r1, #7
 8000444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800044c:	f014 0f04 	tst.w	r4, #4
 8000450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000454:	fa0c f405 	lsl.w	r4, ip, r5
 8000458:	ea62 0204 	orn	r2, r2, r4
 800045c:	ea66 0604 	orn	r6, r6, r4
 8000460:	d00a      	beq.n	8000478 <strcmp+0x70>
 8000462:	ea63 0304 	orn	r3, r3, r4
 8000466:	4662      	mov	r2, ip
 8000468:	ea67 0704 	orn	r7, r7, r4
 800046c:	4666      	mov	r6, ip
 800046e:	e003      	b.n	8000478 <strcmp+0x70>
 8000470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000478:	fa82 f54c 	uadd8	r5, r2, ip
 800047c:	ea82 0406 	eor.w	r4, r2, r6
 8000480:	faa4 f48c 	sel	r4, r4, ip
 8000484:	bb6c      	cbnz	r4, 80004e2 <strcmp+0xda>
 8000486:	fa83 f54c 	uadd8	r5, r3, ip
 800048a:	ea83 0507 	eor.w	r5, r3, r7
 800048e:	faa5 f58c 	sel	r5, r5, ip
 8000492:	b995      	cbnz	r5, 80004ba <strcmp+0xb2>
 8000494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800049c:	fa82 f54c 	uadd8	r5, r2, ip
 80004a0:	ea82 0406 	eor.w	r4, r2, r6
 80004a4:	faa4 f48c 	sel	r4, r4, ip
 80004a8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ac:	ea83 0507 	eor.w	r5, r3, r7
 80004b0:	faa5 f58c 	sel	r5, r5, ip
 80004b4:	4325      	orrs	r5, r4
 80004b6:	d0db      	beq.n	8000470 <strcmp+0x68>
 80004b8:	b99c      	cbnz	r4, 80004e2 <strcmp+0xda>
 80004ba:	ba2d      	rev	r5, r5
 80004bc:	fab5 f485 	clz	r4, r5
 80004c0:	f024 0407 	bic.w	r4, r4, #7
 80004c4:	fa27 f104 	lsr.w	r1, r7, r4
 80004c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004cc:	fa23 f304 	lsr.w	r3, r3, r4
 80004d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004dc:	eba0 0001 	sub.w	r0, r0, r1
 80004e0:	4770      	bx	lr
 80004e2:	ba24      	rev	r4, r4
 80004e4:	fab4 f484 	clz	r4, r4
 80004e8:	f024 0407 	bic.w	r4, r4, #7
 80004ec:	fa26 f104 	lsr.w	r1, r6, r4
 80004f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004f4:	fa22 f204 	lsr.w	r2, r2, r4
 80004f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80004fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000504:	eba0 0001 	sub.w	r0, r0, r1
 8000508:	4770      	bx	lr
 800050a:	f014 0f03 	tst.w	r4, #3
 800050e:	d13c      	bne.n	800058a <strcmp+0x182>
 8000510:	f010 0403 	ands.w	r4, r0, #3
 8000514:	d128      	bne.n	8000568 <strcmp+0x160>
 8000516:	f850 2b08 	ldr.w	r2, [r0], #8
 800051a:	f851 3b08 	ldr.w	r3, [r1], #8
 800051e:	fa82 f54c 	uadd8	r5, r2, ip
 8000522:	ea82 0503 	eor.w	r5, r2, r3
 8000526:	faa5 f58c 	sel	r5, r5, ip
 800052a:	b95d      	cbnz	r5, 8000544 <strcmp+0x13c>
 800052c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000534:	fa82 f54c 	uadd8	r5, r2, ip
 8000538:	ea82 0503 	eor.w	r5, r2, r3
 800053c:	faa5 f58c 	sel	r5, r5, ip
 8000540:	2d00      	cmp	r5, #0
 8000542:	d0e8      	beq.n	8000516 <strcmp+0x10e>
 8000544:	ba2d      	rev	r5, r5
 8000546:	fab5 f485 	clz	r4, r5
 800054a:	f024 0407 	bic.w	r4, r4, #7
 800054e:	fa23 f104 	lsr.w	r1, r3, r4
 8000552:	fa22 f204 	lsr.w	r2, r2, r4
 8000556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800055a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800055e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000562:	eba0 0001 	sub.w	r0, r0, r1
 8000566:	4770      	bx	lr
 8000568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800056c:	f020 0003 	bic.w	r0, r0, #3
 8000570:	f850 2b08 	ldr.w	r2, [r0], #8
 8000574:	f021 0103 	bic.w	r1, r1, #3
 8000578:	f851 3b08 	ldr.w	r3, [r1], #8
 800057c:	fa0c f404 	lsl.w	r4, ip, r4
 8000580:	ea62 0204 	orn	r2, r2, r4
 8000584:	ea63 0304 	orn	r3, r3, r4
 8000588:	e7c9      	b.n	800051e <strcmp+0x116>
 800058a:	f010 0403 	ands.w	r4, r0, #3
 800058e:	d01a      	beq.n	80005c6 <strcmp+0x1be>
 8000590:	eba1 0104 	sub.w	r1, r1, r4
 8000594:	f020 0003 	bic.w	r0, r0, #3
 8000598:	07e4      	lsls	r4, r4, #31
 800059a:	f850 2b04 	ldr.w	r2, [r0], #4
 800059e:	d006      	beq.n	80005ae <strcmp+0x1a6>
 80005a0:	d20f      	bcs.n	80005c2 <strcmp+0x1ba>
 80005a2:	788b      	ldrb	r3, [r1, #2]
 80005a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005a8:	1ae4      	subs	r4, r4, r3
 80005aa:	d106      	bne.n	80005ba <strcmp+0x1b2>
 80005ac:	b12b      	cbz	r3, 80005ba <strcmp+0x1b2>
 80005ae:	78cb      	ldrb	r3, [r1, #3]
 80005b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	d100      	bne.n	80005ba <strcmp+0x1b2>
 80005b8:	b91b      	cbnz	r3, 80005c2 <strcmp+0x1ba>
 80005ba:	4620      	mov	r0, r4
 80005bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80005c0:	4770      	bx	lr
 80005c2:	f101 0104 	add.w	r1, r1, #4
 80005c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ca:	07cc      	lsls	r4, r1, #31
 80005cc:	f021 0103 	bic.w	r1, r1, #3
 80005d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005d4:	d848      	bhi.n	8000668 <strcmp+0x260>
 80005d6:	d224      	bcs.n	8000622 <strcmp+0x21a>
 80005d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80005dc:	fa82 f54c 	uadd8	r5, r2, ip
 80005e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80005e4:	faa5 f58c 	sel	r5, r5, ip
 80005e8:	d10a      	bne.n	8000600 <strcmp+0x1f8>
 80005ea:	b965      	cbnz	r5, 8000606 <strcmp+0x1fe>
 80005ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f0:	ea84 0402 	eor.w	r4, r4, r2
 80005f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80005f8:	d10e      	bne.n	8000618 <strcmp+0x210>
 80005fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80005fe:	e7eb      	b.n	80005d8 <strcmp+0x1d0>
 8000600:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000604:	e055      	b.n	80006b2 <strcmp+0x2aa>
 8000606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800060a:	d14d      	bne.n	80006a8 <strcmp+0x2a0>
 800060c:	7808      	ldrb	r0, [r1, #0]
 800060e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000612:	f1c0 0000 	rsb	r0, r0, #0
 8000616:	4770      	bx	lr
 8000618:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000620:	e047      	b.n	80006b2 <strcmp+0x2aa>
 8000622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000626:	fa82 f54c 	uadd8	r5, r2, ip
 800062a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800062e:	faa5 f58c 	sel	r5, r5, ip
 8000632:	d10a      	bne.n	800064a <strcmp+0x242>
 8000634:	b965      	cbnz	r5, 8000650 <strcmp+0x248>
 8000636:	f851 3b04 	ldr.w	r3, [r1], #4
 800063a:	ea84 0402 	eor.w	r4, r4, r2
 800063e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000642:	d10c      	bne.n	800065e <strcmp+0x256>
 8000644:	f850 2b04 	ldr.w	r2, [r0], #4
 8000648:	e7eb      	b.n	8000622 <strcmp+0x21a>
 800064a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800064e:	e030      	b.n	80006b2 <strcmp+0x2aa>
 8000650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000654:	d128      	bne.n	80006a8 <strcmp+0x2a0>
 8000656:	880b      	ldrh	r3, [r1, #0]
 8000658:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800065c:	e029      	b.n	80006b2 <strcmp+0x2aa>
 800065e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000666:	e024      	b.n	80006b2 <strcmp+0x2aa>
 8000668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800066c:	fa82 f54c 	uadd8	r5, r2, ip
 8000670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000674:	faa5 f58c 	sel	r5, r5, ip
 8000678:	d10a      	bne.n	8000690 <strcmp+0x288>
 800067a:	b965      	cbnz	r5, 8000696 <strcmp+0x28e>
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	ea84 0402 	eor.w	r4, r4, r2
 8000684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000688:	d109      	bne.n	800069e <strcmp+0x296>
 800068a:	f850 2b04 	ldr.w	r2, [r0], #4
 800068e:	e7eb      	b.n	8000668 <strcmp+0x260>
 8000690:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000694:	e00d      	b.n	80006b2 <strcmp+0x2aa>
 8000696:	f015 0fff 	tst.w	r5, #255	; 0xff
 800069a:	d105      	bne.n	80006a8 <strcmp+0x2a0>
 800069c:	680b      	ldr	r3, [r1, #0]
 800069e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006a6:	e004      	b.n	80006b2 <strcmp+0x2aa>
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006b0:	4770      	bx	lr
 80006b2:	ba12      	rev	r2, r2
 80006b4:	ba1b      	rev	r3, r3
 80006b6:	fa82 f44c 	uadd8	r4, r2, ip
 80006ba:	ea82 0403 	eor.w	r4, r2, r3
 80006be:	faa4 f58c 	sel	r5, r4, ip
 80006c2:	fab5 f485 	clz	r4, r5
 80006c6:	fa02 f204 	lsl.w	r2, r2, r4
 80006ca:	fa03 f304 	lsl.w	r3, r3, r4
 80006ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80006d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80006da:	4770      	bx	lr
 80006dc:	0000      	movs	r0, r0
	...

080006e0 <chTMStartMeasurementX.constprop.62>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <chTMStartMeasurementX.constprop.62+0x8>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80006e4:	6083      	str	r3, [r0, #8]
}
 80006e6:	4770      	bx	lr
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	00000000 	.word	0x00000000

080006f0 <_test_assert_time_window.constprop.1>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80006f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 80006f4:	1a09      	subs	r1, r1, r0
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	1a1b      	subs	r3, r3, r0
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d308      	bcc.n	8000710 <_test_assert_time_window.constprop.1+0x20>
  test_failure_message = msg;
 80006fe:	4905      	ldr	r1, [pc, #20]	; (8000714 <_test_assert_time_window.constprop.1+0x24>)
  test_local_fail      = true;
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <_test_assert_time_window.constprop.1+0x28>)
  test_global_fail     = true;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <_test_assert_time_window.constprop.1+0x2c>)
  test_failure_message = msg;
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <_test_assert_time_window.constprop.1+0x30>)
 8000706:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 8000708:	2001      	movs	r0, #1
 800070a:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 800070c:	7018      	strb	r0, [r3, #0]
 800070e:	4770      	bx	lr
    return _test_fail(msg);
  return false;
 8000710:	2000      	movs	r0, #0
                              systime_t end,
                              const char *msg) {

  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
                      msg);
}
 8000712:	4770      	bx	lr
 8000714:	200022ac 	.word	0x200022ac
 8000718:	20002350 	.word	0x20002350
 800071c:	200022b0 	.word	0x200022b0
 8000720:	0800b880 	.word	0x0800b880
	...

08000730 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8000730:	2000      	movs	r0, #0
 8000732:	4770      	bx	lr
	...

08000740 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
	...

08000750 <rt_test_004_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8000750:	4b01      	ldr	r3, [pc, #4]	; (8000758 <rt_test_004_001_setup+0x8>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
}
 8000756:	4770      	bx	lr
 8000758:	20002380 	.word	0x20002380
 800075c:	00000000 	.word	0x00000000

08000760 <_test_assert>:
  if (!condition)
 8000760:	b948      	cbnz	r0, 8000776 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 8000762:	b410      	push	{r4}
  test_global_fail     = true;
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <_test_assert+0x1c>)
  test_local_fail      = true;
 8000766:	4c06      	ldr	r4, [pc, #24]	; (8000780 <_test_assert+0x20>)
  test_failure_message = msg;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <_test_assert+0x24>)
  test_local_fail      = true;
 800076a:	2001      	movs	r0, #1
 800076c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 800076e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8000770:	6019      	str	r1, [r3, #0]
}
 8000772:	bc10      	pop	{r4}
 8000774:	4770      	bx	lr
  return false;
 8000776:	2000      	movs	r0, #0
}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	200022b0 	.word	0x200022b0
 8000780:	20002350 	.word	0x20002350
 8000784:	200022ac 	.word	0x200022ac
	...

08000790 <rt_test_002_004_execute>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <rt_test_002_004_execute+0x14>)
 8000792:	2101      	movs	r1, #1
 8000794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000798:	6019      	str	r1, [r3, #0]
 800079a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800079c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 800079e:	4299      	cmp	r1, r3
 80007a0:	d0fc      	beq.n	800079c <rt_test_002_004_execute+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 80007a2:	4770      	bx	lr
 80007a4:	20002354 	.word	0x20002354
	...

080007b0 <test_printn.part.0>:

  if (!n)
    streamPut(test_chp, '0');
  else {
    p = buf;
    while (n)
 80007b0:	b320      	cbz	r0, 80007fc <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 80007b2:	b570      	push	{r4, r5, r6, lr}
 80007b4:	b084      	sub	sp, #16
    p = buf;
 80007b6:	466d      	mov	r5, sp
 80007b8:	462c      	mov	r4, r5
      *p++ = (n % 10) + '0', n /= 10;
 80007ba:	4e11      	ldr	r6, [pc, #68]	; (8000800 <test_printn.part.0+0x50>)
 80007bc:	e000      	b.n	80007c0 <test_printn.part.0+0x10>
    while (n)
 80007be:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 80007c0:	fba6 2300 	umull	r2, r3, r6, r0
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80007ca:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80007ce:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80007d2:	4622      	mov	r2, r4
 80007d4:	b2c9      	uxtb	r1, r1
 80007d6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 80007da:	4618      	mov	r0, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1ee      	bne.n	80007be <test_printn.part.0+0xe>
    while (p > buf)
 80007e0:	42aa      	cmp	r2, r5
 80007e2:	d909      	bls.n	80007f8 <test_printn.part.0+0x48>
 80007e4:	4e07      	ldr	r6, [pc, #28]	; (8000804 <test_printn.part.0+0x54>)
 80007e6:	e001      	b.n	80007ec <test_printn.part.0+0x3c>
 80007e8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 80007ec:	6830      	ldr	r0, [r6, #0]
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	4798      	blx	r3
    while (p > buf)
 80007f4:	42a5      	cmp	r5, r4
 80007f6:	d1f7      	bne.n	80007e8 <test_printn.part.0+0x38>
  }
}
 80007f8:	b004      	add	sp, #16
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	cccccccd 	.word	0xcccccccd
 8000804:	200022a8 	.word	0x200022a8
	...

08000810 <test_printn>:
  if (!n)
 8000810:	b928      	cbnz	r0, 800081e <test_printn+0xe>
    streamPut(test_chp, '0');
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <test_printn+0x14>)
 8000814:	6818      	ldr	r0, [r3, #0]
 8000816:	6803      	ldr	r3, [r0, #0]
 8000818:	2130      	movs	r1, #48	; 0x30
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4718      	bx	r3
 800081e:	f7ff bfc7 	b.w	80007b0 <test_printn.part.0>
 8000822:	bf00      	nop
 8000824:	200022a8 	.word	0x200022a8
	...

08000830 <test_println>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8000830:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8000832:	7801      	ldrb	r1, [r0, #0]
 8000834:	b189      	cbz	r1, 800085a <test_println+0x2a>
 8000836:	4d0a      	ldr	r5, [pc, #40]	; (8000860 <test_println+0x30>)
 8000838:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800083a:	6828      	ldr	r0, [r5, #0]
 800083c:	6803      	ldr	r3, [r0, #0]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4798      	blx	r3
  while (*msgp)
 8000842:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000846:	2900      	cmp	r1, #0
 8000848:	d1f7      	bne.n	800083a <test_println+0xa>

  test_print(msgp);
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800084a:	6828      	ldr	r0, [r5, #0]
 800084c:	4905      	ldr	r1, [pc, #20]	; (8000864 <test_println+0x34>)
 800084e:	6803      	ldr	r3, [r0, #0]
 8000850:	2202      	movs	r2, #2
 8000852:	685b      	ldr	r3, [r3, #4]
}
 8000854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000858:	4718      	bx	r3
 800085a:	4d01      	ldr	r5, [pc, #4]	; (8000860 <test_println+0x30>)
 800085c:	e7f5      	b.n	800084a <test_println+0x1a>
 800085e:	bf00      	nop
 8000860:	200022a8 	.word	0x200022a8
 8000864:	0800bb6c 	.word	0x0800bb6c
	...

08000870 <test_print>:
  while (*msgp)
 8000870:	7801      	ldrb	r1, [r0, #0]
 8000872:	b159      	cbz	r1, 800088c <test_print+0x1c>
void test_print(const char *msgp) {
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4d06      	ldr	r5, [pc, #24]	; (8000890 <test_print+0x20>)
 8000878:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 800087a:	6828      	ldr	r0, [r5, #0]
 800087c:	6803      	ldr	r3, [r0, #0]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4798      	blx	r3
  while (*msgp)
 8000882:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000886:	2900      	cmp	r1, #0
 8000888:	d1f7      	bne.n	800087a <test_print+0xa>
}
 800088a:	bd38      	pop	{r3, r4, r5, pc}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200022a8 	.word	0x200022a8
	...

080008a0 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 80008a0:	b4f0      	push	{r4, r5, r6, r7}
  while (cp < test_tokp) {
 80008a2:	4e0d      	ldr	r6, [pc, #52]	; (80008d8 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 80008a4:	4f0d      	ldr	r7, [pc, #52]	; (80008dc <_test_assert_sequence+0x3c>)
  while (cp < test_tokp) {
 80008a6:	6835      	ldr	r5, [r6, #0]
 80008a8:	1e42      	subs	r2, r0, #1
  char *cp = test_tokens_buffer;
 80008aa:	463b      	mov	r3, r7
 80008ac:	e003      	b.n	80008b6 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 80008ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 80008b2:	4284      	cmp	r4, r0
 80008b4:	d107      	bne.n	80008c6 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 80008b6:	429d      	cmp	r5, r3
 80008b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80008bc:	d8f7      	bhi.n	80008ae <_test_assert_sequence+0xe>
  if (*expected)
 80008be:	b910      	cbnz	r0, 80008c6 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 80008c0:	6037      	str	r7, [r6, #0]
}
 80008c2:	bcf0      	pop	{r4, r5, r6, r7}
 80008c4:	4770      	bx	lr
  test_local_fail      = true;
 80008c6:	4c06      	ldr	r4, [pc, #24]	; (80008e0 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 80008cc:	2001      	movs	r0, #1
 80008ce:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 80008d0:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 80008d2:	6019      	str	r1, [r3, #0]
}
 80008d4:	bcf0      	pop	{r4, r5, r6, r7}
 80008d6:	4770      	bx	lr
 80008d8:	20002368 	.word	0x20002368
 80008dc:	20002358 	.word	0x20002358
 80008e0:	20002350 	.word	0x20002350
 80008e4:	200022b0 	.word	0x200022b0
 80008e8:	200022ac 	.word	0x200022ac
 80008ec:	00000000 	.word	0x00000000

080008f0 <print_line>:
static void print_line(void) {
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4d08      	ldr	r5, [pc, #32]	; (8000914 <print_line+0x24>)
 80008f4:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 80008f6:	6828      	ldr	r0, [r5, #0]
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	212d      	movs	r1, #45	; 0x2d
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8000900:	3c01      	subs	r4, #1
 8000902:	d1f8      	bne.n	80008f6 <print_line+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000904:	6828      	ldr	r0, [r5, #0]
 8000906:	4904      	ldr	r1, [pc, #16]	; (8000918 <print_line+0x28>)
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	2202      	movs	r2, #2
 800090c:	685b      	ldr	r3, [r3, #4]
}
 800090e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000912:	4718      	bx	r3
 8000914:	200022a8 	.word	0x200022a8
 8000918:	0800bb6c 	.word	0x0800bb6c
 800091c:	00000000 	.word	0x00000000

08000920 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8000920:	2902      	cmp	r1, #2
 8000922:	d006      	beq.n	8000932 <get_descriptor+0x12>
 8000924:	2903      	cmp	r1, #3
 8000926:	d006      	beq.n	8000936 <get_descriptor+0x16>
 8000928:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <get_descriptor+0x24>)
 800092c:	bf18      	it	ne
 800092e:	2000      	movne	r0, #0
 8000930:	4770      	bx	lr
    return &vcom_configuration_descriptor;
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <get_descriptor+0x28>)
 8000934:	4770      	bx	lr
    if (dindex < 4)
 8000936:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8000938:	bf9a      	itte	ls
 800093a:	4804      	ldrls	r0, [pc, #16]	; (800094c <get_descriptor+0x2c>)
 800093c:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
  return NULL;
 8000940:	2000      	movhi	r0, #0
}
 8000942:	4770      	bx	lr
 8000944:	0800def8 	.word	0x0800def8
 8000948:	0800deac 	.word	0x0800deac
 800094c:	0800df80 	.word	0x0800df80

08000950 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000950:	2320      	movs	r3, #32
 8000952:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <_port_irq_epilogue+0x44>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800095e:	d102      	bne.n	8000966 <_port_irq_epilogue+0x16>
 8000960:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000964:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000966:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800096a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800096e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8000972:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000976:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <_port_irq_epilogue+0x48>)
 800097c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800097e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000980:	6889      	ldr	r1, [r1, #8]
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000986:	bf8c      	ite	hi
 8000988:	4a04      	ldrhi	r2, [pc, #16]	; (800099c <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800098a:	4a05      	ldrls	r2, [pc, #20]	; (80009a0 <_port_irq_epilogue+0x50>)
 800098c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	200011b0 	.word	0x200011b0
 800099c:	080002a5 	.word	0x080002a5
 80009a0:	080002b0 	.word	0x080002b0
	...

080009b0 <chTMStopMeasurementX>:
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <chTMStopMeasurementX+0x40>)
 80009b4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80009b6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80009b8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80009ba:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80009bc:	f8d2 6884 	ldr.w	r6, [r2, #2180]	; 0x884
  if (tmp->last > tmp->worst) {
 80009c0:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80009c2:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 80009c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80009c8:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80009ca:	18e6      	adds	r6, r4, r3
 80009cc:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 80009d0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80009d2:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80009d4:	bf88      	it	hi
 80009d6:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80009d8:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80009da:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80009dc:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80009e0:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80009e4:	bf38      	it	cc
 80009e6:	6003      	strcc	r3, [r0, #0]
}
 80009e8:	bcf0      	pop	{r4, r5, r6, r7}
 80009ea:	4770      	bx	lr
 80009ec:	e0001000 	.word	0xe0001000
 80009f0:	200011b0 	.word	0x200011b0
	...

08000a00 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
 8000a00:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <trace_next+0x30>)
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <trace_next+0x34>)
 8000a06:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a08:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000a10:	605c      	str	r4, [r3, #4]
 8000a12:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000a14:	f360 211f 	bfi	r1, r0, #8, #24
 8000a18:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8000a1c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8000a20:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000a22:	bf28      	it	cs
 8000a24:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 8000a28:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 8000a2a:	bc10      	pop	{r4}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	200011b0 	.word	0x200011b0
 8000a34:	e0001000 	.word	0xe0001000
	...

08000a40 <_trace_switch.constprop.88>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <_trace_switch.constprop.88+0x30>)
 8000a42:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000a44:	07d2      	lsls	r2, r2, #31
 8000a46:	d500      	bpl.n	8000a4a <_trace_switch.constprop.88+0xa>
 8000a48:	4770      	bx	lr
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000a4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8000a4c:	b430      	push	{r4, r5}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000a4e:	780a      	ldrb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000a50:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000a52:	2501      	movs	r5, #1
 8000a54:	f365 0202 	bfi	r2, r5, #0, #3
 8000a58:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8000a5a:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000a5e:	f360 02c7 	bfi	r2, r0, #3, #5
 8000a62:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8000a64:	699b      	ldr	r3, [r3, #24]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000a66:	e9c1 3402 	strd	r3, r4, [r1, #8]
    trace_next();
  }
}
 8000a6a:	bc30      	pop	{r4, r5}
    trace_next();
 8000a6c:	f7ff bfc8 	b.w	8000a00 <trace_next>
 8000a70:	200011b0 	.word	0x200011b0
	...

08000a80 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <_trace_isr_leave+0x28>)
 8000a82:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_leave(const char *isr) {
 8000a84:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000a86:	f013 0402 	ands.w	r4, r3, #2
 8000a8a:	d000      	beq.n	8000a8e <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 8000a8c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000a8e:	2320      	movs	r3, #32
 8000a90:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8000a94:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000a96:	2203      	movs	r2, #3
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000a98:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8000a9a:	701a      	strb	r2, [r3, #0]
    trace_next();
 8000a9c:	f7ff ffb0 	bl	8000a00 <trace_next>
 8000aa0:	f384 8811 	msr	BASEPRI, r4
}
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200011b0 	.word	0x200011b0
 8000aac:	00000000 	.word	0x00000000

08000ab0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000ab0:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <_trace_isr_enter+0x28>)
 8000ab2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_enter(const char *isr) {
 8000ab4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000ab6:	f013 0402 	ands.w	r4, r3, #2
 8000aba:	d000      	beq.n	8000abe <_trace_isr_enter+0xe>
}
 8000abc:	bd10      	pop	{r4, pc}
 8000abe:	2320      	movs	r3, #32
 8000ac0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8000ac4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000ac6:	2202      	movs	r2, #2
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000ac8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8000aca:	701a      	strb	r2, [r3, #0]
    trace_next();
 8000acc:	f7ff ff98 	bl	8000a00 <trace_next>
 8000ad0:	f384 8811 	msr	BASEPRI, r4
}
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200011b0 	.word	0x200011b0
 8000adc:	00000000 	.word	0x00000000

08000ae0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8000ae0:	b508      	push	{r3, lr}
 8000ae2:	4605      	mov	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8000ae6:	4c06      	ldr	r4, [pc, #24]	; (8000b00 <chSysHalt+0x20>)
 8000ae8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8000aea:	075b      	lsls	r3, r3, #29
 8000aec:	d501      	bpl.n	8000af2 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000aee:	62e5      	str	r5, [r4, #44]	; 0x2c
 8000af0:	e7fe      	b.n	8000af0 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000af4:	2204      	movs	r2, #4
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8000af6:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000af8:	701a      	strb	r2, [r3, #0]
    trace_next();
 8000afa:	f7ff ff81 	bl	8000a00 <trace_next>
 8000afe:	e7f6      	b.n	8000aee <chSysHalt+0xe>
 8000b00:	200011b0 	.word	0x200011b0
	...

08000b10 <oslib_test_002_003_setup>:
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <oslib_test_002_003_setup+0x18>)
 8000b12:	2200      	movs	r2, #0
  mp->object_size = size;
 8000b14:	2104      	movs	r1, #4
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8000b16:	e9c3 3300 	strd	r3, r3, [r3]
  mp->next = NULL;
 8000b1a:	60da      	str	r2, [r3, #12]
  mp->align = align;
  mp->provider = provider;
 8000b1c:	619a      	str	r2, [r3, #24]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8000b1e:	609a      	str	r2, [r3, #8]
  mp->align = align;
 8000b20:	e9c3 1104 	strd	r1, r1, [r3, #16]
 * .
 */

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000c14 	.word	0x20000c14
 8000b2c:	00000000 	.word	0x00000000

08000b30 <oslib_test_002_002_setup>:
 8000b30:	f7ff bfee 	b.w	8000b10 <oslib_test_002_003_setup>
	...

08000b40 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8000b40:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <chDbgCheckClassS+0x18>)
 8000b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b46:	b91a      	cbnz	r2, 8000b50 <chDbgCheckClassS+0x10>
 8000b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd00      	ble.n	8000b50 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 8000b4e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <chDbgCheckClassS+0x1c>)
 8000b52:	f7ff ffc5 	bl	8000ae0 <chSysHalt>
 8000b56:	bf00      	nop
 8000b58:	200011b0 	.word	0x200011b0
 8000b5c:	0800b8a0 	.word	0x0800b8a0

08000b60 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8000b60:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <chDbgCheckClassI+0x18>)
 8000b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b66:	2a00      	cmp	r2, #0
 8000b68:	db03      	blt.n	8000b72 <chDbgCheckClassI+0x12>
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dd00      	ble.n	8000b72 <chDbgCheckClassI+0x12>
}
 8000b70:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8000b72:	4802      	ldr	r0, [pc, #8]	; (8000b7c <chDbgCheckClassI+0x1c>)
 8000b74:	f7ff ffb4 	bl	8000ae0 <chSysHalt>
 8000b78:	200011b0 	.word	0x200011b0
 8000b7c:	0800b898 	.word	0x0800b898

08000b80 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 8000b80:	b538      	push	{r3, r4, r5, lr}
 8000b82:	4604      	mov	r4, r0
 8000b84:	460d      	mov	r5, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8000b86:	f7ff ffeb 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8000b8a:	b144      	cbz	r4, 8000b9e <chPoolFreeI+0x1e>
 8000b8c:	b13d      	cbz	r5, 8000b9e <chPoolFreeI+0x1e>

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8000b8e:	68a3      	ldr	r3, [r4, #8]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	421d      	tst	r5, r3
 8000b94:	d103      	bne.n	8000b9e <chPoolFreeI+0x1e>
              "unaligned object");

  php->next = mp->next;
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	602b      	str	r3, [r5, #0]
  mp->next = php;
 8000b9a:	6025      	str	r5, [r4, #0]
}
 8000b9c:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck((mp != NULL) && (objp != NULL));
 8000b9e:	4801      	ldr	r0, [pc, #4]	; (8000ba4 <chPoolFreeI+0x24>)
 8000ba0:	f7ff ff9e 	bl	8000ae0 <chSysHalt>
 8000ba4:	0800b4d0 	.word	0x0800b4d0
	...

08000bb0 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	460e      	mov	r6, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 8000bb8:	f7ff ffd2 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000bbc:	b1b6      	cbz	r6, 8000bec <chCoreAllocAlignedWithOffsetI+0x3c>
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	ea1c 0c06 	ands.w	ip, ip, r6
 8000bc6:	d111      	bne.n	8000bec <chCoreAllocAlignedWithOffsetI+0x3c>

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000bc8:	4f0b      	ldr	r7, [pc, #44]	; (8000bf8 <chCoreAllocAlignedWithOffsetI+0x48>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000bca:	e9d7 2300 	ldrd	r2, r3, [r7]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000bce:	1950      	adds	r0, r2, r5
  size = MEM_ALIGN_NEXT(size, align);
 8000bd0:	3c01      	subs	r4, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000bd2:	4430      	add	r0, r6
  size = MEM_ALIGN_NEXT(size, align);
 8000bd4:	4271      	negs	r1, r6
 8000bd6:	4434      	add	r4, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000bd8:	3801      	subs	r0, #1
 8000bda:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8000bdc:	4021      	ands	r1, r4
  next = p + size;
 8000bde:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d306      	bcc.n	8000bf2 <chCoreAllocAlignedWithOffsetI+0x42>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	d804      	bhi.n	8000bf2 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8000be8:	6039      	str	r1, [r7, #0]

  return p;
}
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <chCoreAllocAlignedWithOffsetI+0x4c>)
 8000bee:	f7ff ff77 	bl	8000ae0 <chSysHalt>
    return NULL;
 8000bf2:	4660      	mov	r0, ip
}
 8000bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20001b58 	.word	0x20001b58
 8000bfc:	0800b45c 	.word	0x0800b45c

08000c00 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f7ff bfd5 	b.w	8000bb0 <chCoreAllocAlignedWithOffsetI>
 8000c06:	bf00      	nop
	...

08000c10 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	4604      	mov	r4, r0
  thread_t *tp;

  chDbgCheckClassI();
 8000c14:	f7ff ffa4 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(tdp != NULL);
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 8000c18:	6865      	ldr	r5, [r4, #4]
 8000c1a:	076b      	lsls	r3, r5, #29
 8000c1c:	d103      	bne.n	8000c26 <chThdCreateSuspendedI+0x16>
 8000c1e:	68a3      	ldr	r3, [r4, #8]
 8000c20:	f013 0007 	ands.w	r0, r3, #7
 8000c24:	d002      	beq.n	8000c2c <chThdCreateSuspendedI+0x1c>
 8000c26:	4821      	ldr	r0, [pc, #132]	; (8000cac <chThdCreateSuspendedI+0x9c>)
 8000c28:	f7ff ff5a 	bl	8000ae0 <chSysHalt>
 8000c2c:	429d      	cmp	r5, r3
 8000c2e:	d2fa      	bcs.n	8000c26 <chThdCreateSuspendedI+0x16>
 8000c30:	1b5a      	subs	r2, r3, r5
 8000c32:	2ac7      	cmp	r2, #199	; 0xc7
 8000c34:	d9f7      	bls.n	8000c26 <chThdCreateSuspendedI+0x16>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 8000c36:	68e1      	ldr	r1, [r4, #12]
 8000c38:	29ff      	cmp	r1, #255	; 0xff
 8000c3a:	d8f4      	bhi.n	8000c26 <chThdCreateSuspendedI+0x16>
 8000c3c:	6926      	ldr	r6, [r4, #16]
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d0f1      	beq.n	8000c26 <chThdCreateSuspendedI+0x16>
  REG_INSERT(tp);
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <chThdCreateSuspendedI+0xa0>)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c44:	6967      	ldr	r7, [r4, #20]
 8000c46:	f843 6c6c 	str.w	r6, [r3, #-108]
  tp->state     = CH_STATE_WTSTART;
 8000c4a:	f04f 0e02 	mov.w	lr, #2
  tp->refs      = (trefs_t)1;
 8000c4e:	f04f 0c01 	mov.w	ip, #1

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 8000c52:	6826      	ldr	r6, [r4, #0]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000c54:	f803 0c27 	strb.w	r0, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 8000c58:	f803 ec28 	strb.w	lr, [r3, #-40]
  tp->refs      = (trefs_t)1;
 8000c5c:	f803 cc26 	strb.w	ip, [r3, #-38]
  REG_INSERT(tp);
 8000c60:	f843 2c38 	str.w	r2, [r3, #-56]
  tp->wabase = tdp->wbase;
 8000c64:	f843 5c2c 	str.w	r5, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c68:	f1a3 046c 	sub.w	r4, r3, #108	; 0x6c
  REG_INSERT(tp);
 8000c6c:	6955      	ldr	r5, [r2, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c6e:	f843 7c68 	str.w	r7, [r3, #-104]
  tp->name      = name;
 8000c72:	f843 6c30 	str.w	r6, [r3, #-48]
  tp->prio      = prio;
 8000c76:	f843 1c40 	str.w	r1, [r3, #-64]
  tp->realprio  = prio;
 8000c7a:	f843 1c0c 	str.w	r1, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c7e:	f843 4c3c 	str.w	r4, [r3, #-60]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000c82:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
  queue_init(&tp->msgqueue);
 8000c86:	f1a3 041c 	sub.w	r4, r3, #28
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c8a:	4f0a      	ldr	r7, [pc, #40]	; (8000cb4 <chThdCreateSuspendedI+0xa4>)
  REG_INSERT(tp);
 8000c8c:	f843 5c34 	str.w	r5, [r3, #-52]
  list_init(&tp->waiting);
 8000c90:	f1a3 0620 	sub.w	r6, r3, #32
  tp->epending  = (eventmask_t)0;
 8000c94:	e943 0005 	strd	r0, r0, [r3, #-20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000c98:	f843 7c4c 	str.w	r7, [r3, #-76]
}
 8000c9c:	4608      	mov	r0, r1
  REG_INSERT(tp);
 8000c9e:	6129      	str	r1, [r5, #16]
 8000ca0:	6151      	str	r1, [r2, #20]
  tqp->next = (thread_t *)tqp;
 8000ca2:	e943 6408 	strd	r6, r4, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8000ca6:	f843 4c18 	str.w	r4, [r3, #-24]
}
 8000caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cac:	0800b47c 	.word	0x0800b47c
 8000cb0:	200011b0 	.word	0x200011b0
 8000cb4:	08000291 	.word	0x08000291
	...

08000cc0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8000cc4:	f7ff ff4c 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000cc8:	b1a4      	cbz	r4, 8000cf4 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8000cca:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000cce:	b18b      	cbz	r3, 8000cf4 <chSchReadyI+0x34>
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d00f      	beq.n	8000cf4 <chSchReadyI+0x34>
  tp->state = CH_STATE_READY;
 8000cd4:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000cd6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <chSchReadyI+0x3c>)
  tp->state = CH_STATE_READY;
 8000cda:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000cde:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	d2fb      	bcs.n	8000cde <chSchReadyI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 8000ce6:	685a      	ldr	r2, [r3, #4]
}
 8000ce8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 8000cea:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8000cee:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000cf0:	605c      	str	r4, [r3, #4]
}
 8000cf2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <chSchReadyI+0x40>)
 8000cf6:	f7ff fef3 	bl	8000ae0 <chSysHalt>
 8000cfa:	bf00      	nop
 8000cfc:	200011b0 	.word	0x200011b0
 8000d00:	0800b408 	.word	0x0800b408
	...

08000d10 <chThdDequeueNextI.constprop.89>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000d10:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000d12:	6803      	ldr	r3, [r0, #0]

  if (queue_notempty(tqp)) {
 8000d14:	4298      	cmp	r0, r3
 8000d16:	d009      	beq.n	8000d2c <chThdDequeueNextI.constprop.89+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d1c:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8000d1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d003      	beq.n	8000d2e <chThdDequeueNextI.constprop.89+0x1e>
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <chThdDequeueNextI.constprop.89+0x2c>)
 8000d28:	f7ff feda 	bl	8000ae0 <chSysHalt>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000d2c:	bd08      	pop	{r3, pc}

  tp->u.rdymsg = msg;
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000d32:	4618      	mov	r0, r3
 8000d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000d38:	f7ff bfc2 	b.w	8000cc0 <chSchReadyI>
 8000d3c:	0800b3a0 	.word	0x0800b3a0

08000d40 <chMBFetchI.constprop.19>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8000d40:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8000d42:	4c11      	ldr	r4, [pc, #68]	; (8000d88 <chMBFetchI.constprop.19+0x48>)
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8000d44:	4605      	mov	r5, r0
  chDbgCheckClassI();
 8000d46:	f7ff ff0b 	bl	8000b60 <chDbgCheckClassI>
  if (mbp->reset) {
 8000d4a:	7d23      	ldrb	r3, [r4, #20]
 8000d4c:	b9b3      	cbnz	r3, 8000d7c <chMBFetchI.constprop.19+0x3c>
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8000d4e:	f7ff ff07 	bl	8000b60 <chDbgCheckClassI>

  return mbp->cnt;
 8000d52:	6922      	ldr	r2, [r4, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8000d54:	b1aa      	cbz	r2, 8000d82 <chMBFetchI.constprop.19+0x42>
    *msgp = *mbp->rdptr++;
 8000d56:	68e3      	ldr	r3, [r4, #12]
    if (mbp->rdptr >= mbp->top) {
 8000d58:	6861      	ldr	r1, [r4, #4]
    *msgp = *mbp->rdptr++;
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	3304      	adds	r3, #4
    if (mbp->rdptr >= mbp->top) {
 8000d5e:	428b      	cmp	r3, r1
    *msgp = *mbp->rdptr++;
 8000d60:	60e3      	str	r3, [r4, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8000d62:	f102 32ff 	add.w	r2, r2, #4294967295
    *msgp = *mbp->rdptr++;
 8000d66:	6028      	str	r0, [r5, #0]
      mbp->rdptr = mbp->buffer;
 8000d68:	bf28      	it	cs
 8000d6a:	6823      	ldrcs	r3, [r4, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <chMBFetchI.constprop.19+0x4c>)
      mbp->rdptr = mbp->buffer;
 8000d6e:	bf28      	it	cs
 8000d70:	60e3      	strcs	r3, [r4, #12]
    mbp->cnt--;
 8000d72:	6122      	str	r2, [r4, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8000d74:	f7ff ffcc 	bl	8000d10 <chThdDequeueNextI.constprop.89>

    return MSG_OK;
 8000d78:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8000d7a:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8000d7c:	f06f 0001 	mvn.w	r0, #1
}
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
  return MSG_TIMEOUT;
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	20000c58 	.word	0x20000c58
 8000d8c:	20000c70 	.word	0x20000c70

08000d90 <chThdDequeueAllI.constprop.91>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000d90:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000d92:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8000d94:	4298      	cmp	r0, r3
 8000d96:	d00a      	beq.n	8000dae <chThdDequeueAllI.constprop.91+0x1e>
  tqp->next             = tp->queue.next;
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d9c:	6050      	str	r0, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8000d9e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000da2:	2a04      	cmp	r2, #4
 8000da4:	4604      	mov	r4, r0
 8000da6:	d003      	beq.n	8000db0 <chThdDequeueAllI.constprop.91+0x20>
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <chThdDequeueAllI.constprop.91+0x48>)
 8000daa:	f7ff fe99 	bl	8000ae0 <chSysHalt>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
  tp->u.rdymsg = msg;
 8000db0:	f06f 0501 	mvn.w	r5, #1
 8000db4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff82 	bl	8000cc0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000dbc:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(tqp)) {
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	d0f5      	beq.n	8000dae <chThdDequeueAllI.constprop.91+0x1e>
  tqp->next             = tp->queue.next;
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000dc6:	6054      	str	r4, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8000dc8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000dcc:	2a04      	cmp	r2, #4
 8000dce:	d0f1      	beq.n	8000db4 <chThdDequeueAllI.constprop.91+0x24>
 8000dd0:	4801      	ldr	r0, [pc, #4]	; (8000dd8 <chThdDequeueAllI.constprop.91+0x48>)
 8000dd2:	f7ff fe85 	bl	8000ae0 <chSysHalt>
 8000dd6:	bf00      	nop
 8000dd8:	0800b3a0 	.word	0x0800b3a0
 8000ddc:	00000000 	.word	0x00000000

08000de0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4604      	mov	r4, r0
 8000de4:	460d      	mov	r5, r1

  chDbgCheckClassI();
 8000de6:	f7ff febb 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000dea:	b1bc      	cbz	r4, 8000e1c <chEvtSignalI+0x3c>

  tp->epending |= events;
 8000dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000dee:	f894 3020 	ldrb.w	r3, [r4, #32]
  tp->epending |= events;
 8000df2:	4329      	orrs	r1, r5
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000df4:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 8000df6:	6361      	str	r1, [r4, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000df8:	d00c      	beq.n	8000e14 <chEvtSignalI+0x34>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000dfa:	2b0b      	cmp	r3, #11
 8000dfc:	d000      	beq.n	8000e00 <chEvtSignalI+0x20>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000e02:	438b      	bics	r3, r1
 8000e04:	d1fb      	bne.n	8000dfe <chEvtSignalI+0x1e>
    tp->u.rdymsg = MSG_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000e0a:	4620      	mov	r0, r4
}
 8000e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    (void) chSchReadyI(tp);
 8000e10:	f7ff bf56 	b.w	8000cc0 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e16:	4219      	tst	r1, r3
 8000e18:	d1f5      	bne.n	8000e06 <chEvtSignalI+0x26>
 8000e1a:	e7f0      	b.n	8000dfe <chEvtSignalI+0x1e>
  chDbgCheck(tp != NULL);
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <chEvtSignalI+0x44>)
 8000e1e:	f7ff fe5f 	bl	8000ae0 <chSysHalt>
 8000e22:	bf00      	nop
 8000e24:	0800b5c8 	.word	0x0800b5c8
	...

08000e30 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	4606      	mov	r6, r0
 8000e34:	460d      	mov	r5, r1
  chDbgCheckClassI();
 8000e36:	f7ff fe93 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8000e3a:	b18e      	cbz	r6, 8000e60 <chEvtBroadcastFlagsI+0x30>
  elp = esp->next;
 8000e3c:	6834      	ldr	r4, [r6, #0]
  while (elp != (event_listener_t *)esp) {
 8000e3e:	42a6      	cmp	r6, r4
 8000e40:	d00d      	beq.n	8000e5e <chEvtBroadcastFlagsI+0x2e>
    elp->flags |= flags;
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	432b      	orrs	r3, r5
 8000e46:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000e48:	b115      	cbz	r5, 8000e50 <chEvtBroadcastFlagsI+0x20>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8000e4a:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000e4c:	4213      	tst	r3, r2
 8000e4e:	d003      	beq.n	8000e58 <chEvtBroadcastFlagsI+0x28>
      chEvtSignalI(elp->listener, elp->events);
 8000e50:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8000e54:	f7ff ffc4 	bl	8000de0 <chEvtSignalI>
    elp = elp->next;
 8000e58:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000e5a:	42a6      	cmp	r6, r4
 8000e5c:	d1f1      	bne.n	8000e42 <chEvtBroadcastFlagsI+0x12>
}
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(esp != NULL);
 8000e60:	4801      	ldr	r0, [pc, #4]	; (8000e68 <chEvtBroadcastFlagsI+0x38>)
 8000e62:	f7ff fe3d 	bl	8000ae0 <chSysHalt>
 8000e66:	bf00      	nop
 8000e68:	0800b4e8 	.word	0x0800b4e8
 8000e6c:	00000000 	.word	0x00000000

08000e70 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <chMtxUnlockS+0x7c>)
void chMtxUnlockS(mutex_t *mp) {
 8000e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e76:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8000e78:	f8d3 8018 	ldr.w	r8, [r3, #24]
  mutex_t *lmp;

  chDbgCheckClassS();
 8000e7c:	f7ff fe60 	bl	8000b40 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8000e80:	b12d      	cbz	r5, 8000e8e <chMtxUnlockS+0x1e>

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8000e82:	f8d8 6038 	ldr.w	r6, [r8, #56]	; 0x38
 8000e86:	b116      	cbz	r6, 8000e8e <chMtxUnlockS+0x1e>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8000e88:	68b3      	ldr	r3, [r6, #8]
 8000e8a:	4543      	cmp	r3, r8
 8000e8c:	d002      	beq.n	8000e94 <chMtxUnlockS+0x24>
  chDbgCheck(mp != NULL);
 8000e8e:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <chMtxUnlockS+0x80>)
 8000e90:	f7ff fe26 	bl	8000ae0 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8000e94:	42ae      	cmp	r6, r5
 8000e96:	d1fa      	bne.n	8000e8e <chMtxUnlockS+0x1e>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000e98:	68ec      	ldr	r4, [r5, #12]
 8000e9a:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8000e9e:	f7ff fe4f 	bl	8000b40 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000ea2:	682f      	ldr	r7, [r5, #0]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000ea4:	42bd      	cmp	r5, r7
 8000ea6:	d01c      	beq.n	8000ee2 <chMtxUnlockS+0x72>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000ea8:	f8d8 603c 	ldr.w	r6, [r8, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000eac:	b15c      	cbz	r4, 8000ec6 <chMtxUnlockS+0x56>
 8000eae:	f7ff fe47 	bl	8000b40 <chDbgCheckClassS>
 8000eb2:	6823      	ldr	r3, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d003      	beq.n	8000ec0 <chMtxUnlockS+0x50>
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	429e      	cmp	r6, r3
 8000ebc:	bf38      	it	cc
 8000ebe:	461e      	movcc	r6, r3
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000ec0:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d1f3      	bne.n	8000eae <chMtxUnlockS+0x3e>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8000ec8:	683b      	ldr	r3, [r7, #0]
      ctp->prio = newprio;
 8000eca:	f8c8 6008 	str.w	r6, [r8, #8]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8000ece:	4638      	mov	r0, r7
 8000ed0:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ed2:	605d      	str	r5, [r3, #4]
      mp->next = tp->mtxlist;
 8000ed4:	e9c5 7202 	strd	r7, r2, [r5, #8]
      tp->mtxlist = mp;
 8000ed8:	63bd      	str	r5, [r7, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (void) chSchReadyI(tp);
 8000ede:	f7ff beef 	b.w	8000cc0 <chSchReadyI>
      mp->owner = NULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60b3      	str	r3, [r6, #8]
}
 8000ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eea:	bf00      	nop
 8000eec:	200011b0 	.word	0x200011b0
 8000ef0:	0800b56c 	.word	0x0800b56c
	...

08000f00 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8000f00:	b510      	push	{r4, lr}
 8000f02:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8000f04:	f7ff fe2c 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(sp != NULL);
 8000f08:	b12c      	cbz	r4, 8000f16 <chSemSignalI+0x16>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8000f0a:	68a3      	ldr	r3, [r4, #8]
 8000f0c:	6822      	ldr	r2, [r4, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db04      	blt.n	8000f1c <chSemSignalI+0x1c>
 8000f12:	42a2      	cmp	r2, r4
 8000f14:	d004      	beq.n	8000f20 <chSemSignalI+0x20>
  chDbgCheck(sp != NULL);
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <chSemSignalI+0x40>)
 8000f18:	f7ff fde2 	bl	8000ae0 <chSysHalt>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	d0fa      	beq.n	8000f16 <chSemSignalI+0x16>
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8000f20:	3301      	adds	r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	60a3      	str	r3, [r4, #8]
 8000f26:	dd00      	ble.n	8000f2a <chSemSignalI+0x2a>
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8000f28:	bd10      	pop	{r4, pc}
  tqp->next             = tp->queue.next;
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 8000f2e:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000f30:	605c      	str	r4, [r3, #4]
    (void) chSchReadyI(tp);
 8000f32:	4610      	mov	r0, r2
    tp->u.rdymsg = MSG_OK;
 8000f34:	6251      	str	r1, [r2, #36]	; 0x24
}
 8000f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void) chSchReadyI(tp);
 8000f3a:	f7ff bec1 	b.w	8000cc0 <chSchReadyI>
 8000f3e:	bf00      	nop
 8000f40:	0800b54c 	.word	0x0800b54c
	...

08000f50 <chSysIntegrityCheckI>:
 * @retval false        The test succeeded.
 * @retval true         Test failed.
 *
 * @iclass
 */
bool chSysIntegrityCheckI(unsigned testmask) {
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4604      	mov	r4, r0
  cnt_t n;

  chDbgCheckClassI();
 8000f54:	f7ff fe04 	bl	8000b60 <chDbgCheckClassI>

  /* Ready List integrity check.*/
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8000f58:	07e2      	lsls	r2, r4, #31
 8000f5a:	d512      	bpl.n	8000f82 <chSysIntegrityCheckI+0x32>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.queue.next;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <chSysIntegrityCheckI+0xac>)
 8000f5e:	e9d3 1000 	ldrd	r1, r0, [r3]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f62:	4299      	cmp	r1, r3
 8000f64:	d03f      	beq.n	8000fe6 <chSysIntegrityCheckI+0x96>
    n = (cnt_t)0;
 8000f66:	2200      	movs	r2, #0
      n++;
      tp = tp->queue.next;
 8000f68:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f6a:	4299      	cmp	r1, r3
      n++;
 8000f6c:	f102 0201 	add.w	r2, r2, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f70:	d1fa      	bne.n	8000f68 <chSysIntegrityCheckI+0x18>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.queue.prev;
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f72:	4288      	cmp	r0, r1
 8000f74:	d035      	beq.n	8000fe2 <chSysIntegrityCheckI+0x92>
      n--;
      tp = tp->queue.prev;
 8000f76:	6840      	ldr	r0, [r0, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f78:	4298      	cmp	r0, r3
      n--;
 8000f7a:	f102 32ff 	add.w	r2, r2, #4294967295
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000f7e:	d1fa      	bne.n	8000f76 <chSysIntegrityCheckI+0x26>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000f80:	bb7a      	cbnz	r2, 8000fe2 <chSysIntegrityCheckI+0x92>
      return true;
    }
  }

  /* Timers list integrity check.*/
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 8000f82:	07a3      	lsls	r3, r4, #30
 8000f84:	d513      	bpl.n	8000fae <chSysIntegrityCheckI+0x5e>
    virtual_timer_t * vtp;

    /* Scanning the timers list forward.*/
    n = (cnt_t)0;
    vtp = ch.vtlist.next;
 8000f86:	481d      	ldr	r0, [pc, #116]	; (8000ffc <chSysIntegrityCheckI+0xac>)
 8000f88:	e9d0 2107 	ldrd	r2, r1, [r0, #28]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000f8c:	301c      	adds	r0, #28
 8000f8e:	4282      	cmp	r2, r0
 8000f90:	d02d      	beq.n	8000fee <chSysIntegrityCheckI+0x9e>
    n = (cnt_t)0;
 8000f92:	2300      	movs	r3, #0
      n++;
      vtp = vtp->next;
 8000f94:	6812      	ldr	r2, [r2, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000f96:	4282      	cmp	r2, r0
      n++;
 8000f98:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000f9c:	d1fa      	bne.n	8000f94 <chSysIntegrityCheckI+0x44>
    }

    /* Scanning the timers list backward.*/
    vtp = ch.vtlist.prev;
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d01f      	beq.n	8000fe2 <chSysIntegrityCheckI+0x92>
      n--;
      vtp = vtp->prev;
 8000fa2:	6849      	ldr	r1, [r1, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000fa4:	4281      	cmp	r1, r0
      n--;
 8000fa6:	f103 33ff 	add.w	r3, r3, #4294967295
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000faa:	d1fa      	bne.n	8000fa2 <chSysIntegrityCheckI+0x52>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000fac:	b9cb      	cbnz	r3, 8000fe2 <chSysIntegrityCheckI+0x92>
      return true;
    }
  }

#if CH_CFG_USE_REGISTRY == TRUE
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 8000fae:	f014 0004 	ands.w	r0, r4, #4
 8000fb2:	d015      	beq.n	8000fe0 <chSysIntegrityCheckI+0x90>
    thread_t *tp;

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
    tp = ch.rlist.newer;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <chSysIntegrityCheckI+0xac>)
 8000fb6:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000fba:	429a      	cmp	r2, r3
    n = (cnt_t)0;
 8000fbc:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 8000fc0:	d019      	beq.n	8000ff6 <chSysIntegrityCheckI+0xa6>
      n++;
      tp = tp->newer;
 8000fc2:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 8000fc4:	429a      	cmp	r2, r3
      n++;
 8000fc6:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 8000fca:	d1fa      	bne.n	8000fc2 <chSysIntegrityCheckI+0x72>
    }

    /* Scanning the ready list backward.*/
    tp = ch.rlist.older;
    while (tp != (thread_t *)&ch.rlist) {
 8000fcc:	4291      	cmp	r1, r2
 8000fce:	d008      	beq.n	8000fe2 <chSysIntegrityCheckI+0x92>
      n--;
      tp = tp->older;
 8000fd0:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 8000fd2:	4299      	cmp	r1, r3
      n--;
 8000fd4:	f100 30ff 	add.w	r0, r0, #4294967295
    while (tp != (thread_t *)&ch.rlist) {
 8000fd8:	d1fa      	bne.n	8000fd0 <chSysIntegrityCheckI+0x80>
    }

    /* The number of elements must match.*/
    if (n != (cnt_t)0) {
 8000fda:	3000      	adds	r0, #0
 8000fdc:	bf18      	it	ne
 8000fde:	2001      	movne	r0, #1
    PORT_INTEGRITY_CHECK();
  }
#endif

  return false;
}
 8000fe0:	bd10      	pop	{r4, pc}
      return true;
 8000fe2:	2001      	movs	r0, #1
}
 8000fe4:	bd10      	pop	{r4, pc}
    while (tp != (thread_t *)&ch.rlist.queue) {
 8000fe6:	4298      	cmp	r0, r3
 8000fe8:	d0cb      	beq.n	8000f82 <chSysIntegrityCheckI+0x32>
    n = (cnt_t)0;
 8000fea:	2200      	movs	r2, #0
 8000fec:	e7c3      	b.n	8000f76 <chSysIntegrityCheckI+0x26>
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8000fee:	4281      	cmp	r1, r0
 8000ff0:	d0dd      	beq.n	8000fae <chSysIntegrityCheckI+0x5e>
    n = (cnt_t)0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e7d5      	b.n	8000fa2 <chSysIntegrityCheckI+0x52>
    while (tp != (thread_t *)&ch.rlist) {
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	d1ea      	bne.n	8000fd0 <chSysIntegrityCheckI+0x80>
}
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	200011b0 	.word	0x200011b0

08001000 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8001000:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001002:	2320      	movs	r3, #32
 8001004:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <_dbg_check_leave_isr+0x24>)
 800100a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800100c:	2b00      	cmp	r3, #0
 800100e:	dd01      	ble.n	8001014 <_dbg_check_leave_isr+0x14>
 8001010:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001012:	b111      	cbz	r1, 800101a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <_dbg_check_leave_isr+0x28>)
 8001016:	f7ff fd63 	bl	8000ae0 <chSysHalt>
  ch.dbg.isr_cnt--;
 800101a:	3b01      	subs	r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	f381 8811 	msr	BASEPRI, r1
}
 8001022:	bd08      	pop	{r3, pc}
 8001024:	200011b0 	.word	0x200011b0
 8001028:	0800b850 	.word	0x0800b850
 800102c:	00000000 	.word	0x00000000

08001030 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8001030:	b508      	push	{r3, lr}
 8001032:	2320      	movs	r3, #32
 8001034:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <_dbg_check_enter_isr+0x24>)
 800103a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800103c:	2b00      	cmp	r3, #0
 800103e:	db01      	blt.n	8001044 <_dbg_check_enter_isr+0x14>
 8001040:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001042:	b111      	cbz	r1, 800104a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <_dbg_check_enter_isr+0x28>)
 8001046:	f7ff fd4b 	bl	8000ae0 <chSysHalt>
  ch.dbg.isr_cnt++;
 800104a:	3301      	adds	r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	f381 8811 	msr	BASEPRI, r1
}
 8001052:	bd08      	pop	{r3, pc}
 8001054:	200011b0 	.word	0x200011b0
 8001058:	0800b848 	.word	0x0800b848
 800105c:	00000000 	.word	0x00000000

08001060 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 8001060:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <_dbg_check_unlock_from_isr+0x1c>)
 8001064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001066:	2a00      	cmp	r2, #0
 8001068:	dd05      	ble.n	8001076 <_dbg_check_unlock_from_isr+0x16>
 800106a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106c:	2a00      	cmp	r2, #0
 800106e:	dd02      	ble.n	8001076 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001074:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 8001076:	4802      	ldr	r0, [pc, #8]	; (8001080 <_dbg_check_unlock_from_isr+0x20>)
 8001078:	f7ff fd32 	bl	8000ae0 <chSysHalt>
 800107c:	200011b0 	.word	0x200011b0
 8001080:	0800b878 	.word	0x0800b878
	...

08001090 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 8001090:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <_dbg_check_lock_from_isr+0x1c>)
 8001094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001096:	2a00      	cmp	r2, #0
 8001098:	dd01      	ble.n	800109e <_dbg_check_lock_from_isr+0xe>
 800109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109c:	b112      	cbz	r2, 80010a4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <_dbg_check_lock_from_isr+0x20>)
 80010a0:	f7ff fd1e 	bl	8000ae0 <chSysHalt>
  _dbg_enter_lock();
 80010a4:	2201      	movs	r2, #1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a8:	bd08      	pop	{r3, pc}
 80010aa:	bf00      	nop
 80010ac:	200011b0 	.word	0x200011b0
 80010b0:	0800b860 	.word	0x0800b860
	...

080010c0 <wakeup>:
static void wakeup(void *p) {
 80010c0:	b538      	push	{r3, r4, r5, lr}
 80010c2:	4604      	mov	r4, r0
 80010c4:	2320      	movs	r3, #32
 80010c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80010ca:	f7ff ffe1 	bl	8001090 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 80010ce:	f894 3020 	ldrb.w	r3, [r4, #32]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d810      	bhi.n	80010f8 <wakeup+0x38>
 80010d6:	e8df f003 	tbb	[pc, r3]
 80010da:	0f15      	.short	0x0f15
 80010dc:	040a1b0f 	.word	0x040a1b0f
 80010e0:	0a0f      	.short	0x0a0f
    chSemFastSignalI(tp->u.wtsemp);
 80010e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 80010e4:	f7ff fd3c 	bl	8000b60 <chDbgCheckClassI>

  sp->cnt++;
 80010e8:	68ab      	ldr	r3, [r5, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80010ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80010f2:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff fdde 	bl	8000cc0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001104:	f7ff ffac 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001108:	2300      	movs	r3, #0
 800110a:	f383 8811 	msr	BASEPRI, r3
}
 800110e:	bd38      	pop	{r3, r4, r5, pc}
    *tp->u.wttrp = NULL;
 8001110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff fdcf 	bl	8000cc0 <chSchReadyI>
 8001122:	e7ef      	b.n	8001104 <wakeup+0x44>
	...

08001130 <_dbg_check_enable>:
void _dbg_check_enable(void) {
 8001130:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <_dbg_check_enable+0x14>)
 8001134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001136:	b90a      	cbnz	r2, 800113c <_dbg_check_enable+0xc>
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	b113      	cbz	r3, 8001142 <_dbg_check_enable+0x12>
    chSysHalt("SV#3");
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <_dbg_check_enable+0x18>)
 800113e:	f7ff fccf 	bl	8000ae0 <chSysHalt>
}
 8001142:	bd08      	pop	{r3, pc}
 8001144:	200011b0 	.word	0x200011b0
 8001148:	0800b840 	.word	0x0800b840
 800114c:	00000000 	.word	0x00000000

08001150 <_dbg_check_suspend>:
void _dbg_check_suspend(void) {
 8001150:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <_dbg_check_suspend+0x14>)
 8001154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001156:	b90a      	cbnz	r2, 800115c <_dbg_check_suspend+0xc>
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115a:	b113      	cbz	r3, 8001162 <_dbg_check_suspend+0x12>
    chSysHalt("SV#2");
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <_dbg_check_suspend+0x18>)
 800115e:	f7ff fcbf 	bl	8000ae0 <chSysHalt>
}
 8001162:	bd08      	pop	{r3, pc}
 8001164:	200011b0 	.word	0x200011b0
 8001168:	0800b868 	.word	0x0800b868
 800116c:	00000000 	.word	0x00000000

08001170 <rt_test_002_003_execute>:
static void rt_test_002_003_execute(void) {
 8001170:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <rt_test_002_003_execute+0x3c>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	2420      	movs	r4, #32
 800117a:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800117e:	b662      	cpsie	i
  _dbg_check_suspend();
 8001180:	f7ff ffe6 	bl	8001150 <_dbg_check_suspend>
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <rt_test_002_003_execute+0x40>)
 8001188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118a:	b90a      	cbnz	r2, 8001190 <rt_test_002_003_execute+0x20>
 800118c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800118e:	b115      	cbz	r5, 8001196 <rt_test_002_003_execute+0x26>
    chSysHalt("SV#1");
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <rt_test_002_003_execute+0x44>)
 8001192:	f7ff fca5 	bl	8000ae0 <chSysHalt>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001196:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800119a:	b662      	cpsie	i
 800119c:	f7ff ffd8 	bl	8001150 <_dbg_check_suspend>
  _dbg_check_enable();
 80011a0:	f7ff ffc6 	bl	8001130 <_dbg_check_enable>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80011a4:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 80011a8:	b662      	cpsie	i
}
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	20002354 	.word	0x20002354
 80011b0:	200011b0 	.word	0x200011b0
 80011b4:	0800cb54 	.word	0x0800cb54
	...

080011c0 <_idle_thread>:
static void _idle_thread(void *p) {
 80011c0:	e7fe      	b.n	80011c0 <_idle_thread>
 80011c2:	bf00      	nop
	...

080011d0 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80011d0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80011d4:	b570      	push	{r4, r5, r6, lr}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80011d6:	68dd      	ldr	r5, [r3, #12]

  /* Setting the endpoint type. Note that isochronous endpoints cannot be
     bidirectional because it uses double buffering and both transmit and
     receive descriptor fields are used for either direction.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d070      	beq.n	80012c4 <usb_lld_init_endpoint+0xf4>
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d06b      	beq.n	80012be <usb_lld_init_endpoint+0xee>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d05a      	beq.n	80012a0 <usb_lld_init_endpoint+0xd0>
    break;
  case USB_EP_MODE_TYPE_INTR:
    epr = EPR_EP_TYPE_INTERRUPT;
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
 80011ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  }

  dp = USB_GET_DESCRIPTOR(ep);
 80011ee:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <usb_lld_init_endpoint+0xf8>)

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
 80011f0:	696c      	ldr	r4, [r5, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 80011f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80011fc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  if (epcp->in_state != NULL) {
 8001200:	b184      	cbz	r4, 8001224 <usb_lld_init_endpoint+0x54>
    dp->TXCOUNT0 = 0;
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001202:	8a2c      	ldrh	r4, [r5, #16]
    dp->TXCOUNT0 = 0;
 8001204:	2600      	movs	r6, #0
 8001206:	6056      	str	r6, [r2, #4]
  next = usbp->pmnext;
 8001208:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 800120c:	3401      	adds	r4, #1
 800120e:	f024 0401 	bic.w	r4, r4, #1
 8001212:	4434      	add	r4, r6
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8001214:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8001218:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 800121c:	d843      	bhi.n	80012a6 <usb_lld_init_endpoint+0xd6>
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800121e:	6016      	str	r6, [r2, #0]
    }
    else {
      epr |= EPR_STAT_TX_NAK;
    }
#else
    epr |= EPR_STAT_TX_NAK;
 8001220:	f043 0320 	orr.w	r3, r3, #32
#endif
  }

  /* OUT endpoint handling.*/
  if (epcp->out_state != NULL) {
 8001224:	69ac      	ldr	r4, [r5, #24]
 8001226:	b1dc      	cbz	r4, 8001260 <usb_lld_init_endpoint+0x90>
    uint16_t nblocks;

    /* Endpoint size and address initialization.*/
    if (epcp->out_maxsize > 62)
 8001228:	8a6d      	ldrh	r5, [r5, #18]
 800122a:	2d3e      	cmp	r5, #62	; 0x3e
 800122c:	f105 34ff 	add.w	r4, r5, #4294967295
 8001230:	d93c      	bls.n	80012ac <usb_lld_init_endpoint+0xdc>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8001232:	f044 041f 	orr.w	r4, r4, #31
 8001236:	3401      	adds	r4, #1
 8001238:	4e24      	ldr	r6, [pc, #144]	; (80012cc <usb_lld_init_endpoint+0xfc>)
 800123a:	1164      	asrs	r4, r4, #5
 800123c:	ea46 2484 	orr.w	r4, r6, r4, lsl #10
 8001240:	b2a4      	uxth	r4, r4
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 8001242:	60d4      	str	r4, [r2, #12]
  next = usbp->pmnext;
 8001244:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8001248:	3501      	adds	r5, #1
 800124a:	f025 0501 	bic.w	r5, r5, #1
 800124e:	4425      	add	r5, r4
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8001250:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8001254:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8001258:	d825      	bhi.n	80012a6 <usb_lld_init_endpoint+0xd6>
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 800125a:	6094      	str	r4, [r2, #8]
    }
    else {
      epr |= EPR_STAT_RX_NAK;
    }
#else
    epr |= EPR_STAT_RX_NAK;
 800125c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001260:	008a      	lsls	r2, r1, #2
 8001262:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001266:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
#endif
  }

  /* Resetting the data toggling bits for this endpoint.*/
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 800126a:	6810      	ldr	r0, [r2, #0]
 800126c:	0444      	lsls	r4, r0, #17
    epr |= EPR_DTOG_RX;
  }

  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 800126e:	6810      	ldr	r0, [r2, #0]
    epr |= EPR_DTOG_RX;
 8001270:	bf48      	it	mi
 8001272:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8001276:	0640      	lsls	r0, r0, #25
    epr |= EPR_DTOG_TX;
 8001278:	bf48      	it	mi
 800127a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 800127e:	4319      	orrs	r1, r3
 8001280:	f421 4178 	bic.w	r1, r1, #63488	; 0xf800
 8001284:	f248 0080 	movw	r0, #32896	; 0x8080
 8001288:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800128c:	4301      	orrs	r1, r0
 800128e:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8001290:	6811      	ldr	r1, [r2, #0]
 8001292:	f647 0470 	movw	r4, #30832	; 0x7870
 8001296:	4023      	ands	r3, r4
 8001298:	404b      	eors	r3, r1
 800129a:	4303      	orrs	r3, r0
 800129c:	6013      	str	r3, [r2, #0]
}
 800129e:	bd70      	pop	{r4, r5, r6, pc}
    osalDbgAssert(false, "isochronous support disabled");
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <usb_lld_init_endpoint+0x100>)
 80012a2:	f7ff fc1d 	bl	8000ae0 <chSysHalt>
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <usb_lld_init_endpoint+0x104>)
 80012a8:	f7ff fc1a 	bl	8000ae0 <chSysHalt>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 80012ac:	f044 0401 	orr.w	r4, r4, #1
 80012b0:	3401      	adds	r4, #1
 80012b2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80012b6:	0264      	lsls	r4, r4, #9
 80012b8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80012bc:	e7c1      	b.n	8001242 <usb_lld_init_endpoint+0x72>
    epr = EPR_EP_TYPE_INTERRUPT;
 80012be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c2:	e794      	b.n	80011ee <usb_lld_init_endpoint+0x1e>
    epr = EPR_EP_TYPE_BULK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e792      	b.n	80011ee <usb_lld_init_endpoint+0x1e>
 80012c8:	40005c00 	.word	0x40005c00
 80012cc:	ffff8000 	.word	0xffff8000
 80012d0:	0800b7a8 	.word	0x0800b7a8
 80012d4:	0800b6e4 	.word	0x0800b6e4
	...

080012e0 <usb_lld_reset>:
  if (usbp->config->sof_cb != NULL)
 80012e0:	6841      	ldr	r1, [r0, #4]
  STM32_USB->BTABLE = BTABLE_ADDR;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <usb_lld_reset+0x38>)
  if (usbp->config->sof_cb != NULL)
 80012e4:	68c9      	ldr	r1, [r1, #12]
void usb_lld_reset(USBDriver *usbp) {
 80012e6:	b470      	push	{r4, r5, r6}
  if (usbp->config->sof_cb != NULL)
 80012e8:	2900      	cmp	r1, #0
  STM32_USB->DADDR  = DADDR_EF;
 80012ea:	f04f 0580 	mov.w	r5, #128	; 0x80
  STM32_USB->BTABLE = BTABLE_ADDR;
 80012ee:	f04f 0100 	mov.w	r1, #0
 80012f2:	6519      	str	r1, [r3, #80]	; 0x50
  usbp->epc[0] = &ep0config;
 80012f4:	4c09      	ldr	r4, [pc, #36]	; (800131c <usb_lld_reset+0x3c>)
  STM32_USB->ISTR   = 0;
 80012f6:	6459      	str	r1, [r3, #68]	; 0x44
    cntr |= CNTR_SOFM;
 80012f8:	bf08      	it	eq
 80012fa:	f44f 461c 	moveq.w	r6, #39936	; 0x9c00
  STM32_USB->DADDR  = DADDR_EF;
 80012fe:	64dd      	str	r5, [r3, #76]	; 0x4c
    cntr |= CNTR_SOFM;
 8001300:	bf18      	it	ne
 8001302:	f44f 461e 	movne.w	r6, #40448	; 0x9e00
  usbp->pmnext = 64;
 8001306:	2540      	movs	r5, #64	; 0x40
  STM32_USB->CNTR = cntr;
 8001308:	641e      	str	r6, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 800130a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 800130e:	60c4      	str	r4, [r0, #12]
}
 8001310:	bc70      	pop	{r4, r5, r6}
  usb_lld_init_endpoint(usbp, 0);
 8001312:	f7ff bf5d 	b.w	80011d0 <usb_lld_init_endpoint>
 8001316:	bf00      	nop
 8001318:	40005c00 	.word	0x40005c00
 800131c:	0800bb80 	.word	0x0800bb80

08001320 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	4607      	mov	r7, r0
 8001324:	460c      	mov	r4, r1
 8001326:	4615      	mov	r5, r2
 8001328:	461e      	mov	r6, r3
  USBInEndpointState *isp;

  osalDbgCheckClassI();
 800132a:	f7ff fc19 	bl	8000b60 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 800132e:	2f00      	cmp	r7, #0
 8001330:	d047      	beq.n	80013c2 <usbStartTransmitI+0xa2>
 8001332:	2c07      	cmp	r4, #7
 8001334:	d845      	bhi.n	80013c2 <usbStartTransmitI+0xa2>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 8001336:	2301      	movs	r3, #1
 8001338:	40a3      	lsls	r3, r4
 800133a:	893a      	ldrh	r2, [r7, #8]
 800133c:	b29b      	uxth	r3, r3
 800133e:	ea12 0003 	ands.w	r0, r2, r3
 8001342:	d13e      	bne.n	80013c2 <usbStartTransmitI+0xa2>
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8001344:	eb07 0184 	add.w	r1, r7, r4, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001348:	4313      	orrs	r3, r2
  isp = usbp->epc[ep]->in_state;
 800134a:	68ca      	ldr	r2, [r1, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800134c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80013cc <usbStartTransmitI+0xac>
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8001350:	8a11      	ldrh	r1, [r2, #16]
 8001352:	6952      	ldr	r2, [r2, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001354:	813b      	strh	r3, [r7, #8]
 8001356:	42b1      	cmp	r1, r6
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8001358:	e9c2 6000 	strd	r6, r0, [r2]
 800135c:	bf28      	it	cs
 800135e:	4631      	movcs	r1, r6
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8001360:	60d1      	str	r1, [r2, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001362:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
  isp->txbuf  = buf;
 8001366:	6095      	str	r5, [r2, #8]
 8001368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800136c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001370:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001374:	6818      	ldr	r0, [r3, #0]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001376:	6059      	str	r1, [r3, #4]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001378:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800137c:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001380:	0040      	lsls	r0, r0, #1
  while (i > 0) {
 8001382:	b161      	cbz	r1, 800139e <usbStartTransmitI+0x7e>
 8001384:	3901      	subs	r1, #1
 8001386:	0849      	lsrs	r1, r1, #1
 8001388:	1d03      	adds	r3, r0, #4
 800138a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800138e:	e000      	b.n	8001392 <usbStartTransmitI+0x72>
 8001390:	3304      	adds	r3, #4
    w |= *buf++ << 8;
 8001392:	f835 2b02 	ldrh.w	r2, [r5], #2
    *pmap++ = (stm32_usb_pma_t)w;
 8001396:	6002      	str	r2, [r0, #0]
  while (i > 0) {
 8001398:	4299      	cmp	r1, r3
 800139a:	4618      	mov	r0, r3
 800139c:	d1f8      	bne.n	8001390 <usbStartTransmitI+0x70>
 800139e:	00a4      	lsls	r4, r4, #2
 80013a0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80013a4:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80013ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80013b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013be:	6023      	str	r3, [r4, #0]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80013c2:	4801      	ldr	r0, [pc, #4]	; (80013c8 <usbStartTransmitI+0xa8>)
 80013c4:	f7ff fb8c 	bl	8000ae0 <chSysHalt>
 80013c8:	0800b7f0 	.word	0x0800b7f0
 80013cc:	40005c00 	.word	0x40005c00

080013d0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)ep;
  switch (usbp->ep0state) {
 80013d2:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
 80013d6:	2914      	cmp	r1, #20
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80013d8:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 80013da:	d037      	beq.n	800144c <_usb_ep0out+0x7c>
 80013dc:	2915      	cmp	r1, #21
 80013de:	d021      	beq.n	8001424 <_usb_ep0out+0x54>
 80013e0:	2906      	cmp	r1, #6
 80013e2:	d002      	beq.n	80013ea <_usb_ep0out+0x1a>
  case USB_EP0_STP_WAITING:
  case USB_EP0_IN_TX:
  case USB_EP0_IN_WAITING_TX0:
  case USB_EP0_IN_SENDING_STS:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <_usb_ep0out+0x94>)
 80013e6:	f7ff fb7b 	bl	8000ae0 <chSysHalt>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80013ea:	4e1f      	ldr	r6, [pc, #124]	; (8001468 <_usb_ep0out+0x98>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80013ec:	6842      	ldr	r2, [r0, #4]
 80013ee:	6833      	ldr	r3, [r6, #0]
 80013f0:	6815      	ldr	r5, [r2, #0]
 80013f2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80013f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013fa:	f083 0210 	eor.w	r2, r3, #16
 80013fe:	f248 0780 	movw	r7, #32896	; 0x8080
 8001402:	433a      	orrs	r2, r7
 8001404:	6032      	str	r2, [r6, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001406:	6833      	ldr	r3, [r6, #0]
 8001408:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800140c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001414:	433b      	orrs	r3, r7
 8001416:	6033      	str	r3, [r6, #0]
 8001418:	b105      	cbz	r5, 800141c <_usb_ep0out+0x4c>
 800141a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800141c:	2306      	movs	r3, #6
 800141e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8001422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001424:	230b      	movs	r3, #11
 8001426:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800142a:	2320      	movs	r3, #32
 800142c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001430:	f7ff fe2e 	bl	8001090 <_dbg_check_lock_from_isr>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8001434:	2300      	movs	r3, #0
 8001436:	461a      	mov	r2, r3
 8001438:	4619      	mov	r1, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff ff70 	bl	8001320 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8001440:	f7ff fe0e 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001444:	2300      	movs	r3, #0
 8001446:	f383 8811 	msr	BASEPRI, r3
}
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800144c:	68c3      	ldr	r3, [r0, #12]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1e5      	bne.n	8001422 <_usb_ep0out+0x52>
    if (usbp->ep0endcb != NULL) {
 8001456:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001458:	b103      	cbz	r3, 800145c <_usb_ep0out+0x8c>
      usbp->ep0endcb(usbp);
 800145a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 800145c:	2300      	movs	r3, #0
 800145e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001464:	0800b834 	.word	0x0800b834
 8001468:	40005c00 	.word	0x40005c00
 800146c:	00000000 	.word	0x00000000

08001470 <usbStartReceiveI>:
                      uint8_t *buf, size_t n) {
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	4605      	mov	r5, r0
 8001474:	460c      	mov	r4, r1
 8001476:	4617      	mov	r7, r2
 8001478:	461e      	mov	r6, r3
  osalDbgCheckClassI();
 800147a:	f7ff fb71 	bl	8000b60 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 800147e:	b365      	cbz	r5, 80014da <usbStartReceiveI+0x6a>
 8001480:	2c07      	cmp	r4, #7
 8001482:	d82a      	bhi.n	80014da <usbStartReceiveI+0x6a>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f304 	lsl.w	r3, r1, r4
 800148a:	896a      	ldrh	r2, [r5, #10]
 800148c:	b29b      	uxth	r3, r3
 800148e:	ea12 0003 	ands.w	r0, r2, r3
 8001492:	d122      	bne.n	80014da <usbStartReceiveI+0x6a>
  osp = usbp->epc[ep]->out_state;
 8001494:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001498:	4313      	orrs	r3, r2
  osp = usbp->epc[ep]->out_state;
 800149a:	f8dc 200c 	ldr.w	r2, [ip, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800149e:	816b      	strh	r3, [r5, #10]
  osp = usbp->epc[ep]->out_state;
 80014a0:	6993      	ldr	r3, [r2, #24]
  osp->rxbuf  = buf;
 80014a2:	609f      	str	r7, [r3, #8]
  osp->rxcnt  = 0;
 80014a4:	e9c3 6000 	strd	r6, r0, [r3]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80014a8:	b1d6      	cbz	r6, 80014e0 <usbStartReceiveI+0x70>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80014aa:	8a52      	ldrh	r2, [r2, #18]
 80014ac:	3e01      	subs	r6, #1
 80014ae:	4416      	add	r6, r2
 80014b0:	fbb6 f6f2 	udiv	r6, r6, r2
 80014b4:	819e      	strh	r6, [r3, #12]
 80014b6:	00a4      	lsls	r4, r4, #2
 80014b8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80014bc:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80014c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d6:	6023      	str	r3, [r4, #0]
}
 80014d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <usbStartReceiveI+0x74>)
 80014dc:	f7ff fb00 	bl	8000ae0 <chSysHalt>
    osp->rxpkts = 1;
 80014e0:	8199      	strh	r1, [r3, #12]
 80014e2:	e7e8      	b.n	80014b6 <usbStartReceiveI+0x46>
 80014e4:	0800b7c0 	.word	0x0800b7c0
	...

080014f0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80014f0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 80014f2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80014f6:	3b06      	subs	r3, #6
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80014f8:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d804      	bhi.n	8001508 <_usb_ep0in+0x18>
 80014fe:	e8df f003 	tbb	[pc, r3]
 8001502:	032b      	.short	0x032b
 8001504:	4a170603 	.word	0x4a170603
    osalDbgAssert(false, "EP0 state machine error");
 8001508:	4830      	ldr	r0, [pc, #192]	; (80015cc <_usb_ep0in+0xdc>)
 800150a:	f7ff fae9 	bl	8000ae0 <chSysHalt>
  hw |= (uint16_t)*p << 8U;
 800150e:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8001512:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8001516:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8001518:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_usb_ep0in+0x40>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001520:	68c3      	ldr	r3, [r0, #12]
 8001522:	8a1b      	ldrh	r3, [r3, #16]
 8001524:	fbb2 f5f3 	udiv	r5, r2, r3
 8001528:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 800152c:	2d00      	cmp	r5, #0
 800152e:	d039      	beq.n	80015a4 <_usb_ep0in+0xb4>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8001530:	2314      	movs	r3, #20
 8001532:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001536:	2320      	movs	r3, #32
 8001538:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800153c:	f7ff fda8 	bl	8001090 <_dbg_check_lock_from_isr>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8001540:	2300      	movs	r3, #0
 8001542:	461a      	mov	r2, r3
 8001544:	4619      	mov	r1, r3
 8001546:	4620      	mov	r0, r4
 8001548:	f7ff ff92 	bl	8001470 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 800154c:	f7ff fd88 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001550:	2300      	movs	r3, #0
 8001552:	f383 8811 	msr	BASEPRI, r3
}
 8001556:	bd38      	pop	{r3, r4, r5, pc}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001558:	491d      	ldr	r1, [pc, #116]	; (80015d0 <_usb_ep0in+0xe0>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800155a:	6842      	ldr	r2, [r0, #4]
 800155c:	680b      	ldr	r3, [r1, #0]
 800155e:	6815      	ldr	r5, [r2, #0]
 8001560:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001568:	f083 0210 	eor.w	r2, r3, #16
 800156c:	f248 0080 	movw	r0, #32896	; 0x8080
 8001570:	4302      	orrs	r2, r0
 8001572:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001574:	680b      	ldr	r3, [r1, #0]
 8001576:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800157a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800157e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001582:	4303      	orrs	r3, r0
 8001584:	600b      	str	r3, [r1, #0]
 8001586:	b115      	cbz	r5, 800158e <_usb_ep0in+0x9e>
 8001588:	2106      	movs	r1, #6
 800158a:	4620      	mov	r0, r4
 800158c:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 800158e:	2306      	movs	r3, #6
 8001590:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001594:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8001596:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001598:	b103      	cbz	r3, 800159c <_usb_ep0in+0xac>
      usbp->ep0endcb(usbp);
 800159a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 800159c:	2300      	movs	r3, #0
 800159e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80015a2:	bd38      	pop	{r3, r4, r5, pc}
 80015a4:	2320      	movs	r3, #32
 80015a6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80015aa:	f7ff fd71 	bl	8001090 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80015ae:	462b      	mov	r3, r5
 80015b0:	462a      	mov	r2, r5
 80015b2:	4629      	mov	r1, r5
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff feb3 	bl	8001320 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 80015ba:	f7ff fd51 	bl	8001060 <_dbg_check_unlock_from_isr>
 80015be:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 80015c2:	230a      	movs	r3, #10
 80015c4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80015c8:	bd38      	pop	{r3, r4, r5, pc}
 80015ca:	bf00      	nop
 80015cc:	0800b828 	.word	0x0800b828
 80015d0:	40005c00 	.word	0x40005c00
	...

080015e0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80015e0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80015e2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80015e6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 80015e8:	b113      	cbz	r3, 80015f0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 80015f0:	4bc8      	ldr	r3, [pc, #800]	; (8001914 <_usb_ep0setup+0x334>)
 80015f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015f8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80015fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  usbReadSetup(usbp, ep, usbp->setup);
 8001600:	f104 0274 	add.w	r2, r4, #116	; 0x74
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800160a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	f103 0010 	add.w	r0, r3, #16
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	f822 1b02 	strh.w	r1, [r2], #2
 800161a:	3304      	adds	r3, #4
  for (n = 0; n < 4; n++) {
 800161c:	4283      	cmp	r3, r0
 800161e:	d1f9      	bne.n	8001614 <_usb_ep0setup+0x34>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001620:	6863      	ldr	r3, [r4, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	b343      	cbz	r3, 8001678 <_usb_ep0setup+0x98>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001626:	4620      	mov	r0, r4
 8001628:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800162a:	b328      	cbz	r0, 8001678 <_usb_ep0setup+0x98>
 800162c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800162e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  hw |= (uint16_t)*p << 8U;
 8001632:	f894 007b 	ldrb.w	r0, [r4, #123]	; 0x7b
 8001636:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 800163a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  if (usbp->ep0n > max) {
 800163e:	4291      	cmp	r1, r2
 8001640:	bf2c      	ite	cs
 8001642:	4611      	movcs	r1, r2
    usbp->ep0n = max;
 8001644:	66e1      	strcc	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001646:	061a      	lsls	r2, r3, #24
 8001648:	f100 809a 	bmi.w	8001780 <_usb_ep0setup+0x1a0>
    if (usbp->ep0n != 0U) {
 800164c:	2900      	cmp	r1, #0
 800164e:	d06d      	beq.n	800172c <_usb_ep0setup+0x14c>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001650:	2315      	movs	r3, #21
 8001652:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001656:	2320      	movs	r3, #32
 8001658:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800165c:	f7ff fd18 	bl	8001090 <_dbg_check_lock_from_isr>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001660:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8001664:	4620      	mov	r0, r4
 8001666:	2100      	movs	r1, #0
 8001668:	f7ff ff02 	bl	8001470 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 800166c:	f7ff fcf8 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001670:	2300      	movs	r3, #0
 8001672:	f383 8811 	msr	BASEPRI, r3
}
 8001676:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001678:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800167c:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8001680:	4618      	mov	r0, r3
 8001682:	d01e      	beq.n	80016c2 <_usb_ep0setup+0xe2>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001684:	49a3      	ldr	r1, [pc, #652]	; (8001914 <_usb_ep0setup+0x334>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001686:	6862      	ldr	r2, [r4, #4]
 8001688:	680b      	ldr	r3, [r1, #0]
 800168a:	6815      	ldr	r5, [r2, #0]
 800168c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001694:	f083 0210 	eor.w	r2, r3, #16
 8001698:	f248 0080 	movw	r0, #32896	; 0x8080
 800169c:	4302      	orrs	r2, r0
 800169e:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80016a0:	680b      	ldr	r3, [r1, #0]
 80016a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80016ae:	4303      	orrs	r3, r0
 80016b0:	600b      	str	r3, [r1, #0]
 80016b2:	b115      	cbz	r5, 80016ba <_usb_ep0setup+0xda>
 80016b4:	2106      	movs	r1, #6
 80016b6:	4620      	mov	r0, r4
 80016b8:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 80016ba:	2306      	movs	r3, #6
 80016bc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 80016c2:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80016c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 80016ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80016ce:	f240 3102 	movw	r1, #770	; 0x302
 80016d2:	428a      	cmp	r2, r1
 80016d4:	f000 80ff 	beq.w	80018d6 <_usb_ep0setup+0x2f6>
 80016d8:	d83c      	bhi.n	8001754 <_usb_ep0setup+0x174>
 80016da:	2a02      	cmp	r2, #2
 80016dc:	f000 80e3 	beq.w	80018a6 <_usb_ep0setup+0x2c6>
 80016e0:	f240 80a7 	bls.w	8001832 <_usb_ep0setup+0x252>
 80016e4:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80016e8:	f000 80ac 	beq.w	8001844 <_usb_ep0setup+0x264>
 80016ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80016f0:	d077      	beq.n	80017e2 <_usb_ep0setup+0x202>
 80016f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80016f6:	d1c5      	bne.n	8001684 <_usb_ep0setup+0xa4>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80016f8:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d1c1      	bne.n	8001684 <_usb_ep0setup+0xa4>
      usbp->status &= ~2U;
 8001700:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001704:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8001706:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800170a:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 800170e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 8001712:	e009      	b.n	8001728 <_usb_ep0setup+0x148>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001714:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8001718:	d272      	bcs.n	8001800 <_usb_ep0setup+0x220>
 800171a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800171e:	d1b1      	bne.n	8001684 <_usb_ep0setup+0xa4>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8001720:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8001724:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <_usb_ep0setup+0x338>)
 8001726:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001728:	0603      	lsls	r3, r0, #24
 800172a:	d436      	bmi.n	800179a <_usb_ep0setup+0x1ba>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800172c:	230b      	movs	r3, #11
 800172e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001732:	2320      	movs	r3, #32
 8001734:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001738:	f7ff fcaa 	bl	8001090 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 800173c:	2300      	movs	r3, #0
 800173e:	4620      	mov	r0, r4
 8001740:	461a      	mov	r2, r3
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001742:	2100      	movs	r1, #0
 8001744:	f7ff fdec 	bl	8001320 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8001748:	f7ff fc8a 	bl	8001060 <_dbg_check_unlock_from_isr>
 800174c:	2300      	movs	r3, #0
 800174e:	f383 8811 	msr	BASEPRI, r3
}
 8001752:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001754:	f240 6101 	movw	r1, #1537	; 0x601
 8001758:	428a      	cmp	r2, r1
 800175a:	d9db      	bls.n	8001714 <_usb_ep0setup+0x134>
 800175c:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8001760:	d027      	beq.n	80017b2 <_usb_ep0setup+0x1d2>
 8001762:	f640 4102 	movw	r1, #3074	; 0xc02
 8001766:	428a      	cmp	r2, r1
 8001768:	f000 8096 	beq.w	8001898 <_usb_ep0setup+0x2b8>
 800176c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001770:	d188      	bne.n	8001684 <_usb_ep0setup+0xa4>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8001772:	f104 017f 	add.w	r1, r4, #127	; 0x7f
 8001776:	2201      	movs	r2, #1
 8001778:	6725      	str	r5, [r4, #112]	; 0x70
 800177a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
 800177e:	e758      	b.n	8001632 <_usb_ep0setup+0x52>
    if (usbp->ep0n != 0U) {
 8001780:	b159      	cbz	r1, 800179a <_usb_ep0setup+0x1ba>
      usbp->ep0state = USB_EP0_IN_TX;
 8001782:	2309      	movs	r3, #9
 8001784:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001788:	2320      	movs	r3, #32
 800178a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800178e:	f7ff fc7f 	bl	8001090 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8001792:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8001796:	4620      	mov	r0, r4
 8001798:	e7d3      	b.n	8001742 <_usb_ep0setup+0x162>
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800179a:	2314      	movs	r3, #20
 800179c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80017a0:	2320      	movs	r3, #32
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f7ff fc73 	bl	8001090 <_dbg_check_lock_from_isr>
      usbStartReceiveI(usbp, 0, NULL, 0);
 80017aa:	2300      	movs	r3, #0
 80017ac:	4620      	mov	r0, r4
 80017ae:	461a      	mov	r2, r3
 80017b0:	e759      	b.n	8001666 <_usb_ep0setup+0x86>
      if (usbp->state == USB_ACTIVE) {
 80017b2:	7823      	ldrb	r3, [r4, #0]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	f000 80bd 	beq.w	8001934 <_usb_ep0setup+0x354>
      if (usbp->setup[2] != 0U) {
 80017ba:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80017be:	b14b      	cbz	r3, 80017d4 <_usb_ep0setup+0x1f4>
        usbp->state = USB_ACTIVE;
 80017c0:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80017c2:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 80017c4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 80017c8:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	b113      	cbz	r3, 80017d4 <_usb_ep0setup+0x1f4>
 80017ce:	2102      	movs	r1, #2
 80017d0:	4620      	mov	r0, r4
 80017d2:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80017d4:	2300      	movs	r3, #0
 80017d6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80017da:	6723      	str	r3, [r4, #112]	; 0x70
 80017dc:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 80017e0:	e7a2      	b.n	8001728 <_usb_ep0setup+0x148>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80017e2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	f47f af4c 	bne.w	8001684 <_usb_ep0setup+0xa4>
      usbp->status |= 2U;
 80017ec:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80017f0:	66a5      	str	r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 80017f2:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80017f6:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 80017fa:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
 80017fe:	e793      	b.n	8001728 <_usb_ep0setup+0x148>
  hw |= (uint16_t)*p << 8U;
 8001800:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8001804:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8001806:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800180a:	684e      	ldr	r6, [r1, #4]
 800180c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8001810:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8001814:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001818:	4620      	mov	r0, r4
 800181a:	47b0      	blx	r6
    if (dp == NULL) {
 800181c:	2800      	cmp	r0, #0
 800181e:	f43f af31 	beq.w	8001684 <_usb_ep0setup+0xa4>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8001822:	e9d0 2300 	ldrd	r2, r3, [r0]
 8001826:	6725      	str	r5, [r4, #112]	; 0x70
 8001828:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
 800182c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8001830:	e6ff      	b.n	8001632 <_usb_ep0setup+0x52>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001832:	bb72      	cbnz	r2, 8001892 <_usb_ep0setup+0x2b2>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001834:	2102      	movs	r1, #2
 8001836:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800183a:	6722      	str	r2, [r4, #112]	; 0x70
 800183c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8001840:	460a      	mov	r2, r1
 8001842:	e6f6      	b.n	8001632 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8001844:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8001848:	2b00      	cmp	r3, #0
 800184a:	f47f af1b 	bne.w	8001684 <_usb_ep0setup+0xa4>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800184e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8001852:	f012 030f 	ands.w	r3, r2, #15
 8001856:	d017      	beq.n	8001888 <_usb_ep0setup+0x2a8>
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800185e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8001862:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	d171      	bne.n	800194e <_usb_ep0setup+0x36e>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 800186a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800186e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001872:	d009      	beq.n	8001888 <_usb_ep0setup+0x2a8>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800187a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187e:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8001882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001886:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001888:	2300      	movs	r3, #0
 800188a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 800188e:	6723      	str	r3, [r4, #112]	; 0x70
 8001890:	e74a      	b.n	8001728 <_usb_ep0setup+0x148>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001892:	2a01      	cmp	r2, #1
 8001894:	f47f aef6 	bne.w	8001684 <_usb_ep0setup+0xa4>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <_usb_ep0setup+0x33c>)
 800189a:	66a2      	str	r2, [r4, #104]	; 0x68
 800189c:	2100      	movs	r1, #0
 800189e:	2202      	movs	r2, #2
 80018a0:	e9c4 211b 	strd	r2, r1, [r4, #108]	; 0x6c
 80018a4:	e6c5      	b.n	8001632 <_usb_ep0setup+0x52>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80018a6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80018aa:	f001 000f 	and.w	r0, r1, #15
 80018ae:	f011 0f80 	tst.w	r1, #128	; 0x80
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80018b2:	4918      	ldr	r1, [pc, #96]	; (8001914 <_usb_ep0setup+0x334>)
 80018b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80018b8:	d134      	bne.n	8001924 <_usb_ep0setup+0x344>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80018ba:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 80018be:	f43f aee1 	beq.w	8001684 <_usb_ep0setup+0xa4>
 80018c2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80018c6:	d133      	bne.n	8001930 <_usb_ep0setup+0x350>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80018c8:	4915      	ldr	r1, [pc, #84]	; (8001920 <_usb_ep0setup+0x340>)
 80018ca:	66a1      	str	r1, [r4, #104]	; 0x68
 80018cc:	2002      	movs	r0, #2
 80018ce:	2100      	movs	r1, #0
 80018d0:	e9c4 011b 	strd	r0, r1, [r4, #108]	; 0x6c
 80018d4:	e6ad      	b.n	8001632 <_usb_ep0setup+0x52>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80018d6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f aed2 	bne.w	8001684 <_usb_ep0setup+0xa4>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80018e0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80018e4:	f012 030f 	ands.w	r3, r2, #15
 80018e8:	d0ce      	beq.n	8001888 <_usb_ep0setup+0x2a8>
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80018f4:	f012 0f80 	tst.w	r2, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	d139      	bne.n	8001970 <_usb_ep0setup+0x390>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80018fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001900:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001904:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8001908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e7b9      	b.n	8001888 <_usb_ep0setup+0x2a8>
 8001914:	40005c00 	.word	0x40005c00
 8001918:	08001a01 	.word	0x08001a01
 800191c:	0800dfc8 	.word	0x0800dfc8
 8001920:	0800bbf8 	.word	0x0800bbf8
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8001924:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 8001928:	f43f aeac 	beq.w	8001684 <_usb_ep0setup+0xa4>
 800192c:	2910      	cmp	r1, #16
 800192e:	d0cb      	beq.n	80018c8 <_usb_ep0setup+0x2e8>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001930:	492f      	ldr	r1, [pc, #188]	; (80019f0 <_usb_ep0setup+0x410>)
 8001932:	e7ca      	b.n	80018ca <_usb_ep0setup+0x2ea>
 8001934:	2320      	movs	r3, #32
 8001936:	f383 8811 	msr	BASEPRI, r3
 800193a:	f7ff fba9 	bl	8001090 <_dbg_check_lock_from_isr>
  osalDbgCheckClassI();
 800193e:	f7ff f90f 	bl	8000b60 <chDbgCheckClassI>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 8001942:	7823      	ldrb	r3, [r4, #0]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d01f      	beq.n	8001988 <_usb_ep0setup+0x3a8>
 8001948:	482a      	ldr	r0, [pc, #168]	; (80019f4 <_usb_ep0setup+0x414>)
 800194a:	f7ff f8c9 	bl	8000ae0 <chSysHalt>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800194e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001952:	2a30      	cmp	r2, #48	; 0x30
 8001954:	d098      	beq.n	8001888 <_usb_ep0setup+0x2a8>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800195c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001960:	f082 0220 	eor.w	r2, r2, #32
 8001964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e78b      	b.n	8001888 <_usb_ep0setup+0x2a8>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001970:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001978:	f082 0210 	eor.w	r2, r2, #16
 800197c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e77f      	b.n	8001888 <_usb_ep0setup+0x2a8>
  usbp->transmitting &= 1U;
 8001988:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 800198a:	8963      	ldrh	r3, [r4, #10]
    usbp->epc[i] = NULL;
 800198c:	6125      	str	r5, [r4, #16]
 800198e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001992:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8001996:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  usbp->transmitting &= 1U;
 800199a:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 800199e:	f003 0301 	and.w	r3, r3, #1
  usbp->pmnext = 64;
 80019a2:	2140      	movs	r1, #64	; 0x40
  usbp->transmitting &= 1U;
 80019a4:	8122      	strh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80019a6:	8163      	strh	r3, [r4, #10]
 80019a8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80019ac:	2201      	movs	r2, #1
    EPR_TOGGLE(i, 0);
 80019ae:	f248 0080 	movw	r0, #32896	; 0x8080
 80019b2:	0093      	lsls	r3, r2, #2
 80019b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80019bc:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 80019be:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80019c0:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 80019c2:	ea41 0100 	orr.w	r1, r1, r0
 80019c6:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 80019c8:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 80019ca:	d1f2      	bne.n	80019b2 <_usb_ep0setup+0x3d2>
  _dbg_check_unlock_from_isr();
 80019cc:	f7ff fb48 	bl	8001060 <_dbg_check_unlock_from_isr>
 80019d0:	2300      	movs	r3, #0
 80019d2:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 80019d6:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80019d8:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 80019da:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 80019de:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f43f aee9 	beq.w	80017ba <_usb_ep0setup+0x1da>
 80019e8:	4620      	mov	r0, r4
 80019ea:	4798      	blx	r3
 80019ec:	e6e5      	b.n	80017ba <_usb_ep0setup+0x1da>
 80019ee:	bf00      	nop
 80019f0:	0800b894 	.word	0x0800b894
 80019f4:	0800b778 	.word	0x0800b778
	...

08001a00 <set_address>:
  usbp->address = usbp->setup[2];
 8001a00:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001a04:	6842      	ldr	r2, [r0, #4]
  usbp->address = usbp->setup[2];
 8001a06:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8001a0a:	4906      	ldr	r1, [pc, #24]	; (8001a24 <set_address+0x24>)
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
 8001a16:	64cb      	str	r3, [r1, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001a18:	b10a      	cbz	r2, 8001a1e <set_address+0x1e>
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	7023      	strb	r3, [r4, #0]
}
 8001a22:	bd10      	pop	{r4, pc}
 8001a24:	40005c00 	.word	0x40005c00
	...

08001a30 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
	...

08001a40 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001a40:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8001a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d001      	beq.n	8001a50 <sduRequestsHook+0x10>
      return false;
 8001a4c:	2000      	movs	r0, #0
}
 8001a4e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001a50:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d3f9      	bcc.n	8001a4c <sduRequestsHook+0xc>
 8001a58:	2b21      	cmp	r3, #33	; 0x21
 8001a5a:	d807      	bhi.n	8001a6c <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <sduRequestsHook+0x3c>)
 8001a5e:	6683      	str	r3, [r0, #104]	; 0x68
 8001a60:	2207      	movs	r2, #7
 8001a62:	2300      	movs	r3, #0
 8001a64:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
      return true;
 8001a68:	2001      	movs	r0, #1
 8001a6a:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001a6c:	2b22      	cmp	r3, #34	; 0x22
 8001a6e:	d1ed      	bne.n	8001a4c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001a70:	2300      	movs	r3, #0
 8001a72:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
 8001a76:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 8001a78:	2001      	movs	r0, #1
 8001a7a:	4770      	bx	lr
 8001a7c:	20000c30 	.word	0x20000c30

08001a80 <_ctl>:
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001a80:	b508      	push	{r3, lr}
  osalDbgCheck(sdup != NULL);
 8001a82:	b118      	cbz	r0, 8001a8c <_ctl+0xc>
  switch (operation) {
 8001a84:	b111      	cbz	r1, 8001a8c <_ctl+0xc>
 8001a86:	2901      	cmp	r1, #1
 8001a88:	d103      	bne.n	8001a92 <_ctl+0x12>
    osalDbgCheck(arg == NULL);
 8001a8a:	b112      	cbz	r2, 8001a92 <_ctl+0x12>
    osalDbgAssert(false, "invalid CTL operation");
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <_ctl+0x18>)
 8001a8e:	f7ff f827 	bl	8000ae0 <chSysHalt>
}
 8001a92:	2000      	movs	r0, #0
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	bf00      	nop
 8001a98:	0800b6c4 	.word	0x0800b6c4
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001aa2:	f8d0 648c 	ldr.w	r6, [r0, #1164]	; 0x48c
 8001aa6:	6837      	ldr	r7, [r6, #0]
 8001aa8:	783b      	ldrb	r3, [r7, #0]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d001      	beq.n	8001ab2 <sdu_start_receive+0x12>
    return true;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001ab2:	7a03      	ldrb	r3, [r0, #8]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d1fa      	bne.n	8001aae <sdu_start_receive+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001ab8:	7933      	ldrb	r3, [r6, #4]
 8001aba:	897a      	ldrh	r2, [r7, #10]
 8001abc:	2501      	movs	r5, #1
 8001abe:	fa05 f303 	lsl.w	r3, r5, r3
 8001ac2:	4213      	tst	r3, r2
 8001ac4:	d1f3      	bne.n	8001aae <sdu_start_receive+0xe>
 8001ac6:	4604      	mov	r4, r0
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();
 8001ac8:	f7ff f84a 	bl	8000b60 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 8001acc:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d009      	beq.n	8001ae8 <sdu_start_receive+0x48>
  if (buf == NULL) {
 8001ad4:	3204      	adds	r2, #4
 8001ad6:	d0ea      	beq.n	8001aae <sdu_start_receive+0xe>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8001ad8:	4638      	mov	r0, r7
 8001ada:	7971      	ldrb	r1, [r6, #5]
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	f7ff fcc6 	bl	8001470 <usbStartReceiveI>
  return false;
 8001ae4:	2000      	movs	r0, #0
}
 8001ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae8:	69a3      	ldr	r3, [r4, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1df      	bne.n	8001aae <sdu_start_receive+0xe>
 8001aee:	e7f1      	b.n	8001ad4 <sdu_start_receive+0x34>

08001af0 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8001af0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001af2:	f7ff bfd5 	b.w	8001aa0 <sdu_start_receive>
 8001af6:	bf00      	nop
	...

08001b00 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001b00:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8001b02:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8001b04:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8001b08:	b1b4      	cbz	r4, 8001b38 <sduDataReceived+0x38>
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001b10:	f7ff fabe 	bl	8001090 <_dbg_check_lock_from_isr>
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8001b14:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	7952      	ldrb	r2, [r2, #5]
 8001b1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8001b26:	b945      	cbnz	r5, 8001b3a <sduDataReceived+0x3a>
  (void) sdu_start_receive(sdup);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff ffb9 	bl	8001aa0 <sdu_start_receive>
  _dbg_check_unlock_from_isr();
 8001b2e:	f7ff fa97 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001b32:	2300      	movs	r3, #0
 8001b34:	f383 8811 	msr	BASEPRI, r3
}
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	1860      	adds	r0, r4, r1
 8001b3e:	f7ff f977 	bl	8000e30 <chEvtBroadcastFlagsI>
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();
 8001b42:	f7ff f80d 	bl	8000b60 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8001b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b48:	3b04      	subs	r3, #4
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d817      	bhi.n	8001b7e <sduDataReceived+0x7e>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8001b4e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d010      	beq.n	8001b78 <sduDataReceived+0x78>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001b56:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001b58:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
  ibqp->bcounter++;
 8001b5c:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001b5e:	4403      	add	r3, r0
  ibqp->bcounter++;
 8001b60:	3201      	adds	r2, #1
  if (ibqp->bwrptr >= ibqp->btop) {
 8001b62:	428b      	cmp	r3, r1
  ibqp->bcounter++;
 8001b64:	61a2      	str	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8001b66:	61e3      	str	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8001b68:	d301      	bcc.n	8001b6e <sduDataReceived+0x6e>
    ibqp->bwrptr = ibqp->buffers;
 8001b6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b6c:	61e3      	str	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 8001b6e:	f104 000c 	add.w	r0, r4, #12
 8001b72:	f7ff f8cd 	bl	8000d10 <chThdDequeueNextI.constprop.89>
 8001b76:	e7d7      	b.n	8001b28 <sduDataReceived+0x28>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8001b78:	69a2      	ldr	r2, [r4, #24]
 8001b7a:	2a00      	cmp	r2, #0
 8001b7c:	d0eb      	beq.n	8001b56 <sduDataReceived+0x56>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8001b7e:	4801      	ldr	r0, [pc, #4]	; (8001b84 <sduDataReceived+0x84>)
 8001b80:	f7fe ffae 	bl	8000ae0 <chSysHalt>
 8001b84:	0800b6f4 	.word	0x0800b6f4
	...

08001b90 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	460d      	mov	r5, r1
 8001b94:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 8001b96:	f7fe ffd3 	bl	8000b40 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8001b9a:	b1d5      	cbz	r5, 8001bd2 <obqPostFullBufferS+0x42>
 8001b9c:	69e3      	ldr	r3, [r4, #28]
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	42ab      	cmp	r3, r5
 8001ba2:	d316      	bcc.n	8001bd2 <obqPostFullBufferS+0x42>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8001ba4:	68e3      	ldr	r3, [r4, #12]
 8001ba6:	b1a3      	cbz	r3, 8001bd2 <obqPostFullBufferS+0x42>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001ba8:	6923      	ldr	r3, [r4, #16]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001baa:	69a1      	ldr	r1, [r4, #24]
  *((size_t *)obqp->bwrptr) = size;
 8001bac:	601d      	str	r5, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001bae:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 8001bb0:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 8001bb2:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 8001bb4:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001bb6:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8001bb8:	bf24      	itt	cs
 8001bba:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001bbc:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8001bbe:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 8001bc2:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001bc8:	b133      	cbz	r3, 8001bd8 <obqPostFullBufferS+0x48>
    obqp->notify(obqp);
 8001bca:	4620      	mov	r0, r4
  }
}
 8001bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    obqp->notify(obqp);
 8001bd0:	4718      	bx	r3
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <obqPostFullBufferS+0x4c>)
 8001bd4:	f7fe ff84 	bl	8000ae0 <chSysHalt>
}
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800b804 	.word	0x0800b804

08001be0 <obqGetFullBufferI>:
                           size_t *sizep) {
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
  osalDbgCheckClassI();
 8001be6:	f7fe ffbb 	bl	8000b60 <chDbgCheckClassI>
  if (obqIsEmptyI(obqp)) {
 8001bea:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 8001bee:	4282      	cmp	r2, r0
 8001bf0:	d003      	beq.n	8001bfa <obqGetFullBufferI+0x1a>
  *sizep = *((size_t *)obqp->brdptr);
 8001bf2:	f850 3b04 	ldr.w	r3, [r0], #4
 8001bf6:	602b      	str	r3, [r5, #0]
}
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
  if (obqIsEmptyI(obqp)) {
 8001bfa:	68e2      	ldr	r2, [r4, #12]
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d0f8      	beq.n	8001bf2 <obqGetFullBufferI+0x12>
    return NULL;
 8001c00:	2000      	movs	r0, #0
}
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
	...

08001c10 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001c10:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001c12:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001c14:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001c18:	6813      	ldr	r3, [r2, #0]
 8001c1a:	7819      	ldrb	r1, [r3, #0]
 8001c1c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 8001c1e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001c20:	d001      	beq.n	8001c26 <obnotify+0x16>
}
 8001c22:	b002      	add	sp, #8
 8001c24:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001c26:	7a21      	ldrb	r1, [r4, #8]
 8001c28:	2902      	cmp	r1, #2
 8001c2a:	d1fa      	bne.n	8001c22 <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001c2c:	7911      	ldrb	r1, [r2, #4]
 8001c2e:	891a      	ldrh	r2, [r3, #8]
 8001c30:	2301      	movs	r3, #1
 8001c32:	408b      	lsls	r3, r1
 8001c34:	4213      	tst	r3, r2
 8001c36:	d1f4      	bne.n	8001c22 <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001c38:	a901      	add	r1, sp, #4
 8001c3a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001c3e:	f7ff ffcf 	bl	8001be0 <obqGetFullBufferI>
    if (buf != NULL) {
 8001c42:	4602      	mov	r2, r0
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d0ec      	beq.n	8001c22 <obnotify+0x12>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001c48:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001c4c:	9b01      	ldr	r3, [sp, #4]
 8001c4e:	7901      	ldrb	r1, [r0, #4]
 8001c50:	6800      	ldr	r0, [r0, #0]
 8001c52:	f7ff fb65 	bl	8001320 <usbStartTransmitI>
 8001c56:	e7e4      	b.n	8001c22 <obnotify+0x12>
	...

08001c60 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001c60:	b510      	push	{r4, lr}
 8001c62:	2320      	movs	r3, #32
 8001c64:	b082      	sub	sp, #8
 8001c66:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001c6a:	4c23      	ldr	r4, [pc, #140]	; (8001cf8 <sof_handler+0x98>)
  _dbg_check_lock_from_isr();
 8001c6c:	f7ff fa10 	bl	8001090 <_dbg_check_lock_from_isr>
 8001c70:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	7819      	ldrb	r1, [r3, #0]
 8001c78:	2904      	cmp	r1, #4
 8001c7a:	d006      	beq.n	8001c8a <sof_handler+0x2a>
  _dbg_check_unlock_from_isr();
 8001c7c:	f7ff f9f0 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001c80:	2300      	movs	r3, #0
 8001c82:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&PORTAB_SDU1);
  osalSysUnlockFromISR();
}
 8001c86:	b002      	add	sp, #8
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	7a21      	ldrb	r1, [r4, #8]
 8001c8c:	2902      	cmp	r1, #2
 8001c8e:	d1f5      	bne.n	8001c7c <sof_handler+0x1c>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001c90:	7911      	ldrb	r1, [r2, #4]
 8001c92:	891a      	ldrh	r2, [r3, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	408b      	lsls	r3, r1
 8001c98:	4213      	tst	r3, r2
 8001c9a:	d1ef      	bne.n	8001c7c <sof_handler+0x1c>
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 8001c9c:	f7fe ff60 	bl	8000b60 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001ca0:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d1e9      	bne.n	8001c7c <sof_handler+0x1c>
 8001ca8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d0e6      	beq.n	8001c7c <sof_handler+0x1c>
 8001cae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d0e3      	beq.n	8001c7c <sof_handler+0x1c>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001cb4:	3a04      	subs	r2, #4

    if (size > 0U) {
 8001cb6:	1ad2      	subs	r2, r2, r3
 8001cb8:	d0e0      	beq.n	8001c7c <sof_handler+0x1c>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001cba:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 8001cbc:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8001cc0:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 8001cc2:	428b      	cmp	r3, r1
      obqp->bcounter--;
 8001cc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8001cc6:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 8001cc8:	bf24      	itt	cs
 8001cca:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 8001ccc:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 8001cce:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001cd0:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001cd2:	a901      	add	r1, sp, #4
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <sof_handler+0x9c>)
      obqp->bcounter--;
 8001cd6:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8001cd8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001cda:	f7ff ff81 	bl	8001be0 <obqGetFullBufferI>
    osalDbgAssert(buf != NULL, "queue is empty");
 8001cde:	4602      	mov	r2, r0
 8001ce0:	b138      	cbz	r0, 8001cf2 <sof_handler+0x92>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001ce2:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	7901      	ldrb	r1, [r0, #4]
 8001cea:	6800      	ldr	r0, [r0, #0]
 8001cec:	f7ff fb18 	bl	8001320 <usbStartTransmitI>
 8001cf0:	e7c4      	b.n	8001c7c <sof_handler+0x1c>
    osalDbgAssert(buf != NULL, "queue is empty");
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <sof_handler+0xa0>)
 8001cf4:	f7fe fef4 	bl	8000ae0 <chSysHalt>
 8001cf8:	20000c98 	.word	0x20000c98
 8001cfc:	20000cdc 	.word	0x20000cdc
 8001d00:	0800b6d8 	.word	0x0800b6d8
	...

08001d10 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001d14:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001d18:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001d1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  if (sdup == NULL) {
 8001d1c:	b314      	cbz	r4, 8001d64 <sduDataTransmitted+0x54>
 8001d1e:	460e      	mov	r6, r1
 8001d20:	4605      	mov	r5, r0
 8001d22:	2320      	movs	r3, #32
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	eb00 0781 	add.w	r7, r0, r1, lsl #2
  _dbg_check_lock_from_isr();
 8001d2c:	f7ff f9b0 	bl	8001090 <_dbg_check_lock_from_isr>
  chEvtBroadcastFlagsI(esp, flags);
 8001d30:	1d20      	adds	r0, r4, #4
 8001d32:	2108      	movs	r1, #8
 8001d34:	f7ff f87c 	bl	8000e30 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f104 0844 	add.w	r8, r4, #68	; 0x44
 8001d42:	bb13      	cbnz	r3, 8001d8a <sduDataTransmitted+0x7a>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001d44:	4640      	mov	r0, r8
 8001d46:	a901      	add	r1, sp, #4
 8001d48:	f7ff ff4a 	bl	8001be0 <obqGetFullBufferI>
  if (buf != NULL) {
 8001d4c:	b168      	cbz	r0, 8001d6a <sduDataTransmitted+0x5a>
    usbStartTransmitI(usbp, ep, buf, n);
 8001d4e:	4602      	mov	r2, r0
 8001d50:	4631      	mov	r1, r6
 8001d52:	4628      	mov	r0, r5
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	f7ff fae3 	bl	8001320 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8001d5a:	f7ff f981 	bl	8001060 <_dbg_check_unlock_from_isr>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f383 8811 	msr	BASEPRI, r3
}
 8001d64:	b002      	add	sp, #8
 8001d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d0f2      	beq.n	8001d5a <sduDataTransmitted+0x4a>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1ee      	bne.n	8001d5a <sduDataTransmitted+0x4a>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8001d82:	4628      	mov	r0, r5
 8001d84:	f7ff facc 	bl	8001320 <usbStartTransmitI>
 8001d88:	e7e7      	b.n	8001d5a <sduDataTransmitted+0x4a>
  osalDbgCheckClassI();
 8001d8a:	f7fe fee9 	bl	8000b60 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8001d8e:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d00e      	beq.n	8001db4 <sduDataTransmitted+0xa4>
  if (obqp->brdptr >= obqp->btop) {
 8001d96:	e9d4 2117 	ldrd	r2, r1, [r4, #92]	; 0x5c
  obqp->bcounter++;
 8001d9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001d9c:	440b      	add	r3, r1
  obqp->bcounter++;
 8001d9e:	3001      	adds	r0, #1
  if (obqp->brdptr >= obqp->btop) {
 8001da0:	4293      	cmp	r3, r2
  obqp->bcounter++;
 8001da2:	6520      	str	r0, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8001da4:	65a3      	str	r3, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8001da6:	d301      	bcc.n	8001dac <sduDataTransmitted+0x9c>
    obqp->brdptr = obqp->buffers;
 8001da8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001daa:	65a3      	str	r3, [r4, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001dac:	4640      	mov	r0, r8
 8001dae:	f7fe ffaf 	bl	8000d10 <chThdDequeueNextI.constprop.89>
 8001db2:	e7c7      	b.n	8001d44 <sduDataTransmitted+0x34>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8001db4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d0ed      	beq.n	8001d96 <sduDataTransmitted+0x86>
 8001dba:	4801      	ldr	r0, [pc, #4]	; (8001dc0 <sduDataTransmitted+0xb0>)
 8001dbc:	f7fe fe90 	bl	8000ae0 <chSysHalt>
 8001dc0:	0800b790 	.word	0x0800b790
	...

08001dd0 <ibqReleaseEmptyBufferS>:
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
  osalDbgCheckClassS();
 8001dd4:	f7fe feb4 	bl	8000b40 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8001dd8:	68e3      	ldr	r3, [r4, #12]
 8001dda:	b19b      	cbz	r3, 8001e04 <ibqReleaseEmptyBufferS+0x34>
  if (ibqp->brdptr >= ibqp->btop) {
 8001ddc:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8001de0:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8001de2:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8001de4:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001de6:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8001de8:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8001dea:	bf24      	itt	cs
 8001dec:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8001dee:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8001df0:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8001df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8001df4:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8001df6:	2200      	movs	r2, #0
 8001df8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8001dfa:	b133      	cbz	r3, 8001e0a <ibqReleaseEmptyBufferS+0x3a>
    ibqp->notify(ibqp);
 8001dfc:	4620      	mov	r0, r4
}
 8001dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ibqp->notify(ibqp);
 8001e02:	4718      	bx	r3
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8001e04:	4801      	ldr	r0, [pc, #4]	; (8001e0c <ibqReleaseEmptyBufferS+0x3c>)
 8001e06:	f7fe fe6b 	bl	8000ae0 <chSysHalt>
}
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	0800b724 	.word	0x0800b724

08001e10 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001e10:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e16:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001e18:	0792      	lsls	r2, r2, #30
 8001e1a:	d501      	bpl.n	8001e20 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e1c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8001e1e:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001e20:	4801      	ldr	r0, [pc, #4]	; (8001e28 <stSetAlarm+0x18>)
 8001e22:	f7fe fe5d 	bl	8000ae0 <chSysHalt>
 8001e26:	bf00      	nop
 8001e28:	0800b6b8 	.word	0x0800b6b8
 8001e2c:	00000000 	.word	0x00000000

08001e30 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4604      	mov	r4, r0

  chDbgCheckClassI();
 8001e34:	f7fe fe94 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8001e38:	68e3      	ldr	r3, [r4, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02f      	beq.n	8001e9e <chVTDoResetI+0x6e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <chVTDoResetI+0x7c>)
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	42a2      	cmp	r2, r4
 8001e44:	d00e      	beq.n	8001e64 <chVTDoResetI+0x34>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001e46:	e9d4 2100 	ldrd	r2, r1, [r4]
 8001e4a:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8001e4c:	6822      	ldr	r2, [r4, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e4e:	331c      	adds	r3, #28
    vtp->func = NULL;
 8001e50:	2000      	movs	r0, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e52:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8001e54:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8001e56:	60e0      	str	r0, [r4, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001e58:	d003      	beq.n	8001e62 <chVTDoResetI+0x32>
      vtp->next->delta += vtp->delta;
 8001e5a:	68a1      	ldr	r1, [r4, #8]
 8001e5c:	6893      	ldr	r3, [r2, #8]
 8001e5e:	440b      	add	r3, r1
 8001e60:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001e62:	bd10      	pop	{r4, pc}
  ch.vtlist.next = vtp->next;
 8001e64:	4618      	mov	r0, r3
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8001e6c:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e6e:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001e70:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001e72:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001e74:	d016      	beq.n	8001ea4 <chVTDoResetI+0x74>
  ch.vtlist.next->delta += vtp->delta;
 8001e76:	6894      	ldr	r4, [r2, #8]
 8001e78:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001e7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001e7c:	4414      	add	r4, r2
  return (systime_t)STM32_ST_TIM->CNT;
 8001e7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e82:	608c      	str	r4, [r1, #8]
 8001e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001e86:	1a12      	subs	r2, r2, r0
  if (nowdelta >= ch.vtlist.next->delta) {
 8001e88:	4294      	cmp	r4, r2
 8001e8a:	d9ea      	bls.n	8001e62 <chVTDoResetI+0x32>
  delta = ch.vtlist.next->delta - nowdelta;
 8001e8c:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001e8e:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001e90:	bf98      	it	ls
 8001e92:	1c94      	addls	r4, r2, #2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8001e94:	4420      	add	r0, r4
}
 8001e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9a:	f7ff bfb9 	b.w	8001e10 <stSetAlarm>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8001e9e:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <chVTDoResetI+0x80>)
 8001ea0:	f7fe fe1e 	bl	8000ae0 <chSysHalt>
  STM32_ST_TIM->DIER = 0;
 8001ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea8:	60dc      	str	r4, [r3, #12]
}
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	200011b0 	.word	0x200011b0
 8001eb0:	0800b494 	.word	0x0800b494
	...

08001ec0 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	4617      	mov	r7, r2
 8001eca:	461d      	mov	r5, r3
  chDbgCheckClassI();
 8001ecc:	f7fe fe48 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001ed0:	b374      	cbz	r4, 8001f30 <chVTDoSetI+0x70>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001ed2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001f78 <chVTDoSetI+0xb8>
  vtp->par = par;
 8001ed6:	6135      	str	r5, [r6, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001ed8:	4643      	mov	r3, r8
 8001eda:	2c02      	cmp	r4, #2
 8001edc:	f853 5f1c 	ldr.w	r5, [r3, #28]!
  vtp->func = vtfunc;
 8001ee0:	60f7      	str	r7, [r6, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8001ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee6:	bf38      	it	cc
 8001ee8:	2402      	movcc	r4, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001eea:	429d      	cmp	r5, r3
 8001eec:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001eee:	d026      	beq.n	8001f3e <chVTDoSetI+0x7e>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8001ef0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8001ef4:	68ab      	ldr	r3, [r5, #8]
 8001ef6:	1a09      	subs	r1, r1, r0
 8001ef8:	1864      	adds	r4, r4, r1
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001efa:	d21c      	bcs.n	8001f36 <chVTDoSetI+0x76>
    else if (delta < p->delta) {
 8001efc:	42a3      	cmp	r3, r4
 8001efe:	d82f      	bhi.n	8001f60 <chVTDoSetI+0xa0>
  while (p->delta < delta) {
 8001f00:	429c      	cmp	r4, r3
 8001f02:	d906      	bls.n	8001f12 <chVTDoSetI+0x52>
    chDbgAssert(p != vtp, "timer already armed");
 8001f04:	42ae      	cmp	r6, r5
 8001f06:	d013      	beq.n	8001f30 <chVTDoSetI+0x70>
    p = p->next;
 8001f08:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8001f0a:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 8001f0c:	68ab      	ldr	r3, [r5, #8]
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	d3f8      	bcc.n	8001f04 <chVTDoSetI+0x44>
  vtp->prev = vtp->next->prev;
 8001f12:	686b      	ldr	r3, [r5, #4]
 8001f14:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 8001f18:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 8001f1a:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 8001f1c:	60b4      	str	r4, [r6, #8]
  p->delta -= delta;
 8001f1e:	68ab      	ldr	r3, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8001f24:	1b1c      	subs	r4, r3, r4
 8001f26:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001f28:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
}
 8001f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001f30:	480f      	ldr	r0, [pc, #60]	; (8001f70 <chVTDoSetI+0xb0>)
 8001f32:	f7fe fdd5 	bl	8000ae0 <chSysHalt>
      p = p->next;
 8001f36:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8001f38:	1ae4      	subs	r4, r4, r3
 8001f3a:	68ab      	ldr	r3, [r5, #8]
 8001f3c:	e7e0      	b.n	8001f00 <chVTDoSetI+0x40>
      ch.vtlist.lasttime = now;
 8001f3e:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
      ch.vtlist.prev = vtp;
 8001f42:	e9c8 6607 	strd	r6, r6, [r8, #28]
      vtp->delta = delay;
 8001f46:	60b4      	str	r4, [r6, #8]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001f48:	68d3      	ldr	r3, [r2, #12]
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8001f4a:	f013 0302 	ands.w	r3, r3, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001f4e:	e9c6 5500 	strd	r5, r5, [r6]
 8001f52:	d10a      	bne.n	8001f6a <chVTDoSetI+0xaa>
  return systime + (systime_t)interval;
 8001f54:	440c      	add	r4, r1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f56:	2102      	movs	r1, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f58:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001f5a:	6113      	str	r3, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f5c:	60d1      	str	r1, [r2, #12]
 8001f5e:	e7e5      	b.n	8001f2c <chVTDoSetI+0x6c>
 8001f60:	4420      	add	r0, r4
 8001f62:	f7ff ff55 	bl	8001e10 <stSetAlarm>
 8001f66:	68ab      	ldr	r3, [r5, #8]
 8001f68:	e7ca      	b.n	8001f00 <chVTDoSetI+0x40>
 8001f6a:	4802      	ldr	r0, [pc, #8]	; (8001f74 <chVTDoSetI+0xb4>)
 8001f6c:	f7fe fdb8 	bl	8000ae0 <chSysHalt>
 8001f70:	0800b414 	.word	0x0800b414
 8001f74:	0800b6a8 	.word	0x0800b6a8
 8001f78:	200011b0 	.word	0x200011b0
 8001f7c:	00000000 	.word	0x00000000

08001f80 <chCondSignalI.constprop.49>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8001f80:	b510      	push	{r4, lr}

  chDbgCheckClassI();
 8001f82:	f7fe fded 	bl	8000b60 <chDbgCheckClassI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <chCondSignalI.constprop.49+0x24>)
 8001f88:	681a      	ldr	r2, [r3, #0]
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->queue)) {
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d009      	beq.n	8001fa2 <chCondSignalI.constprop.49+0x22>
  tqp->next             = tp->queue.next;
 8001f8e:	6811      	ldr	r1, [r2, #0]
 8001f90:	6019      	str	r1, [r3, #0]
    thread_t *tp = queue_fifo_remove(&cp->queue);
    tp->u.rdymsg = MSG_OK;
 8001f92:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8001f94:	604b      	str	r3, [r1, #4]
    (void) chSchReadyI(tp);
 8001f96:	4610      	mov	r0, r2
    tp->u.rdymsg = MSG_OK;
 8001f98:	6254      	str	r4, [r2, #36]	; 0x24
  }
}
 8001f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void) chSchReadyI(tp);
 8001f9e:	f7fe be8f 	b.w	8000cc0 <chSchReadyI>
}
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	20000c04 	.word	0x20000c04
	...

08001fb0 <chMBResetI.constprop.29>:
void chMBResetI(mailbox_t *mbp) {
 8001fb0:	b510      	push	{r4, lr}
  mbp->wrptr = mbp->buffer;
 8001fb2:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <chMBResetI.constprop.29+0x2c>)
  chDbgCheckClassI();
 8001fb4:	f7fe fdd4 	bl	8000b60 <chDbgCheckClassI>
  mbp->wrptr = mbp->buffer;
 8001fb8:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8001fba:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8001fbe:	2100      	movs	r1, #0
  mbp->reset = true;
 8001fc0:	2201      	movs	r2, #1
  mbp->cnt   = (size_t)0;
 8001fc2:	6121      	str	r1, [r4, #16]
  mbp->reset = true;
 8001fc4:	7522      	strb	r2, [r4, #20]
  mbp->rdptr = mbp->buffer;
 8001fc6:	e9c4 3302 	strd	r3, r3, [r4, #8]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8001fca:	f7fe fee1 	bl	8000d90 <chThdDequeueAllI.constprop.91>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8001fce:	f104 0020 	add.w	r0, r4, #32
}
 8001fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8001fd6:	f7fe bedb 	b.w	8000d90 <chThdDequeueAllI.constprop.91>
 8001fda:	bf00      	nop
 8001fdc:	20000c58 	.word	0x20000c58

08001fe0 <chMBPostI.constprop.25>:
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mbp->reset) {
 8001fe2:	4c13      	ldr	r4, [pc, #76]	; (8002030 <chMBPostI.constprop.25+0x50>)
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8001fe4:	4607      	mov	r7, r0
  chDbgCheckClassI();
 8001fe6:	f7fe fdbb 	bl	8000b60 <chDbgCheckClassI>
  if (mbp->reset) {
 8001fea:	7d23      	ldrb	r3, [r4, #20]
 8001fec:	b9cb      	cbnz	r3, 8002022 <chMBPostI.constprop.25+0x42>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8001fee:	f7fe fdb7 	bl	8000b60 <chDbgCheckClassI>
 8001ff2:	e9d4 6500 	ldrd	r6, r5, [r4]
  chDbgCheckClassI();
 8001ff6:	f7fe fdb3 	bl	8000b60 <chDbgCheckClassI>
  return mbp->cnt;
 8001ffa:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8001ffc:	1baa      	subs	r2, r5, r6
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8001ffe:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8002002:	d011      	beq.n	8002028 <chMBPostI.constprop.25+0x48>
    *mbp->wrptr++ = msg;
 8002004:	68a1      	ldr	r1, [r4, #8]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002006:	480b      	ldr	r0, [pc, #44]	; (8002034 <chMBPostI.constprop.25+0x54>)
    *mbp->wrptr++ = msg;
 8002008:	1d0a      	adds	r2, r1, #4
 800200a:	60a2      	str	r2, [r4, #8]
    if (mbp->wrptr >= mbp->top) {
 800200c:	4295      	cmp	r5, r2
    *mbp->wrptr++ = msg;
 800200e:	600f      	str	r7, [r1, #0]
    mbp->cnt++;
 8002010:	f103 0301 	add.w	r3, r3, #1
      mbp->wrptr = mbp->buffer;
 8002014:	bf98      	it	ls
 8002016:	60a6      	strls	r6, [r4, #8]
    mbp->cnt++;
 8002018:	6123      	str	r3, [r4, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800201a:	f7fe fe79 	bl	8000d10 <chThdDequeueNextI.constprop.89>
    return MSG_OK;
 800201e:	2000      	movs	r0, #0
}
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_RESET;
 8002022:	f06f 0001 	mvn.w	r0, #1
}
 8002026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return MSG_TIMEOUT;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
}
 800202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202e:	bf00      	nop
 8002030:	20000c58 	.word	0x20000c58
 8002034:	20000c78 	.word	0x20000c78
	...

08002040 <chMBPostAheadI.constprop.22>:
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (mbp->reset) {
 8002042:	4c12      	ldr	r4, [pc, #72]	; (800208c <chMBPostAheadI.constprop.22+0x4c>)
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8002044:	4607      	mov	r7, r0
  chDbgCheckClassI();
 8002046:	f7fe fd8b 	bl	8000b60 <chDbgCheckClassI>
  if (mbp->reset) {
 800204a:	7d23      	ldrb	r3, [r4, #20]
 800204c:	b9c3      	cbnz	r3, 8002080 <chMBPostAheadI.constprop.22+0x40>
  chDbgCheckClassI();
 800204e:	f7fe fd87 	bl	8000b60 <chDbgCheckClassI>
 8002052:	e9d4 5600 	ldrd	r5, r6, [r4]
  chDbgCheckClassI();
 8002056:	f7fe fd83 	bl	8000b60 <chDbgCheckClassI>
  return mbp->cnt;
 800205a:	6922      	ldr	r2, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800205c:	1b73      	subs	r3, r6, r5
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800205e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8002062:	d010      	beq.n	8002086 <chMBPostAheadI.constprop.22+0x46>
    if (--mbp->rdptr < mbp->buffer) {
 8002064:	68e3      	ldr	r3, [r4, #12]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002066:	480a      	ldr	r0, [pc, #40]	; (8002090 <chMBPostAheadI.constprop.22+0x50>)
    if (--mbp->rdptr < mbp->buffer) {
 8002068:	3b04      	subs	r3, #4
 800206a:	429d      	cmp	r5, r3
      mbp->rdptr = mbp->top - 1;
 800206c:	bf88      	it	hi
 800206e:	1f33      	subhi	r3, r6, #4
 8002070:	60e3      	str	r3, [r4, #12]
    mbp->cnt++;
 8002072:	3201      	adds	r2, #1
    *mbp->rdptr = msg;
 8002074:	601f      	str	r7, [r3, #0]
    mbp->cnt++;
 8002076:	6122      	str	r2, [r4, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8002078:	f7fe fe4a 	bl	8000d10 <chThdDequeueNextI.constprop.89>
    return MSG_OK;
 800207c:	2000      	movs	r0, #0
}
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return MSG_RESET;
 8002080:	f06f 0001 	mvn.w	r0, #1
}
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return MSG_TIMEOUT;
 8002086:	f04f 30ff 	mov.w	r0, #4294967295
}
 800208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800208c:	20000c58 	.word	0x20000c58
 8002090:	20000c78 	.word	0x20000c78
	...

080020a0 <rt_test_009_001_setup>:
 * @param[in] size      heap size
 *
 * @init
 */
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <rt_test_009_001_setup+0x30>)
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <rt_test_009_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80020a4:	1dd9      	adds	r1, r3, #7
 80020a6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80020aa:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80020ac:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
 *   freeing memory.
 * - [9.1.7] Getting heap info again for verification.
 * .
 */

static void rt_test_009_001_setup(void) {
 80020b0:	b410      	push	{r4}
  heapp->provider = NULL;
 80020b2:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 80020b4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80020bc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80020be:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 80020c0:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 80020c4:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 80020c6:	6090      	str	r0, [r2, #8]
  mp->owner = NULL;
 80020c8:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 80020ca:	bc10      	pop	{r4}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20001c40 	.word	0x20001c40
 80020d4:	20001bc4 	.word	0x20001bc4
	...

080020e0 <oslib_test_003_001_setup>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <oslib_test_003_001_setup+0x30>)
  heapp->provider = NULL;
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <oslib_test_003_001_setup+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 80020e4:	1dd9      	adds	r1, r3, #7
 80020e6:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 80020ea:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80020ec:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 * - [3.1.10] Testing final conditions. The heap geometry must be the
 *   same than the one registered at beginning.
 * .
 */

static void oslib_test_003_001_setup(void) {
 80020f0:	b410      	push	{r4}
  heapp->provider = NULL;
 80020f2:	2000      	movs	r0, #0
  tqp->next = (thread_t *)tqp;
 80020f4:	f102 040c 	add.w	r4, r2, #12
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	604b      	str	r3, [r1, #4]
  H_NEXT(&heapp->header) = hp;
 80020fc:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 80020fe:	6008      	str	r0, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8002100:	e9c2 4403 	strd	r4, r4, [r2, #12]
  heapp->provider = NULL;
 8002104:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8002106:	6090      	str	r0, [r2, #8]
 8002108:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 800210a:	bc10      	pop	{r4}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	200022d0 	.word	0x200022d0
 8002114:	200022b4 	.word	0x200022b4
	...

08002120 <oslib_test_002_001_setup>:
  mp->next = NULL;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <oslib_test_002_001_setup+0x10>)
 8002122:	2100      	movs	r1, #0
  mp->object_size = size;
 8002124:	2204      	movs	r2, #4
  mp->next = NULL;
 8002126:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 8002128:	60d9      	str	r1, [r3, #12]
  mp->align = align;
 800212a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
 800212e:	4770      	bx	lr
 8002130:	20000c80 	.word	0x20000c80
	...

08002140 <oslib_test_001_003_setup>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 8002140:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <oslib_test_001_003_setup+0x2c>)
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <oslib_test_001_003_setup+0x30>)
 8002146:	601a      	str	r2, [r3, #0]
  mbp->top    = &buf[n];
 8002148:	f102 0510 	add.w	r5, r2, #16
  tqp->next = (thread_t *)tqp;
 800214c:	f103 0418 	add.w	r4, r3, #24
  mbp->cnt    = (size_t)0;
 8002150:	2100      	movs	r1, #0
 8002152:	f103 0020 	add.w	r0, r3, #32
  mbp->top    = &buf[n];
 8002156:	605d      	str	r5, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8002158:	e9c3 4406 	strd	r4, r4, [r3, #24]
  mbp->wrptr  = buf;
 800215c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8002160:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8002164:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8002166:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 8002168:	bc30      	pop	{r4, r5}
 800216a:	4770      	bx	lr
 800216c:	20000c58 	.word	0x20000c58
 8002170:	20001be0 	.word	0x20001be0
	...

08002180 <oslib_test_001_002_setup>:
 8002180:	f7ff bfde 	b.w	8002140 <oslib_test_001_003_setup>
	...

08002190 <oslib_test_001_001_setup>:
 8002190:	f7ff bfd6 	b.w	8002140 <oslib_test_001_003_setup>
	...

080021a0 <rt_test_010_012_execute>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 80021a0:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80021a2:	4d34      	ldr	r5, [pc, #208]	; (8002274 <rt_test_010_012_execute+0xd4>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80021a4:	4c34      	ldr	r4, [pc, #208]	; (8002278 <rt_test_010_012_execute+0xd8>)
    test_print("--- System: ");
 80021a6:	4835      	ldr	r0, [pc, #212]	; (800227c <rt_test_010_012_execute+0xdc>)
  test_set_step(1);
 80021a8:	2301      	movs	r3, #1
 80021aa:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80021ac:	f7fe fb60 	bl	8000870 <test_print>
 80021b0:	f640 0088 	movw	r0, #2184	; 0x888
 80021b4:	f7fe fafc 	bl	80007b0 <test_printn.part.0>
    test_println(" bytes");
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7fe fb39 	bl	8000830 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80021be:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80021c0:	482f      	ldr	r0, [pc, #188]	; (8002280 <rt_test_010_012_execute+0xe0>)
  test_set_step(2);
 80021c2:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80021c4:	f7fe fb54 	bl	8000870 <test_print>
 80021c8:	2044      	movs	r0, #68	; 0x44
 80021ca:	f7fe faf1 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7fe fb2e 	bl	8000830 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80021d4:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 80021d6:	482b      	ldr	r0, [pc, #172]	; (8002284 <rt_test_010_012_execute+0xe4>)
  test_set_step(3);
 80021d8:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80021da:	f7fe fb49 	bl	8000870 <test_print>
 80021de:	2014      	movs	r0, #20
 80021e0:	f7fe fae6 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(virtual_timer_t));
    test_println(" bytes");
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7fe fb23 	bl	8000830 <test_println>
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80021ea:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80021ec:	4826      	ldr	r0, [pc, #152]	; (8002288 <rt_test_010_012_execute+0xe8>)
  test_set_step(4);
 80021ee:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80021f0:	f7fe fb3e 	bl	8000870 <test_print>
 80021f4:	200c      	movs	r0, #12
 80021f6:	f7fe fadb 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7fe fb18 	bl	8000830 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8002200:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8002202:	4822      	ldr	r0, [pc, #136]	; (800228c <rt_test_010_012_execute+0xec>)
  test_set_step(5);
 8002204:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8002206:	f7fe fb33 	bl	8000870 <test_print>
 800220a:	2010      	movs	r0, #16
 800220c:	f7fe fad0 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8002210:	4620      	mov	r0, r4
 8002212:	f7fe fb0d 	bl	8000830 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8002216:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8002218:	481d      	ldr	r0, [pc, #116]	; (8002290 <rt_test_010_012_execute+0xf0>)
  test_set_step(6);
 800221a:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800221c:	f7fe fb28 	bl	8000870 <test_print>
 8002220:	2008      	movs	r0, #8
 8002222:	f7fe fac5 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8002226:	4620      	mov	r0, r4
 8002228:	f7fe fb02 	bl	8000830 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800222c:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <rt_test_010_012_execute+0xf4>)
  test_set_step(7);
 8002230:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8002232:	f7fe fb1d 	bl	8000870 <test_print>
 8002236:	4630      	mov	r0, r6
 8002238:	f7fe faba 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 800223c:	4620      	mov	r0, r4
 800223e:	f7fe faf7 	bl	8000830 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8002242:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8002244:	4814      	ldr	r0, [pc, #80]	; (8002298 <rt_test_010_012_execute+0xf8>)
  test_set_step(8);
 8002246:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8002248:	f7fe fb12 	bl	8000870 <test_print>
 800224c:	2014      	movs	r0, #20
 800224e:	f7fe faaf 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8002252:	4620      	mov	r0, r4
 8002254:	f7fe faec 	bl	8000830 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8002258:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 800225a:	4810      	ldr	r0, [pc, #64]	; (800229c <rt_test_010_012_execute+0xfc>)
  test_set_step(9);
 800225c:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800225e:	f7fe fb07 	bl	8000870 <test_print>
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f7fe faa4 	bl	80007b0 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8002268:	4620      	mov	r0, r4
#endif
  }
}
 800226a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800226e:	f7fe badf 	b.w	8000830 <test_println>
 8002272:	bf00      	nop
 8002274:	20002354 	.word	0x20002354
 8002278:	0800d164 	.word	0x0800d164
 800227c:	0800d154 	.word	0x0800d154
 8002280:	0800d16c 	.word	0x0800d16c
 8002284:	0800d17c 	.word	0x0800d17c
 8002288:	0800d18c 	.word	0x0800d18c
 800228c:	0800d19c 	.word	0x0800d19c
 8002290:	0800d1ac 	.word	0x0800d1ac
 8002294:	0800d1bc 	.word	0x0800d1bc
 8002298:	0800d1cc 	.word	0x0800d1cc
 800229c:	0800d1dc 	.word	0x0800d1dc

080022a0 <rt_test_010_011_setup>:
  tqp->next = (thread_t *)tqp;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <rt_test_010_011_setup+0xc>)
 80022a2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80022a4:	e9c3 3300 	strd	r3, r3, [r3]
 80022a8:	609a      	str	r2, [r3, #8]
}
 80022aa:	4770      	bx	lr
 80022ac:	20001c00 	.word	0x20001c00

080022b0 <rt_test_010_010_setup>:
  tqp->next = (thread_t *)tqp;
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <rt_test_010_010_setup+0xc>)
  sp->cnt = n;
 80022b2:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 80022b4:	e9c3 3300 	strd	r3, r3, [r3]
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	4770      	bx	lr
 80022bc:	20001c2c 	.word	0x20001c2c

080022c0 <rt_test_010_007_setup>:
  tqp->next = (thread_t *)tqp;
 80022c0:	4b02      	ldr	r3, [pc, #8]	; (80022cc <rt_test_010_007_setup+0xc>)
 80022c2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80022c4:	e9c3 3300 	strd	r3, r3, [r3]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	4770      	bx	lr
 80022cc:	20001c2c 	.word	0x20001c2c

080022d0 <rt_test_009_002_setup>:
  mp->next = NULL;
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <rt_test_009_002_setup+0x14>)
 80022d2:	2200      	movs	r2, #0
  mp->object_size = size;
 80022d4:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 80022d8:	2104      	movs	r1, #4
 80022da:	e9c3 0101 	strd	r0, r1, [r3, #4]
  mp->next = NULL;
 80022de:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 80022e0:	60da      	str	r2, [r3, #12]
 * .
 */

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 80022e2:	4770      	bx	lr
 80022e4:	20001bf0 	.word	0x20001bf0
	...

080022f0 <rt_test_008_002_execute>:

static void rt_test_008_002_execute(void) {

  /* [8.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 80022f0:	4a10      	ldr	r2, [pc, #64]	; (8002334 <rt_test_008_002_execute+0x44>)
static void rt_test_008_002_execute(void) {
 80022f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80022f4:	2601      	movs	r6, #1
 80022f6:	4f10      	ldr	r7, [pc, #64]	; (8002338 <rt_test_008_002_execute+0x48>)
 80022f8:	6016      	str	r6, [r2, #0]
 80022fa:	2507      	movs	r5, #7
 80022fc:	2400      	movs	r4, #0

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80022fe:	fa25 f304 	lsr.w	r3, r5, r4
 8002302:	07db      	lsls	r3, r3, #31
 8002304:	d511      	bpl.n	800232a <rt_test_008_002_execute+0x3a>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 8002306:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800230a:	b183      	cbz	r3, 800232e <rt_test_008_002_execute+0x3e>
      events &= ~EVENT_MASK(eid);
 800230c:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8002310:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 8002312:	ea25 0502 	bic.w	r5, r5, r2
    }
    eid++;
 8002316:	3401      	adds	r4, #1
      handlers[eid](eid);
 8002318:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 800231a:	2d00      	cmp	r5, #0
 800231c:	d1ef      	bne.n	80022fe <rt_test_008_002_execute+0xe>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
 800231e:	4907      	ldr	r1, [pc, #28]	; (800233c <rt_test_008_002_execute+0x4c>)
 8002320:	4807      	ldr	r0, [pc, #28]	; (8002340 <rt_test_008_002_execute+0x50>)
  }
}
 8002322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8002326:	f7fe babb 	b.w	80008a0 <_test_assert_sequence>
    eid++;
 800232a:	3401      	adds	r4, #1
 800232c:	e7e7      	b.n	80022fe <rt_test_008_002_execute+0xe>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <rt_test_008_002_execute+0x54>)
 8002330:	f7fe fbd6 	bl	8000ae0 <chSysHalt>
 8002334:	20002354 	.word	0x20002354
 8002338:	0800bbec 	.word	0x0800bbec
 800233c:	0800ce4c 	.word	0x0800ce4c
 8002340:	0800ce60 	.word	0x0800ce60
 8002344:	0800b5f8 	.word	0x0800b5f8
	...

08002350 <rt_test_006_009_setup>:
  tqp->next = (thread_t *)tqp;
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <rt_test_006_009_setup+0x1c>)
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <rt_test_006_009_setup+0x20>)
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <rt_test_006_009_setup+0x24>)
 8002356:	6009      	str	r1, [r1, #0]
 8002358:	2000      	movs	r0, #0
  tqp->prev = (thread_t *)tqp;
 800235a:	6049      	str	r1, [r1, #4]
 800235c:	e9c2 2200 	strd	r2, r2, [r2]
 8002360:	6090      	str	r0, [r2, #8]
 8002362:	6098      	str	r0, [r3, #8]
 8002364:	e9c3 3300 	strd	r3, r3, [r3]

static void rt_test_006_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000c04 	.word	0x20000c04
 8002370:	20000c38 	.word	0x20000c38
 8002374:	20000c48 	.word	0x20000c48
	...

08002380 <rt_test_006_008_setup>:
  tqp->next = (thread_t *)tqp;
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <rt_test_006_008_setup+0x14>)
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <rt_test_006_008_setup+0x18>)
 8002384:	6012      	str	r2, [r2, #0]
 8002386:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8002388:	6052      	str	r2, [r2, #4]
 800238a:	e9c3 3300 	strd	r3, r3, [r3]
 800238e:	6099      	str	r1, [r3, #8]
}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000c04 	.word	0x20000c04
 8002398:	20000c38 	.word	0x20000c38
 800239c:	00000000 	.word	0x00000000

080023a0 <rt_test_006_007_setup>:
 80023a0:	f7ff bfee 	b.w	8002380 <rt_test_006_008_setup>
	...

080023b0 <rt_test_006_005_setup>:
  tqp->next = (thread_t *)tqp;
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <rt_test_006_005_setup+0xc>)
 80023b2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80023b4:	e9c3 3300 	strd	r3, r3, [r3]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	4770      	bx	lr
 80023bc:	20000c38 	.word	0x20000c38

080023c0 <rt_test_006_001_setup>:
 80023c0:	f7ff bff6 	b.w	80023b0 <rt_test_006_005_setup>
	...

080023d0 <rt_test_006_004_setup>:
  tqp->next = (thread_t *)tqp;
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <rt_test_006_004_setup+0x14>)
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <rt_test_006_004_setup+0x18>)
 80023d4:	6012      	str	r2, [r2, #0]
 80023d6:	2100      	movs	r1, #0
 80023d8:	e9c2 2101 	strd	r2, r1, [r2, #4]
 80023dc:	6099      	str	r1, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80023de:	e9c3 3300 	strd	r3, r3, [r3]
}
 80023e2:	4770      	bx	lr
 80023e4:	20000c38 	.word	0x20000c38
 80023e8:	20000c48 	.word	0x20000c48
 80023ec:	00000000 	.word	0x00000000

080023f0 <rt_test_005_005_setup>:
  tqp->next = (thread_t *)tqp;
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <rt_test_005_005_setup+0xc>)
 80023f2:	2200      	movs	r2, #0
  tqp->prev = (thread_t *)tqp;
 80023f4:	e9c3 3300 	strd	r3, r3, [r3]
 80023f8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_005_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80023fa:	4770      	bx	lr
 80023fc:	20001c20 	.word	0x20001c20

08002400 <rt_test_005_004_setup>:
 8002400:	f7ff bff6 	b.w	80023f0 <rt_test_005_005_setup>
	...

08002410 <rt_test_005_003_setup>:
 8002410:	f7ff bfee 	b.w	80023f0 <rt_test_005_005_setup>
	...

08002420 <rt_test_005_002_setup>:
 8002420:	f7ff bfe6 	b.w	80023f0 <rt_test_005_005_setup>
	...

08002430 <rt_test_005_001_setup>:
  tqp->next = (thread_t *)tqp;
 8002430:	4b02      	ldr	r3, [pc, #8]	; (800243c <rt_test_005_001_setup+0xc>)
 8002432:	2201      	movs	r2, #1
  tqp->prev = (thread_t *)tqp;
 8002434:	e9c3 3300 	strd	r3, r3, [r3]
 8002438:	609a      	str	r2, [r3, #8]
}
 800243a:	4770      	bx	lr
 800243c:	20001c20 	.word	0x20001c20

08002440 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8002440:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8002442:	4bc9      	ldr	r3, [pc, #804]	; (8002768 <rt_test_001_003_execute+0x328>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8002444:	4cc9      	ldr	r4, [pc, #804]	; (800276c <rt_test_001_003_execute+0x32c>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8002446:	48ca      	ldr	r0, [pc, #808]	; (8002770 <rt_test_001_003_execute+0x330>)
  test_set_step(1);
 8002448:	2501      	movs	r5, #1
 800244a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 800244c:	f7fe fa10 	bl	8000870 <test_print>
 8002450:	2020      	movs	r0, #32
 8002452:	f7fe f9ad 	bl	80007b0 <test_printn.part.0>
    test_println("");
 8002456:	4620      	mov	r0, r4
 8002458:	f7fe f9ea 	bl	8000830 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 800245c:	48c5      	ldr	r0, [pc, #788]	; (8002774 <rt_test_001_003_execute+0x334>)
 800245e:	f7fe fa07 	bl	8000870 <test_print>
 8002462:	f242 7010 	movw	r0, #10000	; 0x2710
 8002466:	f7fe f9a3 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 800246a:	4620      	mov	r0, r4
 800246c:	f7fe f9e0 	bl	8000830 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8002470:	48c1      	ldr	r0, [pc, #772]	; (8002778 <rt_test_001_003_execute+0x338>)
 8002472:	f7fe f9fd 	bl	8000870 <test_print>
 8002476:	2020      	movs	r0, #32
 8002478:	f7fe f99a 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 800247c:	4620      	mov	r0, r4
 800247e:	f7fe f9d7 	bl	8000830 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8002482:	48be      	ldr	r0, [pc, #760]	; (800277c <rt_test_001_003_execute+0x33c>)
 8002484:	f7fe f9f4 	bl	8000870 <test_print>
 8002488:	2020      	movs	r0, #32
 800248a:	f7fe f991 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 800248e:	4620      	mov	r0, r4
 8002490:	f7fe f9ce 	bl	8000830 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8002494:	48ba      	ldr	r0, [pc, #744]	; (8002780 <rt_test_001_003_execute+0x340>)
 8002496:	f7fe f9eb 	bl	8000870 <test_print>
 800249a:	2002      	movs	r0, #2
 800249c:	f7fe f988 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7fe f9c5 	bl	8000830 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 80024a6:	48b7      	ldr	r0, [pc, #732]	; (8002784 <rt_test_001_003_execute+0x344>)
 80024a8:	f7fe f9e2 	bl	8000870 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe f9af 	bl	8000810 <test_printn>
    test_println("");
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7fe f9bc 	bl	8000830 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 80024b8:	48b3      	ldr	r0, [pc, #716]	; (8002788 <rt_test_001_003_execute+0x348>)
 80024ba:	f7fe f9d9 	bl	8000870 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe f9a6 	bl	8000810 <test_printn>
    test_println("");
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe f9b3 	bl	8000830 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 80024ca:	48b0      	ldr	r0, [pc, #704]	; (800278c <rt_test_001_003_execute+0x34c>)
 80024cc:	f7fe f9d0 	bl	8000870 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe f99d 	bl	8000810 <test_printn>
    test_println("");
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7fe f9aa 	bl	8000830 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 80024dc:	48ac      	ldr	r0, [pc, #688]	; (8002790 <rt_test_001_003_execute+0x350>)
 80024de:	f7fe f9c7 	bl	8000870 <test_print>
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe f964 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7fe f9a1 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 80024ee:	48a9      	ldr	r0, [pc, #676]	; (8002794 <rt_test_001_003_execute+0x354>)
 80024f0:	f7fe f9be 	bl	8000870 <test_print>
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7fe f95b 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fe f998 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8002500:	48a5      	ldr	r0, [pc, #660]	; (8002798 <rt_test_001_003_execute+0x358>)
 8002502:	f7fe f9b5 	bl	8000870 <test_print>
 8002506:	4628      	mov	r0, r5
 8002508:	f7fe f952 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 800250c:	4620      	mov	r0, r4
 800250e:	f7fe f98f 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8002512:	48a2      	ldr	r0, [pc, #648]	; (800279c <rt_test_001_003_execute+0x35c>)
 8002514:	f7fe f9ac 	bl	8000870 <test_print>
 8002518:	4628      	mov	r0, r5
 800251a:	f7fe f949 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 800251e:	4620      	mov	r0, r4
 8002520:	f7fe f986 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8002524:	489e      	ldr	r0, [pc, #632]	; (80027a0 <rt_test_001_003_execute+0x360>)
 8002526:	f7fe f9a3 	bl	8000870 <test_print>
 800252a:	4628      	mov	r0, r5
 800252c:	f7fe f940 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8002530:	4620      	mov	r0, r4
 8002532:	f7fe f97d 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
 8002536:	489b      	ldr	r0, [pc, #620]	; (80027a4 <rt_test_001_003_execute+0x364>)
 8002538:	f7fe f99a 	bl	8000870 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe f967 	bl	8000810 <test_printn>
    test_println("");
 8002542:	4620      	mov	r0, r4
 8002544:	f7fe f974 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8002548:	4897      	ldr	r0, [pc, #604]	; (80027a8 <rt_test_001_003_execute+0x368>)
 800254a:	f7fe f991 	bl	8000870 <test_print>
 800254e:	4628      	mov	r0, r5
 8002550:	f7fe f92e 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8002554:	4620      	mov	r0, r4
 8002556:	f7fe f96b 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
 800255a:	4894      	ldr	r0, [pc, #592]	; (80027ac <rt_test_001_003_execute+0x36c>)
 800255c:	f7fe f988 	bl	8000870 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe f955 	bl	8000810 <test_printn>
    test_println("");   
 8002566:	4620      	mov	r0, r4
 8002568:	f7fe f962 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 800256c:	4890      	ldr	r0, [pc, #576]	; (80027b0 <rt_test_001_003_execute+0x370>)
 800256e:	f7fe f97f 	bl	8000870 <test_print>
 8002572:	4628      	mov	r0, r5
 8002574:	f7fe f91c 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8002578:	4620      	mov	r0, r4
 800257a:	f7fe f959 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
 800257e:	488d      	ldr	r0, [pc, #564]	; (80027b4 <rt_test_001_003_execute+0x374>)
 8002580:	f7fe f976 	bl	8000870 <test_print>
 8002584:	4628      	mov	r0, r5
 8002586:	f7fe f913 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 800258a:	4620      	mov	r0, r4
 800258c:	f7fe f950 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8002590:	4889      	ldr	r0, [pc, #548]	; (80027b8 <rt_test_001_003_execute+0x378>)
 8002592:	f7fe f96d 	bl	8000870 <test_print>
 8002596:	4628      	mov	r0, r5
 8002598:	f7fe f90a 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 800259c:	4620      	mov	r0, r4
 800259e:	f7fe f947 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 80025a2:	4886      	ldr	r0, [pc, #536]	; (80027bc <rt_test_001_003_execute+0x37c>)
 80025a4:	f7fe f964 	bl	8000870 <test_print>
 80025a8:	4628      	mov	r0, r5
 80025aa:	f7fe f901 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7fe f93e 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 80025b4:	4882      	ldr	r0, [pc, #520]	; (80027c0 <rt_test_001_003_execute+0x380>)
 80025b6:	f7fe f95b 	bl	8000870 <test_print>
 80025ba:	4628      	mov	r0, r5
 80025bc:	f7fe f8f8 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7fe f935 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
 80025c6:	487f      	ldr	r0, [pc, #508]	; (80027c4 <rt_test_001_003_execute+0x384>)
 80025c8:	f7fe f952 	bl	8000870 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe f91f 	bl	8000810 <test_printn>
    test_println("");
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7fe f92c 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80025d8:	487b      	ldr	r0, [pc, #492]	; (80027c8 <rt_test_001_003_execute+0x388>)
 80025da:	f7fe f949 	bl	8000870 <test_print>
 80025de:	4628      	mov	r0, r5
 80025e0:	f7fe f8e6 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7fe f923 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 80025ea:	4878      	ldr	r0, [pc, #480]	; (80027cc <rt_test_001_003_execute+0x38c>)
 80025ec:	f7fe f940 	bl	8000870 <test_print>
 80025f0:	4628      	mov	r0, r5
 80025f2:	f7fe f8dd 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7fe f91a 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 80025fc:	4874      	ldr	r0, [pc, #464]	; (80027d0 <rt_test_001_003_execute+0x390>)
 80025fe:	f7fe f937 	bl	8000870 <test_print>
 8002602:	4628      	mov	r0, r5
 8002604:	f7fe f8d4 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 8002608:	4620      	mov	r0, r4
 800260a:	f7fe f911 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 800260e:	4871      	ldr	r0, [pc, #452]	; (80027d4 <rt_test_001_003_execute+0x394>)
 8002610:	f7fe f92e 	bl	8000870 <test_print>
 8002614:	4628      	mov	r0, r5
 8002616:	f7fe f8cb 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 800261a:	4620      	mov	r0, r4
 800261c:	f7fe f908 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8002620:	486d      	ldr	r0, [pc, #436]	; (80027d8 <rt_test_001_003_execute+0x398>)
 8002622:	f7fe f925 	bl	8000870 <test_print>
 8002626:	4628      	mov	r0, r5
 8002628:	f7fe f8c2 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 800262c:	4620      	mov	r0, r4
 800262e:	f7fe f8ff 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8002632:	486a      	ldr	r0, [pc, #424]	; (80027dc <rt_test_001_003_execute+0x39c>)
 8002634:	f7fe f91c 	bl	8000870 <test_print>
 8002638:	4628      	mov	r0, r5
 800263a:	f7fe f8b9 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 800263e:	4620      	mov	r0, r4
 8002640:	f7fe f8f6 	bl	8000830 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8002644:	4866      	ldr	r0, [pc, #408]	; (80027e0 <rt_test_001_003_execute+0x3a0>)
 8002646:	f7fe f913 	bl	8000870 <test_print>
 800264a:	4628      	mov	r0, r5
 800264c:	f7fe f8b0 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8002650:	4620      	mov	r0, r4
 8002652:	f7fe f8ed 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8002656:	4863      	ldr	r0, [pc, #396]	; (80027e4 <rt_test_001_003_execute+0x3a4>)
 8002658:	f7fe f90a 	bl	8000870 <test_print>
 800265c:	2008      	movs	r0, #8
 800265e:	f7fe f8a7 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8002662:	4620      	mov	r0, r4
 8002664:	f7fe f8e4 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8002668:	485f      	ldr	r0, [pc, #380]	; (80027e8 <rt_test_001_003_execute+0x3a8>)
 800266a:	f7fe f901 	bl	8000870 <test_print>
 800266e:	4628      	mov	r0, r5
 8002670:	f7fe f89e 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 8002674:	4620      	mov	r0, r4
 8002676:	f7fe f8db 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 800267a:	485c      	ldr	r0, [pc, #368]	; (80027ec <rt_test_001_003_execute+0x3ac>)
 800267c:	f7fe f8f8 	bl	8000870 <test_print>
 8002680:	4628      	mov	r0, r5
 8002682:	f7fe f895 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 8002686:	4620      	mov	r0, r4
 8002688:	f7fe f8d2 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 800268c:	4858      	ldr	r0, [pc, #352]	; (80027f0 <rt_test_001_003_execute+0x3b0>)
 800268e:	f7fe f8ef 	bl	8000870 <test_print>
 8002692:	4628      	mov	r0, r5
 8002694:	f7fe f88c 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 8002698:	4620      	mov	r0, r4
 800269a:	f7fe f8c9 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 800269e:	4855      	ldr	r0, [pc, #340]	; (80027f4 <rt_test_001_003_execute+0x3b4>)
 80026a0:	f7fe f8e6 	bl	8000870 <test_print>
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7fe f883 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 80026aa:	4620      	mov	r0, r4
 80026ac:	f7fe f8c0 	bl	8000830 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 80026b0:	4851      	ldr	r0, [pc, #324]	; (80027f8 <rt_test_001_003_execute+0x3b8>)
 80026b2:	f7fe f8dd 	bl	8000870 <test_print>
 80026b6:	4628      	mov	r0, r5
 80026b8:	f7fe f87a 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 80026bc:	4620      	mov	r0, r4
 80026be:	f7fe f8b7 	bl	8000830 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 80026c2:	484e      	ldr	r0, [pc, #312]	; (80027fc <rt_test_001_003_execute+0x3bc>)
 80026c4:	f7fe f8d4 	bl	8000870 <test_print>
    test_printn(CH_DBG_STATISTICS);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe f8a1 	bl	8000810 <test_printn>
    test_println("");
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7fe f8ae 	bl	8000830 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 80026d4:	484a      	ldr	r0, [pc, #296]	; (8002800 <rt_test_001_003_execute+0x3c0>)
 80026d6:	f7fe f8cb 	bl	8000870 <test_print>
 80026da:	4628      	mov	r0, r5
 80026dc:	f7fe f868 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
    test_println("");
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe f8a5 	bl	8000830 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 80026e6:	4847      	ldr	r0, [pc, #284]	; (8002804 <rt_test_001_003_execute+0x3c4>)
 80026e8:	f7fe f8c2 	bl	8000870 <test_print>
 80026ec:	4628      	mov	r0, r5
 80026ee:	f7fe f85f 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_CHECKS);
    test_println("");
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7fe f89c 	bl	8000830 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 80026f8:	4843      	ldr	r0, [pc, #268]	; (8002808 <rt_test_001_003_execute+0x3c8>)
 80026fa:	f7fe f8b9 	bl	8000870 <test_print>
 80026fe:	4628      	mov	r0, r5
 8002700:	f7fe f856 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_ASSERTS);
    test_println("");
 8002704:	4620      	mov	r0, r4
 8002706:	f7fe f893 	bl	8000830 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 800270a:	4840      	ldr	r0, [pc, #256]	; (800280c <rt_test_001_003_execute+0x3cc>)
 800270c:	f7fe f8b0 	bl	8000870 <test_print>
 8002710:	200f      	movs	r0, #15
 8002712:	f7fe f84d 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8002716:	4620      	mov	r0, r4
 8002718:	f7fe f88a 	bl	8000830 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 800271c:	483c      	ldr	r0, [pc, #240]	; (8002810 <rt_test_001_003_execute+0x3d0>)
 800271e:	f7fe f8a7 	bl	8000870 <test_print>
 8002722:	2080      	movs	r0, #128	; 0x80
 8002724:	f7fe f844 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe f881 	bl	8000830 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 800272e:	4839      	ldr	r0, [pc, #228]	; (8002814 <rt_test_001_003_execute+0x3d4>)
 8002730:	f7fe f89e 	bl	8000870 <test_print>
 8002734:	4628      	mov	r0, r5
 8002736:	f7fe f83b 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
    test_println("");
 800273a:	4620      	mov	r0, r4
 800273c:	f7fe f878 	bl	8000830 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8002740:	4835      	ldr	r0, [pc, #212]	; (8002818 <rt_test_001_003_execute+0x3d8>)
 8002742:	f7fe f895 	bl	8000870 <test_print>
 8002746:	4628      	mov	r0, r5
 8002748:	f7fe f832 	bl	80007b0 <test_printn.part.0>
    test_printn(CH_DBG_FILL_THREADS);
    test_println("");
 800274c:	4620      	mov	r0, r4
 800274e:	f7fe f86f 	bl	8000830 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8002752:	4832      	ldr	r0, [pc, #200]	; (800281c <rt_test_001_003_execute+0x3dc>)
 8002754:	f7fe f88c 	bl	8000870 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe f859 	bl	8000810 <test_printn>
    test_println("");
 800275e:	4620      	mov	r0, r4
  }
}
 8002760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002764:	f7fe b864 	b.w	8000830 <test_println>
 8002768:	20002354 	.word	0x20002354
 800276c:	0800d3c4 	.word	0x0800d3c4
 8002770:	0800c310 	.word	0x0800c310
 8002774:	0800c33c 	.word	0x0800c33c
 8002778:	0800c368 	.word	0x0800c368
 800277c:	0800c394 	.word	0x0800c394
 8002780:	0800c3c0 	.word	0x0800c3c0
 8002784:	0800c3ec 	.word	0x0800c3ec
 8002788:	0800c418 	.word	0x0800c418
 800278c:	0800c444 	.word	0x0800c444
 8002790:	0800c470 	.word	0x0800c470
 8002794:	0800c49c 	.word	0x0800c49c
 8002798:	0800c4c8 	.word	0x0800c4c8
 800279c:	0800c4f4 	.word	0x0800c4f4
 80027a0:	0800c520 	.word	0x0800c520
 80027a4:	0800c54c 	.word	0x0800c54c
 80027a8:	0800c578 	.word	0x0800c578
 80027ac:	0800c5a4 	.word	0x0800c5a4
 80027b0:	0800c5d0 	.word	0x0800c5d0
 80027b4:	0800c5fc 	.word	0x0800c5fc
 80027b8:	0800c628 	.word	0x0800c628
 80027bc:	0800c654 	.word	0x0800c654
 80027c0:	0800c680 	.word	0x0800c680
 80027c4:	0800c6ac 	.word	0x0800c6ac
 80027c8:	0800c6d8 	.word	0x0800c6d8
 80027cc:	0800c704 	.word	0x0800c704
 80027d0:	0800c730 	.word	0x0800c730
 80027d4:	0800c75c 	.word	0x0800c75c
 80027d8:	0800c788 	.word	0x0800c788
 80027dc:	0800c7b4 	.word	0x0800c7b4
 80027e0:	0800c7e0 	.word	0x0800c7e0
 80027e4:	0800c80c 	.word	0x0800c80c
 80027e8:	0800c838 	.word	0x0800c838
 80027ec:	0800c864 	.word	0x0800c864
 80027f0:	0800c890 	.word	0x0800c890
 80027f4:	0800c8bc 	.word	0x0800c8bc
 80027f8:	0800c8e8 	.word	0x0800c8e8
 80027fc:	0800c914 	.word	0x0800c914
 8002800:	0800c940 	.word	0x0800c940
 8002804:	0800c96c 	.word	0x0800c96c
 8002808:	0800c998 	.word	0x0800c998
 800280c:	0800c9c4 	.word	0x0800c9c4
 8002810:	0800c9f0 	.word	0x0800c9f0
 8002814:	0800ca1c 	.word	0x0800ca1c
 8002818:	0800ca48 	.word	0x0800ca48
 800281c:	0800ca74 	.word	0x0800ca74

08002820 <rt_test_001_002_execute>:
  test_set_step(1);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <rt_test_001_002_execute+0x68>)
    test_println("--- Product:                            ChibiOS/RT");
 8002822:	481a      	ldr	r0, [pc, #104]	; (800288c <rt_test_001_002_execute+0x6c>)
static void rt_test_001_002_execute(void) {
 8002824:	b510      	push	{r4, lr}
  test_set_step(1);
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    test_println("");
 800282a:	4c19      	ldr	r4, [pc, #100]	; (8002890 <rt_test_001_002_execute+0x70>)
    test_println("--- Product:                            ChibiOS/RT");
 800282c:	f7fe f800 	bl	8000830 <test_println>
    test_print("--- Stable Flag:                        ");
 8002830:	4818      	ldr	r0, [pc, #96]	; (8002894 <rt_test_001_002_execute+0x74>)
 8002832:	f7fe f81d 	bl	8000870 <test_print>
    test_printn(CH_KERNEL_STABLE);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fd ffea 	bl	8000810 <test_printn>
    test_println("");
 800283c:	4620      	mov	r0, r4
 800283e:	f7fd fff7 	bl	8000830 <test_println>
    test_print("--- Version String:                     ");
 8002842:	4815      	ldr	r0, [pc, #84]	; (8002898 <rt_test_001_002_execute+0x78>)
 8002844:	f7fe f814 	bl	8000870 <test_print>
    test_println(CH_KERNEL_VERSION);
 8002848:	4814      	ldr	r0, [pc, #80]	; (800289c <rt_test_001_002_execute+0x7c>)
 800284a:	f7fd fff1 	bl	8000830 <test_println>
    test_print("--- Major Number:                       ");
 800284e:	4814      	ldr	r0, [pc, #80]	; (80028a0 <rt_test_001_002_execute+0x80>)
 8002850:	f7fe f80e 	bl	8000870 <test_print>
 8002854:	2005      	movs	r0, #5
 8002856:	f7fd ffab 	bl	80007b0 <test_printn.part.0>
    test_println("");
 800285a:	4620      	mov	r0, r4
 800285c:	f7fd ffe8 	bl	8000830 <test_println>
    test_print("--- Minor Number:                       ");
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <rt_test_001_002_execute+0x84>)
 8002862:	f7fe f805 	bl	8000870 <test_print>
    test_printn(CH_KERNEL_MINOR);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fd ffd2 	bl	8000810 <test_printn>
    test_println("");
 800286c:	4620      	mov	r0, r4
 800286e:	f7fd ffdf 	bl	8000830 <test_println>
    test_print("--- Patch Number:                       ");
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <rt_test_001_002_execute+0x88>)
 8002874:	f7fd fffc 	bl	8000870 <test_print>
    test_printn(CH_KERNEL_PATCH);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fd ffc9 	bl	8000810 <test_printn>
    test_println("");
 800287e:	4620      	mov	r0, r4
}
 8002880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002884:	f7fd bfd4 	b.w	8000830 <test_println>
 8002888:	20002354 	.word	0x20002354
 800288c:	0800c1e8 	.word	0x0800c1e8
 8002890:	0800d3c4 	.word	0x0800d3c4
 8002894:	0800c21c 	.word	0x0800c21c
 8002898:	0800c248 	.word	0x0800c248
 800289c:	0800c274 	.word	0x0800c274
 80028a0:	0800c27c 	.word	0x0800c27c
 80028a4:	0800c2a8 	.word	0x0800c2a8
 80028a8:	0800c2d4 	.word	0x0800c2d4
 80028ac:	00000000 	.word	0x00000000

080028b0 <rt_test_001_001_execute>:
  test_set_step(1);
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <rt_test_001_001_execute+0x74>)
    test_print("--- Architecture:                       ");
 80028b2:	481d      	ldr	r0, [pc, #116]	; (8002928 <rt_test_001_001_execute+0x78>)
static void rt_test_001_001_execute(void) {
 80028b4:	b510      	push	{r4, lr}
  test_set_step(1);
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 80028ba:	f7fd ffd9 	bl	8000870 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 80028be:	481b      	ldr	r0, [pc, #108]	; (800292c <rt_test_001_001_execute+0x7c>)
    test_println("");
 80028c0:	4c1b      	ldr	r4, [pc, #108]	; (8002930 <rt_test_001_001_execute+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 80028c2:	f7fd ffb5 	bl	8000830 <test_println>
    test_print("--- Core Variant:                       ");
 80028c6:	481b      	ldr	r0, [pc, #108]	; (8002934 <rt_test_001_001_execute+0x84>)
 80028c8:	f7fd ffd2 	bl	8000870 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 80028cc:	481a      	ldr	r0, [pc, #104]	; (8002938 <rt_test_001_001_execute+0x88>)
 80028ce:	f7fd ffaf 	bl	8000830 <test_println>
    test_print("--- Compiler:                           ");
 80028d2:	481a      	ldr	r0, [pc, #104]	; (800293c <rt_test_001_001_execute+0x8c>)
 80028d4:	f7fd ffcc 	bl	8000870 <test_print>
    test_println(PORT_COMPILER_NAME);
 80028d8:	4819      	ldr	r0, [pc, #100]	; (8002940 <rt_test_001_001_execute+0x90>)
 80028da:	f7fd ffa9 	bl	8000830 <test_println>
    test_print("--- Port Info:                          ");
 80028de:	4819      	ldr	r0, [pc, #100]	; (8002944 <rt_test_001_001_execute+0x94>)
 80028e0:	f7fd ffc6 	bl	8000870 <test_print>
    test_println(PORT_INFO);
 80028e4:	4818      	ldr	r0, [pc, #96]	; (8002948 <rt_test_001_001_execute+0x98>)
 80028e6:	f7fd ffa3 	bl	8000830 <test_println>
    test_print("--- Natural alignment:                  ");
 80028ea:	4818      	ldr	r0, [pc, #96]	; (800294c <rt_test_001_001_execute+0x9c>)
 80028ec:	f7fd ffc0 	bl	8000870 <test_print>
 80028f0:	2004      	movs	r0, #4
 80028f2:	f7fd ff5d 	bl	80007b0 <test_printn.part.0>
    test_println("");
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fd ff9a 	bl	8000830 <test_println>
    test_print("--- Stack alignment:                    ");
 80028fc:	4814      	ldr	r0, [pc, #80]	; (8002950 <rt_test_001_001_execute+0xa0>)
 80028fe:	f7fd ffb7 	bl	8000870 <test_print>
 8002902:	2008      	movs	r0, #8
 8002904:	f7fd ff54 	bl	80007b0 <test_printn.part.0>
    test_println("");
 8002908:	4620      	mov	r0, r4
 800290a:	f7fd ff91 	bl	8000830 <test_println>
    test_print("--- Working area alignment:             ");
 800290e:	4811      	ldr	r0, [pc, #68]	; (8002954 <rt_test_001_001_execute+0xa4>)
 8002910:	f7fd ffae 	bl	8000870 <test_print>
 8002914:	2008      	movs	r0, #8
 8002916:	f7fd ff4b 	bl	80007b0 <test_printn.part.0>
    test_println("");
 800291a:	4620      	mov	r0, r4
}
 800291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002920:	f7fd bf86 	b.w	8000830 <test_println>
 8002924:	20002354 	.word	0x20002354
 8002928:	0800c02c 	.word	0x0800c02c
 800292c:	0800c058 	.word	0x0800c058
 8002930:	0800d3c4 	.word	0x0800d3c4
 8002934:	0800c064 	.word	0x0800c064
 8002938:	0800c090 	.word	0x0800c090
 800293c:	0800c09c 	.word	0x0800c09c
 8002940:	0800c0c8 	.word	0x0800c0c8
 8002944:	0800c110 	.word	0x0800c110
 8002948:	0800c13c 	.word	0x0800c13c
 800294c:	0800c154 	.word	0x0800c154
 8002950:	0800c180 	.word	0x0800c180
 8002954:	0800c1ac 	.word	0x0800c1ac
	...

08002960 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	4604      	mov	r4, r0
 8002964:	460e      	mov	r6, r1
 8002966:	4615      	mov	r5, r2
  osalDbgCheckClassI();
 8002968:	f7fe f8fa 	bl	8000b60 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 800296c:	b134      	cbz	r4, 800297c <usbInitEndpointI+0x1c>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 800296e:	7823      	ldrb	r3, [r4, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d103      	bne.n	800297c <usbInitEndpointI+0x1c>
 8002974:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8002978:	68d0      	ldr	r0, [r2, #12]
 800297a:	b110      	cbz	r0, 8002982 <usbInitEndpointI+0x22>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 800297c:	480b      	ldr	r0, [pc, #44]	; (80029ac <usbInitEndpointI+0x4c>)
 800297e:	f7fe f8af 	bl	8000ae0 <chSysHalt>
  if (epcp->in_state != NULL) {
 8002982:	696b      	ldr	r3, [r5, #20]
  usbp->epc[ep] = epcp;
 8002984:	60d5      	str	r5, [r2, #12]
  if (epcp->in_state != NULL) {
 8002986:	b11b      	cbz	r3, 8002990 <usbInitEndpointI+0x30>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8002988:	6018      	str	r0, [r3, #0]
 800298a:	6058      	str	r0, [r3, #4]
 800298c:	6098      	str	r0, [r3, #8]
 800298e:	60d8      	str	r0, [r3, #12]
  if (epcp->out_state != NULL) {
 8002990:	69ab      	ldr	r3, [r5, #24]
 8002992:	b123      	cbz	r3, 800299e <usbInitEndpointI+0x3e>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
  usb_lld_init_endpoint(usbp, ep);
 800299e:	4631      	mov	r1, r6
 80029a0:	4620      	mov	r0, r4
}
 80029a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_lld_init_endpoint(usbp, ep);
 80029a6:	f7fe bc13 	b.w	80011d0 <usb_lld_init_endpoint>
 80029aa:	bf00      	nop
 80029ac:	0800b764 	.word	0x0800b764

080029b0 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80029b0:	b538      	push	{r3, r4, r5, lr}
  switch (event) {
 80029b2:	2905      	cmp	r1, #5
 80029b4:	d816      	bhi.n	80029e4 <usb_event+0x34>
 80029b6:	e8df f001 	tbb	[pc, r1]
 80029ba:	1550      	.short	0x1550
 80029bc:	03505016 	.word	0x03505016
 80029c0:	2320      	movs	r3, #32
 80029c2:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 80029c6:	4d33      	ldr	r5, [pc, #204]	; (8002a94 <usb_event+0xe4>)
  _dbg_check_lock_from_isr();
 80029c8:	f7fe fb62 	bl	8001090 <_dbg_check_lock_from_isr>
  bqResumeX(&sdup->ibqueue);
 80029cc:	2400      	movs	r4, #0
 80029ce:	1d28      	adds	r0, r5, #4
 80029d0:	2101      	movs	r1, #1
 80029d2:	f7fe fa2d 	bl	8000e30 <chEvtBroadcastFlagsI>
 80029d6:	752c      	strb	r4, [r5, #20]
  bqResumeX(&sdup->obqueue);
 80029d8:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
  _dbg_check_unlock_from_isr();
 80029dc:	f7fe fb40 	bl	8001060 <_dbg_check_unlock_from_isr>
 80029e0:	f384 8811 	msr	BASEPRI, r4
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	4605      	mov	r5, r0
 80029e8:	2320      	movs	r3, #32
 80029ea:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80029ee:	f7fe fb4f 	bl	8001090 <_dbg_check_lock_from_isr>
  ibqp->bcounter  = 0;
 80029f2:	4c28      	ldr	r4, [pc, #160]	; (8002a94 <usb_event+0xe4>)
    usbInitEndpointI(usbp, USB1_DATA_REQUEST_EP, &ep1config);
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <usb_event+0xe8>)
 80029f6:	4628      	mov	r0, r5
 80029f8:	2101      	movs	r1, #1
 80029fa:	f7ff ffb1 	bl	8002960 <usbInitEndpointI>
    usbInitEndpointI(usbp, USB1_INTERRUPT_REQUEST_EP, &ep2config);
 80029fe:	2102      	movs	r1, #2
 8002a00:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <usb_event+0xec>)
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7ff ffac 	bl	8002960 <usbInitEndpointI>
 8002a08:	2500      	movs	r5, #0
  osalDbgCheckClassI();
 8002a0a:	f7fe f8a9 	bl	8000b60 <chDbgCheckClassI>
  ibqp->brdptr    = ibqp->buffers;
 8002a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a10:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 8002a12:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 8002a16:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter  = 0;
 8002a18:	61a5      	str	r5, [r4, #24]
  ibqp->top       = NULL;
 8002a1a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a1e:	f7fe f9b7 	bl	8000d90 <chThdDequeueAllI.constprop.91>
  bqResumeX(&sdup->ibqueue);
 8002a22:	7525      	strb	r5, [r4, #20]
  osalDbgCheckClassI();
 8002a24:	f7fe f89c 	bl	8000b60 <chDbgCheckClassI>
  obqp->brdptr    = obqp->buffers;
 8002a28:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8002a2c:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bcounter  = bqSizeX(obqp);
 8002a30:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->bwrptr    = obqp->buffers;
 8002a32:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->ptr       = NULL;
 8002a36:	66e5      	str	r5, [r4, #108]	; 0x6c
  obqp->top       = NULL;
 8002a38:	6725      	str	r5, [r4, #112]	; 0x70
 8002a3a:	f7fe f9a9 	bl	8000d90 <chThdDequeueAllI.constprop.91>
  chEvtBroadcastFlagsI(esp, flags);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	1d20      	adds	r0, r4, #4
  bqResumeX(&sdup->obqueue);
 8002a42:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002a46:	f7fe f9f3 	bl	8000e30 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff f828 	bl	8001aa0 <sdu_start_receive>
  _dbg_check_unlock_from_isr();
 8002a50:	f7fe fb06 	bl	8001060 <_dbg_check_unlock_from_isr>
 8002a54:	f385 8811 	msr	BASEPRI, r5
}
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	4c0c      	ldr	r4, [pc, #48]	; (8002a94 <usb_event+0xe4>)
  _dbg_check_lock_from_isr();
 8002a62:	f7fe fb15 	bl	8001090 <_dbg_check_lock_from_isr>
 8002a66:	2102      	movs	r1, #2
 8002a68:	1d20      	adds	r0, r4, #4
 8002a6a:	f7fe f9e1 	bl	8000e30 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8002a6e:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 8002a70:	f104 000c 	add.w	r0, r4, #12
 8002a74:	7525      	strb	r5, [r4, #20]
 8002a76:	f7fe f98b 	bl	8000d90 <chThdDequeueAllI.constprop.91>
 8002a7a:	f104 0044 	add.w	r0, r4, #68	; 0x44
  bqSuspendI(&sdup->obqueue);
 8002a7e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002a82:	f7fe f985 	bl	8000d90 <chThdDequeueAllI.constprop.91>
  _dbg_check_unlock_from_isr();
 8002a86:	f7fe faeb 	bl	8001060 <_dbg_check_unlock_from_isr>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	bd38      	pop	{r3, r4, r5, pc}
 8002a92:	bf00      	nop
 8002a94:	20000c98 	.word	0x20000c98
 8002a98:	0800bba4 	.word	0x0800bba4
 8002a9c:	0800bbc8 	.word	0x0800bbc8

08002aa0 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	460e      	mov	r6, r1
  char *p;

  if (str != NULL)
 8002aa4:	b1f0      	cbz	r0, 8002ae4 <parse_arguments+0x44>
 8002aa6:	4604      	mov	r4, r0
    *saveptr = str;
 8002aa8:	6030      	str	r0, [r6, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 8002aaa:	4911      	ldr	r1, [pc, #68]	; (8002af0 <parse_arguments+0x50>)
 8002aac:	4620      	mov	r0, r4
 8002aae:	f008 fbcf 	bl	800b250 <strspn>

  if (*p == '"') {
 8002ab2:	5c21      	ldrb	r1, [r4, r0]
 8002ab4:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 8002ab6:	eb04 0500 	add.w	r5, r4, r0
  if (*p == '"') {
 8002aba:	d00d      	beq.n	8002ad8 <parse_arguments+0x38>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <parse_arguments+0x50>)
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f008 fba4 	bl	800b20c <strpbrk>
 8002ac4:	6030      	str	r0, [r6, #0]
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 8002ac6:	b118      	cbz	r0, 8002ad0 <parse_arguments+0x30>
    *(*saveptr)++ = '\0';
 8002ac8:	1c42      	adds	r2, r0, #1
 8002aca:	2300      	movs	r3, #0
 8002acc:	6032      	str	r2, [r6, #0]
 8002ace:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 8002ad0:	782b      	ldrb	r3, [r5, #0]
 8002ad2:	b153      	cbz	r3, 8002aea <parse_arguments+0x4a>
}
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8002ad8:	3501      	adds	r5, #1
    *saveptr = strpbrk(p, "\"");
 8002ada:	4628      	mov	r0, r5
 8002adc:	f008 faa4 	bl	800b028 <strchr>
 8002ae0:	6030      	str	r0, [r6, #0]
 8002ae2:	e7f0      	b.n	8002ac6 <parse_arguments+0x26>
  p = *saveptr;
 8002ae4:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	d1df      	bne.n	8002aaa <parse_arguments+0xa>
  return *p != '\0' ? p : NULL;
 8002aea:	2500      	movs	r5, #0
}
 8002aec:	4628      	mov	r0, r5
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	0800bf98 	.word	0x0800bf98
	...

08002b00 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002b00:	b40e      	push	{r1, r2, r3}
 8002b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af0f      	add	r7, sp, #60	; 0x3c
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002b10:	9702      	str	r7, [sp, #8]
  int n = 0;
 8002b12:	f04f 0800 	mov.w	r8, #0
    c = *fmt++;
 8002b16:	7831      	ldrb	r1, [r6, #0]
 8002b18:	1c72      	adds	r2, r6, #1
    if (c == 0)
 8002b1a:	b161      	cbz	r1, 8002b36 <chprintf+0x36>
    if (c != '%') {
 8002b1c:	2925      	cmp	r1, #37	; 0x25
 8002b1e:	d010      	beq.n	8002b42 <chprintf+0x42>
      streamPut(chp, (uint8_t)c);
 8002b20:	6823      	ldr	r3, [r4, #0]
    c = *fmt++;
 8002b22:	4616      	mov	r6, r2
      streamPut(chp, (uint8_t)c);
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4620      	mov	r0, r4
 8002b28:	4798      	blx	r3
    c = *fmt++;
 8002b2a:	7831      	ldrb	r1, [r6, #0]
      n++;
 8002b2c:	f108 0801 	add.w	r8, r8, #1
    c = *fmt++;
 8002b30:	1c72      	adds	r2, r6, #1
    if (c == 0)
 8002b32:	2900      	cmp	r1, #0
 8002b34:	d1f2      	bne.n	8002b1c <chprintf+0x1c>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002b36:	4640      	mov	r0, r8
 8002b38:	b006      	add	sp, #24
 8002b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b3e:	b003      	add	sp, #12
 8002b40:	4770      	bx	lr
    if (*fmt == '-') {
 8002b42:	7871      	ldrb	r1, [r6, #1]
 8002b44:	292d      	cmp	r1, #45	; 0x2d
 8002b46:	bf03      	ittte	eq
 8002b48:	78b1      	ldrbeq	r1, [r6, #2]
      fmt++;
 8002b4a:	1cb2      	addeq	r2, r6, #2
      left_align = TRUE;
 8002b4c:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8002b50:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8002b54:	2930      	cmp	r1, #48	; 0x30
 8002b56:	bf03      	ittte	eq
 8002b58:	7851      	ldrbeq	r1, [r2, #1]
      fmt++;
 8002b5a:	3201      	addeq	r2, #1
      filler = '0';
 8002b5c:	f04f 0a30 	moveq.w	sl, #48	; 0x30
    filler = ' ';
 8002b60:	f04f 0a20 	movne.w	sl, #32
 8002b64:	3201      	adds	r2, #1
    width = 0;
 8002b66:	2500      	movs	r5, #0
 8002b68:	e005      	b.n	8002b76 <chprintf+0x76>
        c = va_arg(ap, int);
 8002b6a:	783b      	ldrb	r3, [r7, #0]
 8002b6c:	3704      	adds	r7, #4
 8002b6e:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 8002b72:	eb03 0540 	add.w	r5, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8002b76:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b09      	cmp	r3, #9
      c = *fmt++;
 8002b7e:	4696      	mov	lr, r2
      width = width * 10 + c;
 8002b80:	eb05 0085 	add.w	r0, r5, r5, lsl #2
      if (c >= '0' && c <= '9')
 8002b84:	d9f3      	bls.n	8002b6e <chprintf+0x6e>
      else if (c == '*')
 8002b86:	292a      	cmp	r1, #42	; 0x2a
 8002b88:	d0ef      	beq.n	8002b6a <chprintf+0x6a>
    if (c == '.') {
 8002b8a:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 8002b8c:	f04f 0200 	mov.w	r2, #0
    if (c == '.') {
 8002b90:	d048      	beq.n	8002c24 <chprintf+0x124>
    if (c == 'l' || c == 'L') {
 8002b92:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8002b96:	2b4c      	cmp	r3, #76	; 0x4c
 8002b98:	f10e 0601 	add.w	r6, lr, #1
 8002b9c:	d04e      	beq.n	8002c3c <chprintf+0x13c>
      is_long = (c >= 'A') && (c <= 'Z');
 8002b9e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 8002ba2:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 8002ba6:	b2db      	uxtb	r3, r3
    switch (c) {
 8002ba8:	2834      	cmp	r0, #52	; 0x34
 8002baa:	f200 8116 	bhi.w	8002dda <chprintf+0x2da>
 8002bae:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002bb2:	0165      	.short	0x0165
 8002bb4:	01140114 	.word	0x01140114
 8002bb8:	01140114 	.word	0x01140114
 8002bbc:	01140165 	.word	0x01140165
 8002bc0:	01140114 	.word	0x01140114
 8002bc4:	01140114 	.word	0x01140114
 8002bc8:	01140110 	.word	0x01140110
 8002bcc:	01140114 	.word	0x01140114
 8002bd0:	01140114 	.word	0x01140114
 8002bd4:	011400e1 	.word	0x011400e1
 8002bd8:	016e0114 	.word	0x016e0114
 8002bdc:	01140114 	.word	0x01140114
 8002be0:	01140114 	.word	0x01140114
 8002be4:	01140114 	.word	0x01140114
 8002be8:	01140114 	.word	0x01140114
 8002bec:	01140114 	.word	0x01140114
 8002bf0:	0165008f 	.word	0x0165008f
 8002bf4:	01140114 	.word	0x01140114
 8002bf8:	01140114 	.word	0x01140114
 8002bfc:	01140165 	.word	0x01140165
 8002c00:	01140114 	.word	0x01140114
 8002c04:	01140114 	.word	0x01140114
 8002c08:	01140110 	.word	0x01140110
 8002c0c:	01140114 	.word	0x01140114
 8002c10:	0114006d 	.word	0x0114006d
 8002c14:	011400e1 	.word	0x011400e1
 8002c18:	016e0114 	.word	0x016e0114
          c = va_arg(ap, int);
 8002c1c:	783b      	ldrb	r3, [r7, #0]
 8002c1e:	3704      	adds	r7, #4
        precision += c;
 8002c20:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
 8002c24:	f81e 1b01 	ldrb.w	r1, [lr], #1
        if (c >= '0' && c <= '9')
 8002c28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b09      	cmp	r3, #9
        precision *= 10;
 8002c30:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
 8002c34:	d9f4      	bls.n	8002c20 <chprintf+0x120>
        else if (c == '*')
 8002c36:	292a      	cmp	r1, #42	; 0x2a
 8002c38:	d0f0      	beq.n	8002c1c <chprintf+0x11c>
 8002c3a:	e7aa      	b.n	8002b92 <chprintf+0x92>
      if (*fmt)
 8002c3c:	f89e 3000 	ldrb.w	r3, [lr]
 8002c40:	b30b      	cbz	r3, 8002c86 <chprintf+0x186>
    switch (c) {
 8002c42:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8002c46:	2934      	cmp	r1, #52	; 0x34
 8002c48:	f200 80c9 	bhi.w	8002dde <chprintf+0x2de>
 8002c4c:	e8df f001 	tbb	[pc, r1]
 8002c50:	c7c7c7d7 	.word	0xc7c7c7d7
 8002c54:	c7c7d7c7 	.word	0xc7c7d7c7
 8002c58:	c2c7c7c7 	.word	0xc2c7c7c7
 8002c5c:	c7c7c7c7 	.word	0xc7c7c7c7
 8002c60:	c7c793c7 	.word	0xc7c793c7
 8002c64:	c7c7c7d4 	.word	0xc7c7c7d4
 8002c68:	c7c7c7c7 	.word	0xc7c7c7c7
 8002c6c:	41c7c7c7 	.word	0x41c7c7c7
 8002c70:	c7c7c7d7 	.word	0xc7c7c7d7
 8002c74:	c7c7d7c7 	.word	0xc7c7d7c7
 8002c78:	c2c7c7c7 	.word	0xc2c7c7c7
 8002c7c:	1fc7c7c7 	.word	0x1fc7c7c7
 8002c80:	c7c793c7 	.word	0xc7c793c7
 8002c84:	d4          	.byte	0xd4
 8002c85:	00          	.byte	0x00
      if (*fmt)
 8002c86:	460b      	mov	r3, r1
 8002c88:	4676      	mov	r6, lr
 8002c8a:	e7da      	b.n	8002c42 <chprintf+0x142>
    switch (c) {
 8002c8c:	4676      	mov	r6, lr
      if ((s = va_arg(ap, char *)) == 0)
 8002c8e:	f8d7 9000 	ldr.w	r9, [r7]
 8002c92:	3704      	adds	r7, #4
 8002c94:	f1b9 0f00 	cmp.w	r9, #0
 8002c98:	f000 80fd 	beq.w	8002e96 <chprintf+0x396>
 8002c9c:	f899 3000 	ldrb.w	r3, [r9]
 8002ca0:	4648      	mov	r0, r9
      if (precision == 0)
 8002ca2:	2a00      	cmp	r2, #0
 8002ca4:	f040 80fe 	bne.w	8002ea4 <chprintf+0x3a4>
      for (p = s; *p && (--precision >= 0); p++)
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 810c 	beq.w	8002ec6 <chprintf+0x3c6>
 8002cae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	e001      	b.n	8002cba <chprintf+0x1ba>
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	d403      	bmi.n	8002cc2 <chprintf+0x1c2>
 8002cba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <chprintf+0x1b6>
 8002cc2:	1a1b      	subs	r3, r3, r0
 8002cc4:	1aed      	subs	r5, r5, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002cca:	f04f 0a20 	mov.w	sl, #32
 8002cce:	e00b      	b.n	8002ce8 <chprintf+0x1e8>
    switch (c) {
 8002cd0:	4676      	mov	r6, lr
      *p++ = va_arg(ap, int);
 8002cd2:	f10d 0918 	add.w	r9, sp, #24
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8002cdc:	2300      	movs	r3, #0
 8002cde:	3d01      	subs	r5, #1
 8002ce0:	3704      	adds	r7, #4
 8002ce2:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002ce4:	f04f 0a20 	mov.w	sl, #32
    if ((width -= i) < 0)
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	db1e      	blt.n	8002d2a <chprintf+0x22a>
    if (left_align == FALSE)
 8002cec:	f1bc 0f00 	cmp.w	ip, #0
 8002cf0:	d17e      	bne.n	8002df0 <chprintf+0x2f0>
      width = -width;
 8002cf2:	426b      	negs	r3, r5
    if (width < 0) {
 8002cf4:	2d00      	cmp	r5, #0
 8002cf6:	d07a      	beq.n	8002dee <chprintf+0x2ee>
      if (*s == '-' && filler == '0') {
 8002cf8:	f899 1000 	ldrb.w	r1, [r9]
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	292d      	cmp	r1, #45	; 0x2d
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	f000 80a8 	beq.w	8002e56 <chprintf+0x356>
 8002d06:	469b      	mov	fp, r3
 8002d08:	e001      	b.n	8002d0e <chprintf+0x20e>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
        streamPut(chp, (uint8_t)filler);
 8002d0e:	4651      	mov	r1, sl
 8002d10:	4620      	mov	r0, r4
 8002d12:	4790      	blx	r2
      } while (++width != 0);
 8002d14:	f11b 0b01 	adds.w	fp, fp, #1
 8002d18:	d1f7      	bne.n	8002d0a <chprintf+0x20a>
    while (--i >= 0) {
 8002d1a:	9a00      	ldr	r2, [sp, #0]
 8002d1c:	2a00      	cmp	r2, #0
 8002d1e:	465b      	mov	r3, fp
 8002d20:	44a8      	add	r8, r5
 8002d22:	f6ff aef8 	blt.w	8002b16 <chprintf+0x16>
 8002d26:	461d      	mov	r5, r3
 8002d28:	e004      	b.n	8002d34 <chprintf+0x234>
 8002d2a:	9b00      	ldr	r3, [sp, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f6ff aef2 	blt.w	8002b16 <chprintf+0x16>
      width = 0;
 8002d32:	2500      	movs	r5, #0
      width = -width;
 8002d34:	f8dd b000 	ldr.w	fp, [sp]
      streamPut(chp, (uint8_t)*s++);
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002d3e:	68db      	ldr	r3, [r3, #12]
    while (--i >= 0) {
 8002d40:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8002d44:	4620      	mov	r0, r4
 8002d46:	4798      	blx	r3
    while (--i >= 0) {
 8002d48:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002d4c:	d1f4      	bne.n	8002d38 <chprintf+0x238>
 8002d4e:	9b00      	ldr	r3, [sp, #0]
 8002d50:	f108 0801 	add.w	r8, r8, #1
 8002d54:	4443      	add	r3, r8
 8002d56:	4698      	mov	r8, r3
    while (width) {
 8002d58:	2d00      	cmp	r5, #0
 8002d5a:	f43f aedc 	beq.w	8002b16 <chprintf+0x16>
 8002d5e:	46a9      	mov	r9, r5
      streamPut(chp, (uint8_t)filler);
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	4651      	mov	r1, sl
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4620      	mov	r0, r4
 8002d68:	4798      	blx	r3
    while (width) {
 8002d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8002d6e:	d1f7      	bne.n	8002d60 <chprintf+0x260>
 8002d70:	44a8      	add	r8, r5
 8002d72:	e6d0      	b.n	8002b16 <chprintf+0x16>
    switch (c) {
 8002d74:	4676      	mov	r6, lr
    case 'U':
 8002d76:	f04f 090a 	mov.w	r9, #10
 8002d7a:	f857 2b04 	ldr.w	r2, [r7], #4
  q = p + MAX_FILLER;
 8002d7e:	f10d 0117 	add.w	r1, sp, #23
 8002d82:	e000      	b.n	8002d86 <chprintf+0x286>
  } while ((ll /= radix) != 0);
 8002d84:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8002d86:	fbb2 fef9 	udiv	lr, r2, r9
 8002d8a:	fb09 221e 	mls	r2, r9, lr, r2
    i += '0';
 8002d8e:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8002d92:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002d94:	bfc8      	it	gt
 8002d96:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8002d9a:	b2db      	uxtb	r3, r3
    l /= radix;
 8002d9c:	4672      	mov	r2, lr
    *--q = i;
 8002d9e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002da2:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d1ed      	bne.n	8002d84 <chprintf+0x284>
  i = (int)(p + MAX_FILLER - q);
 8002da8:	f10d 0217 	add.w	r2, sp, #23
 8002dac:	eba2 0b00 	sub.w	fp, r2, r0
 8002db0:	f10d 090c 	add.w	r9, sp, #12
 8002db4:	464a      	mov	r2, r9
 8002db6:	4458      	add	r0, fp
 8002db8:	e001      	b.n	8002dbe <chprintf+0x2be>
 8002dba:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 8002dbe:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8002dc2:	4281      	cmp	r1, r0
 8002dc4:	d1f9      	bne.n	8002dba <chprintf+0x2ba>
 8002dc6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002dca:	eba5 050b 	sub.w	r5, r5, fp
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	e78a      	b.n	8002ce8 <chprintf+0x1e8>
    switch (c) {
 8002dd2:	4676      	mov	r6, lr
    case 'O':
 8002dd4:	f04f 0908 	mov.w	r9, #8
 8002dd8:	e7cf      	b.n	8002d7a <chprintf+0x27a>
    switch (c) {
 8002dda:	4676      	mov	r6, lr
 8002ddc:	460b      	mov	r3, r1
      *p++ = c;
 8002dde:	f10d 0918 	add.w	r9, sp, #24
 8002de2:	3d01      	subs	r5, #1
 8002de4:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	e77c      	b.n	8002ce8 <chprintf+0x1e8>
      width = -width;
 8002dee:	461d      	mov	r5, r3
    while (--i >= 0) {
 8002df0:	9b00      	ldr	r3, [sp, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da9e      	bge.n	8002d34 <chprintf+0x234>
 8002df6:	e7af      	b.n	8002d58 <chprintf+0x258>
    switch (c) {
 8002df8:	f04f 0910 	mov.w	r9, #16
 8002dfc:	e7bd      	b.n	8002d7a <chprintf+0x27a>
 8002dfe:	1d39      	adds	r1, r7, #4
        l = va_arg(ap, long);
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	460f      	mov	r7, r1
      if (l < 0) {
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	db55      	blt.n	8002eb4 <chprintf+0x3b4>
    p = tmpbuf;
 8002e08:	f10d 090c 	add.w	r9, sp, #12
 8002e0c:	4648      	mov	r0, r9
  q = p + MAX_FILLER;
 8002e0e:	f100 030b 	add.w	r3, r0, #11
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4619      	mov	r1, r3
    i = (int)(l % radix);
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <chprintf+0x3d4>)
 8002e18:	fba3 e302 	umull	lr, r3, r3, r2
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8002e22:	469e      	mov	lr, r3
 8002e24:	eba2 034b 	sub.w	r3, r2, fp, lsl #1
    i += '0';
 8002e28:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8002e2a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8002e2c:	4672      	mov	r2, lr
    *--q = i;
 8002e2e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d1ef      	bne.n	8002e16 <chprintf+0x316>
  i = (int)(p + MAX_FILLER - q);
 8002e36:	9a00      	ldr	r2, [sp, #0]
 8002e38:	1a52      	subs	r2, r2, r1
 8002e3a:	4402      	add	r2, r0
 8002e3c:	e001      	b.n	8002e42 <chprintf+0x342>
 8002e3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    *p++ = *q++;
 8002e42:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002e46:	4290      	cmp	r0, r2
 8002e48:	d1f9      	bne.n	8002e3e <chprintf+0x33e>
 8002e4a:	eba0 0009 	sub.w	r0, r0, r9
 8002e4e:	1e43      	subs	r3, r0, #1
 8002e50:	1a2d      	subs	r5, r5, r0
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	e748      	b.n	8002ce8 <chprintf+0x1e8>
      if (*s == '-' && filler == '0') {
 8002e56:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8002e5a:	f47f af54 	bne.w	8002d06 <chprintf+0x206>
        streamPut(chp, (uint8_t)*s++);
 8002e5e:	4620      	mov	r0, r4
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	4790      	blx	r2
 8002e64:	9b00      	ldr	r3, [sp, #0]
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
 8002e6e:	68d2      	ldr	r2, [r2, #12]
 8002e70:	f108 0801 	add.w	r8, r8, #1
 8002e74:	f109 0901 	add.w	r9, r9, #1
 8002e78:	469b      	mov	fp, r3
 8002e7a:	e748      	b.n	8002d0e <chprintf+0x20e>
 8002e7c:	4639      	mov	r1, r7
      if (is_long)
 8002e7e:	2b19      	cmp	r3, #25
 8002e80:	f851 2b04 	ldr.w	r2, [r1], #4
 8002e84:	4676      	mov	r6, lr
        l = va_arg(ap, int);
 8002e86:	bf88      	it	hi
 8002e88:	460f      	movhi	r7, r1
      if (is_long)
 8002e8a:	d8bb      	bhi.n	8002e04 <chprintf+0x304>
 8002e8c:	e7b8      	b.n	8002e00 <chprintf+0x300>
    switch (c) {
 8002e8e:	4676      	mov	r6, lr
 8002e90:	f04f 0910 	mov.w	r9, #16
 8002e94:	e771      	b.n	8002d7a <chprintf+0x27a>
 8002e96:	4810      	ldr	r0, [pc, #64]	; (8002ed8 <chprintf+0x3d8>)
      if (precision == 0)
 8002e98:	4681      	mov	r9, r0
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	f43f af07 	beq.w	8002cae <chprintf+0x1ae>
      for (p = s; *p && (--precision >= 0); p++)
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	e706      	b.n	8002cb2 <chprintf+0x1b2>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1fb      	bne.n	8002ea0 <chprintf+0x3a0>
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002eae:	f04f 0a20 	mov.w	sl, #32
 8002eb2:	e719      	b.n	8002ce8 <chprintf+0x1e8>
        *p++ = '-';
 8002eb4:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002eb6:	4252      	negs	r2, r2
        *p++ = '-';
 8002eb8:	f88d 300c 	strb.w	r3, [sp, #12]
 8002ebc:	f10d 000d 	add.w	r0, sp, #13
 8002ec0:	f10d 090c 	add.w	r9, sp, #12
 8002ec4:	e7a3      	b.n	8002e0e <chprintf+0x30e>
      for (p = s; *p && (--precision >= 0); p++)
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	9300      	str	r3, [sp, #0]
      filler = ' ';
 8002ecc:	f04f 0a20 	mov.w	sl, #32
 8002ed0:	e70c      	b.n	8002cec <chprintf+0x1ec>
 8002ed2:	bf00      	nop
 8002ed4:	cccccccd 	.word	0xcccccccd
 8002ed8:	0800b900 	.word	0x0800b900
 8002edc:	00000000 	.word	0x00000000

08002ee0 <cmd_write>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8002ee0:	2900      	cmp	r1, #0
 8002ee2:	dc18      	bgt.n	8002f16 <cmd_write+0x36>
static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
#if 1
    /* Writing in channel mode.*/
    chnWrite(&PORTAB_SDU1, buf, sizeof buf - 1);
 8002ee8:	4e0c      	ldr	r6, [pc, #48]	; (8002f1c <cmd_write+0x3c>)
 8002eea:	4d0d      	ldr	r5, [pc, #52]	; (8002f20 <cmd_write+0x40>)
 8002eec:	e002      	b.n	8002ef4 <cmd_write+0x14>
 8002eee:	6833      	ldr	r3, [r6, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4798      	blx	r3
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4620      	mov	r0, r4
 8002efc:	4798      	blx	r3
 8002efe:	3001      	adds	r0, #1
    chnWrite(&PORTAB_SDU1, buf, sizeof buf - 1);
 8002f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f04:	4629      	mov	r1, r5
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <cmd_write+0x3c>)
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8002f08:	d0f1      	beq.n	8002eee <cmd_write+0xe>
    (void) obqGetEmptyBufferTimeout(&PORTAB_SDU1.obqueue, TIME_INFINITE);
    memcpy(PORTAB_SDU1.obqueue.ptr, buf, SERIAL_USB_BUFFERS_SIZE);
    obqPostFullBuffer(&PORTAB_SDU1.obqueue, SERIAL_USB_BUFFERS_SIZE);
#endif
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4905      	ldr	r1, [pc, #20]	; (8002f24 <cmd_write+0x44>)
}
 8002f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "\r\n\nstopped\r\n");
 8002f12:	f7ff bdf5 	b.w	8002b00 <chprintf>
    chprintf(chp, "Usage: write\r\n");
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <cmd_write+0x48>)
 8002f18:	f7ff bdf2 	b.w	8002b00 <chprintf>
 8002f1c:	20000c98 	.word	0x20000c98
 8002f20:	20000800 	.word	0x20000800
 8002f24:	0800bb50 	.word	0x0800bb50
 8002f28:	0800bb60 	.word	0x0800bb60
 8002f2c:	00000000 	.word	0x00000000

08002f30 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8002f30:	2901      	cmp	r1, #1
 8002f32:	d003      	beq.n	8002f3c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8002f34:	4a03      	ldr	r2, [pc, #12]	; (8002f44 <cmd_echo+0x14>)
 8002f36:	4904      	ldr	r1, [pc, #16]	; (8002f48 <cmd_echo+0x18>)
 8002f38:	f7ff bde2 	b.w	8002b00 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4903      	ldr	r1, [pc, #12]	; (8002f4c <cmd_echo+0x1c>)
 8002f40:	f7ff bdde 	b.w	8002b00 <chprintf>
 8002f44:	0800b908 	.word	0x0800b908
 8002f48:	0800b918 	.word	0x0800b918
 8002f4c:	0800b924 	.word	0x0800b924

08002f50 <cmd_info>:
  if (argc > 0) {
 8002f50:	2900      	cmp	r1, #0
 8002f52:	dd03      	ble.n	8002f5c <cmd_info+0xc>
    shellUsage(chp, "info");
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <cmd_info+0x6c>)
 8002f56:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <cmd_info+0x70>)
 8002f58:	f7ff bdd2 	b.w	8002b00 <chprintf>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002f5c:	b510      	push	{r4, lr}
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <cmd_info+0x74>)
 8002f60:	4919      	ldr	r1, [pc, #100]	; (8002fc8 <cmd_info+0x78>)
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002f62:	b082      	sub	sp, #8
 8002f64:	4604      	mov	r4, r0
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 8002f66:	f7ff fdcb 	bl	8002b00 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <cmd_info+0x7c>)
 8002f6c:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <cmd_info+0x80>)
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff fdc6 	bl	8002b00 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 8002f74:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <cmd_info+0x84>)
 8002f76:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <cmd_info+0x88>)
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f7ff fdc1 	bl	8002b00 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <cmd_info+0x8c>)
 8002f80:	4917      	ldr	r1, [pc, #92]	; (8002fe0 <cmd_info+0x90>)
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff fdbc 	bl	8002b00 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <cmd_info+0x94>)
 8002f8a:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <cmd_info+0x98>)
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff fdb7 	bl	8002b00 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <cmd_info+0x9c>)
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <cmd_info+0xa0>)
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff fdb2 	bl	8002b00 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <cmd_info+0xa4>)
 8002f9e:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <cmd_info+0xa8>)
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff fdad 	bl	8002b00 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <cmd_info+0xac>)
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4620      	mov	r0, r4
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <cmd_info+0xb0>)
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <cmd_info+0xb4>)
 8002fb0:	4915      	ldr	r1, [pc, #84]	; (8003008 <cmd_info+0xb8>)
 8002fb2:	f7ff fda5 	bl	8002b00 <chprintf>
}
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	bf00      	nop
 8002fbc:	0800b92c 	.word	0x0800b92c
 8002fc0:	0800b918 	.word	0x0800b918
 8002fc4:	0800c274 	.word	0x0800c274
 8002fc8:	0800b934 	.word	0x0800b934
 8002fcc:	0800c0c8 	.word	0x0800c0c8
 8002fd0:	0800b948 	.word	0x0800b948
 8002fd4:	0800c058 	.word	0x0800c058
 8002fd8:	0800b95c 	.word	0x0800b95c
 8002fdc:	0800c090 	.word	0x0800c090
 8002fe0:	0800b970 	.word	0x0800b970
 8002fe4:	0800c13c 	.word	0x0800c13c
 8002fe8:	0800b984 	.word	0x0800b984
 8002fec:	0800b998 	.word	0x0800b998
 8002ff0:	0800b9b4 	.word	0x0800b9b4
 8002ff4:	0800b9c8 	.word	0x0800b9c8
 8002ff8:	0800b9f0 	.word	0x0800b9f0
 8002ffc:	0800ba2c 	.word	0x0800ba2c
 8003000:	0800ba04 	.word	0x0800ba04
 8003004:	0800ba08 	.word	0x0800ba08
 8003008:	0800ba14 	.word	0x0800ba14
 800300c:	00000000 	.word	0x00000000

08003010 <dyn_find_object>:
    chPoolFree(mp, (void *)dep);
  }
}
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8003010:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 8003012:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8003014:	42a1      	cmp	r1, r4
 8003016:	d012      	beq.n	800303e <dyn_find_object+0x2e>
 8003018:	460d      	mov	r5, r1
 800301a:	4606      	mov	r6, r0
 800301c:	e002      	b.n	8003024 <dyn_find_object+0x14>
    p = p->next;
 800301e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8003020:	42a5      	cmp	r5, r4
 8003022:	d00c      	beq.n	800303e <dyn_find_object+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8003024:	2208      	movs	r2, #8
 8003026:	4631      	mov	r1, r6
 8003028:	18a0      	adds	r0, r4, r2
 800302a:	f008 f871 	bl	800b110 <strncmp>
 800302e:	2800      	cmp	r0, #0
 8003030:	d1f5      	bne.n	800301e <dyn_find_object+0xe>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 8003032:	b12c      	cbz	r4, 8003040 <dyn_find_object+0x30>
    /* Increasing references counter.*/
    dep->refs++;
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	3301      	adds	r3, #1
 8003038:	6063      	str	r3, [r4, #4]
  }

  return dep;
}
 800303a:	4620      	mov	r0, r4
 800303c:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800303e:	2400      	movs	r4, #0
}
 8003040:	4620      	mov	r0, r4
 8003042:	bd70      	pop	{r4, r5, r6, pc}
	...

08003050 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *otp = currp;
 8003052:	4d19      	ldr	r5, [pc, #100]	; (80030b8 <chSchWakeupS+0x68>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003054:	4604      	mov	r4, r0
 8003056:	460f      	mov	r7, r1
  chDbgCheckClassS();
 8003058:	f7fd fd72 	bl	8000b40 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800305c:	682a      	ldr	r2, [r5, #0]
  thread_t *otp = currp;
 800305e:	69ae      	ldr	r6, [r5, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003060:	42aa      	cmp	r2, r5
 8003062:	68b3      	ldr	r3, [r6, #8]
 8003064:	d002      	beq.n	800306c <chSchWakeupS+0x1c>
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d819      	bhi.n	80030a0 <chSchWakeupS+0x50>
  if (ntp->prio <= otp->prio) {
 800306c:	68a2      	ldr	r2, [r4, #8]
  ntp->u.rdymsg = msg;
 800306e:	6267      	str	r7, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8003070:	429a      	cmp	r2, r3
 8003072:	d918      	bls.n	80030a6 <chSchWakeupS+0x56>
    otp = chSchReadyI(otp);
 8003074:	4630      	mov	r0, r6
 8003076:	f7fd fe23 	bl	8000cc0 <chSchReadyI>
    ntp->state = CH_STATE_CURRENT;
 800307a:	2301      	movs	r3, #1
 800307c:	f884 3020 	strb.w	r3, [r4, #32]
    otp = chSchReadyI(otp);
 8003080:	4606      	mov	r6, r0
    currp = ntp;
 8003082:	61ac      	str	r4, [r5, #24]
    chSysSwitch(ntp, otp);
 8003084:	f7fd fcdc 	bl	8000a40 <_trace_switch.constprop.88>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003088:	f3ef 8309 	mrs	r3, PSP
 800308c:	69f2      	ldr	r2, [r6, #28]
 800308e:	3b24      	subs	r3, #36	; 0x24
 8003090:	429a      	cmp	r2, r3
 8003092:	d80d      	bhi.n	80030b0 <chSchWakeupS+0x60>
 8003094:	4631      	mov	r1, r6
 8003096:	4620      	mov	r0, r4
}
 8003098:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chSysSwitch(ntp, otp);
 800309c:	f7fd b8f0 	b.w	8000280 <_port_switch>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80030a0:	4806      	ldr	r0, [pc, #24]	; (80030bc <chSchWakeupS+0x6c>)
 80030a2:	f7fd fd1d 	bl	8000ae0 <chSysHalt>
    (void) chSchReadyI(ntp);
 80030a6:	4620      	mov	r0, r4
}
 80030a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void) chSchReadyI(ntp);
 80030ac:	f7fd be08 	b.w	8000cc0 <chSchReadyI>
    chSysSwitch(ntp, otp);
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <chSchWakeupS+0x70>)
 80030b2:	f7fd fd15 	bl	8000ae0 <chSysHalt>
 80030b6:	bf00      	nop
 80030b8:	200011b0 	.word	0x200011b0
 80030bc:	0800b55c 	.word	0x0800b55c
 80030c0:	0800b8d0 	.word	0x0800b8d0
	...

080030d0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80030d0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 80030d2:	4c10      	ldr	r4, [pc, #64]	; (8003114 <chSchGoSleepS+0x44>)
 80030d4:	69a5      	ldr	r5, [r4, #24]
void chSchGoSleepS(tstate_t newstate) {
 80030d6:	4606      	mov	r6, r0
  chDbgCheckClassS();
 80030d8:	f7fd fd32 	bl	8000b40 <chDbgCheckClassS>
  thread_t *tp = tqp->next;
 80030dc:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 80030de:	f885 6020 	strb.w	r6, [r5, #32]
  tqp->next             = tp->queue.next;
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80030e6:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80030e8:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 80030ea:	4628      	mov	r0, r5
  currp->state = CH_STATE_CURRENT;
 80030ec:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80030f0:	61a3      	str	r3, [r4, #24]
  chSysSwitch(currp, otp);
 80030f2:	f7fd fca5 	bl	8000a40 <_trace_switch.constprop.88>
 80030f6:	f3ef 8309 	mrs	r3, PSP
 80030fa:	69ea      	ldr	r2, [r5, #28]
 80030fc:	3b24      	subs	r3, #36	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	d805      	bhi.n	800310e <chSchGoSleepS+0x3e>
 8003102:	4629      	mov	r1, r5
 8003104:	69a0      	ldr	r0, [r4, #24]
}
 8003106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 800310a:	f7fd b8b9 	b.w	8000280 <_port_switch>
 800310e:	4802      	ldr	r0, [pc, #8]	; (8003118 <chSchGoSleepS+0x48>)
 8003110:	f7fd fce6 	bl	8000ae0 <chSysHalt>
 8003114:	200011b0 	.word	0x200011b0
 8003118:	0800b8d0 	.word	0x0800b8d0
 800311c:	00000000 	.word	0x00000000

08003120 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <chMtxLockS+0xfc>)
void chMtxLockS(mutex_t *mp) {
 8003124:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8003126:	699d      	ldr	r5, [r3, #24]
  chDbgCheckClassS();
 8003128:	f7fd fd0a 	bl	8000b40 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 800312c:	b32c      	cbz	r4, 800317a <chMtxLockS+0x5a>
  if (mp->owner != NULL) {
 800312e:	68a0      	ldr	r0, [r4, #8]
 8003130:	2800      	cmp	r0, #0
 8003132:	d04a      	beq.n	80031ca <chMtxLockS+0xaa>
      while (tp->prio < ctp->prio) {
 8003134:	68aa      	ldr	r2, [r5, #8]
 8003136:	6883      	ldr	r3, [r0, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <chMtxLockS+0x2e>
        switch (tp->state) {
 800313c:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8003140:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8003142:	2b06      	cmp	r3, #6
 8003144:	d046      	beq.n	80031d4 <chMtxLockS+0xb4>
 8003146:	2b07      	cmp	r3, #7
 8003148:	d01e      	beq.n	8003188 <chMtxLockS+0x68>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d030      	beq.n	80031b0 <chMtxLockS+0x90>
      queue_prio_insert(ctp, &mp->queue);
 800314e:	4626      	mov	r6, r4
 8003150:	4623      	mov	r3, r4
 8003152:	e003      	b.n	800315c <chMtxLockS+0x3c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	68aa      	ldr	r2, [r5, #8]
 8003158:	4291      	cmp	r1, r2
 800315a:	d334      	bcc.n	80031c6 <chMtxLockS+0xa6>
    cp = cp->queue.next;
 800315c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800315e:	429c      	cmp	r4, r3
 8003160:	d1f8      	bne.n	8003154 <chMtxLockS+0x34>
  tp->queue.prev             = cp->queue.prev;
 8003162:	6873      	ldr	r3, [r6, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8003164:	2006      	movs	r0, #6
 8003166:	e9c5 6300 	strd	r6, r3, [r5]
  tp->queue.prev->queue.next = tp;
 800316a:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 800316c:	6075      	str	r5, [r6, #4]
      ctp->u.wtmtxp = mp;
 800316e:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8003170:	f7ff ffae 	bl	80030d0 <chSchGoSleepS>
      chDbgAssert(mp->owner == ctp, "not owner");
 8003174:	68a3      	ldr	r3, [r4, #8]
 8003176:	42ab      	cmp	r3, r5
 8003178:	d002      	beq.n	8003180 <chMtxLockS+0x60>
  chDbgCheck(mp != NULL);
 800317a:	4829      	ldr	r0, [pc, #164]	; (8003220 <chMtxLockS+0x100>)
 800317c:	f7fd fcb0 	bl	8000ae0 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8003180:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003182:	42a3      	cmp	r3, r4
 8003184:	d1f9      	bne.n	800317a <chMtxLockS+0x5a>
}
 8003186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8003188:	e9d0 1300 	ldrd	r1, r3, [r0]
 800318c:	6019      	str	r1, [r3, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800318e:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8003190:	6801      	ldr	r1, [r0, #0]
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	4633      	mov	r3, r6
 8003196:	e002      	b.n	800319e <chMtxLockS+0x7e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	4291      	cmp	r1, r2
 800319c:	d334      	bcc.n	8003208 <chMtxLockS+0xe8>
    cp = cp->queue.next;
 800319e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80031a0:	429e      	cmp	r6, r3
 80031a2:	d1f9      	bne.n	8003198 <chMtxLockS+0x78>
  tp->queue.prev             = cp->queue.prev;
 80031a4:	6873      	ldr	r3, [r6, #4]
 80031a6:	e9c0 6300 	strd	r6, r3, [r0]
  tp->queue.prev->queue.next = tp;
 80031aa:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 80031ac:	6070      	str	r0, [r6, #4]
 80031ae:	e7ce      	b.n	800314e <chMtxLockS+0x2e>
  tp->queue.prev->queue.next = tp->queue.next;
 80031b0:	e9d0 2300 	ldrd	r2, r3, [r0]
          tp->state = CH_STATE_CURRENT;
 80031b4:	2101      	movs	r1, #1
 80031b6:	f880 1020 	strb.w	r1, [r0, #32]
 80031ba:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80031bc:	6802      	ldr	r2, [r0, #0]
 80031be:	6053      	str	r3, [r2, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80031c0:	f7fd fd7e 	bl	8000cc0 <chSchReadyI>
 80031c4:	e7c3      	b.n	800314e <chMtxLockS+0x2e>
    cp = cp->queue.next;
 80031c6:	461e      	mov	r6, r3
 80031c8:	e7cb      	b.n	8003162 <chMtxLockS+0x42>
    mp->next = ctp->mtxlist;
 80031ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80031cc:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 80031d0:	63ac      	str	r4, [r5, #56]	; 0x38
}
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 80031d4:	e9d0 1300 	ldrd	r1, r3, [r0]
 80031d8:	6019      	str	r1, [r3, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80031da:	6a46      	ldr	r6, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80031dc:	6801      	ldr	r1, [r0, #0]
 80031de:	4637      	mov	r7, r6
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	4633      	mov	r3, r6
 80031e4:	e002      	b.n	80031ec <chMtxLockS+0xcc>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	4291      	cmp	r1, r2
 80031ea:	d314      	bcc.n	8003216 <chMtxLockS+0xf6>
    cp = cp->queue.next;
 80031ec:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80031ee:	429e      	cmp	r6, r3
 80031f0:	d1f9      	bne.n	80031e6 <chMtxLockS+0xc6>
  tp->queue.prev             = cp->queue.prev;
 80031f2:	687b      	ldr	r3, [r7, #4]
      while (tp->prio < ctp->prio) {
 80031f4:	68aa      	ldr	r2, [r5, #8]
 80031f6:	e9c0 7300 	strd	r7, r3, [r0]
  tp->queue.prev->queue.next = tp;
 80031fa:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 80031fc:	6078      	str	r0, [r7, #4]
          tp = tp->u.wtmtxp->owner;
 80031fe:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8003200:	6883      	ldr	r3, [r0, #8]
 8003202:	4293      	cmp	r3, r2
 8003204:	d39a      	bcc.n	800313c <chMtxLockS+0x1c>
 8003206:	e7a2      	b.n	800314e <chMtxLockS+0x2e>
    cp = cp->queue.next;
 8003208:	461e      	mov	r6, r3
  tp->queue.prev             = cp->queue.prev;
 800320a:	6873      	ldr	r3, [r6, #4]
 800320c:	e9c0 6300 	strd	r6, r3, [r0]
  tp->queue.prev->queue.next = tp;
 8003210:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8003212:	6070      	str	r0, [r6, #4]
 8003214:	e79b      	b.n	800314e <chMtxLockS+0x2e>
    cp = cp->queue.next;
 8003216:	461f      	mov	r7, r3
 8003218:	e7eb      	b.n	80031f2 <chMtxLockS+0xd2>
 800321a:	bf00      	nop
 800321c:	200011b0 	.word	0x200011b0
 8003220:	0800b420 	.word	0x0800b420
	...

08003230 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8003230:	b508      	push	{r3, lr}
  thread_t *tp = currp;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <chThdExitS+0x48>)
 8003234:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003238:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800323a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800323e:	42ab      	cmp	r3, r5
 8003240:	d007      	beq.n	8003252 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fd3a 	bl	8000cc0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 800324c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 800324e:	42ab      	cmp	r3, r5
 8003250:	d1f7      	bne.n	8003242 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 8003252:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003256:	b943      	cbnz	r3, 800326a <chThdExitS+0x3a>
 8003258:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800325c:	079b      	lsls	r3, r3, #30
 800325e:	d104      	bne.n	800326a <chThdExitS+0x3a>
    REG_REMOVE(tp);
 8003260:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	6922      	ldr	r2, [r4, #16]
 8003268:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 800326a:	200f      	movs	r0, #15
 800326c:	f7ff ff30 	bl	80030d0 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <chThdExitS+0x4c>)
 8003272:	f7fd fc35 	bl	8000ae0 <chSysHalt>
 8003276:	bf00      	nop
 8003278:	200011b0 	.word	0x200011b0
 800327c:	0800b608 	.word	0x0800b608

08003280 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	460d      	mov	r5, r1
 8003284:	b086      	sub	sp, #24
 8003286:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8003288:	f7fd fc5a 	bl	8000b40 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 800328c:	1c6b      	adds	r3, r5, #1
 800328e:	d014      	beq.n	80032ba <chSchGoSleepTimeoutS+0x3a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8003290:	4c0e      	ldr	r4, [pc, #56]	; (80032cc <chSchGoSleepTimeoutS+0x4c>)
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <chSchGoSleepTimeoutS+0x50>)
 8003294:	69a3      	ldr	r3, [r4, #24]
 8003296:	4629      	mov	r1, r5
 8003298:	a801      	add	r0, sp, #4
 800329a:	f7fe fe11 	bl	8001ec0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800329e:	4630      	mov	r0, r6
 80032a0:	f7ff ff16 	bl	80030d0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80032a4:	f7fd fc5c 	bl	8000b60 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80032a8:	9b04      	ldr	r3, [sp, #16]
 80032aa:	b113      	cbz	r3, 80032b2 <chSchGoSleepTimeoutS+0x32>
      chVTDoResetI(&vt);
 80032ac:	a801      	add	r0, sp, #4
 80032ae:	f7fe fdbf 	bl	8001e30 <chVTDoResetI>
  return currp->u.rdymsg;
 80032b2:	69a3      	ldr	r3, [r4, #24]
}
 80032b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80032b6:	b006      	add	sp, #24
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	4c04      	ldr	r4, [pc, #16]	; (80032cc <chSchGoSleepTimeoutS+0x4c>)
    chSchGoSleepS(newstate);
 80032bc:	4630      	mov	r0, r6
 80032be:	f7ff ff07 	bl	80030d0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80032c2:	69a3      	ldr	r3, [r4, #24]
}
 80032c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80032c6:	b006      	add	sp, #24
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
 80032ca:	bf00      	nop
 80032cc:	200011b0 	.word	0x200011b0
 80032d0:	080010c1 	.word	0x080010c1
	...

080032e0 <chSemWaitTimeoutS>:
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	460d      	mov	r5, r1
  chDbgCheckClassS();
 80032e6:	f7fd fc2b 	bl	8000b40 <chDbgCheckClassS>
  chDbgCheck(sp != NULL);
 80032ea:	b12c      	cbz	r4, 80032f8 <chSemWaitTimeoutS+0x18>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80032ec:	68a3      	ldr	r3, [r4, #8]
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	db04      	blt.n	80032fe <chSemWaitTimeoutS+0x1e>
 80032f4:	42a2      	cmp	r2, r4
 80032f6:	d004      	beq.n	8003302 <chSemWaitTimeoutS+0x22>
  chDbgCheck(sp != NULL);
 80032f8:	480e      	ldr	r0, [pc, #56]	; (8003334 <chSemWaitTimeoutS+0x54>)
 80032fa:	f7fd fbf1 	bl	8000ae0 <chSysHalt>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 80032fe:	42a2      	cmp	r2, r4
 8003300:	d0fa      	beq.n	80032f8 <chSemWaitTimeoutS+0x18>
  if (--sp->cnt < (cnt_t)0) {
 8003302:	1e5a      	subs	r2, r3, #1
 8003304:	2a00      	cmp	r2, #0
 8003306:	60a2      	str	r2, [r4, #8]
 8003308:	db01      	blt.n	800330e <chSemWaitTimeoutS+0x2e>
  return MSG_OK;
 800330a:	2000      	movs	r0, #0
}
 800330c:	bd38      	pop	{r3, r4, r5, pc}
    if (TIME_IMMEDIATE == timeout) {
 800330e:	b16d      	cbz	r5, 800332c <chSemWaitTimeoutS+0x4c>
    currp->u.wtsemp = sp;
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <chSemWaitTimeoutS+0x58>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	605a      	str	r2, [r3, #4]
  tp->queue.next             = (thread_t *)tqp;
 800331a:	601c      	str	r4, [r3, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 800331c:	4629      	mov	r1, r5
  tp->queue.prev->queue.next = tp;
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8003322:	6063      	str	r3, [r4, #4]
}
 8003324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8003328:	f7ff bfaa 	b.w	8003280 <chSchGoSleepTimeoutS>
      sp->cnt++;
 800332c:	60a3      	str	r3, [r4, #8]
      return MSG_TIMEOUT;
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	0800b518 	.word	0x0800b518
 8003338:	200011b0 	.word	0x200011b0
 800333c:	00000000 	.word	0x00000000

08003340 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8003340:	b161      	cbz	r1, 800335c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003344:	b410      	push	{r4}
 8003346:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8003348:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800334a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800334c:	2004      	movs	r0, #4
 800334e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8003352:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8003354:	6053      	str	r3, [r2, #4]
}
 8003356:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003358:	f7ff bf92 	b.w	8003280 <chSchGoSleepTimeoutS>
}
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	200011b0 	.word	0x200011b0
	...

08003370 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
  osalDbgCheckClassS();
 8003376:	f7fd fbe3 	bl	8000b40 <chDbgCheckClassS>
 800337a:	e007      	b.n	800338c <obqGetEmptyBufferTimeoutS+0x1c>
    if (obqp->suspended) {
 800337c:	7a23      	ldrb	r3, [r4, #8]
 800337e:	b993      	cbnz	r3, 80033a6 <obqGetEmptyBufferTimeoutS+0x36>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8003380:	4629      	mov	r1, r5
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff ffdc 	bl	8003340 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003388:	2800      	cmp	r0, #0
 800338a:	db0b      	blt.n	80033a4 <obqGetEmptyBufferTimeoutS+0x34>
  while (obqIsFullI(obqp)) {
 800338c:	68e3      	ldr	r3, [r4, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f4      	beq.n	800337c <obqGetEmptyBufferTimeoutS+0xc>
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8003392:	68e3      	ldr	r3, [r4, #12]
 8003394:	b153      	cbz	r3, 80033ac <obqGetEmptyBufferTimeoutS+0x3c>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8003396:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8003398:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800339a:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 800339c:	440b      	add	r3, r1
 800339e:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 80033a2:	2000      	movs	r0, #0
}
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80033a6:	f06f 0001 	mvn.w	r0, #1
}
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <obqGetEmptyBufferTimeoutS+0x44>)
 80033ae:	f7fd fb97 	bl	8000ae0 <chSysHalt>
 80033b2:	bf00      	nop
 80033b4:	0800b7d4 	.word	0x0800b7d4
	...

080033c0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 80033c0:	b538      	push	{r3, r4, r5, lr}
 80033c2:	4604      	mov	r4, r0
 80033c4:	460d      	mov	r5, r1
  osalDbgCheckClassS();
 80033c6:	f7fd fbbb 	bl	8000b40 <chDbgCheckClassS>
 80033ca:	e007      	b.n	80033dc <ibqGetFullBufferTimeoutS+0x1c>
    if (ibqp->suspended) {
 80033cc:	7a23      	ldrb	r3, [r4, #8]
 80033ce:	b993      	cbnz	r3, 80033f6 <ibqGetFullBufferTimeoutS+0x36>
 80033d0:	4629      	mov	r1, r5
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff ffb4 	bl	8003340 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80033d8:	2800      	cmp	r0, #0
 80033da:	db0b      	blt.n	80033f4 <ibqGetFullBufferTimeoutS+0x34>
  while (ibqIsEmptyI(ibqp)) {
 80033dc:	68e3      	ldr	r3, [r4, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f4      	beq.n	80033cc <ibqGetFullBufferTimeoutS+0xc>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	b153      	cbz	r3, 80033fc <ibqGetFullBufferTimeoutS+0x3c>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80033e6:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80033e8:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80033ea:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80033ec:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80033ee:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80033f2:	2000      	movs	r0, #0
}
 80033f4:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80033f6:	f06f 0001 	mvn.w	r0, #1
}
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 80033fc:	4801      	ldr	r0, [pc, #4]	; (8003404 <ibqGetFullBufferTimeoutS+0x44>)
 80033fe:	f7fd fb6f 	bl	8000ae0 <chSysHalt>
 8003402:	bf00      	nop
 8003404:	0800b708 	.word	0x0800b708
	...

08003410 <SVC_Handler>:
 8003410:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8003414:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003416:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800341a:	2300      	movs	r3, #0
 800341c:	f383 8811 	msr	BASEPRI, r3
}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
	...

08003430 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8003430:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8003432:	4d1a      	ldr	r5, [pc, #104]	; (800349c <chSchDoReschedule+0x6c>)
  thread_t *tp = tqp->next;
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	69ae      	ldr	r6, [r5, #24]
  tqp->next             = tp->queue.next;
 8003438:	681c      	ldr	r4, [r3, #0]
 800343a:	602c      	str	r4, [r5, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800343c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800343e:	6065      	str	r5, [r4, #4]
 8003440:	f883 2020 	strb.w	r2, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003444:	61ab      	str	r3, [r5, #24]
  chDbgCheckClassI();
 8003446:	f7fd fb8b 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800344a:	b30e      	cbz	r6, 8003490 <chSchDoReschedule+0x60>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800344c:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003450:	b1f3      	cbz	r3, 8003490 <chSchDoReschedule+0x60>
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d01c      	beq.n	8003490 <chSchDoReschedule+0x60>
  tp->state = CH_STATE_READY;
 8003456:	2300      	movs	r3, #0
  } while (cp->prio > tp->prio);
 8003458:	68b2      	ldr	r2, [r6, #8]
  tp->state = CH_STATE_READY;
 800345a:	f886 3020 	strb.w	r3, [r6, #32]
 800345e:	e000      	b.n	8003462 <chSchDoReschedule+0x32>
 8003460:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio > tp->prio);
 8003462:	68a3      	ldr	r3, [r4, #8]
 8003464:	4293      	cmp	r3, r2
 8003466:	d8fb      	bhi.n	8003460 <chSchDoReschedule+0x30>
  tp->queue.prev             = cp->queue.prev;
 8003468:	6863      	ldr	r3, [r4, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800346a:	4630      	mov	r0, r6
  tp->queue.prev             = cp->queue.prev;
 800346c:	e9c6 4300 	strd	r4, r3, [r6]
  tp->queue.prev->queue.next = tp;
 8003470:	601e      	str	r6, [r3, #0]
  cp->queue.prev             = tp;
 8003472:	6066      	str	r6, [r4, #4]
  chSysSwitch(currp, otp);
 8003474:	f7fd fae4 	bl	8000a40 <_trace_switch.constprop.88>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003478:	f3ef 8309 	mrs	r3, PSP
 800347c:	69f2      	ldr	r2, [r6, #28]
 800347e:	3b24      	subs	r3, #36	; 0x24
 8003480:	429a      	cmp	r2, r3
 8003482:	d808      	bhi.n	8003496 <chSchDoReschedule+0x66>
 8003484:	4631      	mov	r1, r6
 8003486:	69a8      	ldr	r0, [r5, #24]
}
 8003488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 800348c:	f7fc bef8 	b.w	8000280 <_port_switch>
  chDbgCheck(tp != NULL);
 8003490:	4803      	ldr	r0, [pc, #12]	; (80034a0 <chSchDoReschedule+0x70>)
 8003492:	f7fd fb25 	bl	8000ae0 <chSysHalt>
  chSysSwitch(currp, otp);
 8003496:	4803      	ldr	r0, [pc, #12]	; (80034a4 <chSchDoReschedule+0x74>)
 8003498:	f7fd fb22 	bl	8000ae0 <chSysHalt>
 800349c:	200011b0 	.word	0x200011b0
 80034a0:	0800b448 	.word	0x0800b448
 80034a4:	0800b8d0 	.word	0x0800b8d0
	...

080034b0 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 80034b0:	b508      	push	{r3, lr}
  chDbgCheckClassS();
 80034b2:	f7fd fb45 	bl	8000b40 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 80034b6:	f7fd fb53 	bl	8000b60 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <chSchRescheduleS+0x24>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80034c0:	6892      	ldr	r2, [r2, #8]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d800      	bhi.n	80034ca <chSchRescheduleS+0x1a>
}
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chSchDoRescheduleAhead();
 80034ce:	f7ff bfaf 	b.w	8003430 <chSchDoReschedule>
 80034d2:	bf00      	nop
 80034d4:	200011b0 	.word	0x200011b0
	...

080034e0 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 80034e0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <_dbg_check_unlock+0x18>)
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	b922      	cbnz	r2, 80034f2 <_dbg_check_unlock+0x12>
 80034e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ea:	2900      	cmp	r1, #0
 80034ec:	dd01      	ble.n	80034f2 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80034f0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 80034f2:	4802      	ldr	r0, [pc, #8]	; (80034fc <_dbg_check_unlock+0x1c>)
 80034f4:	f7fd faf4 	bl	8000ae0 <chSysHalt>
 80034f8:	200011b0 	.word	0x200011b0
 80034fc:	0800b870 	.word	0x0800b870

08003500 <chSysUnlock.lto_priv.105>:
static inline void chSysUnlock(void) {
 8003500:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8003502:	f7ff ffed 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <chSysUnlock.lto_priv.105+0x28>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d004      	beq.n	8003518 <chSysUnlock.lto_priv.105+0x18>
 800350e:	6999      	ldr	r1, [r3, #24]
 8003510:	6893      	ldr	r3, [r2, #8]
 8003512:	688a      	ldr	r2, [r1, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	d303      	bcc.n	8003520 <chSysUnlock.lto_priv.105+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003518:	2300      	movs	r3, #0
 800351a:	f383 8811 	msr	BASEPRI, r3
}
 800351e:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <chSysUnlock.lto_priv.105+0x2c>)
 8003522:	f7fd fadd 	bl	8000ae0 <chSysHalt>
 8003526:	bf00      	nop
 8003528:	200011b0 	.word	0x200011b0
 800352c:	0800b2d4 	.word	0x0800b2d4

08003530 <chSysUnlock.lto_priv.121>:
static inline void chSysUnlock(void) {
 8003530:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8003532:	f7ff ffd5 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <chSysUnlock.lto_priv.121+0x28>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d004      	beq.n	8003548 <chSysUnlock.lto_priv.121+0x18>
 800353e:	6999      	ldr	r1, [r3, #24]
 8003540:	6893      	ldr	r3, [r2, #8]
 8003542:	688a      	ldr	r2, [r1, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d303      	bcc.n	8003550 <chSysUnlock.lto_priv.121+0x20>
 8003548:	2300      	movs	r3, #0
 800354a:	f383 8811 	msr	BASEPRI, r3
}
 800354e:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <chSysUnlock.lto_priv.121+0x2c>)
 8003552:	f7fd fac5 	bl	8000ae0 <chSysHalt>
 8003556:	bf00      	nop
 8003558:	200011b0 	.word	0x200011b0
 800355c:	0800b388 	.word	0x0800b388

08003560 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8003560:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003562:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800356a:	b983      	cbnz	r3, 800358e <chSysRestoreStatusX.part.2+0x2e>
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 800356c:	f7ff ffa0 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8003570:	f7ff ffb6 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <chSysRestoreStatusX.part.2+0x40>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d004      	beq.n	8003586 <chSysRestoreStatusX.part.2+0x26>
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	6893      	ldr	r3, [r2, #8]
 8003580:	688a      	ldr	r2, [r1, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d309      	bcc.n	800359a <chSysRestoreStatusX.part.2+0x3a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003586:	2300      	movs	r3, #0
 8003588:	f383 8811 	msr	BASEPRI, r3
      chSysUnlock();
    }
  }
}
 800358c:	bd08      	pop	{r3, pc}
  _dbg_check_unlock_from_isr();
 800358e:	f7fd fd67 	bl	8001060 <_dbg_check_unlock_from_isr>
 8003592:	2300      	movs	r3, #0
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800359a:	4802      	ldr	r0, [pc, #8]	; (80035a4 <chSysRestoreStatusX.part.2+0x44>)
 800359c:	f7fd faa0 	bl	8000ae0 <chSysHalt>
 80035a0:	200011b0 	.word	0x200011b0
 80035a4:	0800b298 	.word	0x0800b298
	...

080035b0 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 80035b0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <_dbg_check_lock+0x18>)
 80035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b6:	b90a      	cbnz	r2, 80035bc <_dbg_check_lock+0xc>
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	b112      	cbz	r2, 80035c2 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 80035bc:	4803      	ldr	r0, [pc, #12]	; (80035cc <_dbg_check_lock+0x1c>)
 80035be:	f7fd fa8f 	bl	8000ae0 <chSysHalt>
  _dbg_enter_lock();
 80035c2:	2201      	movs	r2, #1
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80035c6:	bd08      	pop	{r3, pc}
 80035c8:	200011b0 	.word	0x200011b0
 80035cc:	0800b858 	.word	0x0800b858

080035d0 <chSemSignalWait.constprop.55>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	2320      	movs	r3, #32
 80035d4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chDbgCheck((sps != NULL) && (spw != NULL));

  chSysLock();
  chDbgAssert(((sps->cnt >= (cnt_t)0) && queue_isempty(&sps->queue)) ||
 80035d8:	4c21      	ldr	r4, [pc, #132]	; (8003660 <chSemSignalWait.constprop.55+0x90>)
  _dbg_check_lock();
 80035da:	f7ff ffe9 	bl	80035b0 <_dbg_check_lock>
 80035de:	68a3      	ldr	r3, [r4, #8]
 80035e0:	6822      	ldr	r2, [r4, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db04      	blt.n	80035f0 <chSemSignalWait.constprop.55+0x20>
 80035e6:	42a2      	cmp	r2, r4
 80035e8:	d004      	beq.n	80035f4 <chSemSignalWait.constprop.55+0x24>
 80035ea:	481e      	ldr	r0, [pc, #120]	; (8003664 <chSemSignalWait.constprop.55+0x94>)
 80035ec:	f7fd fa78 	bl	8000ae0 <chSysHalt>
 80035f0:	42a2      	cmp	r2, r4
 80035f2:	d0fa      	beq.n	80035ea <chSemSignalWait.constprop.55+0x1a>
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 80035f4:	3301      	adds	r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	60a3      	str	r3, [r4, #8]
 80035fa:	dd23      	ble.n	8003644 <chSemSignalWait.constprop.55+0x74>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 80035fc:	3b01      	subs	r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	db12      	blt.n	800362a <chSemSignalWait.constprop.55+0x5a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8003604:	f7ff ff54 	bl	80034b0 <chSchRescheduleS>
 8003608:	4d17      	ldr	r5, [pc, #92]	; (8003668 <chSemSignalWait.constprop.55+0x98>)
    msg = MSG_OK;
 800360a:	2400      	movs	r4, #0
  _dbg_check_unlock();
 800360c:	f7ff ff68 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	42ab      	cmp	r3, r5
 8003614:	d004      	beq.n	8003620 <chSemSignalWait.constprop.55+0x50>
 8003616:	69aa      	ldr	r2, [r5, #24]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	6892      	ldr	r2, [r2, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d31b      	bcc.n	8003658 <chSemSignalWait.constprop.55+0x88>
 8003620:	2300      	movs	r3, #0
 8003622:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8003626:	4620      	mov	r0, r4
 8003628:	bd70      	pop	{r4, r5, r6, pc}
    thread_t *ctp = currp;
 800362a:	4d0f      	ldr	r5, [pc, #60]	; (8003668 <chSemSignalWait.constprop.55+0x98>)
  tp->queue.prev             = tqp->prev;
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	69ae      	ldr	r6, [r5, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003630:	2005      	movs	r0, #5
 8003632:	e9c6 4300 	strd	r4, r3, [r6]
  tp->queue.prev->queue.next = tp;
 8003636:	601e      	str	r6, [r3, #0]
    ctp->u.wtsemp = spw;
 8003638:	6274      	str	r4, [r6, #36]	; 0x24
  tqp->prev                  = tp;
 800363a:	6066      	str	r6, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800363c:	f7ff fd48 	bl	80030d0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8003640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003642:	e7e3      	b.n	800360c <chSemSignalWait.constprop.55+0x3c>
  thread_t *tp = tqp->next;
 8003644:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8003646:	6803      	ldr	r3, [r0, #0]
 8003648:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800364a:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800364c:	f7fd fb38 	bl	8000cc0 <chSchReadyI>
 8003650:	2200      	movs	r2, #0
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	6242      	str	r2, [r0, #36]	; 0x24
 8003656:	e7d1      	b.n	80035fc <chSemSignalWait.constprop.55+0x2c>
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <chSemSignalWait.constprop.55+0x9c>)
 800365a:	f7fd fa41 	bl	8000ae0 <chSysHalt>
 800365e:	bf00      	nop
 8003660:	20001c20 	.word	0x20001c20
 8003664:	0800b5e8 	.word	0x0800b5e8
 8003668:	200011b0 	.word	0x200011b0
 800366c:	0800b2b0 	.word	0x0800b2b0

08003670 <chMtxTryLock.constprop.52>:
bool chMtxTryLock(mutex_t *mp) {
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	2320      	movs	r3, #32
 8003674:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003678:	f7ff ff9a 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassS();
 800367c:	f7fd fa60 	bl	8000b40 <chDbgCheckClassS>
  if (mp->owner != NULL) {
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <chMtxTryLock.constprop.52+0x4c>)
 8003682:	4c0f      	ldr	r4, [pc, #60]	; (80036c0 <chMtxTryLock.constprop.52+0x50>)
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	b192      	cbz	r2, 80036ae <chMtxTryLock.constprop.52+0x3e>
    return false;
 8003688:	2500      	movs	r5, #0
  _dbg_check_unlock();
 800368a:	f7ff ff29 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	42a3      	cmp	r3, r4
 8003692:	d004      	beq.n	800369e <chMtxTryLock.constprop.52+0x2e>
 8003694:	69a2      	ldr	r2, [r4, #24]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d304      	bcc.n	80036a8 <chMtxTryLock.constprop.52+0x38>
 800369e:	2300      	movs	r3, #0
 80036a0:	f383 8811 	msr	BASEPRI, r3
}
 80036a4:	4628      	mov	r0, r5
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <chMtxTryLock.constprop.52+0x54>)
 80036aa:	f7fd fa19 	bl	8000ae0 <chSysHalt>
  mp->owner = currp;
 80036ae:	69a2      	ldr	r2, [r4, #24]
 80036b0:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 80036b2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80036b4:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 80036b6:	6393      	str	r3, [r2, #56]	; 0x38
 80036b8:	2501      	movs	r5, #1
 80036ba:	e7e6      	b.n	800368a <chMtxTryLock.constprop.52+0x1a>
 80036bc:	20000c38 	.word	0x20000c38
 80036c0:	200011b0 	.word	0x200011b0
 80036c4:	0800b2bc 	.word	0x0800b2bc
	...

080036d0 <chCondSignal.constprop.50>:
void chCondSignal(condition_variable_t *cp) {
 80036d0:	b508      	push	{r3, lr}
 80036d2:	2320      	movs	r3, #32
 80036d4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80036d8:	f7ff ff6a 	bl	80035b0 <_dbg_check_lock>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <chCondSignal.constprop.50+0x44>)
 80036de:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 80036e0:	4298      	cmp	r0, r3
 80036e2:	d005      	beq.n	80036f0 <chCondSignal.constprop.50+0x20>
  tqp->next             = tp->queue.next;
 80036e4:	6802      	ldr	r2, [r0, #0]
 80036e6:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80036e8:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 80036ea:	2100      	movs	r1, #0
 80036ec:	f7ff fcb0 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 80036f0:	f7ff fef6 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <chCondSignal.constprop.50+0x48>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d004      	beq.n	8003706 <chCondSignal.constprop.50+0x36>
 80036fc:	6999      	ldr	r1, [r3, #24]
 80036fe:	6893      	ldr	r3, [r2, #8]
 8003700:	688a      	ldr	r2, [r1, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	d303      	bcc.n	800370e <chCondSignal.constprop.50+0x3e>
 8003706:	2300      	movs	r3, #0
 8003708:	f383 8811 	msr	BASEPRI, r3
}
 800370c:	bd08      	pop	{r3, pc}
 800370e:	4803      	ldr	r0, [pc, #12]	; (800371c <chCondSignal.constprop.50+0x4c>)
 8003710:	f7fd f9e6 	bl	8000ae0 <chSysHalt>
 8003714:	20000c04 	.word	0x20000c04
 8003718:	200011b0 	.word	0x200011b0
 800371c:	0800b2c8 	.word	0x0800b2c8

08003720 <chEvtGetAndClearEvents.constprop.41>:
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	2320      	movs	r3, #32
 8003724:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8003728:	4c0c      	ldr	r4, [pc, #48]	; (800375c <chEvtGetAndClearEvents.constprop.41+0x3c>)
  _dbg_check_lock();
 800372a:	f7ff ff41 	bl	80035b0 <_dbg_check_lock>
 800372e:	69a3      	ldr	r3, [r4, #24]
  currp->epending &= ~events;
 8003730:	2200      	movs	r2, #0
  m = currp->epending & events;
 8003732:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  currp->epending &= ~events;
 8003734:	635a      	str	r2, [r3, #52]	; 0x34
  _dbg_check_unlock();
 8003736:	f7ff fed3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	42a3      	cmp	r3, r4
 800373e:	d004      	beq.n	800374a <chEvtGetAndClearEvents.constprop.41+0x2a>
 8003740:	69a2      	ldr	r2, [r4, #24]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d304      	bcc.n	8003754 <chEvtGetAndClearEvents.constprop.41+0x34>
 800374a:	2300      	movs	r3, #0
 800374c:	f383 8811 	msr	BASEPRI, r3
}
 8003750:	4628      	mov	r0, r5
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <chEvtGetAndClearEvents.constprop.41+0x40>)
 8003756:	f7fd f9c3 	bl	8000ae0 <chSysHalt>
 800375a:	bf00      	nop
 800375c:	200011b0 	.word	0x200011b0
 8003760:	0800b2d4 	.word	0x0800b2d4
	...

08003770 <rt_test_008_007_setup>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 8003770:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8003772:	f7ff ffd5 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003776:	4a02      	ldr	r2, [pc, #8]	; (8003780 <rt_test_008_007_setup+0x10>)
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <rt_test_008_007_setup+0x14>)
 800377a:	6012      	str	r2, [r2, #0]
 800377c:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 800377e:	bd08      	pop	{r3, pc}
 8003780:	20000c0c 	.word	0x20000c0c
 8003784:	20000c10 	.word	0x20000c10
	...

08003790 <rt_test_008_006_setup>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8003790:	f7ff bfc6 	b.w	8003720 <chEvtGetAndClearEvents.constprop.41>
	...

080037a0 <rt_test_008_005_setup>:
 80037a0:	f7ff bff6 	b.w	8003790 <rt_test_008_006_setup>
	...

080037b0 <rt_test_008_004_setup>:
 80037b0:	f7ff bfee 	b.w	8003790 <rt_test_008_006_setup>
	...

080037c0 <rt_test_008_003_setup>:
 80037c0:	f7ff bfe6 	b.w	8003790 <rt_test_008_006_setup>
	...

080037d0 <rt_test_008_002_setup>:
 80037d0:	f7ff bfde 	b.w	8003790 <rt_test_008_006_setup>
	...

080037e0 <chEvtWaitOne.constprop.37>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 80037e0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80037e2:	4c13      	ldr	r4, [pc, #76]	; (8003830 <chEvtWaitOne.constprop.37+0x50>)
 80037e4:	2320      	movs	r3, #32
 80037e6:	69a6      	ldr	r6, [r4, #24]
 80037e8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80037ec:	f7ff fee0 	bl	80035b0 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80037f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80037f2:	b933      	cbnz	r3, 8003802 <chEvtWaitOne.constprop.37+0x22>
    ctp->u.ewmask = events;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80037fa:	200a      	movs	r0, #10
 80037fc:	f7ff fc68 	bl	80030d0 <chSchGoSleepS>
    m = ctp->epending & events;
 8003800:	6b73      	ldr	r3, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 8003802:	425d      	negs	r5, r3
 8003804:	401d      	ands	r5, r3
  ctp->epending &= ~m;
 8003806:	ea23 0305 	bic.w	r3, r3, r5
 800380a:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 800380c:	f7ff fe68 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	42a3      	cmp	r3, r4
 8003814:	d004      	beq.n	8003820 <chEvtWaitOne.constprop.37+0x40>
 8003816:	69a2      	ldr	r2, [r4, #24]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d304      	bcc.n	800382a <chEvtWaitOne.constprop.37+0x4a>
 8003820:	2300      	movs	r3, #0
 8003822:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003826:	4628      	mov	r0, r5
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	4802      	ldr	r0, [pc, #8]	; (8003834 <chEvtWaitOne.constprop.37+0x54>)
 800382c:	f7fd f958 	bl	8000ae0 <chSysHalt>
 8003830:	200011b0 	.word	0x200011b0
 8003834:	0800b2d4 	.word	0x0800b2d4
	...

08003840 <chEvtWaitAny.constprop.36>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8003840:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003842:	4c12      	ldr	r4, [pc, #72]	; (800388c <chEvtWaitAny.constprop.36+0x4c>)
 8003844:	2320      	movs	r3, #32
 8003846:	69a5      	ldr	r5, [r4, #24]
 8003848:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800384c:	f7ff feb0 	bl	80035b0 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003850:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003852:	b936      	cbnz	r6, 8003862 <chEvtWaitAny.constprop.36+0x22>
    ctp->u.ewmask = events;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295
 8003858:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800385a:	200a      	movs	r0, #10
 800385c:	f7ff fc38 	bl	80030d0 <chSchGoSleepS>
    m = ctp->epending & events;
 8003860:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  }
  ctp->epending &= ~m;
 8003862:	2300      	movs	r3, #0
 8003864:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 8003866:	f7ff fe3b 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	42a3      	cmp	r3, r4
 800386e:	d004      	beq.n	800387a <chEvtWaitAny.constprop.36+0x3a>
 8003870:	69a2      	ldr	r2, [r4, #24]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d304      	bcc.n	8003884 <chEvtWaitAny.constprop.36+0x44>
 800387a:	2300      	movs	r3, #0
 800387c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003880:	4630      	mov	r0, r6
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <chEvtWaitAny.constprop.36+0x50>)
 8003886:	f7fd f92b 	bl	8000ae0 <chSysHalt>
 800388a:	bf00      	nop
 800388c:	200011b0 	.word	0x200011b0
 8003890:	0800b2d4 	.word	0x0800b2d4
	...

080038a0 <chEvtWaitAll.constprop.35>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 80038a0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 80038a2:	4c13      	ldr	r4, [pc, #76]	; (80038f0 <chEvtWaitAll.constprop.35+0x50>)
 80038a4:	2320      	movs	r3, #32
 80038a6:	69a5      	ldr	r5, [r4, #24]
 80038a8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80038ac:	f7ff fe80 	bl	80035b0 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 80038b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80038b2:	f003 0205 	and.w	r2, r3, #5
 80038b6:	2a05      	cmp	r2, #5
 80038b8:	d005      	beq.n	80038c6 <chEvtWaitAll.constprop.35+0x26>
    ctp->u.ewmask = events;
 80038ba:	2305      	movs	r3, #5
 80038bc:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80038be:	200b      	movs	r0, #11
 80038c0:	f7ff fc06 	bl	80030d0 <chSchGoSleepS>
 80038c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  }
  ctp->epending &= ~events;
 80038c6:	f023 0305 	bic.w	r3, r3, #5
 80038ca:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 80038cc:	f7ff fe08 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d004      	beq.n	80038e0 <chEvtWaitAll.constprop.35+0x40>
 80038d6:	69a2      	ldr	r2, [r4, #24]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d304      	bcc.n	80038ea <chEvtWaitAll.constprop.35+0x4a>
 80038e0:	2300      	movs	r3, #0
 80038e2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 80038e6:	2005      	movs	r0, #5
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
 80038ea:	4802      	ldr	r0, [pc, #8]	; (80038f4 <chEvtWaitAll.constprop.35+0x54>)
 80038ec:	f7fd f8f8 	bl	8000ae0 <chSysHalt>
 80038f0:	200011b0 	.word	0x200011b0
 80038f4:	0800b2d4 	.word	0x0800b2d4
	...

08003900 <chEvtWaitOneTimeout.constprop.34>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8003900:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8003902:	4c1d      	ldr	r4, [pc, #116]	; (8003978 <chEvtWaitOneTimeout.constprop.34+0x78>)
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8003904:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8003906:	69a6      	ldr	r6, [r4, #24]
 8003908:	2320      	movs	r3, #32
 800390a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800390e:	f7ff fe4f 	bl	80035b0 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8003912:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003914:	b953      	cbnz	r3, 800392c <chEvtWaitOneTimeout.constprop.34+0x2c>
    if (TIME_IMMEDIATE == timeout) {
 8003916:	b1ed      	cbz	r5, 8003954 <chEvtWaitOneTimeout.constprop.34+0x54>
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800391c:	4629      	mov	r1, r5
    ctp->u.ewmask = events;
 800391e:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003920:	200a      	movs	r0, #10
 8003922:	f7ff fcad 	bl	8003280 <chSchGoSleepTimeoutS>
 8003926:	2800      	cmp	r0, #0
 8003928:	db14      	blt.n	8003954 <chEvtWaitOneTimeout.constprop.34+0x54>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 800392a:	6b73      	ldr	r3, [r6, #52]	; 0x34
  }
  m ^= m & (m - (eventmask_t)1);
 800392c:	425d      	negs	r5, r3
 800392e:	401d      	ands	r5, r3
  ctp->epending &= ~m;
 8003930:	ea23 0305 	bic.w	r3, r3, r5
 8003934:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 8003936:	f7ff fdd3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	42a3      	cmp	r3, r4
 800393e:	d004      	beq.n	800394a <chEvtWaitOneTimeout.constprop.34+0x4a>
 8003940:	69a2      	ldr	r2, [r4, #24]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d313      	bcc.n	8003972 <chEvtWaitOneTimeout.constprop.34+0x72>
 800394a:	2300      	movs	r3, #0
 800394c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 8003950:	4628      	mov	r0, r5
 8003952:	bd70      	pop	{r4, r5, r6, pc}
  _dbg_check_unlock();
 8003954:	f7ff fdc4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	42a3      	cmp	r3, r4
 800395c:	d004      	beq.n	8003968 <chEvtWaitOneTimeout.constprop.34+0x68>
 800395e:	69a2      	ldr	r2, [r4, #24]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	6892      	ldr	r2, [r2, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d304      	bcc.n	8003972 <chEvtWaitOneTimeout.constprop.34+0x72>
 8003968:	2500      	movs	r5, #0
 800396a:	f385 8811 	msr	BASEPRI, r5
 800396e:	4628      	mov	r0, r5
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	4802      	ldr	r0, [pc, #8]	; (800397c <chEvtWaitOneTimeout.constprop.34+0x7c>)
 8003974:	f7fd f8b4 	bl	8000ae0 <chSysHalt>
 8003978:	200011b0 	.word	0x200011b0
 800397c:	0800b2d4 	.word	0x0800b2d4

08003980 <chMBReset.constprop.28>:
void chMBReset(mailbox_t *mbp) {
 8003980:	b508      	push	{r3, lr}
 8003982:	2320      	movs	r3, #32
 8003984:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003988:	f7ff fe12 	bl	80035b0 <_dbg_check_lock>
  chMBResetI(mbp);
 800398c:	f7fe fb10 	bl	8001fb0 <chMBResetI.constprop.29>
  chSchRescheduleS();
 8003990:	f7ff fd8e 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8003994:	f7ff fda4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <chMBReset.constprop.28+0x38>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d004      	beq.n	80039aa <chMBReset.constprop.28+0x2a>
 80039a0:	6999      	ldr	r1, [r3, #24]
 80039a2:	6893      	ldr	r3, [r2, #8]
 80039a4:	688a      	ldr	r2, [r1, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d303      	bcc.n	80039b2 <chMBReset.constprop.28+0x32>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f383 8811 	msr	BASEPRI, r3
}
 80039b0:	bd08      	pop	{r3, pc}
 80039b2:	4802      	ldr	r0, [pc, #8]	; (80039bc <chMBReset.constprop.28+0x3c>)
 80039b4:	f7fd f894 	bl	8000ae0 <chSysHalt>
 80039b8:	200011b0 	.word	0x200011b0
 80039bc:	0800b2f8 	.word	0x0800b2f8

080039c0 <oslib_test_001_003_teardown>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 80039c0:	f7ff bfde 	b.w	8003980 <chMBReset.constprop.28>
	...

080039d0 <oslib_test_001_002_teardown>:
 80039d0:	f7ff bff6 	b.w	80039c0 <oslib_test_001_003_teardown>
	...

080039e0 <oslib_test_001_001_teardown>:
 80039e0:	f7ff bfee 	b.w	80039c0 <oslib_test_001_003_teardown>
	...

080039f0 <chMBPostTimeout.constprop.26>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	4680      	mov	r8, r0
 80039f6:	460f      	mov	r7, r1
 80039f8:	2320      	movs	r3, #32
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	4c23      	ldr	r4, [pc, #140]	; (8003a8c <chMBPostTimeout.constprop.26+0x9c>)
  _dbg_check_lock();
 8003a00:	f7ff fdd6 	bl	80035b0 <_dbg_check_lock>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003a04:	f104 0618 	add.w	r6, r4, #24
  chDbgCheckClassS();
 8003a08:	f7fd f89a 	bl	8000b40 <chDbgCheckClassS>
 8003a0c:	e011      	b.n	8003a32 <chMBPostTimeout.constprop.26+0x42>
  chDbgCheckClassI();
 8003a0e:	f7fd f8a7 	bl	8000b60 <chDbgCheckClassI>
 8003a12:	e9d4 9500 	ldrd	r9, r5, [r4]
  chDbgCheckClassI();
 8003a16:	f7fd f8a3 	bl	8000b60 <chDbgCheckClassI>
  return mbp->cnt;
 8003a1a:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003a1c:	eba5 0209 	sub.w	r2, r5, r9
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003a20:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8003a24:	d11e      	bne.n	8003a64 <chMBPostTimeout.constprop.26+0x74>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003a26:	4639      	mov	r1, r7
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7ff fc89 	bl	8003340 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003a2e:	4605      	mov	r5, r0
 8003a30:	b920      	cbnz	r0, 8003a3c <chMBPostTimeout.constprop.26+0x4c>
    if (mbp->reset) {
 8003a32:	7d23      	ldrb	r3, [r4, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ea      	beq.n	8003a0e <chMBPostTimeout.constprop.26+0x1e>
      return MSG_RESET;
 8003a38:	f06f 0501 	mvn.w	r5, #1
  _dbg_check_unlock();
 8003a3c:	f7ff fd50 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <chMBPostTimeout.constprop.26+0xa0>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d004      	beq.n	8003a52 <chMBPostTimeout.constprop.26+0x62>
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	6893      	ldr	r3, [r2, #8]
 8003a4c:	688a      	ldr	r2, [r1, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d305      	bcc.n	8003a5e <chMBPostTimeout.constprop.26+0x6e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f383 8811 	msr	BASEPRI, r3
}
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <chMBPostTimeout.constprop.26+0xa4>)
 8003a60:	f7fd f83e 	bl	8000ae0 <chSysHalt>
      *mbp->wrptr++ = msg;
 8003a64:	68a1      	ldr	r1, [r4, #8]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003a66:	480c      	ldr	r0, [pc, #48]	; (8003a98 <chMBPostTimeout.constprop.26+0xa8>)
      *mbp->wrptr++ = msg;
 8003a68:	1d0a      	adds	r2, r1, #4
 8003a6a:	60a2      	str	r2, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 8003a6c:	4295      	cmp	r5, r2
      *mbp->wrptr++ = msg;
 8003a6e:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 8003a72:	f103 0301 	add.w	r3, r3, #1
        mbp->wrptr = mbp->buffer;
 8003a76:	bf98      	it	ls
 8003a78:	f8c4 9008 	strls.w	r9, [r4, #8]
      mbp->cnt++;
 8003a7c:	6123      	str	r3, [r4, #16]
      return MSG_OK;
 8003a7e:	2500      	movs	r5, #0
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003a80:	f7fd f946 	bl	8000d10 <chThdDequeueNextI.constprop.89>
      chSchRescheduleS();
 8003a84:	f7ff fd14 	bl	80034b0 <chSchRescheduleS>
 8003a88:	e7d8      	b.n	8003a3c <chMBPostTimeout.constprop.26+0x4c>
 8003a8a:	bf00      	nop
 8003a8c:	20000c58 	.word	0x20000c58
 8003a90:	200011b0 	.word	0x200011b0
 8003a94:	0800b2f8 	.word	0x0800b2f8
 8003a98:	20000c78 	.word	0x20000c78
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <chMBPostAheadTimeout.constprop.23>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8003aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	4680      	mov	r8, r0
 8003aa6:	460f      	mov	r7, r1
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	4c22      	ldr	r4, [pc, #136]	; (8003b38 <chMBPostAheadTimeout.constprop.23+0x98>)
  _dbg_check_lock();
 8003ab0:	f7ff fd7e 	bl	80035b0 <_dbg_check_lock>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003ab4:	f104 0618 	add.w	r6, r4, #24
  chDbgCheckClassS();
 8003ab8:	f7fd f842 	bl	8000b40 <chDbgCheckClassS>
 8003abc:	e011      	b.n	8003ae2 <chMBPostAheadTimeout.constprop.23+0x42>
  chDbgCheckClassI();
 8003abe:	f7fd f84f 	bl	8000b60 <chDbgCheckClassI>
 8003ac2:	e9d4 5900 	ldrd	r5, r9, [r4]
  chDbgCheckClassI();
 8003ac6:	f7fd f84b 	bl	8000b60 <chDbgCheckClassI>
  return mbp->cnt;
 8003aca:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003acc:	eba9 0205 	sub.w	r2, r9, r5
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8003ad0:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8003ad4:	d11e      	bne.n	8003b14 <chMBPostAheadTimeout.constprop.23+0x74>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8003ad6:	4639      	mov	r1, r7
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f7ff fc31 	bl	8003340 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003ade:	4605      	mov	r5, r0
 8003ae0:	b920      	cbnz	r0, 8003aec <chMBPostAheadTimeout.constprop.23+0x4c>
    if (mbp->reset) {
 8003ae2:	7d23      	ldrb	r3, [r4, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0ea      	beq.n	8003abe <chMBPostAheadTimeout.constprop.23+0x1e>
      return MSG_RESET;
 8003ae8:	f06f 0501 	mvn.w	r5, #1
  _dbg_check_unlock();
 8003aec:	f7ff fcf8 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <chMBPostAheadTimeout.constprop.23+0x9c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d004      	beq.n	8003b02 <chMBPostAheadTimeout.constprop.23+0x62>
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	6893      	ldr	r3, [r2, #8]
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d305      	bcc.n	8003b0e <chMBPostAheadTimeout.constprop.23+0x6e>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f383 8811 	msr	BASEPRI, r3
}
 8003b08:	4628      	mov	r0, r5
 8003b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0e:	480c      	ldr	r0, [pc, #48]	; (8003b40 <chMBPostAheadTimeout.constprop.23+0xa0>)
 8003b10:	f7fc ffe6 	bl	8000ae0 <chSysHalt>
      if (--mbp->rdptr < mbp->buffer) {
 8003b14:	68e2      	ldr	r2, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003b16:	480b      	ldr	r0, [pc, #44]	; (8003b44 <chMBPostAheadTimeout.constprop.23+0xa4>)
      if (--mbp->rdptr < mbp->buffer) {
 8003b18:	3a04      	subs	r2, #4
 8003b1a:	4295      	cmp	r5, r2
        mbp->rdptr = mbp->top - 1;
 8003b1c:	bf88      	it	hi
 8003b1e:	f1a9 0204 	subhi.w	r2, r9, #4
 8003b22:	60e2      	str	r2, [r4, #12]
      mbp->cnt++;
 8003b24:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8003b26:	f8c2 8000 	str.w	r8, [r2]
      return MSG_OK;
 8003b2a:	2500      	movs	r5, #0
      mbp->cnt++;
 8003b2c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8003b2e:	f7fd f8ef 	bl	8000d10 <chThdDequeueNextI.constprop.89>
      chSchRescheduleS();
 8003b32:	f7ff fcbd 	bl	80034b0 <chSchRescheduleS>
 8003b36:	e7d9      	b.n	8003aec <chMBPostAheadTimeout.constprop.23+0x4c>
 8003b38:	20000c58 	.word	0x20000c58
 8003b3c:	200011b0 	.word	0x200011b0
 8003b40:	0800b2f8 	.word	0x0800b2f8
 8003b44:	20000c78 	.word	0x20000c78
	...

08003b50 <chMBFetchTimeout.constprop.20>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8003b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b54:	2320      	movs	r3, #32
 8003b56:	4680      	mov	r8, r0
 8003b58:	460f      	mov	r7, r1
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	4c20      	ldr	r4, [pc, #128]	; (8003be0 <chMBFetchTimeout.constprop.20+0x90>)
  _dbg_check_lock();
 8003b60:	f7ff fd26 	bl	80035b0 <_dbg_check_lock>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003b64:	f104 0620 	add.w	r6, r4, #32
  chDbgCheckClassS();
 8003b68:	f7fc ffea 	bl	8000b40 <chDbgCheckClassS>
 8003b6c:	e009      	b.n	8003b82 <chMBFetchTimeout.constprop.20+0x32>
  chDbgCheckClassI();
 8003b6e:	f7fc fff7 	bl	8000b60 <chDbgCheckClassI>
  return mbp->cnt;
 8003b72:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8003b74:	b9db      	cbnz	r3, 8003bae <chMBFetchTimeout.constprop.20+0x5e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8003b76:	4639      	mov	r1, r7
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f7ff fbe1 	bl	8003340 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8003b7e:	4605      	mov	r5, r0
 8003b80:	b920      	cbnz	r0, 8003b8c <chMBFetchTimeout.constprop.20+0x3c>
    if (mbp->reset) {
 8003b82:	7d23      	ldrb	r3, [r4, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f2      	beq.n	8003b6e <chMBFetchTimeout.constprop.20+0x1e>
      return MSG_RESET;
 8003b88:	f06f 0501 	mvn.w	r5, #1
  _dbg_check_unlock();
 8003b8c:	f7ff fca8 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <chMBFetchTimeout.constprop.20+0x94>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d004      	beq.n	8003ba2 <chMBFetchTimeout.constprop.20+0x52>
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	6893      	ldr	r3, [r2, #8]
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d31b      	bcc.n	8003bda <chMBFetchTimeout.constprop.20+0x8a>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f383 8811 	msr	BASEPRI, r3
}
 8003ba8:	4628      	mov	r0, r5
 8003baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *msgp = *mbp->rdptr++;
 8003bae:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8003bb0:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8003bb2:	6810      	ldr	r0, [r2, #0]
 8003bb4:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8003bb6:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 8003bb8:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 8003bba:	f103 33ff 	add.w	r3, r3, #4294967295
      *msgp = *mbp->rdptr++;
 8003bbe:	f8c8 0000 	str.w	r0, [r8]
        mbp->rdptr = mbp->buffer;
 8003bc2:	bf28      	it	cs
 8003bc4:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8003bc6:	4808      	ldr	r0, [pc, #32]	; (8003be8 <chMBFetchTimeout.constprop.20+0x98>)
        mbp->rdptr = mbp->buffer;
 8003bc8:	bf28      	it	cs
 8003bca:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 8003bcc:	6123      	str	r3, [r4, #16]
      return MSG_OK;
 8003bce:	2500      	movs	r5, #0
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8003bd0:	f7fd f89e 	bl	8000d10 <chThdDequeueNextI.constprop.89>
      chSchRescheduleS();
 8003bd4:	f7ff fc6c 	bl	80034b0 <chSchRescheduleS>
 8003bd8:	e7d8      	b.n	8003b8c <chMBFetchTimeout.constprop.20+0x3c>
 8003bda:	4804      	ldr	r0, [pc, #16]	; (8003bec <chMBFetchTimeout.constprop.20+0x9c>)
 8003bdc:	f7fc ff80 	bl	8000ae0 <chSysHalt>
 8003be0:	20000c58 	.word	0x20000c58
 8003be4:	200011b0 	.word	0x200011b0
 8003be8:	20000c70 	.word	0x20000c70
 8003bec:	0800b2f8 	.word	0x0800b2f8

08003bf0 <chGuardedPoolAllocTimeout.constprop.15>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	f383 8811 	msr	BASEPRI, r3
  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8003bfa:	4c15      	ldr	r4, [pc, #84]	; (8003c50 <chGuardedPoolAllocTimeout.constprop.15+0x60>)
  _dbg_check_lock();
 8003bfc:	f7ff fcd8 	bl	80035b0 <_dbg_check_lock>
 8003c00:	4629      	mov	r1, r5
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7ff fb6c 	bl	80032e0 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 8003c08:	bb00      	cbnz	r0, 8003c4c <chGuardedPoolAllocTimeout.constprop.15+0x5c>
  chDbgCheckClassI();
 8003c0a:	f7fc ffa9 	bl	8000b60 <chDbgCheckClassI>
  objp = mp->next;
 8003c0e:	68e5      	ldr	r5, [r4, #12]
  if (objp != NULL) {
 8003c10:	b1a5      	cbz	r5, 8003c3c <chGuardedPoolAllocTimeout.constprop.15+0x4c>
    mp->next = mp->next->next;
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	60e3      	str	r3, [r4, #12]
  _dbg_check_unlock();
 8003c16:	f7ff fc63 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <chGuardedPoolAllocTimeout.constprop.15+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d004      	beq.n	8003c2c <chGuardedPoolAllocTimeout.constprop.15+0x3c>
 8003c22:	6999      	ldr	r1, [r3, #24]
 8003c24:	6893      	ldr	r3, [r2, #8]
 8003c26:	688a      	ldr	r2, [r1, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d304      	bcc.n	8003c36 <chGuardedPoolAllocTimeout.constprop.15+0x46>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 8003c32:	4628      	mov	r0, r5
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
 8003c36:	4808      	ldr	r0, [pc, #32]	; (8003c58 <chGuardedPoolAllocTimeout.constprop.15+0x68>)
 8003c38:	f7fc ff52 	bl	8000ae0 <chSysHalt>
  else if (mp->provider != NULL) {
 8003c3c:	69a3      	ldr	r3, [r4, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0e9      	beq.n	8003c16 <chGuardedPoolAllocTimeout.constprop.15+0x26>
    objp = mp->provider(mp->object_size, mp->align);
 8003c42:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8003c46:	4798      	blx	r3
 8003c48:	4605      	mov	r5, r0
 8003c4a:	e7e4      	b.n	8003c16 <chGuardedPoolAllocTimeout.constprop.15+0x26>
    return NULL;
 8003c4c:	2500      	movs	r5, #0
 8003c4e:	e7e2      	b.n	8003c16 <chGuardedPoolAllocTimeout.constprop.15+0x26>
 8003c50:	20000c14 	.word	0x20000c14
 8003c54:	200011b0 	.word	0x200011b0
 8003c58:	0800b310 	.word	0x0800b310
 8003c5c:	00000000 	.word	0x00000000

08003c60 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {
 8003c60:	b508      	push	{r3, lr}

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <oslib_test_002_003_execute+0x20>)
 8003c64:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 8003c6a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003c6c:	f7ff ffc0 	bl	8003bf0 <chGuardedPoolAllocTimeout.constprop.15>
 8003c70:	fab0 f080 	clz	r0, r0
 8003c74:	0940      	lsrs	r0, r0, #5
 8003c76:	4903      	ldr	r1, [pc, #12]	; (8003c84 <oslib_test_002_003_execute+0x24>)
  }
}
 8003c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8003c7c:	f7fc bd70 	b.w	8000760 <_test_assert>
 8003c80:	20002354 	.word	0x20002354
 8003c84:	0800bd88 	.word	0x0800bd88
	...

08003c90 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	2320      	movs	r3, #32
 8003c94:	4604      	mov	r4, r0
 8003c96:	460d      	mov	r5, r1
 8003c98:	4616      	mov	r6, r2
 8003c9a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003c9e:	f7ff fc87 	bl	80035b0 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fc ff82 	bl	8000bb0 <chCoreAllocAlignedWithOffsetI>
 8003cac:	4604      	mov	r4, r0
  _dbg_check_unlock();
 8003cae:	f7ff fc17 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <chCoreAllocAlignedWithOffset+0x44>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d004      	beq.n	8003cc4 <chCoreAllocAlignedWithOffset+0x34>
 8003cba:	6999      	ldr	r1, [r3, #24]
 8003cbc:	6893      	ldr	r3, [r2, #8]
 8003cbe:	688a      	ldr	r2, [r1, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d304      	bcc.n	8003cce <chCoreAllocAlignedWithOffset+0x3e>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <chCoreAllocAlignedWithOffset+0x48>)
 8003cd0:	f7fc ff06 	bl	8000ae0 <chSysHalt>
 8003cd4:	200011b0 	.word	0x200011b0
 8003cd8:	0800b304 	.word	0x0800b304
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <oslib_test_001_003_execute>:
}

static void oslib_test_001_003_execute(void) {
 8003ce0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8003ce2:	4e57      	ldr	r6, [pc, #348]	; (8003e40 <oslib_test_001_003_execute+0x160>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003ce4:	4d57      	ldr	r5, [pc, #348]	; (8003e44 <oslib_test_001_003_execute+0x164>)
  test_set_step(1);
 8003ce6:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8003ce8:	b082      	sub	sp, #8
  test_set_step(1);
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003cee:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff fe7c 	bl	80039f0 <chMBPostTimeout.constprop.26>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003cf8:	fab0 f080 	clz	r0, r0
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	0940      	lsrs	r0, r0, #5
 8003d00:	f7fc fd2e 	bl	8000760 <_test_assert>
 8003d04:	b988      	cbnz	r0, 8003d2a <oslib_test_001_003_execute+0x4a>
 8003d06:	3401      	adds	r4, #1
    for (i = 0; i < MB_SIZE; i++) {
 8003d08:	2c46      	cmp	r4, #70	; 0x46
 8003d0a:	d1f0      	bne.n	8003cee <oslib_test_001_003_execute+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8003d0c:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8003d12:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8003d14:	f7ff fe6c 	bl	80039f0 <chMBPostTimeout.constprop.26>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003d18:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003d1c:	fab0 f080 	clz	r0, r0
 8003d20:	4948      	ldr	r1, [pc, #288]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003d22:	0940      	lsrs	r0, r0, #5
 8003d24:	f7fc fd1c 	bl	8000760 <_test_assert>
 8003d28:	b108      	cbz	r0, 8003d2e <oslib_test_001_003_execute+0x4e>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	2320      	movs	r3, #32
 8003d30:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003d34:	f7ff fc3c 	bl	80035b0 <_dbg_check_lock>
    msg1 = chMBPostI(&mb1, 'X');
 8003d38:	2058      	movs	r0, #88	; 0x58
 8003d3a:	f7fe f951 	bl	8001fe0 <chMBPostI.constprop.25>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003d3e:	4c42      	ldr	r4, [pc, #264]	; (8003e48 <oslib_test_001_003_execute+0x168>)
 8003d40:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8003d42:	f7ff fbcd 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d004      	beq.n	8003d56 <oslib_test_001_003_execute+0x76>
 8003d4c:	69a2      	ldr	r2, [r4, #24]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	6892      	ldr	r2, [r2, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d370      	bcc.n	8003e38 <oslib_test_001_003_execute+0x158>
 8003d56:	2300      	movs	r3, #0
 8003d58:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003d5c:	f1a5 30ff 	sub.w	r0, r5, #4294967295
 8003d60:	fab0 f080 	clz	r0, r0
 8003d64:	4937      	ldr	r1, [pc, #220]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003d66:	0940      	lsrs	r0, r0, #5
 8003d68:	f7fc fcfa 	bl	8000760 <_test_assert>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d1dc      	bne.n	8003d2a <oslib_test_001_003_execute+0x4a>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 8003d70:	2101      	movs	r1, #1
 8003d72:	2058      	movs	r0, #88	; 0x58
 8003d74:	f7ff fe94 	bl	8003aa0 <chMBPostAheadTimeout.constprop.23>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003d78:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003d7c:	fab0 f080 	clz	r0, r0
 8003d80:	4930      	ldr	r1, [pc, #192]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003d82:	0940      	lsrs	r0, r0, #5
 8003d84:	f7fc fcec 	bl	8000760 <_test_assert>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d1ce      	bne.n	8003d2a <oslib_test_001_003_execute+0x4a>
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003d92:	f7ff fc0d 	bl	80035b0 <_dbg_check_lock>
    msg1 = chMBPostAheadI(&mb1, 'X');
 8003d96:	2058      	movs	r0, #88	; 0x58
 8003d98:	f7fe f952 	bl	8002040 <chMBPostAheadI.constprop.22>
 8003d9c:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8003d9e:	f7ff fb9f 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d004      	beq.n	8003db2 <oslib_test_001_003_execute+0xd2>
 8003da8:	69a2      	ldr	r2, [r4, #24]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d342      	bcc.n	8003e38 <oslib_test_001_003_execute+0x158>
 8003db2:	2300      	movs	r3, #0
 8003db4:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003db8:	f1a5 30ff 	sub.w	r0, r5, #4294967295
 8003dbc:	fab0 f080 	clz	r0, r0
 8003dc0:	4920      	ldr	r1, [pc, #128]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003dc2:	0940      	lsrs	r0, r0, #5
 8003dc4:	f7fc fccc 	bl	8000760 <_test_assert>
 8003dc8:	4605      	mov	r5, r0
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d1ad      	bne.n	8003d2a <oslib_test_001_003_execute+0x4a>
  test_set_step(3);
 8003dce:	2303      	movs	r3, #3
 8003dd0:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 8003dd2:	f7ff fdd5 	bl	8003980 <chMBReset.constprop.28>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <oslib_test_001_003_execute+0x16c>)
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8003dd8:	2101      	movs	r1, #1
 8003dda:	751d      	strb	r5, [r3, #20]
 8003ddc:	a801      	add	r0, sp, #4
  test_set_step(4);
 8003dde:	2304      	movs	r3, #4
 8003de0:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8003de2:	f7ff feb5 	bl	8003b50 <chMBFetchTimeout.constprop.20>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003de6:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 8003dea:	fab0 f080 	clz	r0, r0
 8003dee:	4915      	ldr	r1, [pc, #84]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003df0:	0940      	lsrs	r0, r0, #5
 8003df2:	f7fc fcb5 	bl	8000760 <_test_assert>
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d197      	bne.n	8003d2a <oslib_test_001_003_execute+0x4a>
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003e00:	f7ff fbd6 	bl	80035b0 <_dbg_check_lock>
    msg1 = chMBFetchI(&mb1, &msg2);
 8003e04:	a801      	add	r0, sp, #4
 8003e06:	f7fc ff9b 	bl	8000d40 <chMBFetchI.constprop.19>
 8003e0a:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8003e0c:	f7ff fb68 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	d004      	beq.n	8003e20 <oslib_test_001_003_execute+0x140>
 8003e16:	69a2      	ldr	r2, [r4, #24]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d30b      	bcc.n	8003e38 <oslib_test_001_003_execute+0x158>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003e26:	f1a5 30ff 	sub.w	r0, r5, #4294967295
 8003e2a:	fab0 f080 	clz	r0, r0
 8003e2e:	4905      	ldr	r1, [pc, #20]	; (8003e44 <oslib_test_001_003_execute+0x164>)
 8003e30:	0940      	lsrs	r0, r0, #5
 8003e32:	f7fc fc95 	bl	8000760 <_test_assert>
 8003e36:	e778      	b.n	8003d2a <oslib_test_001_003_execute+0x4a>
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <oslib_test_001_003_execute+0x170>)
 8003e3a:	f7fc fe51 	bl	8000ae0 <chSysHalt>
 8003e3e:	bf00      	nop
 8003e40:	20002354 	.word	0x20002354
 8003e44:	0800bd18 	.word	0x0800bd18
 8003e48:	200011b0 	.word	0x200011b0
 8003e4c:	20000c58 	.word	0x20000c58
 8003e50:	0800b388 	.word	0x0800b388
	...

08003e60 <bmk_thread4>:
static THD_FUNCTION(bmk_thread4, p) {
 8003e60:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003e62:	4d0f      	ldr	r5, [pc, #60]	; (8003ea0 <bmk_thread4+0x40>)
 8003e64:	2320      	movs	r3, #32
 8003e66:	69ac      	ldr	r4, [r5, #24]
 8003e68:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003e6c:	f7ff fba0 	bl	80035b0 <_dbg_check_lock>
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8003e70:	2003      	movs	r0, #3
 8003e72:	f7ff f92d 	bl	80030d0 <chSchGoSleepS>
  } while (msg == MSG_OK);
 8003e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f9      	beq.n	8003e70 <bmk_thread4+0x10>
  _dbg_check_unlock();
 8003e7c:	f7ff fb30 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	42ab      	cmp	r3, r5
 8003e84:	d004      	beq.n	8003e90 <bmk_thread4+0x30>
 8003e86:	69aa      	ldr	r2, [r5, #24]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d303      	bcc.n	8003e98 <bmk_thread4+0x38>
 8003e90:	2300      	movs	r3, #0
 8003e92:	f383 8811 	msr	BASEPRI, r3
}
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <bmk_thread4+0x44>)
 8003e9a:	f7fc fe21 	bl	8000ae0 <chSysHalt>
 8003e9e:	bf00      	nop
 8003ea0:	200011b0 	.word	0x200011b0
 8003ea4:	0800b37c 	.word	0x0800b37c
	...

08003eb0 <rt_test_008_006_execute>:
static void rt_test_008_006_execute(void) {
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003eb2:	4e6b      	ldr	r6, [pc, #428]	; (8004060 <rt_test_008_006_execute+0x1b0>)
 8003eb4:	2301      	movs	r3, #1
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 8003eb6:	2000      	movs	r0, #0
  test_set_step(1);
 8003eb8:	6033      	str	r3, [r6, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 8003eba:	f7ff fd21 	bl	8003900 <chEvtWaitOneTimeout.constprop.34>
    test_assert(m == 0, "spurious event");
 8003ebe:	fab0 f080 	clz	r0, r0
 8003ec2:	0940      	lsrs	r0, r0, #5
 8003ec4:	4967      	ldr	r1, [pc, #412]	; (8004064 <rt_test_008_006_execute+0x1b4>)
 8003ec6:	f7fc fc4b 	bl	8000760 <_test_assert>
 8003eca:	b100      	cbz	r0, 8003ece <rt_test_008_006_execute+0x1e>
}
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003ece:	4c66      	ldr	r4, [pc, #408]	; (8004068 <rt_test_008_006_execute+0x1b8>)
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	69a7      	ldr	r7, [r4, #24]
 8003ed6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003eda:	f7ff fb69 	bl	80035b0 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 8097 	bne.w	8004014 <rt_test_008_006_execute+0x164>
  _dbg_check_unlock();
 8003ee6:	f7ff fafb 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	42a3      	cmp	r3, r4
 8003eee:	d005      	beq.n	8003efc <rt_test_008_006_execute+0x4c>
 8003ef0:	69a2      	ldr	r2, [r4, #24]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	f0c0 8089 	bcc.w	800400e <rt_test_008_006_execute+0x15e>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8003f04:	4957      	ldr	r1, [pc, #348]	; (8004064 <rt_test_008_006_execute+0x1b4>)
 8003f06:	f7fc fc2b 	bl	8000760 <_test_assert>
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d1dd      	bne.n	8003ecc <rt_test_008_006_execute+0x1c>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8003f10:	69a7      	ldr	r7, [r4, #24]
 8003f12:	2320      	movs	r3, #32
 8003f14:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003f18:	f7ff fb4a 	bl	80035b0 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f000 8087 	beq.w	8004032 <rt_test_008_006_execute+0x182>
  _dbg_check_unlock();
 8003f24:	f7ff fadc 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	d004      	beq.n	8003f38 <rt_test_008_006_execute+0x88>
 8003f2e:	69a2      	ldr	r2, [r4, #24]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d36a      	bcc.n	800400e <rt_test_008_006_execute+0x15e>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	2501      	movs	r5, #1
    test_assert(m == 0, "spurious event");
 8003f40:	4628      	mov	r0, r5
 8003f42:	4948      	ldr	r1, [pc, #288]	; (8004064 <rt_test_008_006_execute+0x1b4>)
 8003f44:	f7fc fc0c 	bl	8000760 <_test_assert>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1bf      	bne.n	8003ecc <rt_test_008_006_execute+0x1c>
  test_set_step(2);
 8003f4c:	2302      	movs	r3, #2
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  test_set_step(2);
 8003f52:	6033      	str	r3, [r6, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 8003f54:	f7ff fcd4 	bl	8003900 <chEvtWaitOneTimeout.constprop.34>
    test_assert(m == 0, "spurious event");
 8003f58:	fab0 f080 	clz	r0, r0
 8003f5c:	0940      	lsrs	r0, r0, #5
 8003f5e:	4941      	ldr	r1, [pc, #260]	; (8004064 <rt_test_008_006_execute+0x1b4>)
 8003f60:	f7fc fbfe 	bl	8000760 <_test_assert>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1b1      	bne.n	8003ecc <rt_test_008_006_execute+0x1c>
  thread_t *ctp = currp;
 8003f68:	69a6      	ldr	r6, [r4, #24]
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003f70:	f7ff fb1e 	bl	80035b0 <_dbg_check_lock>
  m = ctp->epending & events;
 8003f74:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8003f76:	b955      	cbnz	r5, 8003f8e <rt_test_008_006_execute+0xde>
    ctp->u.ewmask = events;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003f7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f82:	200a      	movs	r0, #10
 8003f84:	f7ff f97c 	bl	8003280 <chSchGoSleepTimeoutS>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	db61      	blt.n	8004050 <rt_test_008_006_execute+0x1a0>
    m = ctp->epending & events;
 8003f8c:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 8003f92:	f7ff faa5 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d004      	beq.n	8003fa6 <rt_test_008_006_execute+0xf6>
 8003f9c:	69a2      	ldr	r2, [r4, #24]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	6892      	ldr	r2, [r2, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d333      	bcc.n	800400e <rt_test_008_006_execute+0x15e>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	fab5 f085 	clz	r0, r5
 8003fb0:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8003fb2:	492c      	ldr	r1, [pc, #176]	; (8004064 <rt_test_008_006_execute+0x1b4>)
 8003fb4:	f7fc fbd4 	bl	8000760 <_test_assert>
 8003fb8:	4605      	mov	r5, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d186      	bne.n	8003ecc <rt_test_008_006_execute+0x1c>
  thread_t *ctp = currp;
 8003fbe:	69a6      	ldr	r6, [r4, #24]
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003fc6:	f7ff faf3 	bl	80035b0 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 8003fca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003fcc:	3301      	adds	r3, #1
 8003fce:	d009      	beq.n	8003fe4 <rt_test_008_006_execute+0x134>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8003fd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003fda:	200b      	movs	r0, #11
 8003fdc:	f7ff f950 	bl	8003280 <chSchGoSleepTimeoutS>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	db39      	blt.n	8004058 <rt_test_008_006_execute+0x1a8>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 8003fe8:	f7ff fa7a 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	d004      	beq.n	8003ffc <rt_test_008_006_execute+0x14c>
 8003ff2:	69a2      	ldr	r2, [r4, #24]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d308      	bcc.n	800400e <rt_test_008_006_execute+0x15e>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8004002:	4628      	mov	r0, r5
 8004004:	4917      	ldr	r1, [pc, #92]	; (8004064 <rt_test_008_006_execute+0x1b4>)
}
 8004006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(m == 0, "spurious event");
 800400a:	f7fc bba9 	b.w	8000760 <_test_assert>
 800400e:	4817      	ldr	r0, [pc, #92]	; (800406c <rt_test_008_006_execute+0x1bc>)
 8004010:	f7fc fd66 	bl	8000ae0 <chSysHalt>
  ctp->epending &= ~m;
 8004014:	637d      	str	r5, [r7, #52]	; 0x34
  _dbg_check_unlock();
 8004016:	f7ff fa63 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	42a3      	cmp	r3, r4
 800401e:	d004      	beq.n	800402a <rt_test_008_006_execute+0x17a>
 8004020:	69a2      	ldr	r2, [r4, #24]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d3f1      	bcc.n	800400e <rt_test_008_006_execute+0x15e>
 800402a:	2000      	movs	r0, #0
 800402c:	f380 8811 	msr	BASEPRI, r0
 8004030:	e768      	b.n	8003f04 <rt_test_008_006_execute+0x54>
  ctp->epending &= ~events;
 8004032:	637d      	str	r5, [r7, #52]	; 0x34
  _dbg_check_unlock();
 8004034:	f7ff fa54 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	42a3      	cmp	r3, r4
 800403c:	d004      	beq.n	8004048 <rt_test_008_006_execute+0x198>
 800403e:	69a2      	ldr	r2, [r4, #24]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3e2      	bcc.n	800400e <rt_test_008_006_execute+0x15e>
 8004048:	2300      	movs	r3, #0
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	e777      	b.n	8003f40 <rt_test_008_006_execute+0x90>
      chSysUnlock();
 8004050:	f7ff fa56 	bl	8003500 <chSysUnlock.lto_priv.105>
 8004054:	2001      	movs	r0, #1
 8004056:	e7ac      	b.n	8003fb2 <rt_test_008_006_execute+0x102>
      chSysUnlock();
 8004058:	f7ff fa52 	bl	8003500 <chSysUnlock.lto_priv.105>
 800405c:	2501      	movs	r5, #1
 800405e:	e7d0      	b.n	8004002 <rt_test_008_006_execute+0x152>
 8004060:	20002354 	.word	0x20002354
 8004064:	0800cef8 	.word	0x0800cef8
 8004068:	200011b0 	.word	0x200011b0
 800406c:	0800b2d4 	.word	0x0800b2d4

08004070 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004070:	b510      	push	{r4, lr}
 8004072:	2320      	movs	r3, #32
 8004074:	4604      	mov	r4, r0
 8004076:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800407a:	f7ff fa99 	bl	80035b0 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();
 800407e:	f7fc fd6f 	bl	8000b60 <chDbgCheckClassI>

  if (bsp->sem.cnt < (cnt_t)1) {
 8004082:	68a3      	ldr	r3, [r4, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd13      	ble.n	80040b0 <thread4+0x40>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004088:	f7ff fa12 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 800408c:	f7ff fa28 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <thread4+0x48>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d004      	beq.n	80040a2 <thread4+0x32>
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	6893      	ldr	r3, [r2, #8]
 800409c:	688a      	ldr	r2, [r1, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d303      	bcc.n	80040aa <thread4+0x3a>
 80040a2:	2300      	movs	r3, #0
 80040a4:	f383 8811 	msr	BASEPRI, r3
}
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	4804      	ldr	r0, [pc, #16]	; (80040bc <thread4+0x4c>)
 80040ac:	f7fc fd18 	bl	8000ae0 <chSysHalt>
    chSemSignalI(&bsp->sem);
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7fc ff25 	bl	8000f00 <chSemSignalI>
 80040b6:	e7e7      	b.n	8004088 <thread4+0x18>
 80040b8:	200011b0 	.word	0x200011b0
 80040bc:	0800b358 	.word	0x0800b358

080040c0 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 80040c0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80040c2:	4e42      	ldr	r6, [pc, #264]	; (80041cc <rt_test_002_001_execute+0x10c>)
 80040c4:	2501      	movs	r5, #1
 80040c6:	6035      	str	r5, [r6, #0]
 80040c8:	2320      	movs	r3, #32
 80040ca:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80040ce:	f7ff fa6f 	bl	80035b0 <_dbg_check_lock>
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 80040d2:	4628      	mov	r0, r5
 80040d4:	f7fc ff3c 	bl	8000f50 <chSysIntegrityCheckI>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80040d8:	4c3d      	ldr	r4, [pc, #244]	; (80041d0 <rt_test_002_001_execute+0x110>)
 80040da:	4605      	mov	r5, r0
  _dbg_check_unlock();
 80040dc:	f7ff fa00 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d004      	beq.n	80040f0 <rt_test_002_001_execute+0x30>
 80040e6:	69a2      	ldr	r2, [r4, #24]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d33f      	bcc.n	8004170 <rt_test_002_001_execute+0xb0>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 80040f6:	f085 0001 	eor.w	r0, r5, #1
 80040fa:	b2c0      	uxtb	r0, r0
 80040fc:	4935      	ldr	r1, [pc, #212]	; (80041d4 <rt_test_002_001_execute+0x114>)
 80040fe:	f7fc fb2f 	bl	8000760 <_test_assert>
 8004102:	b100      	cbz	r0, 8004106 <rt_test_002_001_execute+0x46>
}
 8004104:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8004106:	2502      	movs	r5, #2
 8004108:	6035      	str	r5, [r6, #0]
 800410a:	2320      	movs	r3, #32
 800410c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004110:	f7ff fa4e 	bl	80035b0 <_dbg_check_lock>
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 8004114:	4628      	mov	r0, r5
 8004116:	f7fc ff1b 	bl	8000f50 <chSysIntegrityCheckI>
 800411a:	4605      	mov	r5, r0
  _dbg_check_unlock();
 800411c:	f7ff f9e0 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	42a3      	cmp	r3, r4
 8004124:	d004      	beq.n	8004130 <rt_test_002_001_execute+0x70>
 8004126:	69a2      	ldr	r2, [r4, #24]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	6892      	ldr	r2, [r2, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d31f      	bcc.n	8004170 <rt_test_002_001_execute+0xb0>
 8004130:	2300      	movs	r3, #0
 8004132:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
 8004136:	f085 0001 	eor.w	r0, r5, #1
 800413a:	b2c0      	uxtb	r0, r0
 800413c:	4926      	ldr	r1, [pc, #152]	; (80041d8 <rt_test_002_001_execute+0x118>)
 800413e:	f7fc fb0f 	bl	8000760 <_test_assert>
 8004142:	2800      	cmp	r0, #0
 8004144:	d1de      	bne.n	8004104 <rt_test_002_001_execute+0x44>
  test_set_step(3);
 8004146:	2303      	movs	r3, #3
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	2320      	movs	r3, #32
 800414c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004150:	f7ff fa2e 	bl	80035b0 <_dbg_check_lock>
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 8004154:	2004      	movs	r0, #4
 8004156:	f7fc fefb 	bl	8000f50 <chSysIntegrityCheckI>
 800415a:	4605      	mov	r5, r0
  _dbg_check_unlock();
 800415c:	f7ff f9c0 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	42a3      	cmp	r3, r4
 8004164:	d007      	beq.n	8004176 <rt_test_002_001_execute+0xb6>
 8004166:	69a2      	ldr	r2, [r4, #24]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	6892      	ldr	r2, [r2, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	d202      	bcs.n	8004176 <rt_test_002_001_execute+0xb6>
 8004170:	481a      	ldr	r0, [pc, #104]	; (80041dc <rt_test_002_001_execute+0x11c>)
 8004172:	f7fc fcb5 	bl	8000ae0 <chSysHalt>
 8004176:	2300      	movs	r3, #0
 8004178:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
 800417c:	f085 0001 	eor.w	r0, r5, #1
 8004180:	b2c0      	uxtb	r0, r0
 8004182:	4917      	ldr	r1, [pc, #92]	; (80041e0 <rt_test_002_001_execute+0x120>)
 8004184:	f7fc faec 	bl	8000760 <_test_assert>
 8004188:	2800      	cmp	r0, #0
 800418a:	d1bb      	bne.n	8004104 <rt_test_002_001_execute+0x44>
  test_set_step(4);
 800418c:	2304      	movs	r3, #4
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	2320      	movs	r3, #32
 8004192:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004196:	f7ff fa0b 	bl	80035b0 <_dbg_check_lock>
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 800419a:	2008      	movs	r0, #8
 800419c:	f7fc fed8 	bl	8000f50 <chSysIntegrityCheckI>
 80041a0:	4605      	mov	r5, r0
  _dbg_check_unlock();
 80041a2:	f7ff f99d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	d004      	beq.n	80041b6 <rt_test_002_001_execute+0xf6>
 80041ac:	69a2      	ldr	r2, [r4, #24]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	6892      	ldr	r2, [r2, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d3dc      	bcc.n	8004170 <rt_test_002_001_execute+0xb0>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "port layer check failed");
 80041bc:	f085 0001 	eor.w	r0, r5, #1
 80041c0:	b2c0      	uxtb	r0, r0
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <rt_test_002_001_execute+0x124>)
}
 80041c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 80041c8:	f7fc baca 	b.w	8000760 <_test_assert>
 80041cc:	20002354 	.word	0x20002354
 80041d0:	200011b0 	.word	0x200011b0
 80041d4:	0800cab0 	.word	0x0800cab0
 80041d8:	0800cac8 	.word	0x0800cac8
 80041dc:	0800b334 	.word	0x0800b334
 80041e0:	0800caec 	.word	0x0800caec
 80041e4:	0800cb08 	.word	0x0800cb08
	...

080041f0 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	4c13      	ldr	r4, [pc, #76]	; (8004244 <test_terminate_threads+0x54>)
 80041f6:	4e14      	ldr	r6, [pc, #80]	; (8004248 <test_terminate_threads+0x58>)
 80041f8:	f104 0914 	add.w	r9, r4, #20
 80041fc:	2720      	movs	r7, #32
 80041fe:	f04f 0800 	mov.w	r8, #0
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8004202:	f854 5b04 	ldr.w	r5, [r4], #4
 8004206:	b1ad      	cbz	r5, 8004234 <test_terminate_threads+0x44>
 8004208:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 800420c:	f7ff f9d0 	bl	80035b0 <_dbg_check_lock>
  tp->flags |= CH_FLAG_TERMINATE;
 8004210:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  _dbg_check_unlock();
 800421c:	f7ff f960 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004220:	6833      	ldr	r3, [r6, #0]
 8004222:	42b3      	cmp	r3, r6
 8004224:	d004      	beq.n	8004230 <test_terminate_threads+0x40>
 8004226:	69b2      	ldr	r2, [r6, #24]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d305      	bcc.n	800423c <test_terminate_threads+0x4c>
 8004230:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MAX_THREADS; i++)
 8004234:	454c      	cmp	r4, r9
 8004236:	d1e4      	bne.n	8004202 <test_terminate_threads+0x12>
      chThdTerminate(threads[i]);
}
 8004238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423c:	4803      	ldr	r0, [pc, #12]	; (800424c <test_terminate_threads+0x5c>)
 800423e:	f7fc fc4f 	bl	8000ae0 <chSysHalt>
 8004242:	bf00      	nop
 8004244:	2000236c 	.word	0x2000236c
 8004248:	200011b0 	.word	0x200011b0
 800424c:	0800b2a4 	.word	0x0800b2a4

08004250 <test_emit_token>:
 *
 * @param[in] token     the token as a char
 *
 * @api
 */
void test_emit_token(char token) {
 8004250:	b510      	push	{r4, lr}
 8004252:	2320      	movs	r3, #32
 8004254:	4604      	mov	r4, r0
 8004256:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800425a:	f7ff f9a9 	bl	80035b0 <_dbg_check_lock>

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 800425e:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <test_emit_token+0x44>)
 8004260:	490d      	ldr	r1, [pc, #52]	; (8004298 <test_emit_token+0x48>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	428b      	cmp	r3, r1
 8004266:	d202      	bcs.n	800426e <test_emit_token+0x1e>
    *test_tokp++ = token;
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	701c      	strb	r4, [r3, #0]
 800426c:	6011      	str	r1, [r2, #0]
  _dbg_check_unlock();
 800426e:	f7ff f937 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <test_emit_token+0x4c>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d004      	beq.n	8004284 <test_emit_token+0x34>
 800427a:	6999      	ldr	r1, [r3, #24]
 800427c:	6893      	ldr	r3, [r2, #8]
 800427e:	688a      	ldr	r2, [r1, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d303      	bcc.n	800428c <test_emit_token+0x3c>
 8004284:	2300      	movs	r3, #0
 8004286:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800428a:	bd10      	pop	{r4, pc}
 800428c:	4804      	ldr	r0, [pc, #16]	; (80042a0 <test_emit_token+0x50>)
 800428e:	f7fc fc27 	bl	8000ae0 <chSysHalt>
 8004292:	bf00      	nop
 8004294:	20002368 	.word	0x20002368
 8004298:	20002368 	.word	0x20002368
 800429c:	200011b0 	.word	0x200011b0
 80042a0:	0800b31c 	.word	0x0800b31c
	...

080042b0 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80042b4:	4ec2      	ldr	r6, [pc, #776]	; (80045c0 <oslib_test_001_002_execute+0x310>)
 80042b6:	2301      	movs	r3, #1
static void oslib_test_001_002_execute(void) {
 80042b8:	b083      	sub	sp, #12
  test_set_step(1);
 80042ba:	6033      	str	r3, [r6, #0]
 80042bc:	2320      	movs	r3, #32
 80042be:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 80042c2:	4cc0      	ldr	r4, [pc, #768]	; (80045c4 <oslib_test_001_002_execute+0x314>)
  _dbg_check_lock();
 80042c4:	f7ff f974 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80042c8:	f7fc fc4a 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 80042cc:	f7fc fc48 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 80042d0:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80042d4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80042d6:	49bc      	ldr	r1, [pc, #752]	; (80045c8 <oslib_test_001_002_execute+0x318>)
  return (size_t)(mbp->top - mbp->buffer);
 80042d8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80042da:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80042de:	f1a0 0004 	sub.w	r0, r0, #4
 80042e2:	fab0 f080 	clz	r0, r0
 80042e6:	0940      	lsrs	r0, r0, #5
 80042e8:	f7fc fa3a 	bl	8000760 <_test_assert>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	f040 8212 	bne.w	8004716 <oslib_test_001_002_execute+0x466>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80042f2:	4db6      	ldr	r5, [pc, #728]	; (80045cc <oslib_test_001_002_execute+0x31c>)
  _dbg_check_unlock();
 80042f4:	f7ff f8f4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	42ab      	cmp	r3, r5
 80042fc:	d005      	beq.n	800430a <oslib_test_001_002_execute+0x5a>
 80042fe:	69aa      	ldr	r2, [r5, #24]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	6892      	ldr	r2, [r2, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	f0c0 8211 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 800430a:	2300      	movs	r3, #0
 800430c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8004310:	2302      	movs	r3, #2
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	2320      	movs	r3, #32
 8004316:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800431a:	f7ff f949 	bl	80035b0 <_dbg_check_lock>
    chMBResetI(&mb1);
 800431e:	f7fd fe47 	bl	8001fb0 <chMBResetI.constprop.29>
  _dbg_check_unlock();
 8004322:	f7ff f8dd 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004326:	682b      	ldr	r3, [r5, #0]
 8004328:	42ab      	cmp	r3, r5
 800432a:	d005      	beq.n	8004338 <oslib_test_001_002_execute+0x88>
 800432c:	69aa      	ldr	r2, [r5, #24]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	f0c0 81fa 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004338:	2300      	movs	r3, #0
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	2320      	movs	r3, #32
 8004340:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004344:	f7ff f934 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004348:	f7fc fc0a 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 800434c:	f7fc fc08 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 8004350:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004354:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004356:	499e      	ldr	r1, [pc, #632]	; (80045d0 <oslib_test_001_002_execute+0x320>)
  return (size_t)(mbp->top - mbp->buffer);
 8004358:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800435a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800435e:	f1a0 0004 	sub.w	r0, r0, #4
 8004362:	fab0 f080 	clz	r0, r0
 8004366:	0940      	lsrs	r0, r0, #5
 8004368:	f7fc f9fa 	bl	8000760 <_test_assert>
 800436c:	2800      	cmp	r0, #0
 800436e:	f040 81c2 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 8004372:	f7ff f8b5 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	42ab      	cmp	r3, r5
 800437a:	d005      	beq.n	8004388 <oslib_test_001_002_execute+0xd8>
 800437c:	69aa      	ldr	r2, [r5, #24]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	6892      	ldr	r2, [r2, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	f0c0 81d2 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004388:	2300      	movs	r3, #0
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	2320      	movs	r3, #32
 8004390:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004394:	f7ff f90c 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004398:	f7fc fbe2 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800439c:	6920      	ldr	r0, [r4, #16]
 800439e:	498d      	ldr	r1, [pc, #564]	; (80045d4 <oslib_test_001_002_execute+0x324>)
 80043a0:	fab0 f080 	clz	r0, r0
 80043a4:	0940      	lsrs	r0, r0, #5
 80043a6:	f7fc f9db 	bl	8000760 <_test_assert>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f040 81a3 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 80043b0:	f7ff f896 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	42ab      	cmp	r3, r5
 80043b8:	d005      	beq.n	80043c6 <oslib_test_001_002_execute+0x116>
 80043ba:	69aa      	ldr	r2, [r5, #24]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	f0c0 81b3 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	2320      	movs	r3, #32
 80043ce:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80043d2:	f7ff f8ed 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80043d6:	6820      	ldr	r0, [r4, #0]
 80043d8:	68a3      	ldr	r3, [r4, #8]
 80043da:	497f      	ldr	r1, [pc, #508]	; (80045d8 <oslib_test_001_002_execute+0x328>)
 80043dc:	1ac0      	subs	r0, r0, r3
 80043de:	fab0 f080 	clz	r0, r0
 80043e2:	0940      	lsrs	r0, r0, #5
 80043e4:	f7fc f9bc 	bl	8000760 <_test_assert>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f040 8184 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 80043ee:	f7ff f877 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80043f2:	682b      	ldr	r3, [r5, #0]
 80043f4:	42ab      	cmp	r3, r5
 80043f6:	d005      	beq.n	8004404 <oslib_test_001_002_execute+0x154>
 80043f8:	69aa      	ldr	r2, [r5, #24]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	f0c0 8194 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004404:	2300      	movs	r3, #0
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	2320      	movs	r3, #32
 800440c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004410:	f7ff f8ce 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	4970      	ldr	r1, [pc, #448]	; (80045dc <oslib_test_001_002_execute+0x32c>)
 800441a:	1ac0      	subs	r0, r0, r3
 800441c:	fab0 f080 	clz	r0, r0
 8004420:	0940      	lsrs	r0, r0, #5
 8004422:	f7fc f99d 	bl	8000760 <_test_assert>
 8004426:	2800      	cmp	r0, #0
 8004428:	f040 8165 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 800442c:	f7ff f858 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	42ab      	cmp	r3, r5
 8004434:	d005      	beq.n	8004442 <oslib_test_001_002_execute+0x192>
 8004436:	69aa      	ldr	r2, [r5, #24]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	f0c0 8175 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004442:	2300      	movs	r3, #0
 8004444:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8004448:	2203      	movs	r2, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800444a:	f8df a194 	ldr.w	sl, [pc, #404]	; 80045e0 <oslib_test_001_002_execute+0x330>
  mbp->reset = false;
 800444e:	7523      	strb	r3, [r4, #20]
 8004450:	4698      	mov	r8, r3
  test_set_step(3);
 8004452:	6032      	str	r2, [r6, #0]
 8004454:	2742      	movs	r7, #66	; 0x42
 8004456:	f04f 0920 	mov.w	r9, #32
 800445a:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800445e:	f7ff f8a7 	bl	80035b0 <_dbg_check_lock>
      msg1 = chMBPostI(&mb1, 'B' + i);
 8004462:	4638      	mov	r0, r7
 8004464:	f7fd fdbc 	bl	8001fe0 <chMBPostI.constprop.25>
 8004468:	4683      	mov	fp, r0
  _dbg_check_unlock();
 800446a:	f7ff f839 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800446e:	682a      	ldr	r2, [r5, #0]
 8004470:	42aa      	cmp	r2, r5
 8004472:	d005      	beq.n	8004480 <oslib_test_001_002_execute+0x1d0>
 8004474:	69ab      	ldr	r3, [r5, #24]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4293      	cmp	r3, r2
 800447c:	f0c0 8156 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004480:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004484:	fabb f08b 	clz	r0, fp
 8004488:	0940      	lsrs	r0, r0, #5
 800448a:	4651      	mov	r1, sl
 800448c:	f7fc f968 	bl	8000760 <_test_assert>
 8004490:	2800      	cmp	r0, #0
 8004492:	f040 813d 	bne.w	8004710 <oslib_test_001_002_execute+0x460>
 8004496:	3701      	adds	r7, #1
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004498:	2f45      	cmp	r7, #69	; 0x45
 800449a:	d1de      	bne.n	800445a <oslib_test_001_002_execute+0x1aa>
 800449c:	2320      	movs	r3, #32
 800449e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80044a2:	f7ff f885 	bl	80035b0 <_dbg_check_lock>
    msg1 = chMBPostAheadI(&mb1, 'A');
 80044a6:	2041      	movs	r0, #65	; 0x41
 80044a8:	f7fd fdca 	bl	8002040 <chMBPostAheadI.constprop.22>
 80044ac:	4607      	mov	r7, r0
  _dbg_check_unlock();
 80044ae:	f7ff f817 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	42ab      	cmp	r3, r5
 80044b6:	d005      	beq.n	80044c4 <oslib_test_001_002_execute+0x214>
 80044b8:	69aa      	ldr	r2, [r5, #24]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	f0c0 8134 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80044ca:	fab7 f087 	clz	r0, r7
 80044ce:	0940      	lsrs	r0, r0, #5
 80044d0:	4943      	ldr	r1, [pc, #268]	; (80045e0 <oslib_test_001_002_execute+0x330>)
 80044d2:	f7fc f945 	bl	8000760 <_test_assert>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f040 811a 	bne.w	8004710 <oslib_test_001_002_execute+0x460>
  test_set_step(4);
 80044dc:	2304      	movs	r3, #4
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	2320      	movs	r3, #32
 80044e2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80044e6:	f7ff f863 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80044ea:	f7fc fb39 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 80044ee:	f7fc fb37 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 80044f2:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80044f6:	6922      	ldr	r2, [r4, #16]
 80044f8:	1a5b      	subs	r3, r3, r1
 80044fa:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80044fe:	bf0c      	ite	eq
 8004500:	2001      	moveq	r0, #1
 8004502:	2000      	movne	r0, #0
 8004504:	4937      	ldr	r1, [pc, #220]	; (80045e4 <oslib_test_001_002_execute+0x334>)
 8004506:	f7fc f92b 	bl	8000760 <_test_assert>
 800450a:	2800      	cmp	r0, #0
 800450c:	f040 80f3 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 8004510:	f7fe ffe6 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	42ab      	cmp	r3, r5
 8004518:	d005      	beq.n	8004526 <oslib_test_001_002_execute+0x276>
 800451a:	69aa      	ldr	r2, [r5, #24]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	6892      	ldr	r2, [r2, #8]
 8004520:	429a      	cmp	r2, r3
 8004522:	f0c0 8103 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004526:	2300      	movs	r3, #0
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	2320      	movs	r3, #32
 800452e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004532:	f7ff f83d 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004536:	f7fc fb13 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800453a:	6920      	ldr	r0, [r4, #16]
 800453c:	492a      	ldr	r1, [pc, #168]	; (80045e8 <oslib_test_001_002_execute+0x338>)
 800453e:	f1a0 0c04 	sub.w	ip, r0, #4
 8004542:	f1dc 0000 	rsbs	r0, ip, #0
 8004546:	eb40 000c 	adc.w	r0, r0, ip
 800454a:	f7fc f909 	bl	8000760 <_test_assert>
 800454e:	2800      	cmp	r0, #0
 8004550:	f040 80d1 	bne.w	80046f6 <oslib_test_001_002_execute+0x446>
  _dbg_check_unlock();
 8004554:	f7fe ffc4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	42ab      	cmp	r3, r5
 800455c:	d005      	beq.n	800456a <oslib_test_001_002_execute+0x2ba>
 800455e:	69aa      	ldr	r2, [r5, #24]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	f0c0 80e1 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 800456a:	2300      	movs	r3, #0
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	2320      	movs	r3, #32
 8004572:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004576:	f7ff f81b 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800457a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800457e:	1ac7      	subs	r7, r0, r3
 8004580:	4278      	negs	r0, r7
 8004582:	4178      	adcs	r0, r7
 8004584:	4919      	ldr	r1, [pc, #100]	; (80045ec <oslib_test_001_002_execute+0x33c>)
 8004586:	f7fc f8eb 	bl	8000760 <_test_assert>
 800458a:	2800      	cmp	r0, #0
 800458c:	f040 80d1 	bne.w	8004732 <oslib_test_001_002_execute+0x482>
  _dbg_check_unlock();
 8004590:	f7fe ffa6 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	42ab      	cmp	r3, r5
 8004598:	d005      	beq.n	80045a6 <oslib_test_001_002_execute+0x2f6>
 800459a:	69aa      	ldr	r2, [r5, #24]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	6892      	ldr	r2, [r2, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	f0c0 80c3 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 80045a6:	2300      	movs	r3, #0
 80045a8:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 80045ac:	2205      	movs	r2, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80045ae:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80045e0 <oslib_test_001_002_execute+0x330>
  test_set_step(5);
 80045b2:	6032      	str	r2, [r6, #0]
 80045b4:	4698      	mov	r8, r3
 80045b6:	2704      	movs	r7, #4
 80045b8:	f04f 0a20 	mov.w	sl, #32
 80045bc:	e018      	b.n	80045f0 <oslib_test_001_002_execute+0x340>
 80045be:	bf00      	nop
 80045c0:	20002354 	.word	0x20002354
 80045c4:	20000c58 	.word	0x20000c58
 80045c8:	0800bc50 	.word	0x0800bc50
 80045cc:	200011b0 	.word	0x200011b0
 80045d0:	0800bc5c 	.word	0x0800bc5c
 80045d4:	0800bc68 	.word	0x0800bc68
 80045d8:	0800bc74 	.word	0x0800bc74
 80045dc:	0800bc98 	.word	0x0800bc98
 80045e0:	0800bd18 	.word	0x0800bd18
 80045e4:	0800bcbc 	.word	0x0800bcbc
 80045e8:	0800bcc8 	.word	0x0800bcc8
 80045ec:	0800bcd4 	.word	0x0800bcd4
 80045f0:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 80045f4:	f7fe ffdc 	bl	80035b0 <_dbg_check_lock>
      msg1 = chMBFetchI(&mb1, &msg2);
 80045f8:	a801      	add	r0, sp, #4
 80045fa:	f7fc fba1 	bl	8000d40 <chMBFetchI.constprop.19>
 80045fe:	4683      	mov	fp, r0
  _dbg_check_unlock();
 8004600:	f7fe ff6e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	42ab      	cmp	r3, r5
 8004608:	d005      	beq.n	8004616 <oslib_test_001_002_execute+0x366>
 800460a:	69aa      	ldr	r2, [r5, #24]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	f0c0 808b 	bcc.w	800472c <oslib_test_001_002_execute+0x47c>
 8004616:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800461a:	fabb f08b 	clz	r0, fp
 800461e:	0940      	lsrs	r0, r0, #5
 8004620:	4649      	mov	r1, r9
 8004622:	f7fc f89d 	bl	8000760 <_test_assert>
 8004626:	2800      	cmp	r0, #0
 8004628:	d172      	bne.n	8004710 <oslib_test_001_002_execute+0x460>
      test_emit_token(msg2);
 800462a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800462e:	f7ff fe0f 	bl	8004250 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004632:	3f01      	subs	r7, #1
 8004634:	d1dc      	bne.n	80045f0 <oslib_test_001_002_execute+0x340>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004636:	4940      	ldr	r1, [pc, #256]	; (8004738 <oslib_test_001_002_execute+0x488>)
 8004638:	4840      	ldr	r0, [pc, #256]	; (800473c <oslib_test_001_002_execute+0x48c>)
 800463a:	f7fc f931 	bl	80008a0 <_test_assert_sequence>
 800463e:	2800      	cmp	r0, #0
 8004640:	d166      	bne.n	8004710 <oslib_test_001_002_execute+0x460>
  test_set_step(6);
 8004642:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 800464a:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800464c:	f7ff f9d0 	bl	80039f0 <chMBPostTimeout.constprop.26>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004650:	fab0 f080 	clz	r0, r0
 8004654:	0940      	lsrs	r0, r0, #5
 8004656:	493a      	ldr	r1, [pc, #232]	; (8004740 <oslib_test_001_002_execute+0x490>)
 8004658:	f7fc f882 	bl	8000760 <_test_assert>
 800465c:	2800      	cmp	r0, #0
 800465e:	d157      	bne.n	8004710 <oslib_test_001_002_execute+0x460>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004660:	f04f 31ff 	mov.w	r1, #4294967295
 8004664:	a801      	add	r0, sp, #4
 8004666:	f7ff fa73 	bl	8003b50 <chMBFetchTimeout.constprop.20>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800466a:	fab0 f080 	clz	r0, r0
 800466e:	0940      	lsrs	r0, r0, #5
 8004670:	4933      	ldr	r1, [pc, #204]	; (8004740 <oslib_test_001_002_execute+0x490>)
 8004672:	f7fc f875 	bl	8000760 <_test_assert>
 8004676:	2800      	cmp	r0, #0
 8004678:	d14a      	bne.n	8004710 <oslib_test_001_002_execute+0x460>
  test_set_step(7);
 800467a:	2307      	movs	r3, #7
 800467c:	6033      	str	r3, [r6, #0]
 800467e:	2520      	movs	r5, #32
 8004680:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 8004684:	f7fe ff94 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004688:	f7fc fa6a 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 800468c:	f7fc fa68 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 8004690:	e9d4 0200 	ldrd	r0, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004694:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004696:	492b      	ldr	r1, [pc, #172]	; (8004744 <oslib_test_001_002_execute+0x494>)
  return (size_t)(mbp->top - mbp->buffer);
 8004698:	1a12      	subs	r2, r2, r0
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800469a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800469e:	1f1e      	subs	r6, r3, #4
 80046a0:	4270      	negs	r0, r6
 80046a2:	4170      	adcs	r0, r6
 80046a4:	f7fc f85c 	bl	8000760 <_test_assert>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d142      	bne.n	8004732 <oslib_test_001_002_execute+0x482>
  chSysUnlock();
 80046ac:	f7fe ff40 	bl	8003530 <chSysUnlock.lto_priv.121>
 80046b0:	f385 8811 	msr	BASEPRI, r5
 80046b4:	f7fe ff7c 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80046b8:	f7fc fa52 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80046bc:	6920      	ldr	r0, [r4, #16]
 80046be:	4922      	ldr	r1, [pc, #136]	; (8004748 <oslib_test_001_002_execute+0x498>)
 80046c0:	fab0 f080 	clz	r0, r0
 80046c4:	0940      	lsrs	r0, r0, #5
 80046c6:	f7fc f84b 	bl	8000760 <_test_assert>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d131      	bne.n	8004732 <oslib_test_001_002_execute+0x482>
 80046ce:	f7fe ff2f 	bl	8003530 <chSysUnlock.lto_priv.121>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80046d2:	6820      	ldr	r0, [r4, #0]
 80046d4:	68a3      	ldr	r3, [r4, #8]
 80046d6:	491d      	ldr	r1, [pc, #116]	; (800474c <oslib_test_001_002_execute+0x49c>)
 80046d8:	1ac2      	subs	r2, r0, r3
 80046da:	4250      	negs	r0, r2
 80046dc:	4150      	adcs	r0, r2
 80046de:	f7fc f83f 	bl	8000760 <_test_assert>
 80046e2:	b9a8      	cbnz	r0, 8004710 <oslib_test_001_002_execute+0x460>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	4919      	ldr	r1, [pc, #100]	; (8004750 <oslib_test_001_002_execute+0x4a0>)
 80046ea:	1ac3      	subs	r3, r0, r3
 80046ec:	4258      	negs	r0, r3
 80046ee:	4158      	adcs	r0, r3
 80046f0:	f7fc f836 	bl	8000760 <_test_assert>
 80046f4:	e00c      	b.n	8004710 <oslib_test_001_002_execute+0x460>
  _dbg_check_unlock();
 80046f6:	f7fe fef3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	d004      	beq.n	800470a <oslib_test_001_002_execute+0x45a>
 8004700:	69aa      	ldr	r2, [r5, #24]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d310      	bcc.n	800472c <oslib_test_001_002_execute+0x47c>
 800470a:	2300      	movs	r3, #0
 800470c:	f383 8811 	msr	BASEPRI, r3
}
 8004710:	b003      	add	sp, #12
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  _dbg_check_unlock();
 8004716:	f7fe fee3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <oslib_test_001_002_execute+0x4a4>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d0f3      	beq.n	800470a <oslib_test_001_002_execute+0x45a>
 8004722:	6999      	ldr	r1, [r3, #24]
 8004724:	6893      	ldr	r3, [r2, #8]
 8004726:	688a      	ldr	r2, [r1, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	d2ee      	bcs.n	800470a <oslib_test_001_002_execute+0x45a>
 800472c:	480a      	ldr	r0, [pc, #40]	; (8004758 <oslib_test_001_002_execute+0x4a8>)
 800472e:	f7fc f9d7 	bl	8000ae0 <chSysHalt>
 8004732:	f7fe fefd 	bl	8003530 <chSysUnlock.lto_priv.121>
 8004736:	e7eb      	b.n	8004710 <oslib_test_001_002_execute+0x460>
 8004738:	0800bcec 	.word	0x0800bcec
 800473c:	0800bd00 	.word	0x0800bd00
 8004740:	0800bd18 	.word	0x0800bd18
 8004744:	0800bc5c 	.word	0x0800bc5c
 8004748:	0800bc68 	.word	0x0800bc68
 800474c:	0800bc74 	.word	0x0800bc74
 8004750:	0800bc98 	.word	0x0800bc98
 8004754:	200011b0 	.word	0x200011b0
 8004758:	0800b388 	.word	0x0800b388
 800475c:	00000000 	.word	0x00000000

08004760 <oslib_test_001_001_execute>:
static void oslib_test_001_001_execute(void) {
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8004762:	4ec3      	ldr	r6, [pc, #780]	; (8004a70 <oslib_test_001_001_execute+0x310>)
 8004764:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 8004766:	b083      	sub	sp, #12
  test_set_step(1);
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	2320      	movs	r3, #32
 800476c:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8004770:	4cc0      	ldr	r4, [pc, #768]	; (8004a74 <oslib_test_001_001_execute+0x314>)
  _dbg_check_lock();
 8004772:	f7fe ff1d 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004776:	f7fc f9f3 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 800477a:	f7fc f9f1 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800477e:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004782:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8004784:	49bc      	ldr	r1, [pc, #752]	; (8004a78 <oslib_test_001_001_execute+0x318>)
  return (size_t)(mbp->top - mbp->buffer);
 8004786:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004788:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800478c:	f1a0 0004 	sub.w	r0, r0, #4
 8004790:	fab0 f080 	clz	r0, r0
 8004794:	0940      	lsrs	r0, r0, #5
 8004796:	f7fb ffe3 	bl	8000760 <_test_assert>
 800479a:	2800      	cmp	r0, #0
 800479c:	f040 81c4 	bne.w	8004b28 <oslib_test_001_001_execute+0x3c8>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80047a0:	4db6      	ldr	r5, [pc, #728]	; (8004a7c <oslib_test_001_001_execute+0x31c>)
  _dbg_check_unlock();
 80047a2:	f7fe fe9d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	d005      	beq.n	80047b8 <oslib_test_001_001_execute+0x58>
 80047ac:	69aa      	ldr	r2, [r5, #24]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f0c0 81d2 	bcc.w	8004b5c <oslib_test_001_001_execute+0x3fc>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80047be:	2302      	movs	r3, #2
 80047c0:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 80047c2:	f7ff f8dd 	bl	8003980 <chMBReset.constprop.28>
 80047c6:	2320      	movs	r3, #32
 80047c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80047cc:	f7fe fef0 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80047d0:	f7fc f9c6 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 80047d4:	f7fc f9c4 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 80047d8:	e9d4 2300 	ldrd	r2, r3, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047dc:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80047de:	49a8      	ldr	r1, [pc, #672]	; (8004a80 <oslib_test_001_001_execute+0x320>)
  return (size_t)(mbp->top - mbp->buffer);
 80047e0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80047e2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80047e6:	f1a0 0004 	sub.w	r0, r0, #4
 80047ea:	fab0 f080 	clz	r0, r0
 80047ee:	0940      	lsrs	r0, r0, #5
 80047f0:	f7fb ffb6 	bl	8000760 <_test_assert>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	f040 81a7 	bne.w	8004b48 <oslib_test_001_001_execute+0x3e8>
  _dbg_check_unlock();
 80047fa:	f7fe fe71 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	42ab      	cmp	r3, r5
 8004802:	d005      	beq.n	8004810 <oslib_test_001_001_execute+0xb0>
 8004804:	69aa      	ldr	r2, [r5, #24]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	6892      	ldr	r2, [r2, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	f0c0 81a6 	bcc.w	8004b5c <oslib_test_001_001_execute+0x3fc>
 8004810:	2300      	movs	r3, #0
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	2320      	movs	r3, #32
 8004818:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800481c:	f7fe fec8 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004820:	f7fc f99e 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004824:	6920      	ldr	r0, [r4, #16]
 8004826:	4997      	ldr	r1, [pc, #604]	; (8004a84 <oslib_test_001_001_execute+0x324>)
 8004828:	fab0 f080 	clz	r0, r0
 800482c:	0940      	lsrs	r0, r0, #5
 800482e:	f7fb ff97 	bl	8000760 <_test_assert>
 8004832:	2800      	cmp	r0, #0
 8004834:	f040 8188 	bne.w	8004b48 <oslib_test_001_001_execute+0x3e8>
  _dbg_check_unlock();
 8004838:	f7fe fe52 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	42ab      	cmp	r3, r5
 8004840:	d005      	beq.n	800484e <oslib_test_001_001_execute+0xee>
 8004842:	69aa      	ldr	r2, [r5, #24]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	f0c0 8187 	bcc.w	8004b5c <oslib_test_001_001_execute+0x3fc>
 800484e:	2300      	movs	r3, #0
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	2320      	movs	r3, #32
 8004856:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800485a:	f7fe fea9 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800485e:	6820      	ldr	r0, [r4, #0]
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	4989      	ldr	r1, [pc, #548]	; (8004a88 <oslib_test_001_001_execute+0x328>)
 8004864:	1ac0      	subs	r0, r0, r3
 8004866:	fab0 f080 	clz	r0, r0
 800486a:	0940      	lsrs	r0, r0, #5
 800486c:	f7fb ff78 	bl	8000760 <_test_assert>
 8004870:	2800      	cmp	r0, #0
 8004872:	f040 8169 	bne.w	8004b48 <oslib_test_001_001_execute+0x3e8>
  _dbg_check_unlock();
 8004876:	f7fe fe33 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	42ab      	cmp	r3, r5
 800487e:	d005      	beq.n	800488c <oslib_test_001_001_execute+0x12c>
 8004880:	69aa      	ldr	r2, [r5, #24]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	6892      	ldr	r2, [r2, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	f0c0 8168 	bcc.w	8004b5c <oslib_test_001_001_execute+0x3fc>
 800488c:	2300      	movs	r3, #0
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	2320      	movs	r3, #32
 8004894:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004898:	f7fe fe8a 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	497a      	ldr	r1, [pc, #488]	; (8004a8c <oslib_test_001_001_execute+0x32c>)
 80048a2:	1ac0      	subs	r0, r0, r3
 80048a4:	fab0 f080 	clz	r0, r0
 80048a8:	0940      	lsrs	r0, r0, #5
 80048aa:	f7fb ff59 	bl	8000760 <_test_assert>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f040 814a 	bne.w	8004b48 <oslib_test_001_001_execute+0x3e8>
  _dbg_check_unlock();
 80048b4:	f7fe fe14 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	d005      	beq.n	80048ca <oslib_test_001_001_execute+0x16a>
 80048be:	69aa      	ldr	r2, [r5, #24]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	6892      	ldr	r2, [r2, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	f0c0 8149 	bcc.w	8004b5c <oslib_test_001_001_execute+0x3fc>
 80048ca:	2000      	movs	r0, #0
 80048cc:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80048d0:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80048d2:	f04f 31ff 	mov.w	r1, #4294967295
  test_set_step(3);
 80048d6:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80048d8:	f7ff f88a 	bl	80039f0 <chMBPostTimeout.constprop.26>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 80048dc:	1c85      	adds	r5, r0, #2
 80048de:	bf14      	ite	ne
 80048e0:	2000      	movne	r0, #0
 80048e2:	2001      	moveq	r0, #1
 80048e4:	496a      	ldr	r1, [pc, #424]	; (8004a90 <oslib_test_001_001_execute+0x330>)
 80048e6:	f7fb ff3b 	bl	8000760 <_test_assert>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f040 812a 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295
 80048f4:	f7ff f8d4 	bl	8003aa0 <chMBPostAheadTimeout.constprop.23>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 80048f8:	1c82      	adds	r2, r0, #2
 80048fa:	bf14      	ite	ne
 80048fc:	2000      	movne	r0, #0
 80048fe:	2001      	moveq	r0, #1
 8004900:	4963      	ldr	r1, [pc, #396]	; (8004a90 <oslib_test_001_001_execute+0x330>)
 8004902:	f7fb ff2d 	bl	8000760 <_test_assert>
 8004906:	2800      	cmp	r0, #0
 8004908:	f040 811c 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800490c:	f04f 31ff 	mov.w	r1, #4294967295
 8004910:	a801      	add	r0, sp, #4
 8004912:	f7ff f91d 	bl	8003b50 <chMBFetchTimeout.constprop.20>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8004916:	1c83      	adds	r3, r0, #2
 8004918:	bf14      	ite	ne
 800491a:	2000      	movne	r0, #0
 800491c:	2001      	moveq	r0, #1
 800491e:	495c      	ldr	r1, [pc, #368]	; (8004a90 <oslib_test_001_001_execute+0x330>)
 8004920:	f7fb ff1e 	bl	8000760 <_test_assert>
 8004924:	2800      	cmp	r0, #0
 8004926:	f040 810d 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
  test_set_step(4);
 800492a:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800492c:	4f59      	ldr	r7, [pc, #356]	; (8004a94 <oslib_test_001_001_execute+0x334>)
  mbp->reset = false;
 800492e:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004934:	f04f 31ff 	mov.w	r1, #4294967295
 8004938:	4628      	mov	r0, r5
 800493a:	f7ff f859 	bl	80039f0 <chMBPostTimeout.constprop.26>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800493e:	fab0 f080 	clz	r0, r0
 8004942:	4639      	mov	r1, r7
 8004944:	0940      	lsrs	r0, r0, #5
 8004946:	f7fb ff0b 	bl	8000760 <_test_assert>
 800494a:	2800      	cmp	r0, #0
 800494c:	f040 80fa 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
 8004950:	3501      	adds	r5, #1
    for (i = 0; i < MB_SIZE - 1; i++) {
 8004952:	2d45      	cmp	r5, #69	; 0x45
 8004954:	d1ee      	bne.n	8004934 <oslib_test_001_001_execute+0x1d4>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8004956:	f04f 31ff 	mov.w	r1, #4294967295
 800495a:	2041      	movs	r0, #65	; 0x41
 800495c:	f7ff f8a0 	bl	8003aa0 <chMBPostAheadTimeout.constprop.23>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004960:	fab0 f080 	clz	r0, r0
 8004964:	0940      	lsrs	r0, r0, #5
 8004966:	494b      	ldr	r1, [pc, #300]	; (8004a94 <oslib_test_001_001_execute+0x334>)
 8004968:	f7fb fefa 	bl	8000760 <_test_assert>
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 80e9 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
  test_set_step(5);
 8004972:	2305      	movs	r3, #5
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	2520      	movs	r5, #32
 8004978:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 800497c:	f7fe fe18 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004980:	f7fc f8ee 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 8004984:	f7fc f8ec 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 8004988:	e9d4 1300 	ldrd	r1, r3, [r4]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800498c:	6922      	ldr	r2, [r4, #16]
 800498e:	1a5b      	subs	r3, r3, r1
 8004990:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8004994:	bf0c      	ite	eq
 8004996:	2001      	moveq	r0, #1
 8004998:	2000      	movne	r0, #0
 800499a:	493f      	ldr	r1, [pc, #252]	; (8004a98 <oslib_test_001_001_execute+0x338>)
 800499c:	f7fb fee0 	bl	8000760 <_test_assert>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f040 80de 	bne.w	8004b62 <oslib_test_001_001_execute+0x402>
 80049a6:	f7fe fdc3 	bl	8003530 <chSysUnlock.lto_priv.121>
 80049aa:	f385 8811 	msr	BASEPRI, r5
 80049ae:	f7fe fdff 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80049b2:	f7fc f8d5 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80049b6:	6920      	ldr	r0, [r4, #16]
 80049b8:	4938      	ldr	r1, [pc, #224]	; (8004a9c <oslib_test_001_001_execute+0x33c>)
 80049ba:	f1a0 0c04 	sub.w	ip, r0, #4
 80049be:	f1dc 0000 	rsbs	r0, ip, #0
 80049c2:	eb40 000c 	adc.w	r0, r0, ip
 80049c6:	f7fb fecb 	bl	8000760 <_test_assert>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f040 80c9 	bne.w	8004b62 <oslib_test_001_001_execute+0x402>
 80049d0:	f7fe fdae 	bl	8003530 <chSysUnlock.lto_priv.121>
 80049d4:	f385 8811 	msr	BASEPRI, r5
 80049d8:	f7fe fdea 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80049dc:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 80049e0:	1ac7      	subs	r7, r0, r3
 80049e2:	4278      	negs	r0, r7
 80049e4:	4178      	adcs	r0, r7
 80049e6:	492e      	ldr	r1, [pc, #184]	; (8004aa0 <oslib_test_001_001_execute+0x340>)
 80049e8:	f7fb feba 	bl	8000760 <_test_assert>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f040 80b8 	bne.w	8004b62 <oslib_test_001_001_execute+0x402>
 80049f2:	f7fe fd9d 	bl	8003530 <chSysUnlock.lto_priv.121>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80049f6:	4f27      	ldr	r7, [pc, #156]	; (8004a94 <oslib_test_001_001_execute+0x334>)
  test_set_step(6);
 80049f8:	2306      	movs	r3, #6
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80049fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004a02:	a801      	add	r0, sp, #4
 8004a04:	f7ff f8a4 	bl	8003b50 <chMBFetchTimeout.constprop.20>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004a08:	fab0 f080 	clz	r0, r0
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	0940      	lsrs	r0, r0, #5
 8004a10:	f7fb fea6 	bl	8000760 <_test_assert>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 8095 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
      test_emit_token(msg2);
 8004a1a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004a1e:	f7ff fc17 	bl	8004250 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8004a22:	3d01      	subs	r5, #1
 8004a24:	d1eb      	bne.n	80049fe <oslib_test_001_001_execute+0x29e>
    test_assert_sequence("ABCD", "wrong get sequence");
 8004a26:	491f      	ldr	r1, [pc, #124]	; (8004aa4 <oslib_test_001_001_execute+0x344>)
 8004a28:	481f      	ldr	r0, [pc, #124]	; (8004aa8 <oslib_test_001_001_execute+0x348>)
 8004a2a:	f7fb ff39 	bl	80008a0 <_test_assert_sequence>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f040 8088 	bne.w	8004b44 <oslib_test_001_001_execute+0x3e4>
  test_set_step(7);
 8004a34:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004a36:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3a:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 8004a3c:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8004a3e:	f7fe ffd7 	bl	80039f0 <chMBPostTimeout.constprop.26>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004a42:	fab0 f080 	clz	r0, r0
 8004a46:	0940      	lsrs	r0, r0, #5
 8004a48:	4912      	ldr	r1, [pc, #72]	; (8004a94 <oslib_test_001_001_execute+0x334>)
 8004a4a:	f7fb fe89 	bl	8000760 <_test_assert>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d178      	bne.n	8004b44 <oslib_test_001_001_execute+0x3e4>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8004a52:	f04f 31ff 	mov.w	r1, #4294967295
 8004a56:	a801      	add	r0, sp, #4
 8004a58:	f7ff f87a 	bl	8003b50 <chMBFetchTimeout.constprop.20>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004a5c:	fab0 f080 	clz	r0, r0
 8004a60:	0940      	lsrs	r0, r0, #5
 8004a62:	490c      	ldr	r1, [pc, #48]	; (8004a94 <oslib_test_001_001_execute+0x334>)
 8004a64:	f7fb fe7c 	bl	8000760 <_test_assert>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d16b      	bne.n	8004b44 <oslib_test_001_001_execute+0x3e4>
 8004a6c:	e01e      	b.n	8004aac <oslib_test_001_001_execute+0x34c>
 8004a6e:	bf00      	nop
 8004a70:	20002354 	.word	0x20002354
 8004a74:	20000c58 	.word	0x20000c58
 8004a78:	0800bc50 	.word	0x0800bc50
 8004a7c:	200011b0 	.word	0x200011b0
 8004a80:	0800bc5c 	.word	0x0800bc5c
 8004a84:	0800bc68 	.word	0x0800bc68
 8004a88:	0800bc74 	.word	0x0800bc74
 8004a8c:	0800bc98 	.word	0x0800bc98
 8004a90:	0800bc2c 	.word	0x0800bc2c
 8004a94:	0800bd18 	.word	0x0800bd18
 8004a98:	0800bcbc 	.word	0x0800bcbc
 8004a9c:	0800bcc8 	.word	0x0800bcc8
 8004aa0:	0800bcd4 	.word	0x0800bcd4
 8004aa4:	0800bcec 	.word	0x0800bcec
 8004aa8:	0800bd00 	.word	0x0800bd00
  test_set_step(8);
 8004aac:	2308      	movs	r3, #8
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	2520      	movs	r5, #32
 8004ab2:	f385 8811 	msr	BASEPRI, r5
 8004ab6:	f7fe fd7b 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004aba:	f7fc f851 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 8004abe:	f7fc f84f 	bl	8000b60 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 8004ac2:	e9d4 0200 	ldrd	r0, r2, [r4]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004ac6:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004ac8:	4927      	ldr	r1, [pc, #156]	; (8004b68 <oslib_test_001_001_execute+0x408>)
  return (size_t)(mbp->top - mbp->buffer);
 8004aca:	1a12      	subs	r2, r2, r0
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004acc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004ad0:	1f1e      	subs	r6, r3, #4
 8004ad2:	4270      	negs	r0, r6
 8004ad4:	4170      	adcs	r0, r6
 8004ad6:	f7fb fe43 	bl	8000760 <_test_assert>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d141      	bne.n	8004b62 <oslib_test_001_001_execute+0x402>
 8004ade:	f7fe fd27 	bl	8003530 <chSysUnlock.lto_priv.121>
 8004ae2:	f385 8811 	msr	BASEPRI, r5
 8004ae6:	f7fe fd63 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8004aea:	f7fc f839 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8004aee:	6920      	ldr	r0, [r4, #16]
 8004af0:	491e      	ldr	r1, [pc, #120]	; (8004b6c <oslib_test_001_001_execute+0x40c>)
 8004af2:	fab0 f080 	clz	r0, r0
 8004af6:	0940      	lsrs	r0, r0, #5
 8004af8:	f7fb fe32 	bl	8000760 <_test_assert>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d130      	bne.n	8004b62 <oslib_test_001_001_execute+0x402>
 8004b00:	f7fe fd16 	bl	8003530 <chSysUnlock.lto_priv.121>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	4919      	ldr	r1, [pc, #100]	; (8004b70 <oslib_test_001_001_execute+0x410>)
 8004b0a:	1ac2      	subs	r2, r0, r3
 8004b0c:	4250      	negs	r0, r2
 8004b0e:	4150      	adcs	r0, r2
 8004b10:	f7fb fe26 	bl	8000760 <_test_assert>
 8004b14:	b9b0      	cbnz	r0, 8004b44 <oslib_test_001_001_execute+0x3e4>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	68e3      	ldr	r3, [r4, #12]
 8004b1a:	4916      	ldr	r1, [pc, #88]	; (8004b74 <oslib_test_001_001_execute+0x414>)
 8004b1c:	1ac3      	subs	r3, r0, r3
 8004b1e:	4258      	negs	r0, r3
 8004b20:	4158      	adcs	r0, r3
 8004b22:	f7fb fe1d 	bl	8000760 <_test_assert>
 8004b26:	e00d      	b.n	8004b44 <oslib_test_001_001_execute+0x3e4>
  _dbg_check_unlock();
 8004b28:	f7fe fcda 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004b2c:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <oslib_test_001_001_execute+0x418>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d004      	beq.n	8004b3e <oslib_test_001_001_execute+0x3de>
 8004b34:	6999      	ldr	r1, [r3, #24]
 8004b36:	6893      	ldr	r3, [r2, #8]
 8004b38:	688a      	ldr	r2, [r1, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d30e      	bcc.n	8004b5c <oslib_test_001_001_execute+0x3fc>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f383 8811 	msr	BASEPRI, r3
}
 8004b44:	b003      	add	sp, #12
 8004b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 8004b48:	f7fe fcca 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	42ab      	cmp	r3, r5
 8004b50:	d0f5      	beq.n	8004b3e <oslib_test_001_001_execute+0x3de>
 8004b52:	69aa      	ldr	r2, [r5, #24]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d2f0      	bcs.n	8004b3e <oslib_test_001_001_execute+0x3de>
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <oslib_test_001_001_execute+0x41c>)
 8004b5e:	f7fb ffbf 	bl	8000ae0 <chSysHalt>
 8004b62:	f7fe fce5 	bl	8003530 <chSysUnlock.lto_priv.121>
 8004b66:	e7ed      	b.n	8004b44 <oslib_test_001_001_execute+0x3e4>
 8004b68:	0800bc5c 	.word	0x0800bc5c
 8004b6c:	0800bc68 	.word	0x0800bc68
 8004b70:	0800bc74 	.word	0x0800bc74
 8004b74:	0800bc98 	.word	0x0800bc98
 8004b78:	200011b0 	.word	0x200011b0
 8004b7c:	0800b388 	.word	0x0800b388

08004b80 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8004b80:	2043      	movs	r0, #67	; 0x43
 8004b82:	f7ff bb65 	b.w	8004250 <test_emit_token>
 8004b86:	bf00      	nop
	...

08004b90 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8004b90:	2042      	movs	r0, #66	; 0x42
 8004b92:	f7ff bb5d 	b.w	8004250 <test_emit_token>
 8004b96:	bf00      	nop
	...

08004ba0 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8004ba0:	2041      	movs	r0, #65	; 0x41
 8004ba2:	f7ff bb55 	b.w	8004250 <test_emit_token>
 8004ba6:	bf00      	nop
	...

08004bb0 <thread1.lto_priv.179>:
static THD_FUNCTION(thread1, p) {
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004bba:	f7fe fcf9 	bl	80035b0 <_dbg_check_lock>
  if (*trp != NULL) {
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <thread1.lto_priv.179+0x5c>)
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	b140      	cbz	r0, 8004bd6 <thread1.lto_priv.179+0x26>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8004bc4:	f890 2020 	ldrb.w	r2, [r0, #32]
 8004bc8:	2a03      	cmp	r2, #3
 8004bca:	d119      	bne.n	8004c00 <thread1.lto_priv.179+0x50>
    *trp = NULL;
 8004bcc:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8004bce:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8004bd0:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8004bd2:	f7fc f875 	bl	8000cc0 <chSchReadyI>
  chSchRescheduleS();
 8004bd6:	f7fe fc6b 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8004bda:	f7fe fc81 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <thread1.lto_priv.179+0x60>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d004      	beq.n	8004bf0 <thread1.lto_priv.179+0x40>
 8004be6:	6999      	ldr	r1, [r3, #24]
 8004be8:	6893      	ldr	r3, [r2, #8]
 8004bea:	688a      	ldr	r2, [r1, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d30a      	bcc.n	8004c06 <thread1.lto_priv.179+0x56>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8004bf6:	7820      	ldrb	r0, [r4, #0]
}
 8004bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8004bfc:	f7ff bb28 	b.w	8004250 <test_emit_token>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8004c00:	4804      	ldr	r0, [pc, #16]	; (8004c14 <thread1.lto_priv.179+0x64>)
 8004c02:	f7fb ff6d 	bl	8000ae0 <chSysHalt>
 8004c06:	4804      	ldr	r0, [pc, #16]	; (8004c18 <thread1.lto_priv.179+0x68>)
 8004c08:	f7fb ff6a 	bl	8000ae0 <chSysHalt>
 8004c0c:	20002380 	.word	0x20002380
 8004c10:	200011b0 	.word	0x200011b0
 8004c14:	0800b64c 	.word	0x0800b64c
 8004c18:	0800b34c 	.word	0x0800b34c
 8004c1c:	00000000 	.word	0x00000000

08004c20 <thread>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8004c20:	7800      	ldrb	r0, [r0, #0]
 8004c22:	f7ff bb15 	b.w	8004250 <test_emit_token>
 8004c26:	bf00      	nop
	...

08004c30 <dyn_thread1>:
 8004c30:	f7ff bff6 	b.w	8004c20 <thread>
	...

08004c40 <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8004c40:	2900      	cmp	r1, #0
 8004c42:	dd03      	ble.n	8004c4c <cmd_systime+0xc>
    shellUsage(chp, "systime");
 8004c44:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <cmd_systime+0x50>)
 8004c46:	4913      	ldr	r1, [pc, #76]	; (8004c94 <cmd_systime+0x54>)
 8004c48:	f7fd bf5a 	b.w	8002b00 <chprintf>
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2320      	movs	r3, #32
 8004c52:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004c56:	f7fe fcab 	bl	80035b0 <_dbg_check_lock>
  return (systime_t)STM32_ST_TIM->CNT;
 8004c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c5e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8004c60:	f7fe fc3e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <cmd_systime+0x58>)
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d004      	beq.n	8004c76 <cmd_systime+0x36>
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	688b      	ldr	r3, [r1, #8]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d309      	bcc.n	8004c8a <cmd_systime+0x4a>
 8004c76:	2300      	movs	r3, #0
 8004c78:	f383 8811 	msr	BASEPRI, r3
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8004c7c:	4907      	ldr	r1, [pc, #28]	; (8004c9c <cmd_systime+0x5c>)
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4620      	mov	r0, r4
}
 8004c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8004c86:	f7fd bf3b 	b.w	8002b00 <chprintf>
 8004c8a:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <cmd_systime+0x60>)
 8004c8c:	f7fb ff28 	bl	8000ae0 <chSysHalt>
 8004c90:	0800bab4 	.word	0x0800bab4
 8004c94:	0800b918 	.word	0x0800b918
 8004c98:	200011b0 	.word	0x200011b0
 8004c9c:	0800babc 	.word	0x0800babc
 8004ca0:	0800b3d8 	.word	0x0800b3d8
	...

08004cb0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8004cb0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
  const ShellCommand *scp = scfg->sc_commands;
 8004cb4:	e9d0 7300 	ldrd	r7, r3, [r0]
THD_FUNCTION(shellThread, p) {
 8004cb8:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8004cba:	4973      	ldr	r1, [pc, #460]	; (8004e88 <shellThread+0x1d8>)
  const ShellCommand *scp = scfg->sc_commands;
 8004cbc:	9301      	str	r3, [sp, #4]
THD_FUNCTION(shellThread, p) {
 8004cbe:	4681      	mov	r9, r0
  chprintf(chp, SHELL_NEWLINE_STR);
 8004cc0:	4638      	mov	r0, r7
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 8004cc2:	468b      	mov	fp, r1
  chprintf(chp, SHELL_NEWLINE_STR);
 8004cc4:	f7fd ff1c 	bl	8002b00 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8004cc8:	4638      	mov	r0, r7
 8004cca:	4970      	ldr	r1, [pc, #448]	; (8004e8c <shellThread+0x1dc>)
    chprintf(chp, SHELL_PROMPT_STR);
 8004ccc:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8004ec0 <shellThread+0x210>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8004cd0:	f7fd ff16 	bl	8002b00 <chprintf>
 8004cd4:	ae0a      	add	r6, sp, #40	; 0x28
    chprintf(chp, SHELL_PROMPT_STR);
 8004cd6:	4651      	mov	r1, sl
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7fd ff11 	bl	8002b00 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8004cde:	f8d9 4000 	ldr.w	r4, [r9]
 8004ce2:	6823      	ldr	r3, [r4, #0]
  char *p = line;
 8004ce4:	4635      	mov	r5, r6
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f10d 010f 	add.w	r1, sp, #15
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4798      	blx	r3
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d069      	beq.n	8004dca <shellThread+0x11a>
    if (c == 4) {
 8004cf6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8004cfa:	2904      	cmp	r1, #4
 8004cfc:	d061      	beq.n	8004dc2 <shellThread+0x112>
    if ((c == 8) || (c == 127)) {
 8004cfe:	2908      	cmp	r1, #8
 8004d00:	d013      	beq.n	8004d2a <shellThread+0x7a>
 8004d02:	297f      	cmp	r1, #127	; 0x7f
 8004d04:	d011      	beq.n	8004d2a <shellThread+0x7a>
    if (c == '\r') {
 8004d06:	290d      	cmp	r1, #13
 8004d08:	d023      	beq.n	8004d52 <shellThread+0xa2>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8004d0a:	291f      	cmp	r1, #31
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	d9ea      	bls.n	8004ce6 <shellThread+0x36>
      continue;
    if (p < line + size - 1) {
 8004d10:	f10d 0267 	add.w	r2, sp, #103	; 0x67
 8004d14:	4295      	cmp	r5, r2
 8004d16:	d2e6      	bcs.n	8004ce6 <shellThread+0x36>
      streamPut(chp, c);
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4798      	blx	r3
      *p++ = (char)c;
 8004d1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004d22:	702b      	strb	r3, [r5, #0]
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	3501      	adds	r5, #1
 8004d28:	e7dd      	b.n	8004ce6 <shellThread+0x36>
      if (p != line) {
 8004d2a:	42b5      	cmp	r5, r6
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	d0da      	beq.n	8004ce6 <shellThread+0x36>
        streamPut(chp, 0x08);
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2108      	movs	r1, #8
 8004d34:	4620      	mov	r0, r4
 8004d36:	4798      	blx	r3
        streamPut(chp, 0x20);
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	2120      	movs	r1, #32
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4798      	blx	r3
        streamPut(chp, 0x08);
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	2108      	movs	r1, #8
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4798      	blx	r3
        p--;
 8004d4c:	3d01      	subs	r5, #1
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	e7c9      	b.n	8004ce6 <shellThread+0x36>
      chprintf(chp, SHELL_NEWLINE_STR);
 8004d52:	4620      	mov	r0, r4
 8004d54:	4659      	mov	r1, fp
      *p = 0;
 8004d56:	2400      	movs	r4, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 8004d58:	f7fd fed2 	bl	8002b00 <chprintf>
    lp = parse_arguments(line, &tokp);
 8004d5c:	a904      	add	r1, sp, #16
      *p = 0;
 8004d5e:	702c      	strb	r4, [r5, #0]
    lp = parse_arguments(line, &tokp);
 8004d60:	4630      	mov	r0, r6
 8004d62:	f7fd fe9d 	bl	8002aa0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004d66:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8004d68:	4680      	mov	r8, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	ad05      	add	r5, sp, #20
 8004d6e:	f7fd fe97 	bl	8002aa0 <parse_arguments>
 8004d72:	b150      	cbz	r0, 8004d8a <shellThread+0xda>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8004d74:	2c04      	cmp	r4, #4
 8004d76:	d01d      	beq.n	8004db4 <shellThread+0x104>
      args[n++] = lp;
 8004d78:	f845 0b04 	str.w	r0, [r5], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004d7c:	a904      	add	r1, sp, #16
 8004d7e:	2000      	movs	r0, #0
      args[n++] = lp;
 8004d80:	3401      	adds	r4, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8004d82:	f7fd fe8d 	bl	8002aa0 <parse_arguments>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d1f4      	bne.n	8004d74 <shellThread+0xc4>
    args[n] = NULL;
 8004d8a:	ab1a      	add	r3, sp, #104	; 0x68
 8004d8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004d90:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8004d94:	f1b8 0f00 	cmp.w	r8, #0
 8004d98:	d09d      	beq.n	8004cd6 <shellThread+0x26>
      if (strcmp(cmd, "help") == 0) {
 8004d9a:	493d      	ldr	r1, [pc, #244]	; (8004e90 <shellThread+0x1e0>)
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	f7fb fb33 	bl	8000408 <strcmp>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d146      	bne.n	8004e34 <shellThread+0x184>
        if (n > 0) {
 8004da6:	b324      	cbz	r4, 8004df2 <shellThread+0x142>
          shellUsage(chp, "help");
 8004da8:	4a39      	ldr	r2, [pc, #228]	; (8004e90 <shellThread+0x1e0>)
 8004daa:	493a      	ldr	r1, [pc, #232]	; (8004e94 <shellThread+0x1e4>)
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7fd fea7 	bl	8002b00 <chprintf>
 8004db2:	e790      	b.n	8004cd6 <shellThread+0x26>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8004db4:	4938      	ldr	r1, [pc, #224]	; (8004e98 <shellThread+0x1e8>)
 8004db6:	4638      	mov	r0, r7
 8004db8:	f7fd fea2 	bl	8002b00 <chprintf>
    args[n] = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc0:	e789      	b.n	8004cd6 <shellThread+0x26>
      chprintf(chp, "^D");
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4935      	ldr	r1, [pc, #212]	; (8004e9c <shellThread+0x1ec>)
 8004dc6:	f7fd fe9b 	bl	8002b00 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 8004dca:	492f      	ldr	r1, [pc, #188]	; (8004e88 <shellThread+0x1d8>)
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f7fd fe97 	bl	8002b00 <chprintf>
      chprintf(chp, "logout");
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	4932      	ldr	r1, [pc, #200]	; (8004ea0 <shellThread+0x1f0>)
 8004dd6:	f7fd fe93 	bl	8002b00 <chprintf>
 8004dda:	2320      	movs	r3, #32
 8004ddc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004de0:	f7fe fbe6 	bl	80035b0 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8004de4:	482f      	ldr	r0, [pc, #188]	; (8004ea4 <shellThread+0x1f4>)
 8004de6:	2100      	movs	r1, #0
 8004de8:	f7fc f822 	bl	8000e30 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fe fa1f 	bl	8003230 <chThdExitS>
        chprintf(chp, "Commands: help ");
 8004df2:	492d      	ldr	r1, [pc, #180]	; (8004ea8 <shellThread+0x1f8>)
 8004df4:	4c2d      	ldr	r4, [pc, #180]	; (8004eac <shellThread+0x1fc>)
    chprintf(chp, "%s ", scp->sc_name);
 8004df6:	4d2e      	ldr	r5, [pc, #184]	; (8004eb0 <shellThread+0x200>)
        chprintf(chp, "Commands: help ");
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f7fd fe81 	bl	8002b00 <chprintf>
  while (scp->sc_name != NULL) {
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <shellThread+0x204>)
    chprintf(chp, "%s ", scp->sc_name);
 8004e00:	4629      	mov	r1, r5
 8004e02:	4638      	mov	r0, r7
 8004e04:	f7fd fe7c 	bl	8002b00 <chprintf>
  while (scp->sc_name != NULL) {
 8004e08:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004e0c:	2a00      	cmp	r2, #0
 8004e0e:	d1f7      	bne.n	8004e00 <shellThread+0x150>
        if (scp != NULL)
 8004e10:	9c01      	ldr	r4, [sp, #4]
 8004e12:	b154      	cbz	r4, 8004e2a <shellThread+0x17a>
  while (scp->sc_name != NULL) {
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	b142      	cbz	r2, 8004e2a <shellThread+0x17a>
    chprintf(chp, "%s ", scp->sc_name);
 8004e18:	4d25      	ldr	r5, [pc, #148]	; (8004eb0 <shellThread+0x200>)
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f7fd fe6f 	bl	8002b00 <chprintf>
  while (scp->sc_name != NULL) {
 8004e22:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1f7      	bne.n	8004e1a <shellThread+0x16a>
        chprintf(chp, SHELL_NEWLINE_STR);
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7fd fe67 	bl	8002b00 <chprintf>
 8004e32:	e750      	b.n	8004cd6 <shellThread+0x26>
 8004e34:	4d1d      	ldr	r5, [pc, #116]	; (8004eac <shellThread+0x1fc>)
  while (scp->sc_name != NULL) {
 8004e36:	481f      	ldr	r0, [pc, #124]	; (8004eb4 <shellThread+0x204>)
 8004e38:	e002      	b.n	8004e40 <shellThread+0x190>
 8004e3a:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8004e3e:	b150      	cbz	r0, 8004e56 <shellThread+0x1a6>
    if (strcmp(scp->sc_name, name) == 0) {
 8004e40:	4641      	mov	r1, r8
 8004e42:	f7fb fae1 	bl	8000408 <strcmp>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d1f7      	bne.n	8004e3a <shellThread+0x18a>
      scp->sc_function(chp, argc, argv);
 8004e4a:	686b      	ldr	r3, [r5, #4]
 8004e4c:	aa05      	add	r2, sp, #20
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4638      	mov	r0, r7
 8004e52:	4798      	blx	r3
 8004e54:	e73f      	b.n	8004cd6 <shellThread+0x26>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8004e56:	9d01      	ldr	r5, [sp, #4]
 8004e58:	b15d      	cbz	r5, 8004e72 <shellThread+0x1c2>
  while (scp->sc_name != NULL) {
 8004e5a:	6828      	ldr	r0, [r5, #0]
 8004e5c:	b918      	cbnz	r0, 8004e66 <shellThread+0x1b6>
 8004e5e:	e008      	b.n	8004e72 <shellThread+0x1c2>
 8004e60:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8004e64:	b128      	cbz	r0, 8004e72 <shellThread+0x1c2>
    if (strcmp(scp->sc_name, name) == 0) {
 8004e66:	4641      	mov	r1, r8
 8004e68:	f7fb face 	bl	8000408 <strcmp>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d1f7      	bne.n	8004e60 <shellThread+0x1b0>
 8004e70:	e7eb      	b.n	8004e4a <shellThread+0x19a>
        chprintf(chp, "%s", cmd);
 8004e72:	4642      	mov	r2, r8
 8004e74:	4910      	ldr	r1, [pc, #64]	; (8004eb8 <shellThread+0x208>)
 8004e76:	4638      	mov	r0, r7
 8004e78:	f7fd fe42 	bl	8002b00 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8004e7c:	490f      	ldr	r1, [pc, #60]	; (8004ebc <shellThread+0x20c>)
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f7fd fe3e 	bl	8002b00 <chprintf>
 8004e84:	e727      	b.n	8004cd6 <shellThread+0x26>
 8004e86:	bf00      	nop
 8004e88:	0800bb6c 	.word	0x0800bb6c
 8004e8c:	0800d360 	.word	0x0800d360
 8004e90:	0800d3a0 	.word	0x0800d3a0
 8004e94:	0800b918 	.word	0x0800b918
 8004e98:	0800d388 	.word	0x0800d388
 8004e9c:	0800d37c 	.word	0x0800d37c
 8004ea0:	0800d380 	.word	0x0800d380
 8004ea4:	20001c38 	.word	0x20001c38
 8004ea8:	0800d3a8 	.word	0x0800d3a8
 8004eac:	0800d3d0 	.word	0x0800d3d0
 8004eb0:	0800d3b8 	.word	0x0800d3b8
 8004eb4:	0800d358 	.word	0x0800d358
 8004eb8:	0800d3bc 	.word	0x0800d3bc
 8004ebc:	0800d3c0 	.word	0x0800d3c0
 8004ec0:	0800d374 	.word	0x0800d374
	...

08004ed0 <cmd_exit>:
  if (argc > 0) {
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	dd03      	ble.n	8004edc <cmd_exit+0xc>
    shellUsage(chp, "exit");
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <cmd_exit+0x28>)
 8004ed6:	4909      	ldr	r1, [pc, #36]	; (8004efc <cmd_exit+0x2c>)
 8004ed8:	f7fd be12 	b.w	8002b00 <chprintf>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004edc:	b508      	push	{r3, lr}
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f7fe fb64 	bl	80035b0 <_dbg_check_lock>
 8004ee8:	4805      	ldr	r0, [pc, #20]	; (8004f00 <cmd_exit+0x30>)
 8004eea:	2100      	movs	r1, #0
 8004eec:	f7fb ffa0 	bl	8000e30 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7fe f99d 	bl	8003230 <chThdExitS>
 8004ef6:	bf00      	nop
 8004ef8:	0800d358 	.word	0x0800d358
 8004efc:	0800b918 	.word	0x0800b918
 8004f00:	20001c38 	.word	0x20001c38
	...

08004f10 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chDbgCheck((gmp != NULL) && (n != 0U));
 8004f14:	b340      	cbz	r0, 8004f68 <chGuardedPoolLoadArray+0x58>
 8004f16:	4d17      	ldr	r5, [pc, #92]	; (8004f74 <chGuardedPoolLoadArray+0x64>)
 8004f18:	460e      	mov	r6, r1
 8004f1a:	4617      	mov	r7, r2
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	f100 090c 	add.w	r9, r0, #12
 8004f22:	f04f 0820 	mov.w	r8, #32
 8004f26:	f04f 0a00 	mov.w	sl, #0
 8004f2a:	f388 8811 	msr	BASEPRI, r8
 8004f2e:	f7fe fb3f 	bl	80035b0 <_dbg_check_lock>
 *
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
 8004f32:	4631      	mov	r1, r6
 8004f34:	4648      	mov	r0, r9
 8004f36:	f7fb fe23 	bl	8000b80 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7fb ffe0 	bl	8000f00 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8004f40:	f7fe fab6 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8004f44:	f7fe facc 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	42ab      	cmp	r3, r5
 8004f4c:	d004      	beq.n	8004f58 <chGuardedPoolLoadArray+0x48>
 8004f4e:	69aa      	ldr	r2, [r5, #24]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	6892      	ldr	r2, [r2, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d30a      	bcc.n	8004f6e <chGuardedPoolLoadArray+0x5e>
 8004f58:	f38a 8811 	msr	BASEPRI, sl
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004f5c:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 8004f5e:	3f01      	subs	r7, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004f60:	441e      	add	r6, r3
  while (n != 0U) {
 8004f62:	d1e2      	bne.n	8004f2a <chGuardedPoolLoadArray+0x1a>
}
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chDbgCheck((gmp != NULL) && (n != 0U));
 8004f68:	4803      	ldr	r0, [pc, #12]	; (8004f78 <chGuardedPoolLoadArray+0x68>)
 8004f6a:	f7fb fdb9 	bl	8000ae0 <chSysHalt>
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <chGuardedPoolLoadArray+0x6c>)
 8004f70:	f7fb fdb6 	bl	8000ae0 <chSysHalt>
 8004f74:	200011b0 	.word	0x200011b0
 8004f78:	0800b59c 	.word	0x0800b59c
 8004f7c:	0800b310 	.word	0x0800b310

08004f80 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8004f84:	4d36      	ldr	r5, [pc, #216]	; (8005060 <oslib_test_002_002_execute+0xe0>)
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004f86:	4937      	ldr	r1, [pc, #220]	; (8005064 <oslib_test_002_002_execute+0xe4>)
 8004f88:	4837      	ldr	r0, [pc, #220]	; (8005068 <oslib_test_002_002_execute+0xe8>)
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004f8a:	4e38      	ldr	r6, [pc, #224]	; (800506c <oslib_test_002_002_execute+0xec>)
  test_set_step(1);
 8004f8c:	2301      	movs	r3, #1
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004f8e:	2204      	movs	r2, #4
  test_set_step(1);
 8004f90:	602b      	str	r3, [r5, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 8004f92:	f7ff ffbd 	bl	8004f10 <chGuardedPoolLoadArray>
  test_set_step(2);
 8004f96:	2302      	movs	r3, #2
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fe fe27 	bl	8003bf0 <chGuardedPoolAllocTimeout.constprop.15>
 8004fa2:	3000      	adds	r0, #0
 8004fa4:	bf18      	it	ne
 8004fa6:	2001      	movne	r0, #1
 8004fa8:	4631      	mov	r1, r6
 8004faa:	f7fb fbd9 	bl	8000760 <_test_assert>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d151      	bne.n	8005056 <oslib_test_002_002_execute+0xd6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8004fb2:	3c01      	subs	r4, #1
 8004fb4:	d1f2      	bne.n	8004f9c <oslib_test_002_002_execute+0x1c>
  test_set_step(3);
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	602b      	str	r3, [r5, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8004fba:	f7fe fe19 	bl	8003bf0 <chGuardedPoolAllocTimeout.constprop.15>
 8004fbe:	fab0 f080 	clz	r0, r0
 8004fc2:	0940      	lsrs	r0, r0, #5
 8004fc4:	492a      	ldr	r1, [pc, #168]	; (8005070 <oslib_test_002_002_execute+0xf0>)
 8004fc6:	f7fb fbcb 	bl	8000760 <_test_assert>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d143      	bne.n	8005056 <oslib_test_002_002_execute+0xd6>
 8004fce:	4c25      	ldr	r4, [pc, #148]	; (8005064 <oslib_test_002_002_execute+0xe4>)
  chPoolFreeI(&gmp->pool, objp);
 8004fd0:	4f28      	ldr	r7, [pc, #160]	; (8005074 <oslib_test_002_002_execute+0xf4>)
 8004fd2:	4e29      	ldr	r6, [pc, #164]	; (8005078 <oslib_test_002_002_execute+0xf8>)
  test_set_step(4);
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f104 0a10 	add.w	sl, r4, #16
  chSemSignalI(&gmp->sem);
 8004fda:	f1a7 090c 	sub.w	r9, r7, #12
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	f04f 0820 	mov.w	r8, #32
 8004fe4:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 8004fe8:	f7fe fae2 	bl	80035b0 <_dbg_check_lock>
  chPoolFreeI(&gmp->pool, objp);
 8004fec:	4621      	mov	r1, r4
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7fb fdc6 	bl	8000b80 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 8004ff4:	4648      	mov	r0, r9
 8004ff6:	f7fb ff83 	bl	8000f00 <chSemSignalI>
  chSchRescheduleS();
 8004ffa:	f7fe fa59 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8004ffe:	f7fe fa6f 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005002:	6833      	ldr	r3, [r6, #0]
 8005004:	42b3      	cmp	r3, r6
 8005006:	d004      	beq.n	8005012 <oslib_test_002_002_execute+0x92>
 8005008:	69b2      	ldr	r2, [r6, #24]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	6892      	ldr	r2, [r2, #8]
 800500e:	429a      	cmp	r2, r3
 8005010:	d323      	bcc.n	800505a <oslib_test_002_002_execute+0xda>
 8005012:	2300      	movs	r3, #0
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	3404      	adds	r4, #4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800501a:	45a2      	cmp	sl, r4
 800501c:	d1e2      	bne.n	8004fe4 <oslib_test_002_002_execute+0x64>
  test_set_step(5);
 800501e:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005020:	4e12      	ldr	r6, [pc, #72]	; (800506c <oslib_test_002_002_execute+0xec>)
  test_set_step(5);
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005026:	2000      	movs	r0, #0
 8005028:	f7fe fde2 	bl	8003bf0 <chGuardedPoolAllocTimeout.constprop.15>
 800502c:	3000      	adds	r0, #0
 800502e:	bf18      	it	ne
 8005030:	2001      	movne	r0, #1
 8005032:	4631      	mov	r1, r6
 8005034:	f7fb fb94 	bl	8000760 <_test_assert>
 8005038:	b968      	cbnz	r0, 8005056 <oslib_test_002_002_execute+0xd6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800503a:	3c01      	subs	r4, #1
 800503c:	d1f3      	bne.n	8005026 <oslib_test_002_002_execute+0xa6>
  test_set_step(6);
 800503e:	2306      	movs	r3, #6
 8005040:	602b      	str	r3, [r5, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005042:	f7fe fdd5 	bl	8003bf0 <chGuardedPoolAllocTimeout.constprop.15>
 8005046:	fab0 f080 	clz	r0, r0
 800504a:	0940      	lsrs	r0, r0, #5
 800504c:	4908      	ldr	r1, [pc, #32]	; (8005070 <oslib_test_002_002_execute+0xf0>)
}
 800504e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005052:	f7fb bb85 	b.w	8000760 <_test_assert>
}
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	4808      	ldr	r0, [pc, #32]	; (800507c <oslib_test_002_002_execute+0xfc>)
 800505c:	f7fb fd40 	bl	8000ae0 <chSysHalt>
 8005060:	20002354 	.word	0x20002354
 8005064:	20001c10 	.word	0x20001c10
 8005068:	20000c14 	.word	0x20000c14
 800506c:	0800bd6c 	.word	0x0800bd6c
 8005070:	0800bd88 	.word	0x0800bd88
 8005074:	20000c20 	.word	0x20000c20
 8005078:	200011b0 	.word	0x200011b0
 800507c:	0800b310 	.word	0x0800b310

08005080 <chPoolFree>:
void chPoolFree(memory_pool_t *mp, void *objp) {
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4604      	mov	r4, r0
 8005084:	460d      	mov	r5, r1
 8005086:	2320      	movs	r3, #32
 8005088:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800508c:	f7fe fa90 	bl	80035b0 <_dbg_check_lock>
  chPoolFreeI(mp, objp);
 8005090:	4629      	mov	r1, r5
 8005092:	4620      	mov	r0, r4
 8005094:	f7fb fd74 	bl	8000b80 <chPoolFreeI>
  _dbg_check_unlock();
 8005098:	f7fe fa22 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <chPoolFree+0x3c>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d004      	beq.n	80050ae <chPoolFree+0x2e>
 80050a4:	6999      	ldr	r1, [r3, #24]
 80050a6:	6893      	ldr	r3, [r2, #8]
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d303      	bcc.n	80050b6 <chPoolFree+0x36>
 80050ae:	2300      	movs	r3, #0
 80050b0:	f383 8811 	msr	BASEPRI, r3
}
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	4802      	ldr	r0, [pc, #8]	; (80050c0 <chPoolFree+0x40>)
 80050b8:	f7fb fd12 	bl	8000ae0 <chSysHalt>
 80050bc:	200011b0 	.word	0x200011b0
 80050c0:	0800b310 	.word	0x0800b310
	...

080050d0 <dyn_release_object_pool>:
                                    memory_pool_t *mp) {
 80050d0:	b510      	push	{r4, lr}
  chDbgCheck(dep != NULL);
 80050d2:	b1a0      	cbz	r0, 80050fe <dyn_release_object_pool+0x2e>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 80050d4:	6843      	ldr	r3, [r0, #4]
 80050d6:	b193      	cbz	r3, 80050fe <dyn_release_object_pool+0x2e>
  dep->refs--;
 80050d8:	3b01      	subs	r3, #1
 80050da:	6043      	str	r3, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 80050dc:	b973      	cbnz	r3, 80050fc <dyn_release_object_pool+0x2c>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80050de:	460c      	mov	r4, r1
 80050e0:	e002      	b.n	80050e8 <dyn_release_object_pool+0x18>
    if (prev->next == element) {
 80050e2:	4298      	cmp	r0, r3
 80050e4:	d00e      	beq.n	8005104 <dyn_release_object_pool+0x34>
 80050e6:	461c      	mov	r4, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d1f9      	bne.n	80050e2 <dyn_release_object_pool+0x12>
  return NULL;
 80050ee:	2000      	movs	r0, #0
    chPoolFree(mp, (void *)dep);
 80050f0:	4601      	mov	r1, r0
}
 80050f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chPoolFree(mp, (void *)dep);
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7ff bfc2 	b.w	8005080 <chPoolFree>
}
 80050fc:	bd10      	pop	{r4, pc}
  chDbgCheck(dep != NULL);
 80050fe:	4805      	ldr	r0, [pc, #20]	; (8005114 <dyn_release_object_pool+0x44>)
 8005100:	f7fb fcee 	bl	8000ae0 <chSysHalt>
      prev->next = element->next;
 8005104:	6803      	ldr	r3, [r0, #0]
 8005106:	6023      	str	r3, [r4, #0]
    chPoolFree(mp, (void *)dep);
 8005108:	4601      	mov	r1, r0
}
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chPoolFree(mp, (void *)dep);
 800510e:	4610      	mov	r0, r2
 8005110:	f7ff bfb6 	b.w	8005080 <chPoolFree>
 8005114:	0800b684 	.word	0x0800b684
	...

08005120 <chPoolAlloc>:
void *chPoolAlloc(memory_pool_t *mp) {
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4605      	mov	r5, r0
 8005124:	2320      	movs	r3, #32
 8005126:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800512a:	f7fe fa41 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 800512e:	f7fb fd17 	bl	8000b60 <chDbgCheckClassI>
  objp = mp->next;
 8005132:	682c      	ldr	r4, [r5, #0]
  if (objp != NULL) {
 8005134:	b1a4      	cbz	r4, 8005160 <chPoolAlloc+0x40>
    mp->next = mp->next->next;
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	602b      	str	r3, [r5, #0]
  _dbg_check_unlock();
 800513a:	f7fe f9d1 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <chPoolAlloc+0x50>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d004      	beq.n	8005150 <chPoolAlloc+0x30>
 8005146:	6999      	ldr	r1, [r3, #24]
 8005148:	6893      	ldr	r3, [r2, #8]
 800514a:	688a      	ldr	r2, [r1, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d304      	bcc.n	800515a <chPoolAlloc+0x3a>
 8005150:	2300      	movs	r3, #0
 8005152:	f383 8811 	msr	BASEPRI, r3
}
 8005156:	4620      	mov	r0, r4
 8005158:	bd38      	pop	{r3, r4, r5, pc}
 800515a:	4806      	ldr	r0, [pc, #24]	; (8005174 <chPoolAlloc+0x54>)
 800515c:	f7fb fcc0 	bl	8000ae0 <chSysHalt>
  else if (mp->provider != NULL) {
 8005160:	68eb      	ldr	r3, [r5, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0e9      	beq.n	800513a <chPoolAlloc+0x1a>
    objp = mp->provider(mp->object_size, mp->align);
 8005166:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800516a:	4798      	blx	r3
 800516c:	4604      	mov	r4, r0
 800516e:	e7e4      	b.n	800513a <chPoolAlloc+0x1a>
 8005170:	200011b0 	.word	0x200011b0
 8005174:	0800b310 	.word	0x0800b310
	...

08005180 <chThdCreateFromMemoryPool.constprop.30>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005182:	4d20      	ldr	r5, [pc, #128]	; (8005204 <chThdCreateFromMemoryPool.constprop.30+0x84>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 8005184:	b087      	sub	sp, #28
 8005186:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 8005188:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800518a:	460e      	mov	r6, r1
 800518c:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 800518e:	f7ff ffc7 	bl	8005120 <chPoolAlloc>
  if (wsp == NULL) {
 8005192:	2800      	cmp	r0, #0
 8005194:	d033      	beq.n	80051fe <chThdCreateFromMemoryPool.constprop.30+0x7e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8005196:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <chThdCreateFromMemoryPool.constprop.30+0x88>)
 800519a:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800519c:	4403      	add	r3, r0
  while (startp < endp) {
 800519e:	4298      	cmp	r0, r3
  thread_descriptor_t td = {
 80051a0:	9001      	str	r0, [sp, #4]
 80051a2:	9603      	str	r6, [sp, #12]
 80051a4:	9405      	str	r4, [sp, #20]
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	9204      	str	r2, [sp, #16]
 80051aa:	d204      	bcs.n	80051b6 <chThdCreateFromMemoryPool.constprop.30+0x36>
    *startp++ = v;
 80051ac:	2255      	movs	r2, #85	; 0x55
 80051ae:	f800 2b01 	strb.w	r2, [r0], #1
  while (startp < endp) {
 80051b2:	4283      	cmp	r3, r0
 80051b4:	d1fb      	bne.n	80051ae <chThdCreateFromMemoryPool.constprop.30+0x2e>
 80051b6:	2320      	movs	r3, #32
 80051b8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80051bc:	f7fe f9f8 	bl	80035b0 <_dbg_check_lock>
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80051c0:	4668      	mov	r0, sp
 80051c2:	f7fb fd25 	bl	8000c10 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80051c6:	2302      	movs	r3, #2
 80051c8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 80051cc:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80051ce:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80051d0:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80051d2:	f7fd ff3d 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 80051d6:	f7fe f983 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80051da:	4b0c      	ldr	r3, [pc, #48]	; (800520c <chThdCreateFromMemoryPool.constprop.30+0x8c>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d004      	beq.n	80051ec <chThdCreateFromMemoryPool.constprop.30+0x6c>
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	6893      	ldr	r3, [r2, #8]
 80051e6:	688a      	ldr	r2, [r1, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d305      	bcc.n	80051f8 <chThdCreateFromMemoryPool.constprop.30+0x78>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80051f2:	4620      	mov	r0, r4
 80051f4:	b007      	add	sp, #28
 80051f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <chThdCreateFromMemoryPool.constprop.30+0x90>)
 80051fa:	f7fb fc71 	bl	8000ae0 <chSysHalt>
    return NULL;
 80051fe:	4604      	mov	r4, r0
 8005200:	e7f7      	b.n	80051f2 <chThdCreateFromMemoryPool.constprop.30+0x72>
 8005202:	bf00      	nop
 8005204:	20001bf0 	.word	0x20001bf0
 8005208:	08004c31 	.word	0x08004c31
 800520c:	200011b0 	.word	0x200011b0
 8005210:	0800b2ec 	.word	0x0800b2ec
	...

08005220 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8005220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005224:	f8df 9144 	ldr.w	r9, [pc, #324]	; 800536c <oslib_test_002_001_execute+0x14c>
 8005228:	4d45      	ldr	r5, [pc, #276]	; (8005340 <oslib_test_002_001_execute+0x120>)
 800522a:	4c46      	ldr	r4, [pc, #280]	; (8005344 <oslib_test_002_001_execute+0x124>)
  chPoolFreeI(mp, objp);
 800522c:	4f46      	ldr	r7, [pc, #280]	; (8005348 <oslib_test_002_001_execute+0x128>)
 800522e:	2301      	movs	r3, #1
 8005230:	f8c9 3000 	str.w	r3, [r9]
 8005234:	2604      	movs	r6, #4
 8005236:	f04f 0820 	mov.w	r8, #32
 800523a:	f04f 0a00 	mov.w	sl, #0
 800523e:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 8005242:	f7fe f9b5 	bl	80035b0 <_dbg_check_lock>
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	f7fb fc99 	bl	8000b80 <chPoolFreeI>
  _dbg_check_unlock();
 800524e:	f7fe f947 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	42a3      	cmp	r3, r4
 8005256:	d004      	beq.n	8005262 <oslib_test_002_001_execute+0x42>
 8005258:	69a2      	ldr	r2, [r4, #24]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d356      	bcc.n	8005310 <oslib_test_002_001_execute+0xf0>
 8005262:	f38a 8811 	msr	BASEPRI, sl
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005266:	687b      	ldr	r3, [r7, #4]
  while (n != 0U) {
 8005268:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800526a:	441d      	add	r5, r3
  while (n != 0U) {
 800526c:	d1e7      	bne.n	800523e <oslib_test_002_001_execute+0x1e>
  test_set_step(2);
 800526e:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005270:	4e35      	ldr	r6, [pc, #212]	; (8005348 <oslib_test_002_001_execute+0x128>)
 8005272:	4d36      	ldr	r5, [pc, #216]	; (800534c <oslib_test_002_001_execute+0x12c>)
  test_set_step(2);
 8005274:	f8c9 3000 	str.w	r3, [r9]
 8005278:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800527a:	4630      	mov	r0, r6
 800527c:	f7ff ff50 	bl	8005120 <chPoolAlloc>
 8005280:	3000      	adds	r0, #0
 8005282:	bf18      	it	ne
 8005284:	2001      	movne	r0, #1
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb fa6a 	bl	8000760 <_test_assert>
 800528c:	2800      	cmp	r0, #0
 800528e:	d13d      	bne.n	800530c <oslib_test_002_001_execute+0xec>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005290:	3c01      	subs	r4, #1
 8005292:	d1f2      	bne.n	800527a <oslib_test_002_001_execute+0x5a>
  test_set_step(3);
 8005294:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005296:	482c      	ldr	r0, [pc, #176]	; (8005348 <oslib_test_002_001_execute+0x128>)
  test_set_step(3);
 8005298:	f8c9 3000 	str.w	r3, [r9]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800529c:	f7ff ff40 	bl	8005120 <chPoolAlloc>
 80052a0:	fab0 f080 	clz	r0, r0
 80052a4:	0940      	lsrs	r0, r0, #5
 80052a6:	492a      	ldr	r1, [pc, #168]	; (8005350 <oslib_test_002_001_execute+0x130>)
 80052a8:	f7fb fa5a 	bl	8000760 <_test_assert>
 80052ac:	bb70      	cbnz	r0, 800530c <oslib_test_002_001_execute+0xec>
      chPoolFree(&mp1, &objects[i]);
 80052ae:	4826      	ldr	r0, [pc, #152]	; (8005348 <oslib_test_002_001_execute+0x128>)
 80052b0:	4923      	ldr	r1, [pc, #140]	; (8005340 <oslib_test_002_001_execute+0x120>)
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80052b2:	4d26      	ldr	r5, [pc, #152]	; (800534c <oslib_test_002_001_execute+0x12c>)
 80052b4:	4606      	mov	r6, r0
      chPoolFree(&mp1, &objects[i]);
 80052b6:	f7ff fee3 	bl	8005080 <chPoolFree>
 80052ba:	4926      	ldr	r1, [pc, #152]	; (8005354 <oslib_test_002_001_execute+0x134>)
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff fedf 	bl	8005080 <chPoolFree>
 80052c2:	4925      	ldr	r1, [pc, #148]	; (8005358 <oslib_test_002_001_execute+0x138>)
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff fedb 	bl	8005080 <chPoolFree>
 80052ca:	4924      	ldr	r1, [pc, #144]	; (800535c <oslib_test_002_001_execute+0x13c>)
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff fed7 	bl	8005080 <chPoolFree>
  test_set_step(5);
 80052d2:	2305      	movs	r3, #5
 80052d4:	f8c9 3000 	str.w	r3, [r9]
 80052d8:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff ff20 	bl	8005120 <chPoolAlloc>
 80052e0:	3000      	adds	r0, #0
 80052e2:	bf18      	it	ne
 80052e4:	2001      	movne	r0, #1
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7fb fa3a 	bl	8000760 <_test_assert>
 80052ec:	b970      	cbnz	r0, 800530c <oslib_test_002_001_execute+0xec>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 80052ee:	3c01      	subs	r4, #1
 80052f0:	d1f3      	bne.n	80052da <oslib_test_002_001_execute+0xba>
  test_set_step(6);
 80052f2:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80052f4:	4814      	ldr	r0, [pc, #80]	; (8005348 <oslib_test_002_001_execute+0x128>)
  test_set_step(6);
 80052f6:	f8c9 3000 	str.w	r3, [r9]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80052fa:	f7ff ff11 	bl	8005120 <chPoolAlloc>
 80052fe:	fab0 f080 	clz	r0, r0
 8005302:	0940      	lsrs	r0, r0, #5
 8005304:	4912      	ldr	r1, [pc, #72]	; (8005350 <oslib_test_002_001_execute+0x130>)
 8005306:	f7fb fa2b 	bl	8000760 <_test_assert>
 800530a:	b120      	cbz	r0, 8005316 <oslib_test_002_001_execute+0xf6>
}
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	4813      	ldr	r0, [pc, #76]	; (8005360 <oslib_test_002_001_execute+0x140>)
 8005312:	f7fb fbe5 	bl	8000ae0 <chSysHalt>
  test_set_step(7);
 8005316:	2107      	movs	r1, #7
  mp->object_size = size;
 8005318:	2304      	movs	r3, #4
  mp->provider = provider;
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <oslib_test_002_001_execute+0x144>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800531c:	480a      	ldr	r0, [pc, #40]	; (8005348 <oslib_test_002_001_execute+0x128>)
  test_set_step(7);
 800531e:	f8c9 1000 	str.w	r1, [r9]
  mp->next = NULL;
 8005322:	603c      	str	r4, [r7, #0]
  mp->align = align;
 8005324:	e9c7 3301 	strd	r3, r3, [r7, #4]
  mp->provider = provider;
 8005328:	60fa      	str	r2, [r7, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800532a:	f7ff fef9 	bl	8005120 <chPoolAlloc>
 800532e:	fab0 f080 	clz	r0, r0
 8005332:	0940      	lsrs	r0, r0, #5
 8005334:	490c      	ldr	r1, [pc, #48]	; (8005368 <oslib_test_002_001_execute+0x148>)
}
 8005336:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800533a:	f7fb ba11 	b.w	8000760 <_test_assert>
 800533e:	bf00      	nop
 8005340:	20001c10 	.word	0x20001c10
 8005344:	200011b0 	.word	0x200011b0
 8005348:	20000c80 	.word	0x20000c80
 800534c:	0800bd6c 	.word	0x0800bd6c
 8005350:	0800bd88 	.word	0x0800bd88
 8005354:	20001c14 	.word	0x20001c14
 8005358:	20001c18 	.word	0x20001c18
 800535c:	20001c1c 	.word	0x20001c1c
 8005360:	0800b310 	.word	0x0800b310
 8005364:	08000731 	.word	0x08000731
 8005368:	0800bd40 	.word	0x0800bd40
 800536c:	20002354 	.word	0x20002354

08005370 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8005372:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8005374:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8005376:	460d      	mov	r5, r1
 8005378:	4606      	mov	r6, r0
 800537a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800537c:	d103      	bne.n	8005386 <dyn_create_object_pool+0x16>
 800537e:	e00d      	b.n	800539c <dyn_create_object_pool+0x2c>
    p = p->next;
 8005380:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005382:	42a5      	cmp	r5, r4
 8005384:	d00a      	beq.n	800539c <dyn_create_object_pool+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005386:	2208      	movs	r2, #8
 8005388:	4631      	mov	r1, r6
 800538a:	18a0      	adds	r0, r4, r2
 800538c:	f005 fec0 	bl	800b110 <strncmp>
 8005390:	2800      	cmp	r0, #0
 8005392:	d1f5      	bne.n	8005380 <dyn_create_object_pool+0x10>
  if (dep != NULL) {
 8005394:	b114      	cbz	r4, 800539c <dyn_create_object_pool+0x2c>
    return NULL;
 8005396:	4604      	mov	r4, r0
}
 8005398:	4620      	mov	r0, r4
 800539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 800539c:	4638      	mov	r0, r7
 800539e:	f7ff febf 	bl	8005120 <chPoolAlloc>
  if (dep == NULL) {
 80053a2:	4604      	mov	r4, r0
 80053a4:	b148      	cbz	r0, 80053ba <dyn_create_object_pool+0x4a>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 80053a6:	2208      	movs	r2, #8
 80053a8:	4410      	add	r0, r2
 80053aa:	4631      	mov	r1, r6
 80053ac:	f005 fefc 	bl	800b1a8 <strncpy>
  dep->next = dlp->next;
 80053b0:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 80053b2:	2201      	movs	r2, #1
  dep->next = dlp->next;
 80053b4:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 80053b8:	602c      	str	r4, [r5, #0]
}
 80053ba:	4620      	mov	r0, r4
 80053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053be:	bf00      	nop

080053c0 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4604      	mov	r4, r0
 80053c4:	460d      	mov	r5, r1
 80053c6:	2320      	movs	r3, #32
 80053c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80053cc:	f7fe f8f0 	bl	80035b0 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 80053d0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80053d4:	2b0d      	cmp	r3, #13
 80053d6:	d002      	beq.n	80053de <chMsgRelease+0x1e>
 80053d8:	480d      	ldr	r0, [pc, #52]	; (8005410 <chMsgRelease+0x50>)
 80053da:	f7fb fb81 	bl	8000ae0 <chSysHalt>
 *
 * @sclass
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();
 80053de:	f7fb fbaf 	bl	8000b40 <chDbgCheckClassS>

  chSchWakeupS(tp, msg);
 80053e2:	4629      	mov	r1, r5
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7fd fe33 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 80053ea:	f7fe f879 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <chMsgRelease+0x54>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d004      	beq.n	8005400 <chMsgRelease+0x40>
 80053f6:	6999      	ldr	r1, [r3, #24]
 80053f8:	6893      	ldr	r3, [r2, #8]
 80053fa:	688a      	ldr	r2, [r1, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d303      	bcc.n	8005408 <chMsgRelease+0x48>
 8005400:	2300      	movs	r3, #0
 8005402:	f383 8811 	msr	BASEPRI, r3
  chMsgReleaseS(tp, msg);
  chSysUnlock();
}
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <chMsgRelease+0x58>)
 800540a:	f7fb fb69 	bl	8000ae0 <chSysHalt>
 800540e:	bf00      	nop
 8005410:	0800b438 	.word	0x0800b438
 8005414:	200011b0 	.word	0x200011b0
 8005418:	0800b2e0 	.word	0x0800b2e0
 800541c:	00000000 	.word	0x00000000

08005420 <chMsgWait>:
thread_t *chMsgWait(void) {
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	2320      	movs	r3, #32
 8005424:	f383 8811 	msr	BASEPRI, r3
  if (!chMsgIsPendingI(currp)) {
 8005428:	4c15      	ldr	r4, [pc, #84]	; (8005480 <chMsgWait+0x60>)
  _dbg_check_lock();
 800542a:	f7fe f8c1 	bl	80035b0 <_dbg_check_lock>
 800542e:	69a6      	ldr	r6, [r4, #24]
  chDbgCheckClassI();
 8005430:	f7fb fb96 	bl	8000b60 <chDbgCheckClassI>
  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8005434:	4633      	mov	r3, r6
 8005436:	f853 5f2c 	ldr.w	r5, [r3, #44]!
 800543a:	429d      	cmp	r5, r3
 800543c:	d017      	beq.n	800546e <chMsgWait+0x4e>
  tqp->next             = tp->queue.next;
 800543e:	682a      	ldr	r2, [r5, #0]
 8005440:	62f2      	str	r2, [r6, #44]	; 0x2c
  tp->state = CH_STATE_SNDMSG;
 8005442:	210d      	movs	r1, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	f885 1020 	strb.w	r1, [r5, #32]
  _dbg_check_unlock();
 800544a:	f7fe f849 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	42a3      	cmp	r3, r4
 8005452:	d004      	beq.n	800545e <chMsgWait+0x3e>
 8005454:	69a2      	ldr	r2, [r4, #24]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	429a      	cmp	r2, r3
 800545c:	d304      	bcc.n	8005468 <chMsgWait+0x48>
 800545e:	2300      	movs	r3, #0
 8005460:	f383 8811 	msr	BASEPRI, r3
}
 8005464:	4628      	mov	r0, r5
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	4806      	ldr	r0, [pc, #24]	; (8005484 <chMsgWait+0x64>)
 800546a:	f7fb fb39 	bl	8000ae0 <chSysHalt>
    chSchGoSleepS(CH_STATE_WTMSG);
 800546e:	200e      	movs	r0, #14
 8005470:	f7fd fe2e 	bl	80030d0 <chSchGoSleepS>
 8005474:	69a6      	ldr	r6, [r4, #24]
 8005476:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8005478:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 800547c:	e7df      	b.n	800543e <chMsgWait+0x1e>
 800547e:	bf00      	nop
 8005480:	200011b0 	.word	0x200011b0
 8005484:	0800b2e0 	.word	0x0800b2e0
	...

08005490 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 8005490:	b510      	push	{r4, lr}
    tp = chMsgWait();
 8005492:	f7ff ffc5 	bl	8005420 <chMsgWait>
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 8005496:	f890 2020 	ldrb.w	r2, [r0, #32]
 800549a:	2a0d      	cmp	r2, #13
 800549c:	d002      	beq.n	80054a4 <bmk_thread1+0x14>
 800549e:	4805      	ldr	r0, [pc, #20]	; (80054b4 <bmk_thread1+0x24>)
 80054a0:	f7fb fb1e 	bl	8000ae0 <chSysHalt>
  return tp->u.sentmsg;
 80054a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    chMsgRelease(tp, msg);
 80054a6:	4621      	mov	r1, r4
 80054a8:	f7ff ff8a 	bl	80053c0 <chMsgRelease>
  } while (msg);
 80054ac:	2c00      	cmp	r4, #0
 80054ae:	d1f0      	bne.n	8005492 <bmk_thread1+0x2>
}
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	bf00      	nop
 80054b4:	0800b3f0 	.word	0x0800b3f0
	...

080054c0 <chMsgSend>:
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80054c2:	4e19      	ldr	r6, [pc, #100]	; (8005528 <chMsgSend+0x68>)
 80054c4:	69b4      	ldr	r4, [r6, #24]
  chDbgCheck(tp != NULL);
 80054c6:	b360      	cbz	r0, 8005522 <chMsgSend+0x62>
 80054c8:	460f      	mov	r7, r1
 80054ca:	4605      	mov	r5, r0
 80054cc:	2320      	movs	r3, #32
 80054ce:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80054d2:	f7fe f86d 	bl	80035b0 <_dbg_check_lock>
  ctp->u.sentmsg = msg;
 80054d6:	6267      	str	r7, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 80054d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80054da:	6063      	str	r3, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 80054dc:	f105 022c 	add.w	r2, r5, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 80054e0:	6022      	str	r2, [r4, #0]
  tp->queue.prev->queue.next = tp;
 80054e2:	601c      	str	r4, [r3, #0]
  if (tp->state == CH_STATE_WTMSG) {
 80054e4:	f895 3020 	ldrb.w	r3, [r5, #32]
  tqp->prev                  = tp;
 80054e8:	632c      	str	r4, [r5, #48]	; 0x30
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	d015      	beq.n	800551a <chMsgSend+0x5a>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80054ee:	200c      	movs	r0, #12
 80054f0:	f7fd fdee 	bl	80030d0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 80054f4:	6a64      	ldr	r4, [r4, #36]	; 0x24
  _dbg_check_unlock();
 80054f6:	f7fd fff3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80054fa:	6833      	ldr	r3, [r6, #0]
 80054fc:	42b3      	cmp	r3, r6
 80054fe:	d004      	beq.n	800550a <chMsgSend+0x4a>
 8005500:	69b2      	ldr	r2, [r6, #24]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	6892      	ldr	r2, [r2, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d304      	bcc.n	8005514 <chMsgSend+0x54>
 800550a:	2300      	movs	r3, #0
 800550c:	f383 8811 	msr	BASEPRI, r3
}
 8005510:	4620      	mov	r0, r4
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	4805      	ldr	r0, [pc, #20]	; (800552c <chMsgSend+0x6c>)
 8005516:	f7fb fae3 	bl	8000ae0 <chSysHalt>
    (void) chSchReadyI(tp);
 800551a:	4628      	mov	r0, r5
 800551c:	f7fb fbd0 	bl	8000cc0 <chSchReadyI>
 8005520:	e7e5      	b.n	80054ee <chMsgSend+0x2e>
  chDbgCheck(tp != NULL);
 8005522:	4803      	ldr	r0, [pc, #12]	; (8005530 <chMsgSend+0x70>)
 8005524:	f7fb fadc 	bl	8000ae0 <chSysHalt>
 8005528:	200011b0 	.word	0x200011b0
 800552c:	0800b2e0 	.word	0x0800b2e0
 8005530:	0800b3fc 	.word	0x0800b3fc
	...

08005540 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8005540:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8005542:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8005544:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8005546:	f7ff ffbb 	bl	80054c0 <chMsgSend>
  chMsgSend(p, 'B');
 800554a:	4620      	mov	r0, r4
 800554c:	2142      	movs	r1, #66	; 0x42
 800554e:	f7ff ffb7 	bl	80054c0 <chMsgSend>
  chMsgSend(p, 'C');
 8005552:	4620      	mov	r0, r4
 8005554:	2143      	movs	r1, #67	; 0x43
 8005556:	f7ff ffb3 	bl	80054c0 <chMsgSend>
  chMsgSend(p, 'D');
 800555a:	4620      	mov	r0, r4
 800555c:	2144      	movs	r1, #68	; 0x44
}
 800555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8005562:	f7ff bfad 	b.w	80054c0 <chMsgSend>
 8005566:	bf00      	nop
	...

08005570 <chEvtAddEvents>:
eventmask_t chEvtAddEvents(eventmask_t events) {
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4605      	mov	r5, r0
 8005574:	2320      	movs	r3, #32
 8005576:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <chEvtAddEvents+0x3c>)
  _dbg_check_lock();
 800557c:	f7fe f818 	bl	80035b0 <_dbg_check_lock>
 8005580:	69a3      	ldr	r3, [r4, #24]
 8005582:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005584:	4305      	orrs	r5, r0
 8005586:	635d      	str	r5, [r3, #52]	; 0x34
  _dbg_check_unlock();
 8005588:	f7fd ffaa 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	42a3      	cmp	r3, r4
 8005590:	d004      	beq.n	800559c <chEvtAddEvents+0x2c>
 8005592:	69a2      	ldr	r2, [r4, #24]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d304      	bcc.n	80055a6 <chEvtAddEvents+0x36>
 800559c:	2300      	movs	r3, #0
 800559e:	f383 8811 	msr	BASEPRI, r3
}
 80055a2:	4628      	mov	r0, r5
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	4802      	ldr	r0, [pc, #8]	; (80055b0 <chEvtAddEvents+0x40>)
 80055a8:	f7fb fa9a 	bl	8000ae0 <chSysHalt>
 80055ac:	200011b0 	.word	0x200011b0
 80055b0:	0800b2d4 	.word	0x0800b2d4
	...

080055c0 <chEvtUnregister>:
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	2320      	movs	r3, #32
 80055c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80055cc:	f7fd fff0 	bl	80035b0 <_dbg_check_lock>
 80055d0:	4622      	mov	r2, r4
 80055d2:	e002      	b.n	80055da <chEvtUnregister+0x1a>
    if (p->next == elp) {
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	d012      	beq.n	80055fe <chEvtUnregister+0x3e>
 80055d8:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d1f9      	bne.n	80055d4 <chEvtUnregister+0x14>
  _dbg_check_unlock();
 80055e0:	f7fd ff7e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <chEvtUnregister+0x58>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d004      	beq.n	80055f6 <chEvtUnregister+0x36>
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	6893      	ldr	r3, [r2, #8]
 80055f0:	688a      	ldr	r2, [r1, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d30c      	bcc.n	8005610 <chEvtUnregister+0x50>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f383 8811 	msr	BASEPRI, r3
}
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
      p->next = elp->next;
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	6013      	str	r3, [r2, #0]
  _dbg_check_unlock();
 8005602:	f7fd ff6d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <chEvtUnregister+0x58>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d1ee      	bne.n	80055ec <chEvtUnregister+0x2c>
 800560e:	e7f2      	b.n	80055f6 <chEvtUnregister+0x36>
 8005610:	4802      	ldr	r0, [pc, #8]	; (800561c <chEvtUnregister+0x5c>)
 8005612:	f7fb fa65 	bl	8000ae0 <chSysHalt>
 8005616:	bf00      	nop
 8005618:	200011b0 	.word	0x200011b0
 800561c:	0800b2d4 	.word	0x0800b2d4

08005620 <rt_test_008_001_execute>:
static void rt_test_008_001_execute(void) {
 8005620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  esp->next = (event_listener_t *)esp;
 8005624:	4d58      	ldr	r5, [pc, #352]	; (8005788 <rt_test_008_001_execute+0x168>)
  test_set_step(2);
 8005626:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80057a0 <rt_test_008_001_execute+0x180>
 800562a:	602d      	str	r5, [r5, #0]
 800562c:	2302      	movs	r3, #2
 800562e:	f8c8 3000 	str.w	r3, [r8]
static void rt_test_008_001_execute(void) {
 8005632:	b08b      	sub	sp, #44	; 0x2c
 8005634:	2320      	movs	r3, #32
 8005636:	f383 8811 	msr	BASEPRI, r3
  elp->listener = currp;
 800563a:	4c54      	ldr	r4, [pc, #336]	; (800578c <rt_test_008_001_execute+0x16c>)
  elp->next     = esp->next;
 800563c:	ae0a      	add	r6, sp, #40	; 0x28
  _dbg_check_lock();
 800563e:	f7fd ffb7 	bl	80035b0 <_dbg_check_lock>
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	f846 3d14 	str.w	r3, [r6, #-20]!
  elp->listener = currp;
 8005648:	69a3      	ldr	r3, [r4, #24]
 800564a:	9306      	str	r3, [sp, #24]
  elp->events   = events;
 800564c:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
 800564e:	2200      	movs	r2, #0
  elp->events   = events;
 8005650:	9307      	str	r3, [sp, #28]
  elp->wflags   = wflags;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295
 8005656:	e9cd 2308 	strd	r2, r3, [sp, #32]
  esp->next     = elp;
 800565a:	602e      	str	r6, [r5, #0]
  _dbg_check_unlock();
 800565c:	f7fd ff40 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	42a3      	cmp	r3, r4
 8005664:	d004      	beq.n	8005670 <rt_test_008_001_execute+0x50>
 8005666:	69a2      	ldr	r2, [r4, #24]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d340      	bcc.n	80056f2 <rt_test_008_001_execute+0xd2>
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	f389 8811 	msr	BASEPRI, r9
 8005678:	2320      	movs	r3, #32
 800567a:	f383 8811 	msr	BASEPRI, r3
  elp->next     = esp->next;
 800567e:	af0a      	add	r7, sp, #40	; 0x28
  _dbg_check_lock();
 8005680:	f7fd ff96 	bl	80035b0 <_dbg_check_lock>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	f847 3d28 	str.w	r3, [r7, #-40]!
  elp->listener = currp;
 800568a:	69a3      	ldr	r3, [r4, #24]
 800568c:	9301      	str	r3, [sp, #4]
  elp->events   = events;
 800568e:	2202      	movs	r2, #2
  elp->wflags   = wflags;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
 8005694:	9304      	str	r3, [sp, #16]
  elp->flags    = (eventflags_t)0;
 8005696:	f8cd 900c 	str.w	r9, [sp, #12]
  elp->events   = events;
 800569a:	9202      	str	r2, [sp, #8]
  esp->next     = elp;
 800569c:	602f      	str	r7, [r5, #0]
  _dbg_check_unlock();
 800569e:	f7fd ff1f 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d004      	beq.n	80056b2 <rt_test_008_001_execute+0x92>
 80056a8:	69a2      	ldr	r2, [r4, #24]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	6892      	ldr	r2, [r2, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d31f      	bcc.n	80056f2 <rt_test_008_001_execute+0xd2>
 80056b2:	2300      	movs	r3, #0
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	2320      	movs	r3, #32
 80056ba:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80056be:	f7fd ff77 	bl	80035b0 <_dbg_check_lock>
  return (bool)(esp != (event_source_t *)esp->next);
 80056c2:	6828      	ldr	r0, [r5, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 80056c4:	4932      	ldr	r1, [pc, #200]	; (8005790 <rt_test_008_001_execute+0x170>)
 80056c6:	1b40      	subs	r0, r0, r5
 80056c8:	bf18      	it	ne
 80056ca:	2001      	movne	r0, #1
 80056cc:	f7fb f848 	bl	8000760 <_test_assert>
 80056d0:	b190      	cbz	r0, 80056f8 <rt_test_008_001_execute+0xd8>
  _dbg_check_unlock();
 80056d2:	f7fd ff05 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	42a3      	cmp	r3, r4
 80056da:	d004      	beq.n	80056e6 <rt_test_008_001_execute+0xc6>
 80056dc:	69a2      	ldr	r2, [r4, #24]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	6892      	ldr	r2, [r2, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d34c      	bcc.n	8005780 <rt_test_008_001_execute+0x160>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f383 8811 	msr	BASEPRI, r3
}
 80056ec:	b00b      	add	sp, #44	; 0x2c
 80056ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056f2:	4828      	ldr	r0, [pc, #160]	; (8005794 <rt_test_008_001_execute+0x174>)
 80056f4:	f7fb f9f4 	bl	8000ae0 <chSysHalt>
  _dbg_check_unlock();
 80056f8:	f7fd fef2 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	42a3      	cmp	r3, r4
 8005700:	d004      	beq.n	800570c <rt_test_008_001_execute+0xec>
 8005702:	69a2      	ldr	r2, [r4, #24]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	6892      	ldr	r2, [r2, #8]
 8005708:	429a      	cmp	r2, r3
 800570a:	d339      	bcc.n	8005780 <rt_test_008_001_execute+0x160>
 800570c:	2300      	movs	r3, #0
 800570e:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8005712:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8005714:	4631      	mov	r1, r6
 8005716:	481c      	ldr	r0, [pc, #112]	; (8005788 <rt_test_008_001_execute+0x168>)
  test_set_step(3);
 8005718:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el1);
 800571c:	f7ff ff50 	bl	80055c0 <chEvtUnregister>
 8005720:	2320      	movs	r3, #32
 8005722:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005726:	f7fd ff43 	bl	80035b0 <_dbg_check_lock>
 800572a:	6828      	ldr	r0, [r5, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 800572c:	4918      	ldr	r1, [pc, #96]	; (8005790 <rt_test_008_001_execute+0x170>)
 800572e:	1b40      	subs	r0, r0, r5
 8005730:	bf18      	it	ne
 8005732:	2001      	movne	r0, #1
 8005734:	f7fb f814 	bl	8000760 <_test_assert>
 8005738:	2800      	cmp	r0, #0
 800573a:	d1ca      	bne.n	80056d2 <rt_test_008_001_execute+0xb2>
  _dbg_check_unlock();
 800573c:	f7fd fed0 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	42a3      	cmp	r3, r4
 8005744:	d004      	beq.n	8005750 <rt_test_008_001_execute+0x130>
 8005746:	69a2      	ldr	r2, [r4, #24]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	6892      	ldr	r2, [r2, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	d317      	bcc.n	8005780 <rt_test_008_001_execute+0x160>
 8005750:	2300      	movs	r3, #0
 8005752:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8005756:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8005758:	4639      	mov	r1, r7
 800575a:	480b      	ldr	r0, [pc, #44]	; (8005788 <rt_test_008_001_execute+0x168>)
  test_set_step(4);
 800575c:	f8c8 3000 	str.w	r3, [r8]
    chEvtUnregister(&es1, &el2);
 8005760:	f7ff ff2e 	bl	80055c0 <chEvtUnregister>
 8005764:	2320      	movs	r3, #32
 8005766:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800576a:	f7fd ff21 	bl	80035b0 <_dbg_check_lock>
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 800576e:	6828      	ldr	r0, [r5, #0]
 8005770:	4909      	ldr	r1, [pc, #36]	; (8005798 <rt_test_008_001_execute+0x178>)
 8005772:	1b40      	subs	r0, r0, r5
 8005774:	fab0 f080 	clz	r0, r0
 8005778:	0940      	lsrs	r0, r0, #5
 800577a:	f7fa fff1 	bl	8000760 <_test_assert>
 800577e:	e7a8      	b.n	80056d2 <rt_test_008_001_execute+0xb2>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005780:	4806      	ldr	r0, [pc, #24]	; (800579c <rt_test_008_001_execute+0x17c>)
 8005782:	f7fb f9ad 	bl	8000ae0 <chSysHalt>
 8005786:	bf00      	nop
 8005788:	20000c0c 	.word	0x20000c0c
 800578c:	200011b0 	.word	0x200011b0
 8005790:	0800ce20 	.word	0x0800ce20
 8005794:	0800b2d4 	.word	0x0800b2d4
 8005798:	0800ce2c 	.word	0x0800ce2c
 800579c:	0800b370 	.word	0x0800b370
 80057a0:	20002354 	.word	0x20002354
	...

080057b0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  thread_t *ctp = currp;
 80057b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005860 <chMtxUnlock+0xb0>
 80057b8:	f8d8 6018 	ldr.w	r6, [r8, #24]
  chDbgCheck(mp != NULL);
 80057bc:	b150      	cbz	r0, 80057d4 <chMtxUnlock+0x24>
 80057be:	4605      	mov	r5, r0
 80057c0:	2320      	movs	r3, #32
 80057c2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80057c6:	f7fd fef3 	bl	80035b0 <_dbg_check_lock>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80057ca:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 80057cc:	b117      	cbz	r7, 80057d4 <chMtxUnlock+0x24>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	42b3      	cmp	r3, r6
 80057d2:	d002      	beq.n	80057da <chMtxUnlock+0x2a>
  chDbgCheck(mp != NULL);
 80057d4:	4820      	ldr	r0, [pc, #128]	; (8005858 <chMtxUnlock+0xa8>)
 80057d6:	f7fb f983 	bl	8000ae0 <chSysHalt>
    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 80057da:	42af      	cmp	r7, r5
 80057dc:	d1fa      	bne.n	80057d4 <chMtxUnlock+0x24>
    ctp->mtxlist = mp->next;
 80057de:	68ec      	ldr	r4, [r5, #12]
 80057e0:	63b4      	str	r4, [r6, #56]	; 0x38
 80057e2:	f7fb f9ad 	bl	8000b40 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80057e6:	f8d5 9000 	ldr.w	r9, [r5]
    if (chMtxQueueNotEmptyS(mp)) {
 80057ea:	454d      	cmp	r5, r9
 80057ec:	d02e      	beq.n	800584c <chMtxUnlock+0x9c>
      tprio_t newprio = ctp->realprio;
 80057ee:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
      while (lmp != NULL) {
 80057f0:	b15c      	cbz	r4, 800580a <chMtxUnlock+0x5a>
 80057f2:	f7fb f9a5 	bl	8000b40 <chDbgCheckClassS>
 80057f6:	6823      	ldr	r3, [r4, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d003      	beq.n	8005804 <chMtxUnlock+0x54>
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	429f      	cmp	r7, r3
 8005800:	bf38      	it	cc
 8005802:	461f      	movcc	r7, r3
        lmp = lmp->next;
 8005804:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 8005806:	2c00      	cmp	r4, #0
 8005808:	d1f3      	bne.n	80057f2 <chMtxUnlock+0x42>
  tqp->next             = tp->queue.next;
 800580a:	f8d9 3000 	ldr.w	r3, [r9]
      mp->next = tp->mtxlist;
 800580e:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
      ctp->prio = newprio;
 8005812:	60b7      	str	r7, [r6, #8]
      (void) chSchReadyI(tp);
 8005814:	4648      	mov	r0, r9
 8005816:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005818:	605d      	str	r5, [r3, #4]
      mp->next = tp->mtxlist;
 800581a:	e9c5 9202 	strd	r9, r2, [r5, #8]
      tp->mtxlist = mp;
 800581e:	f8c9 5038 	str.w	r5, [r9, #56]	; 0x38
      (void) chSchReadyI(tp);
 8005822:	f7fb fa4d 	bl	8000cc0 <chSchReadyI>
      chSchRescheduleS();
 8005826:	f7fd fe43 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 800582a:	f7fd fe59 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	4543      	cmp	r3, r8
 8005834:	d005      	beq.n	8005842 <chMtxUnlock+0x92>
 8005836:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	6892      	ldr	r2, [r2, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	d307      	bcc.n	8005852 <chMtxUnlock+0xa2>
 8005842:	2300      	movs	r3, #0
 8005844:	f383 8811 	msr	BASEPRI, r3
}
 8005848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      mp->owner = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	e7eb      	b.n	800582a <chMtxUnlock+0x7a>
 8005852:	4802      	ldr	r0, [pc, #8]	; (800585c <chMtxUnlock+0xac>)
 8005854:	f7fb f944 	bl	8000ae0 <chSysHalt>
 8005858:	0800b50c 	.word	0x0800b50c
 800585c:	0800b2bc 	.word	0x0800b2bc
 8005860:	200011b0 	.word	0x200011b0
	...

08005870 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8005870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	4d5a      	ldr	r5, [pc, #360]	; (80059e0 <rt_test_006_005_execute+0x170>)
  test_set_step(2);
 8005876:	4c5b      	ldr	r4, [pc, #364]	; (80059e4 <rt_test_006_005_execute+0x174>)
  return chThdGetSelfX()->prio;
 8005878:	69aa      	ldr	r2, [r5, #24]
 800587a:	2302      	movs	r3, #2
 800587c:	6896      	ldr	r6, [r2, #8]
 800587e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005880:	f7fd fef6 	bl	8003670 <chMtxTryLock.constprop.52>
    test_assert(b, "already locked");
 8005884:	4958      	ldr	r1, [pc, #352]	; (80059e8 <rt_test_006_005_execute+0x178>)
 8005886:	f7fa ff6b 	bl	8000760 <_test_assert>
 800588a:	b108      	cbz	r0, 8005890 <rt_test_006_005_execute+0x20>
}
 800588c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_set_step(3);
 8005890:	2303      	movs	r3, #3
 8005892:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8005894:	f7fd feec 	bl	8003670 <chMtxTryLock.constprop.52>
    test_assert(!b, "not locked");
 8005898:	f080 0001 	eor.w	r0, r0, #1
 800589c:	b2c0      	uxtb	r0, r0
 800589e:	4953      	ldr	r1, [pc, #332]	; (80059ec <rt_test_006_005_execute+0x17c>)
 80058a0:	f7fa ff5e 	bl	8000760 <_test_assert>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1f1      	bne.n	800588c <rt_test_006_005_execute+0x1c>
    chMtxUnlock(&m1);
 80058a8:	4f51      	ldr	r7, [pc, #324]	; (80059f0 <rt_test_006_005_execute+0x180>)
  test_set_step(4);
 80058aa:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80058ac:	4638      	mov	r0, r7
  test_set_step(4);
 80058ae:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 80058b0:	f7ff ff7e 	bl	80057b0 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	494f      	ldr	r1, [pc, #316]	; (80059f4 <rt_test_006_005_execute+0x184>)
 80058b8:	fab0 f080 	clz	r0, r0
 80058bc:	0940      	lsrs	r0, r0, #5
 80058be:	f7fa ff4f 	bl	8000760 <_test_assert>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1e2      	bne.n	800588c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80058c6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80058c8:	494b      	ldr	r1, [pc, #300]	; (80059f8 <rt_test_006_005_execute+0x188>)
 80058ca:	1bc0      	subs	r0, r0, r7
 80058cc:	fab0 f080 	clz	r0, r0
 80058d0:	0940      	lsrs	r0, r0, #5
 80058d2:	f7fa ff45 	bl	8000760 <_test_assert>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d1d8      	bne.n	800588c <rt_test_006_005_execute+0x1c>
 80058da:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80058dc:	4947      	ldr	r1, [pc, #284]	; (80059fc <rt_test_006_005_execute+0x18c>)
 80058de:	6898      	ldr	r0, [r3, #8]
 80058e0:	1b80      	subs	r0, r0, r6
 80058e2:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 80058e6:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80058e8:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 80058ea:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80058ec:	f7fa ff38 	bl	8000760 <_test_assert>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d1cb      	bne.n	800588c <rt_test_006_005_execute+0x1c>
  test_set_step(6);
 80058f4:	2306      	movs	r3, #6
 80058f6:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 80058f8:	f7fd feba 	bl	8003670 <chMtxTryLock.constprop.52>
    test_assert(b, "already locked");
 80058fc:	493a      	ldr	r1, [pc, #232]	; (80059e8 <rt_test_006_005_execute+0x178>)
 80058fe:	f7fa ff2f 	bl	8000760 <_test_assert>
 8005902:	2800      	cmp	r0, #0
 8005904:	d1c2      	bne.n	800588c <rt_test_006_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8005906:	f7fd feb3 	bl	8003670 <chMtxTryLock.constprop.52>
    test_assert(!b, "not locked");
 800590a:	f080 0001 	eor.w	r0, r0, #1
 800590e:	b2c0      	uxtb	r0, r0
 8005910:	4936      	ldr	r1, [pc, #216]	; (80059ec <rt_test_006_005_execute+0x17c>)
 8005912:	f7fa ff25 	bl	8000760 <_test_assert>
 8005916:	4682      	mov	sl, r0
 8005918:	2800      	cmp	r0, #0
 800591a:	d1b7      	bne.n	800588c <rt_test_006_005_execute+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 800591c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8005920:	2320      	movs	r3, #32
 8005922:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005926:	f7fd fe43 	bl	80035b0 <_dbg_check_lock>

  chSysLock();
  if (ctp->mtxlist != NULL) {
 800592a:	f8d9 8038 	ldr.w	r8, [r9, #56]	; 0x38
 800592e:	f1b8 0f00 	cmp.w	r8, #0
 8005932:	d021      	beq.n	8005978 <rt_test_006_005_execute+0x108>
    do {
      mutex_t *mp = ctp->mtxlist;
      ctp->mtxlist = mp->next;
 8005934:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8005938:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
 800593c:	f7fb f900 	bl	8000b40 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005940:	f8d8 3000 	ldr.w	r3, [r8]
      if (chMtxQueueNotEmptyS(mp)) {
 8005944:	4598      	cmp	r8, r3
 8005946:	d044      	beq.n	80059d2 <rt_test_006_005_execute+0x162>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
        mp->next = tp->mtxlist;
 8005948:	6b99      	ldr	r1, [r3, #56]	; 0x38
  tqp->next             = tp->queue.next;
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f8c8 2000 	str.w	r2, [r8]
        tp->mtxlist = mp;
        (void) chSchReadyI(tp);
 8005950:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8005952:	f8c2 8004 	str.w	r8, [r2, #4]
        mp->next = tp->mtxlist;
 8005956:	e9c8 3102 	strd	r3, r1, [r8, #8]
        tp->mtxlist = mp;
 800595a:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
        (void) chSchReadyI(tp);
 800595e:	f7fb f9af 	bl	8000cc0 <chSchReadyI>
 8005962:	f8d9 8038 	ldr.w	r8, [r9, #56]	; 0x38
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
 8005966:	f1b8 0f00 	cmp.w	r8, #0
 800596a:	d1e3      	bne.n	8005934 <rt_test_006_005_execute+0xc4>
    ctp->prio = ctp->realprio;
 800596c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8005970:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8005974:	f7fd fd9c 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8005978:	f7fd fdb2 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	42ab      	cmp	r3, r5
 8005980:	d004      	beq.n	800598c <rt_test_006_005_execute+0x11c>
 8005982:	69aa      	ldr	r2, [r5, #24]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	6892      	ldr	r2, [r2, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	d326      	bcc.n	80059da <rt_test_006_005_execute+0x16a>
 800598c:	2300      	movs	r3, #0
 800598e:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8005992:	68b8      	ldr	r0, [r7, #8]
 8005994:	4917      	ldr	r1, [pc, #92]	; (80059f4 <rt_test_006_005_execute+0x184>)
 8005996:	fab0 f080 	clz	r0, r0
 800599a:	0940      	lsrs	r0, r0, #5
 800599c:	f7fa fee0 	bl	8000760 <_test_assert>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f47f af73 	bne.w	800588c <rt_test_006_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80059a6:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80059a8:	4913      	ldr	r1, [pc, #76]	; (80059f8 <rt_test_006_005_execute+0x188>)
 80059aa:	1bc7      	subs	r7, r0, r7
 80059ac:	4278      	negs	r0, r7
 80059ae:	4178      	adcs	r0, r7
 80059b0:	f7fa fed6 	bl	8000760 <_test_assert>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f47f af69 	bne.w	800588c <rt_test_006_005_execute+0x1c>
 80059ba:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80059bc:	490f      	ldr	r1, [pc, #60]	; (80059fc <rt_test_006_005_execute+0x18c>)
 80059be:	6898      	ldr	r0, [r3, #8]
 80059c0:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 80059c2:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80059c4:	4250      	negs	r0, r2
  test_set_step(7);
 80059c6:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80059c8:	4150      	adcs	r0, r2
}
 80059ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80059ce:	f7fa bec7 	b.w	8000760 <_test_assert>
        mp->owner = NULL;
 80059d2:	f8c8 a008 	str.w	sl, [r8, #8]
 80059d6:	46d8      	mov	r8, fp
 80059d8:	e7c5      	b.n	8005966 <rt_test_006_005_execute+0xf6>
 80059da:	4809      	ldr	r0, [pc, #36]	; (8005a00 <rt_test_006_005_execute+0x190>)
 80059dc:	f7fb f880 	bl	8000ae0 <chSysHalt>
 80059e0:	200011b0 	.word	0x200011b0
 80059e4:	20002354 	.word	0x20002354
 80059e8:	0800cd78 	.word	0x0800cd78
 80059ec:	0800cd88 	.word	0x0800cd88
 80059f0:	20000c38 	.word	0x20000c38
 80059f4:	0800cd94 	.word	0x0800cd94
 80059f8:	0800cda0 	.word	0x0800cda0
 80059fc:	0800cdb0 	.word	0x0800cdb0
 8005a00:	0800b2bc 	.word	0x0800b2bc
	...

08005a10 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8005a10:	b510      	push	{r4, lr}
 8005a12:	2320      	movs	r3, #32
 8005a14:	4604      	mov	r4, r0
 8005a16:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005a1a:	f7fd fdc9 	bl	80035b0 <_dbg_check_lock>
  chMtxLockS(mp);
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7fd fb7e 	bl	8003120 <chMtxLockS>
  _dbg_check_unlock();
 8005a24:	f7fd fd5c 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <chMtxLock+0x38>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d004      	beq.n	8005a3a <chMtxLock+0x2a>
 8005a30:	6999      	ldr	r1, [r3, #24]
 8005a32:	6893      	ldr	r3, [r2, #8]
 8005a34:	688a      	ldr	r2, [r1, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d303      	bcc.n	8005a42 <chMtxLock+0x32>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f383 8811 	msr	BASEPRI, r3
}
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	4802      	ldr	r0, [pc, #8]	; (8005a4c <chMtxLock+0x3c>)
 8005a44:	f7fb f84c 	bl	8000ae0 <chSysHalt>
 8005a48:	200011b0 	.word	0x200011b0
 8005a4c:	0800b2bc 	.word	0x0800b2bc

08005a50 <chHeapAllocAligned.constprop.31>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8005a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp, *hp, *ahp;
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d03c      	beq.n	8005ad2 <chHeapAllocAligned.constprop.31+0x82>

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
    heapp = &default_heap;
 8005a58:	4b3a      	ldr	r3, [pc, #232]	; (8005b44 <chHeapAllocAligned.constprop.31+0xf4>)
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	bf08      	it	eq
 8005a60:	461e      	moveq	r6, r3

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8005a62:	f106 070c 	add.w	r7, r6, #12
 8005a66:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005a68:	f101 0807 	add.w	r8, r1, #7
 8005a6c:	460d      	mov	r5, r1
  H_LOCK(heapp);
 8005a6e:	f7ff ffcf 	bl	8005a10 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8005a72:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 8005a74:	680b      	ldr	r3, [r1, #0]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8005a76:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  while (H_NEXT(qp) != NULL) {
 8005a7a:	b1c3      	cbz	r3, 8005aae <chHeapAllocAligned.constprop.31+0x5e>
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a7c:	f8d3 c004 	ldr.w	ip, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a80:	f103 000f 	add.w	r0, r3, #15
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a84:	f10c 0201 	add.w	r2, ip, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a88:	f020 0007 	bic.w	r0, r0, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a90:	f1a0 0908 	sub.w	r9, r0, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a94:	4591      	cmp	r9, r2
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005a96:	f103 0e08 	add.w	lr, r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8005a9a:	d204      	bcs.n	8005aa6 <chHeapAllocAligned.constprop.31+0x56>
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	1a10      	subs	r0, r2, r0
 8005aa0:	10c0      	asrs	r0, r0, #3
 8005aa2:	4580      	cmp	r8, r0
 8005aa4:	d918      	bls.n	8005ad8 <chHeapAllocAligned.constprop.31+0x88>
          heap_header_t *fp;

          fp = H_BLOCK(hp) + pages;
          H_NEXT(fp) = H_NEXT(hp);
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
          H_NEXT(qp) = fp;
 8005aa6:	4619      	mov	r1, r3
  while (H_NEXT(qp) != NULL) {
 8005aa8:	680b      	ldr	r3, [r1, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <chHeapAllocAligned.constprop.31+0x2c>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f7ff fe7e 	bl	80057b0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8005ab4:	6834      	ldr	r4, [r6, #0]
 8005ab6:	b14c      	cbz	r4, 8005acc <chHeapAllocAligned.constprop.31+0x7c>
    ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
 8005ab8:	2208      	movs	r2, #8
 8005aba:	f108 0001 	add.w	r0, r8, #1
 8005abe:	00c0      	lsls	r0, r0, #3
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	b108      	cbz	r0, 8005acc <chHeapAllocAligned.constprop.31+0x7c>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8005ac8:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 8005acc:	4620      	mov	r0, r4
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 8005ad2:	481d      	ldr	r0, [pc, #116]	; (8005b48 <chHeapAllocAligned.constprop.31+0xf8>)
 8005ad4:	f7fb f804 	bl	8000ae0 <chSysHalt>
      if (ahp > hp) {
 8005ad8:	454b      	cmp	r3, r9
 8005ada:	d319      	bcc.n	8005b10 <chHeapAllocAligned.constprop.31+0xc0>
        if (H_PAGES(hp) == pages) {
 8005adc:	45e0      	cmp	r8, ip
 8005ade:	681c      	ldr	r4, [r3, #0]
 8005ae0:	d02b      	beq.n	8005b3a <chHeapAllocAligned.constprop.31+0xea>
          fp = H_BLOCK(hp) + pages;
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005aea:	f100 0c08 	add.w	ip, r0, #8
 8005aee:	eba2 020c 	sub.w	r2, r2, ip
 8005af2:	10d2      	asrs	r2, r2, #3
          H_NEXT(fp) = H_NEXT(hp);
 8005af4:	f843 4038 	str.w	r4, [r3, r8, lsl #3]
          H_NEXT(qp) = fp;
 8005af8:	4699      	mov	r9, r3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8005afa:	6042      	str	r2, [r0, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005afc:	4674      	mov	r4, lr
          H_NEXT(qp) = fp;
 8005afe:	6008      	str	r0, [r1, #0]
      H_UNLOCK(heapp);
 8005b00:	4638      	mov	r0, r7
      H_HEAP(hp) = heapp;
 8005b02:	e9c9 6500 	strd	r6, r5, [r9]
      H_UNLOCK(heapp);
 8005b06:	f7ff fe53 	bl	80057b0 <chMtxUnlock>
}
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005b10:	eba9 0e0e 	sub.w	lr, r9, lr
 8005b14:	ea4f 02ee 	mov.w	r2, lr, asr #3
        if (bpages > pages) {
 8005b18:	4580      	cmp	r8, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8005b1a:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 8005b1c:	d2f0      	bcs.n	8005b00 <chHeapAllocAligned.constprop.31+0xb0>
          fp = H_BLOCK(ahp) + pages;
 8005b1e:	f108 0101 	add.w	r1, r8, #1
 8005b22:	eb09 02c1 	add.w	r2, r9, r1, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005b26:	ea6f 0808 	mvn.w	r8, r8
          H_NEXT(fp) = H_NEXT(hp);
 8005b2a:	f8d3 c000 	ldr.w	ip, [r3]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8005b2e:	4440      	add	r0, r8
 8005b30:	6050      	str	r0, [r2, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8005b32:	f849 c031 	str.w	ip, [r9, r1, lsl #3]
          H_NEXT(hp) = fp;
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e7e2      	b.n	8005b00 <chHeapAllocAligned.constprop.31+0xb0>
          H_NEXT(qp) = H_NEXT(hp);
 8005b3a:	600c      	str	r4, [r1, #0]
 8005b3c:	4699      	mov	r9, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8005b3e:	4674      	mov	r4, lr
 8005b40:	e7de      	b.n	8005b00 <chHeapAllocAligned.constprop.31+0xb0>
 8005b42:	bf00      	nop
 8005b44:	20001b60 	.word	0x20001b60
 8005b48:	0800b4a4 	.word	0x0800b4a4
 8005b4c:	00000000 	.word	0x00000000

08005b50 <dyn_create_object_heap>:
                                             size_t size) {
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8005b52:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8005b54:	42a1      	cmp	r1, r4
                                             size_t size) {
 8005b56:	460d      	mov	r5, r1
 8005b58:	4606      	mov	r6, r0
 8005b5a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 8005b5c:	d103      	bne.n	8005b66 <dyn_create_object_heap+0x16>
 8005b5e:	e00d      	b.n	8005b7c <dyn_create_object_heap+0x2c>
    p = p->next;
 8005b60:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8005b62:	42a5      	cmp	r5, r4
 8005b64:	d00a      	beq.n	8005b7c <dyn_create_object_heap+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8005b66:	2208      	movs	r2, #8
 8005b68:	4631      	mov	r1, r6
 8005b6a:	18a0      	adds	r0, r4, r2
 8005b6c:	f005 fad0 	bl	800b110 <strncmp>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1f5      	bne.n	8005b60 <dyn_create_object_heap+0x10>
  if (dep != NULL) {
 8005b74:	b114      	cbz	r4, 8005b7c <dyn_create_object_heap+0x2c>
    return NULL;
 8005b76:	4604      	mov	r4, r0
}
 8005b78:	4620      	mov	r0, r4
 8005b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f7ff ff66 	bl	8005a50 <chHeapAllocAligned.constprop.31>
  if (dep == NULL) {
 8005b84:	4604      	mov	r4, r0
 8005b86:	b148      	cbz	r0, 8005b9c <dyn_create_object_heap+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8005b88:	2208      	movs	r2, #8
 8005b8a:	4410      	add	r0, r2
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	f005 fb0b 	bl	800b1a8 <strncpy>
  dep->next = dlp->next;
 8005b92:	682b      	ldr	r3, [r5, #0]
  dep->refs = (ucnt_t)1;
 8005b94:	2201      	movs	r2, #1
  dep->next = dlp->next;
 8005b96:	e9c4 3200 	strd	r3, r2, [r4]
  dlp->next = dep;
 8005b9a:	602c      	str	r4, [r5, #0]
}
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ba0 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	461d      	mov	r5, r3
 8005ba8:	460c      	mov	r4, r1
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8005baa:	f7ff ff51 	bl	8005a50 <chHeapAllocAligned.constprop.31>
  if (wsp == NULL) {
 8005bae:	b390      	cbz	r0, 8005c16 <chThdCreateFromHeap+0x76>
    (stkalign_t *)((uint8_t *)wsp + size),
 8005bb0:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	4284      	cmp	r4, r0
 8005bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bba:	9402      	str	r4, [sp, #8]
 8005bbc:	e9cd 6000 	strd	r6, r0, [sp]
 8005bc0:	9503      	str	r5, [sp, #12]
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	d904      	bls.n	8005bd0 <chThdCreateFromHeap+0x30>
    *startp++ = v;
 8005bc6:	2355      	movs	r3, #85	; 0x55
 8005bc8:	f800 3b01 	strb.w	r3, [r0], #1
  while (startp < endp) {
 8005bcc:	4284      	cmp	r4, r0
 8005bce:	d1fb      	bne.n	8005bc8 <chThdCreateFromHeap+0x28>
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005bd6:	f7fd fceb 	bl	80035b0 <_dbg_check_lock>
  tp = chThdCreateSuspendedI(&td);
 8005bda:	4668      	mov	r0, sp
 8005bdc:	f7fb f818 	bl	8000c10 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8005be6:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 8005be8:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8005bea:	f7fd fa31 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 8005bee:	f7fd fc77 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <chThdCreateFromHeap+0x7c>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d004      	beq.n	8005c04 <chThdCreateFromHeap+0x64>
 8005bfa:	6999      	ldr	r1, [r3, #24]
 8005bfc:	6893      	ldr	r3, [r2, #8]
 8005bfe:	688a      	ldr	r2, [r1, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d305      	bcc.n	8005c10 <chThdCreateFromHeap+0x70>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f383 8811 	msr	BASEPRI, r3
}
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	b006      	add	sp, #24
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	4803      	ldr	r0, [pc, #12]	; (8005c20 <chThdCreateFromHeap+0x80>)
 8005c12:	f7fa ff65 	bl	8000ae0 <chSysHalt>
    return NULL;
 8005c16:	4604      	mov	r4, r0
 8005c18:	e7f7      	b.n	8005c0a <chThdCreateFromHeap+0x6a>
 8005c1a:	bf00      	nop
 8005c1c:	200011b0 	.word	0x200011b0
 8005c20:	0800b2ec 	.word	0x0800b2ec
	...

08005c30 <chFactoryRegisterObject.constprop.13>:
 * @retval NULL         if the object to be registered cannot be allocated or
 *                      a registered object with the same name exists.
 *
 * @api
 */
registered_object_t *chFactoryRegisterObject(const char *name,
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4605      	mov	r5, r0
                                             void *objp) {
  registered_object_t *rop;

  F_LOCK();
 8005c34:	4807      	ldr	r0, [pc, #28]	; (8005c54 <chFactoryRegisterObject.constprop.13+0x24>)
 8005c36:	f7ff feeb 	bl	8005a10 <chMtxLock>

  rop = (registered_object_t *)dyn_create_object_pool(name,
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <chFactoryRegisterObject.constprop.13+0x28>)
 8005c3c:	4807      	ldr	r0, [pc, #28]	; (8005c5c <chFactoryRegisterObject.constprop.13+0x2c>)
 8005c3e:	1f11      	subs	r1, r2, #4
 8005c40:	f7ff fb96 	bl	8005370 <dyn_create_object_pool>
                                                      &ch_factory.obj_list,
                                                      &ch_factory.obj_pool);
  if (rop != NULL) {
 8005c44:	4604      	mov	r4, r0
 8005c46:	b100      	cbz	r0, 8005c4a <chFactoryRegisterObject.constprop.13+0x1a>
    /* Initializing registered object data.*/
    rop->objp = objp;
 8005c48:	6105      	str	r5, [r0, #16]
  }

  F_UNLOCK();
 8005c4a:	4802      	ldr	r0, [pc, #8]	; (8005c54 <chFactoryRegisterObject.constprop.13+0x24>)
 8005c4c:	f7ff fdb0 	bl	80057b0 <chMtxUnlock>

  return rop;
}
 8005c50:	4620      	mov	r0, r4
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20001a38 	.word	0x20001a38
 8005c58:	20001a4c 	.word	0x20001a4c
 8005c5c:	0800b8c8 	.word	0x0800b8c8

08005c60 <chFactoryFindObject.constprop.12>:
 * @retval NULL         if a registered object with the specified name
 *                      does not exist.
 *
 * @api
 */
registered_object_t *chFactoryFindObject(const char *name) {
 8005c60:	b538      	push	{r3, r4, r5, lr}
  registered_object_t *rop;

  F_LOCK();
 8005c62:	4c07      	ldr	r4, [pc, #28]	; (8005c80 <chFactoryFindObject.constprop.12+0x20>)
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7ff fed3 	bl	8005a10 <chMtxLock>

  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 8005c6a:	f104 0110 	add.w	r1, r4, #16
 8005c6e:	4805      	ldr	r0, [pc, #20]	; (8005c84 <chFactoryFindObject.constprop.12+0x24>)
 8005c70:	f7fd f9ce 	bl	8003010 <dyn_find_object>
 8005c74:	4605      	mov	r5, r0

  F_UNLOCK();
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7ff fd9a 	bl	80057b0 <chMtxUnlock>

  return rop;
}
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20001a38 	.word	0x20001a38
 8005c84:	0800b8c8 	.word	0x0800b8c8
	...

08005c90 <chFactoryCreateBuffer.constprop.11>:
 * @retval NULL         if the dynamic buffer object cannot be allocated or
 *                      a dynamic buffer object with the same name exists.
 *
 * @api
 */
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8005c90:	b510      	push	{r4, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005c92:	480a      	ldr	r0, [pc, #40]	; (8005cbc <chFactoryCreateBuffer.constprop.11+0x2c>)
 8005c94:	f7ff febc 	bl	8005a10 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8005c98:	2280      	movs	r2, #128	; 0x80
 8005c9a:	4909      	ldr	r1, [pc, #36]	; (8005cc0 <chFactoryCreateBuffer.constprop.11+0x30>)
 8005c9c:	4809      	ldr	r0, [pc, #36]	; (8005cc4 <chFactoryCreateBuffer.constprop.11+0x34>)
 8005c9e:	f7ff ff57 	bl	8005b50 <dyn_create_object_heap>
                                               &ch_factory.buf_list,
                                               size);
  if (dbp != NULL) {
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	b120      	cbz	r0, 8005cb0 <chFactoryCreateBuffer.constprop.11+0x20>
    /* Initializing buffer object data.*/
    memset((void *)dbp->buffer, 0, size);
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	2100      	movs	r1, #0
 8005caa:	3010      	adds	r0, #16
 8005cac:	f005 f972 	bl	800af94 <memset>
  }

  F_UNLOCK();
 8005cb0:	4802      	ldr	r0, [pc, #8]	; (8005cbc <chFactoryCreateBuffer.constprop.11+0x2c>)
 8005cb2:	f7ff fd7d 	bl	80057b0 <chMtxUnlock>

  return dbp;
}
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	20001a38 	.word	0x20001a38
 8005cc0:	20001a5c 	.word	0x20001a5c
 8005cc4:	0800b8a8 	.word	0x0800b8a8
	...

08005cd0 <chFactoryFindBuffer.constprop.10>:
 * @retval NULL         if a dynamic buffer object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8005cd0:	b538      	push	{r3, r4, r5, lr}
  dyn_buffer_t *dbp;

  F_LOCK();
 8005cd2:	4c07      	ldr	r4, [pc, #28]	; (8005cf0 <chFactoryFindBuffer.constprop.10+0x20>)
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7ff fe9b 	bl	8005a10 <chMtxLock>

  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 8005cda:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8005cde:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <chFactoryFindBuffer.constprop.10+0x24>)
 8005ce0:	f7fd f996 	bl	8003010 <dyn_find_object>
 8005ce4:	4605      	mov	r5, r0

  F_UNLOCK();
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff fd62 	bl	80057b0 <chMtxUnlock>

  return dbp;
}
 8005cec:	4628      	mov	r0, r5
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	20001a38 	.word	0x20001a38
 8005cf4:	0800b8a8 	.word	0x0800b8a8
	...

08005d00 <chFactoryCreateSemaphore.constprop.9>:
 * @retval NULL         if the dynamic semaphore object cannot be allocated or
 *                      a dynamic semaphore with the same name exists.
 *
 * @api
 */
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8005d00:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005d02:	480a      	ldr	r0, [pc, #40]	; (8005d2c <chFactoryCreateSemaphore.constprop.9+0x2c>)
 8005d04:	f7ff fe84 	bl	8005a10 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <chFactoryCreateSemaphore.constprop.9+0x30>)
 8005d0a:	480a      	ldr	r0, [pc, #40]	; (8005d34 <chFactoryCreateSemaphore.constprop.9+0x34>)
 8005d0c:	1f11      	subs	r1, r2, #4
 8005d0e:	f7ff fb2f 	bl	8005370 <dyn_create_object_pool>
                                                  &ch_factory.sem_list,
                                                  &ch_factory.sem_pool);
  if (dsp != NULL) {
 8005d12:	4604      	mov	r4, r0
 8005d14:	b128      	cbz	r0, 8005d22 <chFactoryCreateSemaphore.constprop.9+0x22>
    /* Initializing semaphore object dataa.*/
    chSemObjectInit(&dsp->sem, n);
 8005d16:	f100 0310 	add.w	r3, r0, #16
  tqp->prev = (thread_t *)tqp;
 8005d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  sp->cnt = n;
 8005d1e:	2200      	movs	r2, #0
 8005d20:	6182      	str	r2, [r0, #24]
  }

  F_UNLOCK();
 8005d22:	4802      	ldr	r0, [pc, #8]	; (8005d2c <chFactoryCreateSemaphore.constprop.9+0x2c>)
 8005d24:	f7ff fd44 	bl	80057b0 <chMtxUnlock>

  return dsp;
}
 8005d28:	4620      	mov	r0, r4
 8005d2a:	bd10      	pop	{r4, pc}
 8005d2c:	20001a38 	.word	0x20001a38
 8005d30:	20001a64 	.word	0x20001a64
 8005d34:	0800b8c0 	.word	0x0800b8c0
	...

08005d40 <chFactoryFindSemaphore.constprop.8>:
 * @retval NULL         if a dynamic semaphore object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8005d40:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  F_LOCK();
 8005d42:	4c07      	ldr	r4, [pc, #28]	; (8005d60 <chFactoryFindSemaphore.constprop.8+0x20>)
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff fe63 	bl	8005a10 <chMtxLock>

  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 8005d4a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005d4e:	4805      	ldr	r0, [pc, #20]	; (8005d64 <chFactoryFindSemaphore.constprop.8+0x24>)
 8005d50:	f7fd f95e 	bl	8003010 <dyn_find_object>
 8005d54:	4605      	mov	r5, r0

  F_UNLOCK();
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7ff fd2a 	bl	80057b0 <chMtxUnlock>

  return dsp;
}
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20001a38 	.word	0x20001a38
 8005d64:	0800b8c0 	.word	0x0800b8c0
	...

08005d70 <chFactoryCreateMailbox.constprop.7>:
 * @retval NULL         if the dynamic mailbox object cannot be allocated or
 *                      a dynamic mailbox object with the same name exists.
 *
 * @api
 */
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8005d70:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005d72:	4811      	ldr	r0, [pc, #68]	; (8005db8 <chFactoryCreateMailbox.constprop.7+0x48>)
 8005d74:	f7ff fe4c 	bl	8005a10 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8005d78:	2278      	movs	r2, #120	; 0x78
 8005d7a:	4910      	ldr	r1, [pc, #64]	; (8005dbc <chFactoryCreateMailbox.constprop.7+0x4c>)
 8005d7c:	4810      	ldr	r0, [pc, #64]	; (8005dc0 <chFactoryCreateMailbox.constprop.7+0x50>)
 8005d7e:	f7ff fee7 	bl	8005b50 <dyn_create_object_heap>
                                                &ch_factory.mbx_list,
                                                sizeof (dyn_mailbox_t) +
                                                (n * sizeof (msg_t)));
  if (dmp != NULL) {
 8005d82:	4604      	mov	r4, r0
 8005d84:	b198      	cbz	r0, 8005dae <chFactoryCreateMailbox.constprop.7+0x3e>
    /* Initializing mailbox object data.*/
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8005d86:	f100 0338 	add.w	r3, r0, #56	; 0x38
  chThdQueueObjectInit(&mbp->qw);
 8005d8a:	f104 0128 	add.w	r1, r4, #40	; 0x28
  chThdQueueObjectInit(&mbp->qr);
 8005d8e:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->wrptr  = buf;
 8005d92:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8005d96:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 8005d9a:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->top    = &buf[n];
 8005d9e:	f100 0578 	add.w	r5, r0, #120	; 0x78
  mbp->cnt    = (size_t)0;
 8005da2:	2000      	movs	r0, #0
  mbp->buffer = buf;
 8005da4:	6123      	str	r3, [r4, #16]
  mbp->top    = &buf[n];
 8005da6:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8005da8:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8005daa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  }

  F_UNLOCK();
 8005dae:	4802      	ldr	r0, [pc, #8]	; (8005db8 <chFactoryCreateMailbox.constprop.7+0x48>)
 8005db0:	f7ff fcfe 	bl	80057b0 <chMtxUnlock>

  return dmp;
}
 8005db4:	4620      	mov	r0, r4
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	20001a38 	.word	0x20001a38
 8005dbc:	20001a74 	.word	0x20001a74
 8005dc0:	0800b8b0 	.word	0x0800b8b0
	...

08005dd0 <chFactoryFindMailbox.constprop.6>:
 * @retval NULL         if a dynamic mailbox object with the specified name
 *                      does not exist.
 *
 * @api
 */
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8005dd0:	b538      	push	{r3, r4, r5, lr}
  dyn_mailbox_t *dmp;

  F_LOCK();
 8005dd2:	4c07      	ldr	r4, [pc, #28]	; (8005df0 <chFactoryFindMailbox.constprop.6+0x20>)
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff fe1b 	bl	8005a10 <chMtxLock>

  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 8005dda:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005dde:	4805      	ldr	r0, [pc, #20]	; (8005df4 <chFactoryFindMailbox.constprop.6+0x24>)
 8005de0:	f7fd f916 	bl	8003010 <dyn_find_object>
 8005de4:	4605      	mov	r5, r0

  F_UNLOCK();
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff fce2 	bl	80057b0 <chMtxUnlock>

  return dmp;
}
 8005dec:	4628      	mov	r0, r5
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20001a38 	.word	0x20001a38
 8005df4:	0800b8b0 	.word	0x0800b8b0
	...

08005e00 <chFactoryCreateObjectsFIFO.constprop.5>:
 *                      allocated or a dynamic "objects FIFO" object with
 *                      the same name exists.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8005e00:	b570      	push	{r4, r5, r6, lr}
                                               size_t objsize,
                                               size_t objn,
                                               unsigned objalign) {
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005e02:	4818      	ldr	r0, [pc, #96]	; (8005e64 <chFactoryCreateObjectsFIFO.constprop.5+0x64>)
 8005e04:	f7ff fe04 	bl	8005a10 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8005e08:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005e0c:	4916      	ldr	r1, [pc, #88]	; (8005e68 <chFactoryCreateObjectsFIFO.constprop.5+0x68>)
 8005e0e:	4817      	ldr	r0, [pc, #92]	; (8005e6c <chFactoryCreateObjectsFIFO.constprop.5+0x6c>)
 8005e10:	f7ff fe9e 	bl	8005b50 <dyn_create_object_heap>
                                                      &ch_factory.fifo_list,
                                                      sizeof (dyn_objects_fifo_t) +
                                                      (objn * sizeof (msg_t)) +
                                                      (objn * objsize));
  if (dofp != NULL) {
 8005e14:	4604      	mov	r4, r0
 8005e16:	b300      	cbz	r0, 8005e5a <chFactoryCreateObjectsFIFO.constprop.5+0x5a>
  mp->next = NULL;
 8005e18:	2500      	movs	r5, #0
    /* Initializing mailbox object data.*/
    chFifoObjectInit(&dofp->fifo, objsize, objn, objalign,
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 8005e1a:	f100 0694 	add.w	r6, r0, #148	; 0x94
  mp->object_size = size;
 8005e1e:	2210      	movs	r2, #16
  mp->align = align;
 8005e20:	2304      	movs	r3, #4
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8005e22:	3010      	adds	r0, #16
 8005e24:	e9c4 2308 	strd	r2, r3, [r4, #32]
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8005e28:	4631      	mov	r1, r6
 8005e2a:	e9c4 0004 	strd	r0, r0, [r4, #16]
  mp->next = NULL;
 8005e2e:	61e5      	str	r5, [r4, #28]
  mp->provider = provider;
 8005e30:	62a5      	str	r5, [r4, #40]	; 0x28
 8005e32:	61a5      	str	r5, [r4, #24]
 8005e34:	f7ff f86c 	bl	8004f10 <chGuardedPoolLoadArray>
 8005e38:	f104 0354 	add.w	r3, r4, #84	; 0x54
  chThdQueueObjectInit(&mbp->qw);
 8005e3c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8005e40:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  mbp->wrptr  = buf;
 8005e44:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8005e48:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 8005e4c:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8005e50:	6326      	str	r6, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8005e52:	63e5      	str	r5, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8005e54:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  mbp->buffer = buf;
 8005e58:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  F_UNLOCK();
 8005e5a:	4802      	ldr	r0, [pc, #8]	; (8005e64 <chFactoryCreateObjectsFIFO.constprop.5+0x64>)
 8005e5c:	f7ff fca8 	bl	80057b0 <chMtxUnlock>

  return dofp;
}
 8005e60:	4620      	mov	r0, r4
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	20001a38 	.word	0x20001a38
 8005e68:	20001a78 	.word	0x20001a78
 8005e6c:	0800b8b8 	.word	0x0800b8b8

08005e70 <chFactoryFindObjectsFIFO.constprop.4>:
 * @retval NULL         if a dynamic "objects FIFO" object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8005e70:	b538      	push	{r3, r4, r5, lr}
  dyn_objects_fifo_t *dofp;

  F_LOCK();
 8005e72:	4c07      	ldr	r4, [pc, #28]	; (8005e90 <chFactoryFindObjectsFIFO.constprop.4+0x20>)
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fdcb 	bl	8005a10 <chMtxLock>

  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 8005e7a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005e7e:	4805      	ldr	r0, [pc, #20]	; (8005e94 <chFactoryFindObjectsFIFO.constprop.4+0x24>)
 8005e80:	f7fd f8c6 	bl	8003010 <dyn_find_object>
 8005e84:	4605      	mov	r5, r0

  F_UNLOCK();
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff fc92 	bl	80057b0 <chMtxUnlock>

  return dofp;
}
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	20001a38 	.word	0x20001a38
 8005e94:	0800b8b8 	.word	0x0800b8b8
	...

08005ea0 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8005ea4:	4826      	ldr	r0, [pc, #152]	; (8005f40 <thread8+0xa0>)
 8005ea6:	f7ff fdb3 	bl	8005a10 <chMtxLock>
  chMtxLock(&m1);
 8005eaa:	4826      	ldr	r0, [pc, #152]	; (8005f44 <thread8+0xa4>)
 8005eac:	f7ff fdb0 	bl	8005a10 <chMtxLock>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005eb6:	4d24      	ldr	r5, [pc, #144]	; (8005f48 <thread8+0xa8>)
  _dbg_check_lock();
 8005eb8:	f7fd fb7a 	bl	80035b0 <_dbg_check_lock>
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8005ebc:	69ab      	ldr	r3, [r5, #24]
 8005ebe:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
 8005ec0:	f7fa fe3e 	bl	8000b40 <chDbgCheckClassS>
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");
 8005ec4:	2e00      	cmp	r6, #0
 8005ec6:	d038      	beq.n	8005f3a <thread8+0x9a>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7fa ffd1 	bl	8000e70 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005ece:	4b1f      	ldr	r3, [pc, #124]	; (8005f4c <thread8+0xac>)
 8005ed0:	69a8      	ldr	r0, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005ed2:	461c      	mov	r4, r3
 8005ed4:	6243      	str	r3, [r0, #36]	; 0x24
 8005ed6:	e003      	b.n	8005ee0 <thread8+0x40>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005ed8:	6899      	ldr	r1, [r3, #8]
 8005eda:	6882      	ldr	r2, [r0, #8]
 8005edc:	4291      	cmp	r1, r2
 8005ede:	d302      	bcc.n	8005ee6 <thread8+0x46>
    cp = cp->queue.next;
 8005ee0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	d1f8      	bne.n	8005ed8 <thread8+0x38>
  tp->queue.prev             = cp->queue.prev;
 8005ee6:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 8005ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8005eec:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8005ef0:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8005ef2:	6058      	str	r0, [r3, #4]
 8005ef4:	2007      	movs	r0, #7
 8005ef6:	f7fd f9c3 	bl	8003280 <chSchGoSleepTimeoutS>
  if (msg != MSG_TIMEOUT) {
 8005efa:	3001      	adds	r0, #1
 8005efc:	d002      	beq.n	8005f04 <thread8+0x64>
    chMtxLockS(mp);
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7fd f90e 	bl	8003120 <chMtxLockS>
  _dbg_check_unlock();
 8005f04:	f7fd faec 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	42ab      	cmp	r3, r5
 8005f0c:	d004      	beq.n	8005f18 <thread8+0x78>
 8005f0e:	69aa      	ldr	r2, [r5, #24]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	6892      	ldr	r2, [r2, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d30d      	bcc.n	8005f34 <thread8+0x94>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005f1e:	7838      	ldrb	r0, [r7, #0]
 8005f20:	f7fe f996 	bl	8004250 <test_emit_token>
  chMtxUnlock(&m1);
 8005f24:	4807      	ldr	r0, [pc, #28]	; (8005f44 <thread8+0xa4>)
 8005f26:	f7ff fc43 	bl	80057b0 <chMtxUnlock>
  chMtxUnlock(&m2);
 8005f2a:	4805      	ldr	r0, [pc, #20]	; (8005f40 <thread8+0xa0>)
}
 8005f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005f30:	f7ff bc3e 	b.w	80057b0 <chMtxUnlock>
 8005f34:	4806      	ldr	r0, [pc, #24]	; (8005f50 <thread8+0xb0>)
 8005f36:	f7fa fdd3 	bl	8000ae0 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8005f3a:	4806      	ldr	r0, [pc, #24]	; (8005f54 <thread8+0xb4>)
 8005f3c:	f7fa fdd0 	bl	8000ae0 <chSysHalt>
 8005f40:	20000c48 	.word	0x20000c48
 8005f44:	20000c38 	.word	0x20000c38
 8005f48:	200011b0 	.word	0x200011b0
 8005f4c:	20000c04 	.word	0x20000c04
 8005f50:	0800b2c8 	.word	0x0800b2c8
 8005f54:	0800b57c 	.word	0x0800b57c
	...

08005f60 <thread6>:
static THD_FUNCTION(thread6, p) {
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	4607      	mov	r7, r0
  chMtxLock(&m1);
 8005f64:	4820      	ldr	r0, [pc, #128]	; (8005fe8 <thread6+0x88>)
 8005f66:	f7ff fd53 	bl	8005a10 <chMtxLock>
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 8005f70:	4d1e      	ldr	r5, [pc, #120]	; (8005fec <thread6+0x8c>)
  _dbg_check_lock();
 8005f72:	f7fd fb1d 	bl	80035b0 <_dbg_check_lock>
 8005f76:	69ac      	ldr	r4, [r5, #24]
 8005f78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheckClassS();
 8005f7a:	f7fa fde1 	bl	8000b40 <chDbgCheckClassS>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8005f7e:	b386      	cbz	r6, 8005fe2 <thread6+0x82>
  chMtxUnlockS(mp);
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7fa ff75 	bl	8000e70 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 8005f86:	481a      	ldr	r0, [pc, #104]	; (8005ff0 <thread6+0x90>)
 8005f88:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	e003      	b.n	8005f96 <thread6+0x36>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005f8e:	6899      	ldr	r1, [r3, #8]
 8005f90:	68a2      	ldr	r2, [r4, #8]
 8005f92:	4291      	cmp	r1, r2
 8005f94:	d302      	bcc.n	8005f9c <thread6+0x3c>
    cp = cp->queue.next;
 8005f96:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005f98:	4283      	cmp	r3, r0
 8005f9a:	d1f8      	bne.n	8005f8e <thread6+0x2e>
  tp->queue.prev             = cp->queue.prev;
 8005f9c:	685a      	ldr	r2, [r3, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 8005f9e:	2007      	movs	r0, #7
 8005fa0:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8005fa4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005fa6:	605c      	str	r4, [r3, #4]
 8005fa8:	f7fd f892 	bl	80030d0 <chSchGoSleepS>
  chMtxLockS(mp);
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7fd f8b7 	bl	8003120 <chMtxLockS>
  _dbg_check_unlock();
 8005fb2:	f7fd fa95 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	d004      	beq.n	8005fc6 <thread6+0x66>
 8005fbc:	69aa      	ldr	r2, [r5, #24]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d30a      	bcc.n	8005fdc <thread6+0x7c>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8005fcc:	7838      	ldrb	r0, [r7, #0]
 8005fce:	f7fe f93f 	bl	8004250 <test_emit_token>
  chMtxUnlock(&m1);
 8005fd2:	4805      	ldr	r0, [pc, #20]	; (8005fe8 <thread6+0x88>)
}
 8005fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m1);
 8005fd8:	f7ff bbea 	b.w	80057b0 <chMtxUnlock>
 8005fdc:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <thread6+0x94>)
 8005fde:	f7fa fd7f 	bl	8000ae0 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 8005fe2:	4805      	ldr	r0, [pc, #20]	; (8005ff8 <thread6+0x98>)
 8005fe4:	f7fa fd7c 	bl	8000ae0 <chSysHalt>
 8005fe8:	20000c38 	.word	0x20000c38
 8005fec:	200011b0 	.word	0x200011b0
 8005ff0:	20000c04 	.word	0x20000c04
 8005ff4:	0800b2c8 	.word	0x0800b2c8
 8005ff8:	0800b4dc 	.word	0x0800b4dc
 8005ffc:	00000000 	.word	0x00000000

08006000 <thread9>:
static THD_FUNCTION(thread9, p) {
 8006000:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 8006002:	4c06      	ldr	r4, [pc, #24]	; (800601c <thread9+0x1c>)
static THD_FUNCTION(thread9, p) {
 8006004:	4605      	mov	r5, r0
  chMtxLock(&m2);
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff fd02 	bl	8005a10 <chMtxLock>
  test_emit_token(*(char *)p);
 800600c:	7828      	ldrb	r0, [r5, #0]
 800600e:	f7fe f91f 	bl	8004250 <test_emit_token>
  chMtxUnlock(&m2);
 8006012:	4620      	mov	r0, r4
}
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8006018:	f7ff bbca 	b.w	80057b0 <chMtxUnlock>
 800601c:	20000c48 	.word	0x20000c48

08006020 <thread1.lto_priv.181>:
static THD_FUNCTION(thread1, p) {
 8006020:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 8006022:	4c06      	ldr	r4, [pc, #24]	; (800603c <thread1.lto_priv.181+0x1c>)
static THD_FUNCTION(thread1, p) {
 8006024:	4605      	mov	r5, r0
  chMtxLock(&m1);
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff fcf2 	bl	8005a10 <chMtxLock>
  test_emit_token(*(char *)p);
 800602c:	7828      	ldrb	r0, [r5, #0]
 800602e:	f7fe f90f 	bl	8004250 <test_emit_token>
  chMtxUnlock(&m1);
 8006032:	4620      	mov	r0, r4
}
 8006034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 8006038:	f7ff bbba 	b.w	80057b0 <chMtxUnlock>
 800603c:	20000c38 	.word	0x20000c38

08006040 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006040:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006042:	4c08      	ldr	r4, [pc, #32]	; (8006064 <chFactoryReleaseSemaphore+0x24>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8006044:	4605      	mov	r5, r0
  F_LOCK();
 8006046:	4620      	mov	r0, r4
 8006048:	f7ff fce2 	bl	8005a10 <chMtxLock>
  dyn_release_object_pool(&dsp->element,
 800604c:	4628      	mov	r0, r5
 800604e:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8006052:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006056:	f7ff f83b 	bl	80050d0 <dyn_release_object_pool>
  F_UNLOCK();
 800605a:	4620      	mov	r0, r4
}
 800605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006060:	f7ff bba6 	b.w	80057b0 <chMtxUnlock>
 8006064:	20001a38 	.word	0x20001a38
	...

08006070 <oslib_test_004_003_execute>:
      chFactoryReleaseSemaphore(dsp);
    }
  }
}

static void oslib_test_004_003_execute(void) {
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_semaphore_t *dsp;

  /* [4.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 8006072:	4c42      	ldr	r4, [pc, #264]	; (800617c <oslib_test_004_003_execute+0x10c>)
 8006074:	2501      	movs	r5, #1
 8006076:	6025      	str	r5, [r4, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 8006078:	f7ff fe62 	bl	8005d40 <chFactoryFindSemaphore.constprop.8>
    test_assert(dsp == NULL, "found");
 800607c:	fab0 f080 	clz	r0, r0
 8006080:	0940      	lsrs	r0, r0, #5
 8006082:	493f      	ldr	r1, [pc, #252]	; (8006180 <oslib_test_004_003_execute+0x110>)
 8006084:	f7fa fb6c 	bl	8000760 <_test_assert>
 8006088:	b100      	cbz	r0, 800608c <oslib_test_004_003_execute+0x1c>
  test_set_step(6);
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
}
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800608c:	2302      	movs	r3, #2
 800608e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8006090:	f7ff fe36 	bl	8005d00 <chFactoryCreateSemaphore.constprop.9>
    test_assert(dsp != NULL, "cannot create");
 8006094:	4606      	mov	r6, r0
 8006096:	3000      	adds	r0, #0
 8006098:	bf18      	it	ne
 800609a:	2001      	movne	r0, #1
 800609c:	4939      	ldr	r1, [pc, #228]	; (8006184 <oslib_test_004_003_execute+0x114>)
 800609e:	f7fa fb5f 	bl	8000760 <_test_assert>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d1f1      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
 80060a6:	2303      	movs	r3, #3
 80060a8:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 80060aa:	f7ff fe29 	bl	8005d00 <chFactoryCreateSemaphore.constprop.9>
    test_assert(dsp1 == NULL, "can create");
 80060ae:	fab0 f080 	clz	r0, r0
 80060b2:	0940      	lsrs	r0, r0, #5
 80060b4:	4934      	ldr	r1, [pc, #208]	; (8006188 <oslib_test_004_003_execute+0x118>)
 80060b6:	f7fa fb53 	bl	8000760 <_test_assert>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d1e5      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
 80060be:	2304      	movs	r3, #4
 80060c0:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 80060c2:	f7ff fe3d 	bl	8005d40 <chFactoryFindSemaphore.constprop.8>
    test_assert(dsp1 != NULL, "not found");
 80060c6:	4607      	mov	r7, r0
 80060c8:	3000      	adds	r0, #0
 80060ca:	bf18      	it	ne
 80060cc:	2001      	movne	r0, #1
 80060ce:	492f      	ldr	r1, [pc, #188]	; (800618c <oslib_test_004_003_execute+0x11c>)
 80060d0:	f7fa fb46 	bl	8000760 <_test_assert>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d1d8      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 80060d8:	1bf0      	subs	r0, r6, r7
 80060da:	fab0 f080 	clz	r0, r0
 80060de:	492c      	ldr	r1, [pc, #176]	; (8006190 <oslib_test_004_003_execute+0x120>)
 80060e0:	0940      	lsrs	r0, r0, #5
 80060e2:	f7fa fb3d 	bl	8000760 <_test_assert>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d1cf      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4928      	ldr	r1, [pc, #160]	; (8006190 <oslib_test_004_003_execute+0x120>)
 80060ee:	f1a0 0002 	sub.w	r0, r0, #2
 80060f2:	fab0 f080 	clz	r0, r0
 80060f6:	0940      	lsrs	r0, r0, #5
 80060f8:	f7fa fb32 	bl	8000760 <_test_assert>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1c4      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8006100:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8006102:	4923      	ldr	r1, [pc, #140]	; (8006190 <oslib_test_004_003_execute+0x120>)
 8006104:	442b      	add	r3, r5
 8006106:	4628      	mov	r0, r5
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	f7fa fb29 	bl	8000760 <_test_assert>
 800610e:	2800      	cmp	r0, #0
 8006110:	d1bb      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	491e      	ldr	r1, [pc, #120]	; (8006190 <oslib_test_004_003_execute+0x120>)
 8006116:	f1a0 0c03 	sub.w	ip, r0, #3
 800611a:	f1dc 0000 	rsbs	r0, ip, #0
 800611e:	eb40 000c 	adc.w	r0, r0, ip
 8006122:	f7fa fb1d 	bl	8000760 <_test_assert>
 8006126:	2800      	cmp	r0, #0
 8006128:	d1af      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff88 	bl	8006040 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4918      	ldr	r1, [pc, #96]	; (8006194 <oslib_test_004_003_execute+0x124>)
 8006134:	1e82      	subs	r2, r0, #2
 8006136:	4250      	negs	r0, r2
 8006138:	4150      	adcs	r0, r2
 800613a:	f7fa fb11 	bl	8000760 <_test_assert>
 800613e:	2800      	cmp	r0, #0
 8006140:	d1a3      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8006142:	4638      	mov	r0, r7
 8006144:	f7ff ff7c 	bl	8006040 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8006148:	6870      	ldr	r0, [r6, #4]
 800614a:	4912      	ldr	r1, [pc, #72]	; (8006194 <oslib_test_004_003_execute+0x124>)
 800614c:	1b43      	subs	r3, r0, r5
 800614e:	4258      	negs	r0, r3
 8006150:	4158      	adcs	r0, r3
 8006152:	f7fa fb05 	bl	8000760 <_test_assert>
 8006156:	2800      	cmp	r0, #0
 8006158:	d197      	bne.n	800608a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 800615a:	4630      	mov	r0, r6
  test_set_step(5);
 800615c:	2305      	movs	r3, #5
 800615e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 8006160:	f7ff ff6e 	bl	8006040 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8006164:	2306      	movs	r3, #6
 8006166:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8006168:	f7ff fdea 	bl	8005d40 <chFactoryFindSemaphore.constprop.8>
    test_assert(dsp == NULL, "found");
 800616c:	fab0 f080 	clz	r0, r0
 8006170:	0940      	lsrs	r0, r0, #5
 8006172:	4903      	ldr	r1, [pc, #12]	; (8006180 <oslib_test_004_003_execute+0x110>)
}
 8006174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8006178:	f7fa baf2 	b.w	8000760 <_test_assert>
 800617c:	20002354 	.word	0x20002354
 8006180:	0800bec0 	.word	0x0800bec0
 8006184:	0800bea0 	.word	0x0800bea0
 8006188:	0800beb0 	.word	0x0800beb0
 800618c:	0800bebc 	.word	0x0800bebc
 8006190:	0800bec8 	.word	0x0800bec8
 8006194:	0800bee4 	.word	0x0800bee4
	...

080061a0 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
 80061a0:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 80061a2:	f7ff fdcd 	bl	8005d40 <chFactoryFindSemaphore.constprop.8>
  if (dsp != NULL) {
 80061a6:	b140      	cbz	r0, 80061ba <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 80061a8:	6843      	ldr	r3, [r0, #4]
 80061aa:	4604      	mov	r4, r0
 80061ac:	b12b      	cbz	r3, 80061ba <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff ff46 	bl	8006040 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f9      	bne.n	80061ae <oslib_test_004_003_teardown+0xe>
}
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	0000      	movs	r0, r0
	...

080061c0 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 80061c0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 80061c2:	4c08      	ldr	r4, [pc, #32]	; (80061e4 <chFactoryReleaseObject+0x24>)
void chFactoryReleaseObject(registered_object_t *rop){
 80061c4:	4605      	mov	r5, r0
  F_LOCK();
 80061c6:	4620      	mov	r0, r4
 80061c8:	f7ff fc22 	bl	8005a10 <chMtxLock>
  dyn_release_object_pool(&rop->element,
 80061cc:	4628      	mov	r0, r5
 80061ce:	f104 0214 	add.w	r2, r4, #20
 80061d2:	f104 0110 	add.w	r1, r4, #16
 80061d6:	f7fe ff7b 	bl	80050d0 <dyn_release_object_pool>
  F_UNLOCK();
 80061da:	4620      	mov	r0, r4
}
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80061e0:	f7ff bae6 	b.w	80057b0 <chMtxUnlock>
 80061e4:	20001a38 	.word	0x20001a38
	...

080061f0 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 80061f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80061f4:	4c51      	ldr	r4, [pc, #324]	; (800633c <oslib_test_004_001_execute+0x14c>)
 80061f6:	2501      	movs	r5, #1
 80061f8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 80061fa:	f7ff fd31 	bl	8005c60 <chFactoryFindObject.constprop.12>
    test_assert(rop == NULL, "found");
 80061fe:	fab0 f080 	clz	r0, r0
 8006202:	0940      	lsrs	r0, r0, #5
 8006204:	494e      	ldr	r1, [pc, #312]	; (8006340 <oslib_test_004_001_execute+0x150>)
 8006206:	f7fa faab 	bl	8000760 <_test_assert>
 800620a:	b108      	cbz	r0, 8006210 <oslib_test_004_001_execute+0x20>
}
 800620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8006210:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006212:	484c      	ldr	r0, [pc, #304]	; (8006344 <oslib_test_004_001_execute+0x154>)
  test_set_step(2);
 8006214:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006216:	f7ff fd0b 	bl	8005c30 <chFactoryRegisterObject.constprop.13>
    test_assert(rop != NULL, "cannot register");
 800621a:	4606      	mov	r6, r0
 800621c:	3000      	adds	r0, #0
 800621e:	bf18      	it	ne
 8006220:	2001      	movne	r0, #1
 8006222:	4949      	ldr	r1, [pc, #292]	; (8006348 <oslib_test_004_001_execute+0x158>)
 8006224:	f7fa fa9c 	bl	8000760 <_test_assert>
 8006228:	2800      	cmp	r0, #0
 800622a:	d1ef      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
  test_set_step(3);
 800622c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800622e:	4847      	ldr	r0, [pc, #284]	; (800634c <oslib_test_004_001_execute+0x15c>)
  test_set_step(3);
 8006230:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8006232:	f7ff fcfd 	bl	8005c30 <chFactoryRegisterObject.constprop.13>
    test_assert(rop1 == NULL, "can register");
 8006236:	fab0 f080 	clz	r0, r0
 800623a:	0940      	lsrs	r0, r0, #5
 800623c:	4944      	ldr	r1, [pc, #272]	; (8006350 <oslib_test_004_001_execute+0x160>)
 800623e:	f7fa fa8f 	bl	8000760 <_test_assert>
 8006242:	2800      	cmp	r0, #0
 8006244:	d1e2      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
  test_set_step(4);
 8006246:	2304      	movs	r3, #4
 8006248:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800624a:	f7ff fd09 	bl	8005c60 <chFactoryFindObject.constprop.12>
    test_assert(rop1 != NULL, "not found");
 800624e:	4607      	mov	r7, r0
 8006250:	3000      	adds	r0, #0
 8006252:	bf18      	it	ne
 8006254:	2001      	movne	r0, #1
 8006256:	493f      	ldr	r1, [pc, #252]	; (8006354 <oslib_test_004_001_execute+0x164>)
 8006258:	f7fa fa82 	bl	8000760 <_test_assert>
 800625c:	2800      	cmp	r0, #0
 800625e:	d1d5      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	493d      	ldr	r1, [pc, #244]	; (8006358 <oslib_test_004_001_execute+0x168>)
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800626a:	eba0 0008 	sub.w	r0, r0, r8
 800626e:	fab0 f080 	clz	r0, r0
 8006272:	0940      	lsrs	r0, r0, #5
 8006274:	f7fa fa74 	bl	8000760 <_test_assert>
 8006278:	2800      	cmp	r0, #0
 800627a:	d1c7      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800627c:	1bf0      	subs	r0, r6, r7
 800627e:	fab0 f080 	clz	r0, r0
 8006282:	4936      	ldr	r1, [pc, #216]	; (800635c <oslib_test_004_001_execute+0x16c>)
 8006284:	0940      	lsrs	r0, r0, #5
 8006286:	f7fa fa6b 	bl	8000760 <_test_assert>
 800628a:	2800      	cmp	r0, #0
 800628c:	d1be      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4932      	ldr	r1, [pc, #200]	; (800635c <oslib_test_004_001_execute+0x16c>)
 8006292:	f1a0 0002 	sub.w	r0, r0, #2
 8006296:	fab0 f080 	clz	r0, r0
 800629a:	0940      	lsrs	r0, r0, #5
 800629c:	f7fa fa60 	bl	8000760 <_test_assert>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d1b3      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
 80062a4:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 80062a6:	492d      	ldr	r1, [pc, #180]	; (800635c <oslib_test_004_001_execute+0x16c>)
 80062a8:	442b      	add	r3, r5
 80062aa:	4628      	mov	r0, r5
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	f7fa fa57 	bl	8000760 <_test_assert>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d1aa      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4927      	ldr	r1, [pc, #156]	; (8006358 <oslib_test_004_001_execute+0x168>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	eba0 0e08 	sub.w	lr, r0, r8
 80062c0:	f1de 0000 	rsbs	r0, lr, #0
 80062c4:	eb40 000e 	adc.w	r0, r0, lr
 80062c8:	f7fa fa4a 	bl	8000760 <_test_assert>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d19d      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4922      	ldr	r1, [pc, #136]	; (800635c <oslib_test_004_001_execute+0x16c>)
 80062d4:	f1a0 0c03 	sub.w	ip, r0, #3
 80062d8:	f1dc 0000 	rsbs	r0, ip, #0
 80062dc:	eb40 000c 	adc.w	r0, r0, ip
 80062e0:	f7fa fa3e 	bl	8000760 <_test_assert>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d191      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ff69 	bl	80061c0 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	491b      	ldr	r1, [pc, #108]	; (8006360 <oslib_test_004_001_execute+0x170>)
 80062f2:	1e82      	subs	r2, r0, #2
 80062f4:	4250      	negs	r0, r2
 80062f6:	4150      	adcs	r0, r2
 80062f8:	f7fa fa32 	bl	8000760 <_test_assert>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d185      	bne.n	800620c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ff5d 	bl	80061c0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 8006306:	6870      	ldr	r0, [r6, #4]
 8006308:	4915      	ldr	r1, [pc, #84]	; (8006360 <oslib_test_004_001_execute+0x170>)
 800630a:	1b43      	subs	r3, r0, r5
 800630c:	4258      	negs	r0, r3
 800630e:	4158      	adcs	r0, r3
 8006310:	f7fa fa26 	bl	8000760 <_test_assert>
 8006314:	2800      	cmp	r0, #0
 8006316:	f47f af79 	bne.w	800620c <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 800631a:	4630      	mov	r0, r6
  test_set_step(5);
 800631c:	2305      	movs	r3, #5
 800631e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8006320:	f7ff ff4e 	bl	80061c0 <chFactoryReleaseObject>
  test_set_step(6);
 8006324:	2306      	movs	r3, #6
 8006326:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8006328:	f7ff fc9a 	bl	8005c60 <chFactoryFindObject.constprop.12>
    test_assert(rop == NULL, "found");
 800632c:	fab0 f080 	clz	r0, r0
 8006330:	0940      	lsrs	r0, r0, #5
 8006332:	4903      	ldr	r1, [pc, #12]	; (8006340 <oslib_test_004_001_execute+0x150>)
}
 8006334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8006338:	f7fa ba12 	b.w	8000760 <_test_assert>
 800633c:	20002354 	.word	0x20002354
 8006340:	0800bec0 	.word	0x0800bec0
 8006344:	20000c90 	.word	0x20000c90
 8006348:	0800be50 	.word	0x0800be50
 800634c:	20000c94 	.word	0x20000c94
 8006350:	0800be60 	.word	0x0800be60
 8006354:	0800bebc 	.word	0x0800bebc
 8006358:	0800be70 	.word	0x0800be70
 800635c:	0800bec8 	.word	0x0800bec8
 8006360:	0800bee4 	.word	0x0800bee4
	...

08006370 <oslib_test_004_001_teardown>:
static void oslib_test_004_001_teardown(void) {
 8006370:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8006372:	f7ff fc75 	bl	8005c60 <chFactoryFindObject.constprop.12>
  if (rop != NULL) {
 8006376:	b140      	cbz	r0, 800638a <oslib_test_004_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8006378:	6843      	ldr	r3, [r0, #4]
 800637a:	4604      	mov	r4, r0
 800637c:	b12b      	cbz	r3, 800638a <oslib_test_004_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800637e:	4620      	mov	r0, r4
 8006380:	f7ff ff1e 	bl	80061c0 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f9      	bne.n	800637e <oslib_test_004_001_teardown+0xe>
}
 800638a:	bd10      	pop	{r4, pc}
 800638c:	0000      	movs	r0, r0
	...

08006390 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8006394:	4c17      	ldr	r4, [pc, #92]	; (80063f4 <chHeapStatus+0x64>)
 8006396:	2800      	cmp	r0, #0
 8006398:	bf18      	it	ne
 800639a:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 800639c:	f104 070c 	add.w	r7, r4, #12
 80063a0:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 80063a2:	4689      	mov	r9, r1
 80063a4:	4690      	mov	r8, r2
  H_LOCK(heapp);
 80063a6:	f7ff fb33 	bl	8005a10 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	b1f3      	cbz	r3, 80063ec <chHeapStatus+0x5c>
  lpages = 0U;
 80063ae:	2400      	movs	r4, #0
  tpages = 0U;
 80063b0:	4625      	mov	r5, r4
  n = 0U;
 80063b2:	4626      	mov	r6, r4
  while (H_NEXT(qp) != NULL) {
 80063b4:	e9d3 3000 	ldrd	r3, r0, [r3]
 80063b8:	4284      	cmp	r4, r0
    size_t pages = H_PAGES(H_NEXT(qp));

    /* Updating counters.*/
    n++;
 80063ba:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 80063be:	4405      	add	r5, r0
 80063c0:	bf38      	it	cc
 80063c2:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f5      	bne.n	80063b4 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 80063c8:	f1b9 0f00 	cmp.w	r9, #0
 80063cc:	d002      	beq.n	80063d4 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80063ce:	00ed      	lsls	r5, r5, #3
 80063d0:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 80063d4:	f1b8 0f00 	cmp.w	r8, #0
 80063d8:	d002      	beq.n	80063e0 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80063da:	00e4      	lsls	r4, r4, #3
 80063dc:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7ff f9e5 	bl	80057b0 <chMtxUnlock>

  return n;
}
 80063e6:	4630      	mov	r0, r6
 80063e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 80063ec:	461c      	mov	r4, r3
  tpages = 0U;
 80063ee:	461d      	mov	r5, r3
  n = 0U;
 80063f0:	461e      	mov	r6, r3
 80063f2:	e7e9      	b.n	80063c8 <chHeapStatus+0x38>
 80063f4:	20001b60 	.word	0x20001b60
	...

08006400 <cmd_mem>:
#endif

#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006400:	b530      	push	{r4, r5, lr}
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 8006402:	2900      	cmp	r1, #0
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006404:	b083      	sub	sp, #12
  if (argc > 0) {
 8006406:	dd05      	ble.n	8006414 <cmd_mem+0x14>
    shellUsage(chp, "mem");
 8006408:	4a12      	ldr	r2, [pc, #72]	; (8006454 <cmd_mem+0x54>)
 800640a:	4913      	ldr	r1, [pc, #76]	; (8006458 <cmd_mem+0x58>)
 800640c:	f7fc fb78 	bl	8002b00 <chprintf>
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
}
 8006410:	b003      	add	sp, #12
 8006412:	bd30      	pop	{r4, r5, pc}
 8006414:	4604      	mov	r4, r0
  n = chHeapStatus(NULL, &total, &largest);
 8006416:	aa01      	add	r2, sp, #4
 8006418:	4669      	mov	r1, sp
 800641a:	2000      	movs	r0, #0
 800641c:	f7ff ffb8 	bl	8006390 <chHeapStatus>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 8006420:	4b0e      	ldr	r3, [pc, #56]	; (800645c <cmd_mem+0x5c>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8006422:	490f      	ldr	r1, [pc, #60]	; (8006460 <cmd_mem+0x60>)
 8006424:	e9d3 3200 	ldrd	r3, r2, [r3]
  n = chHeapStatus(NULL, &total, &largest);
 8006428:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 800642a:	1ad2      	subs	r2, r2, r3
 800642c:	4620      	mov	r0, r4
 800642e:	f7fc fb67 	bl	8002b00 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8006432:	462a      	mov	r2, r5
 8006434:	490b      	ldr	r1, [pc, #44]	; (8006464 <cmd_mem+0x64>)
 8006436:	4620      	mov	r0, r4
 8006438:	f7fc fb62 	bl	8002b00 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 800643c:	9a00      	ldr	r2, [sp, #0]
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <cmd_mem+0x68>)
 8006440:	4620      	mov	r0, r4
 8006442:	f7fc fb5d 	bl	8002b00 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8006446:	4620      	mov	r0, r4
 8006448:	9a01      	ldr	r2, [sp, #4]
 800644a:	4908      	ldr	r1, [pc, #32]	; (800646c <cmd_mem+0x6c>)
 800644c:	f7fc fb58 	bl	8002b00 <chprintf>
}
 8006450:	b003      	add	sp, #12
 8006452:	bd30      	pop	{r4, r5, pc}
 8006454:	0800ba38 	.word	0x0800ba38
 8006458:	0800b918 	.word	0x0800b918
 800645c:	20001b58 	.word	0x20001b58
 8006460:	0800ba3c 	.word	0x0800ba3c
 8006464:	0800ba5c 	.word	0x0800ba5c
 8006468:	0800ba74 	.word	0x0800ba74
 800646c:	0800ba94 	.word	0x0800ba94

08006470 <chHeapFree>:
void chHeapFree(void *p) {
 8006470:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8006472:	b318      	cbz	r0, 80064bc <chHeapFree+0x4c>
 8006474:	0743      	lsls	r3, r0, #29
 8006476:	4605      	mov	r5, r0
 8006478:	d120      	bne.n	80064bc <chHeapFree+0x4c>
  heapp = H_HEAP(hp);
 800647a:	e950 4302 	ldrd	r4, r3, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800647e:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006480:	08db      	lsrs	r3, r3, #3
  H_LOCK(heapp);
 8006482:	f104 060c 	add.w	r6, r4, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8006486:	f840 3c04 	str.w	r3, [r0, #-4]
  qp = &heapp->header;
 800648a:	3404      	adds	r4, #4
  H_LOCK(heapp);
 800648c:	4630      	mov	r0, r6
 800648e:	f7ff fabf 	bl	8005a10 <chMtxLock>
  hp = (heap_header_t *)p - 1U;
 8006492:	f1a5 0108 	sub.w	r1, r5, #8
  qp = &heapp->header;
 8006496:	4623      	mov	r3, r4
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8006498:	428b      	cmp	r3, r1
 800649a:	d805      	bhi.n	80064a8 <chHeapFree+0x38>
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	3201      	adds	r2, #1
 80064a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80064a4:	4291      	cmp	r1, r2
 80064a6:	d309      	bcc.n	80064bc <chHeapFree+0x4c>
    if (((qp == &heapp->header) || (hp > qp)) &&
 80064a8:	42a3      	cmp	r3, r4
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	d001      	beq.n	80064b2 <chHeapFree+0x42>
 80064ae:	428b      	cmp	r3, r1
 80064b0:	d202      	bcs.n	80064b8 <chHeapFree+0x48>
 80064b2:	b132      	cbz	r2, 80064c2 <chHeapFree+0x52>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80064b4:	4291      	cmp	r1, r2
 80064b6:	d304      	bcc.n	80064c2 <chHeapFree+0x52>
void chHeapFree(void *p) {
 80064b8:	4613      	mov	r3, r2
 80064ba:	e7ed      	b.n	8006498 <chHeapFree+0x28>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80064bc:	4819      	ldr	r0, [pc, #100]	; (8006524 <chHeapFree+0xb4>)
 80064be:	f7fa fb0f 	bl	8000ae0 <chSysHalt>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80064c2:	f855 0c04 	ldr.w	r0, [r5, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 80064c6:	f845 2c08 	str.w	r2, [r5, #-8]
      H_NEXT(qp) = hp;
 80064ca:	6019      	str	r1, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80064cc:	1c42      	adds	r2, r0, #1
 80064ce:	f855 4c08 	ldr.w	r4, [r5, #-8]
 80064d2:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80064d6:	42a0      	cmp	r0, r4
 80064d8:	d00a      	beq.n	80064f0 <chHeapFree+0x80>
      if ((H_LIMIT(qp) == hp)) {
 80064da:	6858      	ldr	r0, [r3, #4]
 80064dc:	1c42      	adds	r2, r0, #1
 80064de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80064e2:	4291      	cmp	r1, r2
 80064e4:	d012      	beq.n	800650c <chHeapFree+0x9c>
  H_UNLOCK(heapp);
 80064e6:	4630      	mov	r0, r6
}
 80064e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 80064ec:	f7ff b960 	b.w	80057b0 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80064f0:	6840      	ldr	r0, [r0, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80064f2:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
 80064f6:	f845 4c08 	str.w	r4, [r5, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80064fa:	4402      	add	r2, r0
 80064fc:	f845 2c04 	str.w	r2, [r5, #-4]
      if ((H_LIMIT(qp) == hp)) {
 8006500:	6858      	ldr	r0, [r3, #4]
 8006502:	1c42      	adds	r2, r0, #1
 8006504:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006508:	4291      	cmp	r1, r2
 800650a:	d1ec      	bne.n	80064e6 <chHeapFree+0x76>
        H_NEXT(qp) = H_NEXT(hp);
 800650c:	e955 1202 	ldrd	r1, r2, [r5, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8006510:	3201      	adds	r2, #1
 8006512:	4410      	add	r0, r2
 8006514:	6058      	str	r0, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8006516:	6019      	str	r1, [r3, #0]
  H_UNLOCK(heapp);
 8006518:	4630      	mov	r0, r6
}
 800651a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  H_UNLOCK(heapp);
 800651e:	f7ff b947 	b.w	80057b0 <chMtxUnlock>
 8006522:	bf00      	nop
 8006524:	0800b500 	.word	0x0800b500
	...

08006530 <oslib_test_003_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [3.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_003_002_execute(void) {
 8006530:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8006532:	4c14      	ldr	r4, [pc, #80]	; (8006584 <oslib_test_003_002_execute+0x54>)
static void oslib_test_003_002_execute(void) {
 8006534:	b082      	sub	sp, #8
  test_set_step(1);
 8006536:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006538:	466a      	mov	r2, sp
 800653a:	a901      	add	r1, sp, #4
 800653c:	2000      	movs	r0, #0
  test_set_step(1);
 800653e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8006540:	f7ff ff26 	bl	8006390 <chHeapStatus>
 8006544:	2110      	movs	r1, #16
 8006546:	4810      	ldr	r0, [pc, #64]	; (8006588 <oslib_test_003_002_execute+0x58>)
 8006548:	f7ff fa82 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800654c:	4606      	mov	r6, r0
 800654e:	3000      	adds	r0, #0
 8006550:	bf18      	it	ne
 8006552:	2001      	movne	r0, #1
 8006554:	490d      	ldr	r1, [pc, #52]	; (800658c <oslib_test_003_002_execute+0x5c>)
 8006556:	f7fa f903 	bl	8000760 <_test_assert>
 800655a:	b980      	cbnz	r0, 800657e <oslib_test_003_002_execute+0x4e>
 800655c:	4605      	mov	r5, r0
    chHeapFree(p1);
 800655e:	4630      	mov	r0, r6
 8006560:	f7ff ff86 	bl	8006470 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
 8006564:	2302      	movs	r3, #2
 8006566:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800656a:	4628      	mov	r0, r5
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	f7ff fa6f 	bl	8005a50 <chHeapAllocAligned.constprop.31>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 8006572:	fab0 f080 	clz	r0, r0
 8006576:	0940      	lsrs	r0, r0, #5
 8006578:	4905      	ldr	r1, [pc, #20]	; (8006590 <oslib_test_003_002_execute+0x60>)
 800657a:	f7fa f8f1 	bl	8000760 <_test_assert>
  }
}
 800657e:	b002      	add	sp, #8
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	bf00      	nop
 8006584:	20002354 	.word	0x20002354
 8006588:	200022b4 	.word	0x200022b4
 800658c:	0800be14 	.word	0x0800be14
 8006590:	0800be28 	.word	0x0800be28
	...

080065a0 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80065a4:	4cbf      	ldr	r4, [pc, #764]	; (80068a4 <oslib_test_003_001_execute+0x304>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80065a6:	48c0      	ldr	r0, [pc, #768]	; (80068a8 <oslib_test_003_001_execute+0x308>)
static void oslib_test_003_001_execute(void) {
 80065a8:	b084      	sub	sp, #16
  test_set_step(1);
 80065aa:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80065ac:	4669      	mov	r1, sp
 80065ae:	2200      	movs	r2, #0
  test_set_step(1);
 80065b0:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80065b2:	f7ff feed 	bl	8006390 <chHeapStatus>
 80065b6:	f1a0 0001 	sub.w	r0, r0, #1
 80065ba:	fab0 f080 	clz	r0, r0
 80065be:	49bb      	ldr	r1, [pc, #748]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 80065c0:	0940      	lsrs	r0, r0, #5
 80065c2:	f7fa f8cd 	bl	8000760 <_test_assert>
 80065c6:	b110      	cbz	r0, 80065ce <oslib_test_003_001_execute+0x2e>
}
 80065c8:	b004      	add	sp, #16
 80065ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80065ce:	2302      	movs	r3, #2
 80065d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065d4:	48b4      	ldr	r0, [pc, #720]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	f7ff fa3a 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    test_assert(p1 == NULL, "allocation not failed");
 80065dc:	fab0 f080 	clz	r0, r0
 80065e0:	0940      	lsrs	r0, r0, #5
 80065e2:	49b3      	ldr	r1, [pc, #716]	; (80068b0 <oslib_test_003_001_execute+0x310>)
 80065e4:	f7fa f8bc 	bl	8000760 <_test_assert>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1ed      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(3);
 80065ec:	2303      	movs	r3, #3
 80065ee:	2110      	movs	r1, #16
 80065f0:	48ad      	ldr	r0, [pc, #692]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	f7ff fa2c 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    test_assert(p1 != NULL, "allocation failed");
 80065f8:	4605      	mov	r5, r0
 80065fa:	3000      	adds	r0, #0
 80065fc:	bf18      	it	ne
 80065fe:	2001      	movne	r0, #1
 8006600:	49ac      	ldr	r1, [pc, #688]	; (80068b4 <oslib_test_003_001_execute+0x314>)
 8006602:	f7fa f8ad 	bl	8000760 <_test_assert>
 8006606:	2800      	cmp	r0, #0
 8006608:	d1de      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 800660a:	4628      	mov	r0, r5
 800660c:	f7ff ff30 	bl	8006470 <chHeapFree>
  test_set_step(4);
 8006610:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8006612:	a903      	add	r1, sp, #12
 8006614:	aa02      	add	r2, sp, #8
 8006616:	48a4      	ldr	r0, [pc, #656]	; (80068a8 <oslib_test_003_001_execute+0x308>)
  test_set_step(4);
 8006618:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800661a:	f7ff feb9 	bl	8006390 <chHeapStatus>
 800661e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8006620:	f1a0 0001 	sub.w	r0, r0, #1
 8006624:	fab0 f080 	clz	r0, r0
 8006628:	0940      	lsrs	r0, r0, #5
 800662a:	49a3      	ldr	r1, [pc, #652]	; (80068b8 <oslib_test_003_001_execute+0x318>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 800662c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 800662e:	f7fa f897 	bl	8000760 <_test_assert>
 8006632:	2800      	cmp	r0, #0
 8006634:	d1c8      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8006636:	9803      	ldr	r0, [sp, #12]
 8006638:	49a0      	ldr	r1, [pc, #640]	; (80068bc <oslib_test_003_001_execute+0x31c>)
 800663a:	280f      	cmp	r0, #15
 800663c:	bf94      	ite	ls
 800663e:	2000      	movls	r0, #0
 8006640:	2001      	movhi	r0, #1
 8006642:	f7fa f88d 	bl	8000760 <_test_assert>
 8006646:	2800      	cmp	r0, #0
 8006648:	d1be      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 800664a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 800664e:	1ac0      	subs	r0, r0, r3
 8006650:	fab0 f080 	clz	r0, r0
 8006654:	4999      	ldr	r1, [pc, #612]	; (80068bc <oslib_test_003_001_execute+0x31c>)
 8006656:	0940      	lsrs	r0, r0, #5
 8006658:	f7fa f882 	bl	8000760 <_test_assert>
 800665c:	4605      	mov	r5, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d1b2      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(5);
 8006662:	2305      	movs	r3, #5
 8006664:	2110      	movs	r1, #16
 8006666:	4890      	ldr	r0, [pc, #576]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	f7ff f9f1 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 800666e:	2110      	movs	r1, #16
 8006670:	4680      	mov	r8, r0
 8006672:	488d      	ldr	r0, [pc, #564]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006674:	f7ff f9ec 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 8006678:	2110      	movs	r1, #16
 800667a:	4607      	mov	r7, r0
 800667c:	488a      	ldr	r0, [pc, #552]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 800667e:	f7ff f9e7 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 8006682:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8006684:	4640      	mov	r0, r8
 8006686:	f7ff fef3 	bl	8006470 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 800668a:	4638      	mov	r0, r7
 800668c:	f7ff fef0 	bl	8006470 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8006690:	4630      	mov	r0, r6
 8006692:	f7ff feed 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006696:	462a      	mov	r2, r5
 8006698:	a901      	add	r1, sp, #4
 800669a:	4883      	ldr	r0, [pc, #524]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 800669c:	f7ff fe78 	bl	8006390 <chHeapStatus>
 80066a0:	f1a0 0001 	sub.w	r0, r0, #1
 80066a4:	fab0 f080 	clz	r0, r0
 80066a8:	4980      	ldr	r1, [pc, #512]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 80066aa:	0940      	lsrs	r0, r0, #5
 80066ac:	f7fa f858 	bl	8000760 <_test_assert>
 80066b0:	4605      	mov	r5, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d188      	bne.n	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(6);
 80066b6:	2306      	movs	r3, #6
 80066b8:	2110      	movs	r1, #16
 80066ba:	487b      	ldr	r0, [pc, #492]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	f7ff f9c7 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 80066c2:	2110      	movs	r1, #16
 80066c4:	4606      	mov	r6, r0
 80066c6:	4878      	ldr	r0, [pc, #480]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80066c8:	f7ff f9c2 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 80066cc:	2110      	movs	r1, #16
 80066ce:	4607      	mov	r7, r0
 80066d0:	4875      	ldr	r0, [pc, #468]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80066d2:	f7ff f9bd 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    chHeapFree(p3);                                 /* Merges forward.*/
 80066d6:	f7ff fecb 	bl	8006470 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 80066da:	4638      	mov	r0, r7
 80066dc:	f7ff fec8 	bl	8006470 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff fec5 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80066e6:	462a      	mov	r2, r5
 80066e8:	a901      	add	r1, sp, #4
 80066ea:	486f      	ldr	r0, [pc, #444]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80066ec:	f7ff fe50 	bl	8006390 <chHeapStatus>
 80066f0:	1e43      	subs	r3, r0, #1
 80066f2:	4258      	negs	r0, r3
 80066f4:	496d      	ldr	r1, [pc, #436]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 80066f6:	4158      	adcs	r0, r3
 80066f8:	f7fa f832 	bl	8000760 <_test_assert>
 80066fc:	4605      	mov	r5, r0
 80066fe:	2800      	cmp	r0, #0
 8006700:	f47f af62 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(7);
 8006704:	2307      	movs	r3, #7
 8006706:	2111      	movs	r1, #17
 8006708:	4867      	ldr	r0, [pc, #412]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	f7ff f9a0 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 8006710:	2110      	movs	r1, #16
 8006712:	4606      	mov	r6, r0
 8006714:	4864      	ldr	r0, [pc, #400]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006716:	f7ff f99b 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 800671a:	4607      	mov	r7, r0
    chHeapFree(p1);
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff fea7 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8006722:	462a      	mov	r2, r5
 8006724:	a901      	add	r1, sp, #4
 8006726:	4860      	ldr	r0, [pc, #384]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006728:	f7ff fe32 	bl	8006390 <chHeapStatus>
 800672c:	f1a0 0802 	sub.w	r8, r0, #2
 8006730:	f1d8 0000 	rsbs	r0, r8, #0
 8006734:	4962      	ldr	r1, [pc, #392]	; (80068c0 <oslib_test_003_001_execute+0x320>)
 8006736:	eb40 0008 	adc.w	r0, r0, r8
 800673a:	f7fa f811 	bl	8000760 <_test_assert>
 800673e:	4605      	mov	r5, r0
 8006740:	2800      	cmp	r0, #0
 8006742:	f47f af41 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
 8006746:	2110      	movs	r1, #16
 8006748:	4857      	ldr	r0, [pc, #348]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 800674a:	f7ff f981 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800674e:	462a      	mov	r2, r5
 8006750:	4606      	mov	r6, r0
 8006752:	a901      	add	r1, sp, #4
 8006754:	4854      	ldr	r0, [pc, #336]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006756:	f7ff fe1b 	bl	8006390 <chHeapStatus>
 800675a:	2801      	cmp	r0, #1
 800675c:	f000 809f 	beq.w	800689e <oslib_test_003_001_execute+0x2fe>
 8006760:	2200      	movs	r2, #0
 8006762:	a901      	add	r1, sp, #4
 8006764:	4850      	ldr	r0, [pc, #320]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006766:	f7ff fe13 	bl	8006390 <chHeapStatus>
 800676a:	f1a0 0e02 	sub.w	lr, r0, #2
 800676e:	f1de 0000 	rsbs	r0, lr, #0
 8006772:	eb40 000e 	adc.w	r0, r0, lr
 8006776:	494d      	ldr	r1, [pc, #308]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 8006778:	f7f9 fff2 	bl	8000760 <_test_assert>
 800677c:	4605      	mov	r5, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	f47f af22 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p2);
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff fe73 	bl	8006470 <chHeapFree>
    chHeapFree(p1);
 800678a:	4630      	mov	r0, r6
 800678c:	f7ff fe70 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006790:	462a      	mov	r2, r5
 8006792:	a901      	add	r1, sp, #4
 8006794:	4844      	ldr	r0, [pc, #272]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006796:	f7ff fdfb 	bl	8006390 <chHeapStatus>
 800679a:	f100 3cff 	add.w	ip, r0, #4294967295
 800679e:	f1dc 0000 	rsbs	r0, ip, #0
 80067a2:	4942      	ldr	r1, [pc, #264]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 80067a4:	eb40 000c 	adc.w	r0, r0, ip
 80067a8:	f7f9 ffda 	bl	8000760 <_test_assert>
 80067ac:	4605      	mov	r5, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f47f af0a 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(8);
 80067b4:	2308      	movs	r3, #8
 80067b6:	2110      	movs	r1, #16
 80067b8:	483b      	ldr	r0, [pc, #236]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	f7ff f948 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 80067c0:	2110      	movs	r1, #16
 80067c2:	4607      	mov	r7, r0
 80067c4:	4838      	ldr	r0, [pc, #224]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80067c6:	f7ff f943 	bl	8005a50 <chHeapAllocAligned.constprop.31>
 80067ca:	4606      	mov	r6, r0
    chHeapFree(p1);
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff fe4f 	bl	8006470 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80067d2:	462a      	mov	r2, r5
 80067d4:	a901      	add	r1, sp, #4
 80067d6:	4834      	ldr	r0, [pc, #208]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80067d8:	f7ff fdda 	bl	8006390 <chHeapStatus>
 80067dc:	1e87      	subs	r7, r0, #2
 80067de:	4278      	negs	r0, r7
 80067e0:	4937      	ldr	r1, [pc, #220]	; (80068c0 <oslib_test_003_001_execute+0x320>)
 80067e2:	4178      	adcs	r0, r7
 80067e4:	f7f9 ffbc 	bl	8000760 <_test_assert>
 80067e8:	4605      	mov	r5, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f47f aeec 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
 80067f0:	2120      	movs	r1, #32
 80067f2:	482d      	ldr	r0, [pc, #180]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 80067f4:	f7ff f92c 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    chHeapFree(p1);
 80067f8:	f7ff fe3a 	bl	8006470 <chHeapFree>
    chHeapFree(p2);
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7ff fe37 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006802:	462a      	mov	r2, r5
 8006804:	a901      	add	r1, sp, #4
 8006806:	4828      	ldr	r0, [pc, #160]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006808:	f7ff fdc2 	bl	8006390 <chHeapStatus>
 800680c:	1e45      	subs	r5, r0, #1
 800680e:	4268      	negs	r0, r5
 8006810:	4926      	ldr	r1, [pc, #152]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 8006812:	4168      	adcs	r0, r5
 8006814:	f7f9 ffa4 	bl	8000760 <_test_assert>
 8006818:	4602      	mov	r2, r0
 800681a:	2800      	cmp	r0, #0
 800681c:	f47f aed4 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
  test_set_step(9);
 8006820:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006822:	a901      	add	r1, sp, #4
 8006824:	4820      	ldr	r0, [pc, #128]	; (80068a8 <oslib_test_003_001_execute+0x308>)
  test_set_step(9);
 8006826:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8006828:	f7ff fdb2 	bl	8006390 <chHeapStatus>
 800682c:	9901      	ldr	r1, [sp, #4]
 800682e:	481e      	ldr	r0, [pc, #120]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 8006830:	f7ff f90e 	bl	8005a50 <chHeapAllocAligned.constprop.31>
    test_assert(p1 != NULL, "allocation failed");
 8006834:	4606      	mov	r6, r0
 8006836:	3000      	adds	r0, #0
 8006838:	491e      	ldr	r1, [pc, #120]	; (80068b4 <oslib_test_003_001_execute+0x314>)
 800683a:	bf18      	it	ne
 800683c:	2001      	movne	r0, #1
 800683e:	f7f9 ff8f 	bl	8000760 <_test_assert>
 8006842:	4602      	mov	r2, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	f47f aebf 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800684a:	4601      	mov	r1, r0
 800684c:	4816      	ldr	r0, [pc, #88]	; (80068a8 <oslib_test_003_001_execute+0x308>)
 800684e:	f7ff fd9f 	bl	8006390 <chHeapStatus>
 8006852:	fab0 f080 	clz	r0, r0
 8006856:	0940      	lsrs	r0, r0, #5
 8006858:	491a      	ldr	r1, [pc, #104]	; (80068c4 <oslib_test_003_001_execute+0x324>)
 800685a:	f7f9 ff81 	bl	8000760 <_test_assert>
 800685e:	4605      	mov	r5, r0
 8006860:	2800      	cmp	r0, #0
 8006862:	f47f aeb1 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
    chHeapFree(p1);
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff fe02 	bl	8006470 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800686c:	462a      	mov	r2, r5
 800686e:	a901      	add	r1, sp, #4
  test_set_step(10);
 8006870:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006872:	480d      	ldr	r0, [pc, #52]	; (80068a8 <oslib_test_003_001_execute+0x308>)
  test_set_step(10);
 8006874:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8006876:	f7ff fd8b 	bl	8006390 <chHeapStatus>
 800687a:	1e42      	subs	r2, r0, #1
 800687c:	4250      	negs	r0, r2
 800687e:	4150      	adcs	r0, r2
 8006880:	490a      	ldr	r1, [pc, #40]	; (80068ac <oslib_test_003_001_execute+0x30c>)
 8006882:	f7f9 ff6d 	bl	8000760 <_test_assert>
 8006886:	2800      	cmp	r0, #0
 8006888:	f47f ae9e 	bne.w	80065c8 <oslib_test_003_001_execute+0x28>
    test_assert(n == sz, "size changed");
 800688c:	e9dd 3000 	ldrd	r3, r0, [sp]
 8006890:	1ac3      	subs	r3, r0, r3
 8006892:	4258      	negs	r0, r3
 8006894:	490c      	ldr	r1, [pc, #48]	; (80068c8 <oslib_test_003_001_execute+0x328>)
 8006896:	4158      	adcs	r0, r3
 8006898:	f7f9 ff62 	bl	8000760 <_test_assert>
 800689c:	e694      	b.n	80065c8 <oslib_test_003_001_execute+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800689e:	2001      	movs	r0, #1
 80068a0:	e769      	b.n	8006776 <oslib_test_003_001_execute+0x1d6>
 80068a2:	bf00      	nop
 80068a4:	20002354 	.word	0x20002354
 80068a8:	200022b4 	.word	0x200022b4
 80068ac:	0800bda8 	.word	0x0800bda8
 80068b0:	0800be28 	.word	0x0800be28
 80068b4:	0800be14 	.word	0x0800be14
 80068b8:	0800bdb8 	.word	0x0800bdb8
 80068bc:	0800bdcc 	.word	0x0800bdcc
 80068c0:	0800bde4 	.word	0x0800bde4
 80068c4:	0800bc5c 	.word	0x0800bc5c
 80068c8:	0800bdf4 	.word	0x0800bdf4
 80068cc:	00000000 	.word	0x00000000

080068d0 <dyn_release_object_heap>:
                                    dyn_list_t *dlp) {
 80068d0:	b508      	push	{r3, lr}
  chDbgCheck(dep != NULL);
 80068d2:	b190      	cbz	r0, 80068fa <dyn_release_object_heap+0x2a>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 80068d4:	6843      	ldr	r3, [r0, #4]
 80068d6:	b183      	cbz	r3, 80068fa <dyn_release_object_heap+0x2a>
  dep->refs--;
 80068d8:	3b01      	subs	r3, #1
 80068da:	6043      	str	r3, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 80068dc:	b963      	cbnz	r3, 80068f8 <dyn_release_object_heap+0x28>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80068de:	460a      	mov	r2, r1
 80068e0:	e002      	b.n	80068e8 <dyn_release_object_heap+0x18>
    if (prev->next == element) {
 80068e2:	4298      	cmp	r0, r3
 80068e4:	d00c      	beq.n	8006900 <dyn_release_object_heap+0x30>
 80068e6:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	4299      	cmp	r1, r3
 80068ec:	d1f9      	bne.n	80068e2 <dyn_release_object_heap+0x12>
  return NULL;
 80068ee:	2000      	movs	r0, #0
}
 80068f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chHeapFree((void *)dep);
 80068f4:	f7ff bdbc 	b.w	8006470 <chHeapFree>
}
 80068f8:	bd08      	pop	{r3, pc}
  chDbgCheck(dep != NULL);
 80068fa:	4804      	ldr	r0, [pc, #16]	; (800690c <dyn_release_object_heap+0x3c>)
 80068fc:	f7fa f8f0 	bl	8000ae0 <chSysHalt>
      prev->next = element->next;
 8006900:	6803      	ldr	r3, [r0, #0]
 8006902:	6013      	str	r3, [r2, #0]
}
 8006904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chHeapFree((void *)dep);
 8006908:	f7ff bdb2 	b.w	8006470 <chHeapFree>
 800690c:	0800b66c 	.word	0x0800b66c

08006910 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006910:	b538      	push	{r3, r4, r5, lr}

  F_LOCK();
 8006912:	4c07      	ldr	r4, [pc, #28]	; (8006930 <chFactoryReleaseObjectsFIFO+0x20>)
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8006914:	4605      	mov	r5, r0
  F_LOCK();
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff f87a 	bl	8005a10 <chMtxLock>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 800691c:	4628      	mov	r0, r5
 800691e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006922:	f7ff ffd5 	bl	80068d0 <dyn_release_object_heap>

  F_UNLOCK();
 8006926:	4620      	mov	r0, r4
}
 8006928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800692c:	f7fe bf40 	b.w	80057b0 <chMtxUnlock>
 8006930:	20001a38 	.word	0x20001a38
	...

08006940 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 8006942:	4c42      	ldr	r4, [pc, #264]	; (8006a4c <oslib_test_004_005_execute+0x10c>)
 8006944:	2501      	movs	r5, #1
 8006946:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8006948:	f7ff fa92 	bl	8005e70 <chFactoryFindObjectsFIFO.constprop.4>
    test_assert(dofp == NULL, "found");
 800694c:	fab0 f080 	clz	r0, r0
 8006950:	0940      	lsrs	r0, r0, #5
 8006952:	493f      	ldr	r1, [pc, #252]	; (8006a50 <oslib_test_004_005_execute+0x110>)
 8006954:	f7f9 ff04 	bl	8000760 <_test_assert>
 8006958:	b100      	cbz	r0, 800695c <oslib_test_004_005_execute+0x1c>
  test_set_step(6);
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
    test_assert(dofp == NULL, "found");
  }
}
 800695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800695c:	2302      	movs	r3, #2
 800695e:	6023      	str	r3, [r4, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8006960:	f7ff fa4e 	bl	8005e00 <chFactoryCreateObjectsFIFO.constprop.5>
    test_assert(dofp != NULL, "cannot create");
 8006964:	4606      	mov	r6, r0
 8006966:	3000      	adds	r0, #0
 8006968:	bf18      	it	ne
 800696a:	2001      	movne	r0, #1
 800696c:	4939      	ldr	r1, [pc, #228]	; (8006a54 <oslib_test_004_005_execute+0x114>)
 800696e:	f7f9 fef7 	bl	8000760 <_test_assert>
 8006972:	2800      	cmp	r0, #0
 8006974:	d1f1      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
  test_set_step(3);
 8006976:	2303      	movs	r3, #3
 8006978:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800697a:	f7ff fa41 	bl	8005e00 <chFactoryCreateObjectsFIFO.constprop.5>
    test_assert(dofp1 == NULL, "can create");
 800697e:	fab0 f080 	clz	r0, r0
 8006982:	0940      	lsrs	r0, r0, #5
 8006984:	4934      	ldr	r1, [pc, #208]	; (8006a58 <oslib_test_004_005_execute+0x118>)
 8006986:	f7f9 feeb 	bl	8000760 <_test_assert>
 800698a:	2800      	cmp	r0, #0
 800698c:	d1e5      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
  test_set_step(4);
 800698e:	2304      	movs	r3, #4
 8006990:	6023      	str	r3, [r4, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 8006992:	f7ff fa6d 	bl	8005e70 <chFactoryFindObjectsFIFO.constprop.4>
    test_assert(dofp1 != NULL, "not found");
 8006996:	4607      	mov	r7, r0
 8006998:	3000      	adds	r0, #0
 800699a:	bf18      	it	ne
 800699c:	2001      	movne	r0, #1
 800699e:	492f      	ldr	r1, [pc, #188]	; (8006a5c <oslib_test_004_005_execute+0x11c>)
 80069a0:	f7f9 fede 	bl	8000760 <_test_assert>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d1d8      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 80069a8:	1bf0      	subs	r0, r6, r7
 80069aa:	fab0 f080 	clz	r0, r0
 80069ae:	492c      	ldr	r1, [pc, #176]	; (8006a60 <oslib_test_004_005_execute+0x120>)
 80069b0:	0940      	lsrs	r0, r0, #5
 80069b2:	f7f9 fed5 	bl	8000760 <_test_assert>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d1cf      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4928      	ldr	r1, [pc, #160]	; (8006a60 <oslib_test_004_005_execute+0x120>)
 80069be:	f1a0 0002 	sub.w	r0, r0, #2
 80069c2:	fab0 f080 	clz	r0, r0
 80069c6:	0940      	lsrs	r0, r0, #5
 80069c8:	f7f9 feca 	bl	8000760 <_test_assert>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1c4      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
 80069d0:	687b      	ldr	r3, [r7, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 80069d2:	4923      	ldr	r1, [pc, #140]	; (8006a60 <oslib_test_004_005_execute+0x120>)
 80069d4:	442b      	add	r3, r5
 80069d6:	4628      	mov	r0, r5
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	f7f9 fec1 	bl	8000760 <_test_assert>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d1bb      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	491e      	ldr	r1, [pc, #120]	; (8006a60 <oslib_test_004_005_execute+0x120>)
 80069e6:	f1a0 0c03 	sub.w	ip, r0, #3
 80069ea:	f1dc 0000 	rsbs	r0, ip, #0
 80069ee:	eb40 000c 	adc.w	r0, r0, ip
 80069f2:	f7f9 feb5 	bl	8000760 <_test_assert>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d1af      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp2);
 80069fa:	4638      	mov	r0, r7
 80069fc:	f7ff ff88 	bl	8006910 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4918      	ldr	r1, [pc, #96]	; (8006a64 <oslib_test_004_005_execute+0x124>)
 8006a04:	1e82      	subs	r2, r0, #2
 8006a06:	4250      	negs	r0, r2
 8006a08:	4150      	adcs	r0, r2
 8006a0a:	f7f9 fea9 	bl	8000760 <_test_assert>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1a3      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp1);
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff ff7c 	bl	8006910 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8006a18:	6870      	ldr	r0, [r6, #4]
 8006a1a:	4912      	ldr	r1, [pc, #72]	; (8006a64 <oslib_test_004_005_execute+0x124>)
 8006a1c:	1b43      	subs	r3, r0, r5
 8006a1e:	4258      	negs	r0, r3
 8006a20:	4158      	adcs	r0, r3
 8006a22:	f7f9 fe9d 	bl	8000760 <_test_assert>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d197      	bne.n	800695a <oslib_test_004_005_execute+0x1a>
    chFactoryReleaseObjectsFIFO(dofp);
 8006a2a:	4630      	mov	r0, r6
  test_set_step(5);
 8006a2c:	2305      	movs	r3, #5
 8006a2e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 8006a30:	f7ff ff6e 	bl	8006910 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 8006a34:	2306      	movs	r3, #6
 8006a36:	6023      	str	r3, [r4, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8006a38:	f7ff fa1a 	bl	8005e70 <chFactoryFindObjectsFIFO.constprop.4>
    test_assert(dofp == NULL, "found");
 8006a3c:	fab0 f080 	clz	r0, r0
 8006a40:	0940      	lsrs	r0, r0, #5
 8006a42:	4903      	ldr	r1, [pc, #12]	; (8006a50 <oslib_test_004_005_execute+0x110>)
}
 8006a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8006a48:	f7f9 be8a 	b.w	8000760 <_test_assert>
 8006a4c:	20002354 	.word	0x20002354
 8006a50:	0800bec0 	.word	0x0800bec0
 8006a54:	0800bea0 	.word	0x0800bea0
 8006a58:	0800beb0 	.word	0x0800beb0
 8006a5c:	0800bebc 	.word	0x0800bebc
 8006a60:	0800bec8 	.word	0x0800bec8
 8006a64:	0800bee4 	.word	0x0800bee4
	...

08006a70 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
 8006a70:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8006a72:	f7ff f9fd 	bl	8005e70 <chFactoryFindObjectsFIFO.constprop.4>
  if (dofp != NULL) {
 8006a76:	b140      	cbz	r0, 8006a8a <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 8006a78:	6843      	ldr	r3, [r0, #4]
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b12b      	cbz	r3, 8006a8a <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ff46 	bl	8006910 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f9      	bne.n	8006a7e <oslib_test_004_005_teardown+0xe>
}
 8006a8a:	bd10      	pop	{r4, pc}
 8006a8c:	0000      	movs	r0, r0
	...

08006a90 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006a90:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006a92:	4c07      	ldr	r4, [pc, #28]	; (8006ab0 <chFactoryReleaseMailbox+0x20>)
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8006a94:	4605      	mov	r5, r0
  F_LOCK();
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7fe ffba 	bl	8005a10 <chMtxLock>
  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8006aa2:	f7ff ff15 	bl	80068d0 <dyn_release_object_heap>
  F_UNLOCK();
 8006aa6:	4620      	mov	r0, r4
}
 8006aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006aac:	f7fe be80 	b.w	80057b0 <chMtxUnlock>
 8006ab0:	20001a38 	.word	0x20001a38
	...

08006ac0 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006ac2:	4c42      	ldr	r4, [pc, #264]	; (8006bcc <oslib_test_004_004_execute+0x10c>)
 8006ac4:	2501      	movs	r5, #1
 8006ac6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006ac8:	f7ff f982 	bl	8005dd0 <chFactoryFindMailbox.constprop.6>
    test_assert(dmp == NULL, "found");
 8006acc:	fab0 f080 	clz	r0, r0
 8006ad0:	0940      	lsrs	r0, r0, #5
 8006ad2:	493f      	ldr	r1, [pc, #252]	; (8006bd0 <oslib_test_004_004_execute+0x110>)
 8006ad4:	f7f9 fe44 	bl	8000760 <_test_assert>
 8006ad8:	b100      	cbz	r0, 8006adc <oslib_test_004_004_execute+0x1c>
}
 8006ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006adc:	2302      	movs	r3, #2
 8006ade:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8006ae0:	f7ff f946 	bl	8005d70 <chFactoryCreateMailbox.constprop.7>
    test_assert(dmp != NULL, "cannot create");
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	3000      	adds	r0, #0
 8006ae8:	bf18      	it	ne
 8006aea:	2001      	movne	r0, #1
 8006aec:	4939      	ldr	r1, [pc, #228]	; (8006bd4 <oslib_test_004_004_execute+0x114>)
 8006aee:	f7f9 fe37 	bl	8000760 <_test_assert>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d1f1      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
 8006af6:	2303      	movs	r3, #3
 8006af8:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 8006afa:	f7ff f939 	bl	8005d70 <chFactoryCreateMailbox.constprop.7>
    test_assert(dmp1 == NULL, "can create");
 8006afe:	fab0 f080 	clz	r0, r0
 8006b02:	0940      	lsrs	r0, r0, #5
 8006b04:	4934      	ldr	r1, [pc, #208]	; (8006bd8 <oslib_test_004_004_execute+0x118>)
 8006b06:	f7f9 fe2b 	bl	8000760 <_test_assert>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d1e5      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
 8006b0e:	2304      	movs	r3, #4
 8006b10:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8006b12:	f7ff f95d 	bl	8005dd0 <chFactoryFindMailbox.constprop.6>
    test_assert(dmp1 != NULL, "not found");
 8006b16:	4607      	mov	r7, r0
 8006b18:	3000      	adds	r0, #0
 8006b1a:	bf18      	it	ne
 8006b1c:	2001      	movne	r0, #1
 8006b1e:	492f      	ldr	r1, [pc, #188]	; (8006bdc <oslib_test_004_004_execute+0x11c>)
 8006b20:	f7f9 fe1e 	bl	8000760 <_test_assert>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1d8      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8006b28:	1bf0      	subs	r0, r6, r7
 8006b2a:	fab0 f080 	clz	r0, r0
 8006b2e:	492c      	ldr	r1, [pc, #176]	; (8006be0 <oslib_test_004_004_execute+0x120>)
 8006b30:	0940      	lsrs	r0, r0, #5
 8006b32:	f7f9 fe15 	bl	8000760 <_test_assert>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d1cf      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4928      	ldr	r1, [pc, #160]	; (8006be0 <oslib_test_004_004_execute+0x120>)
 8006b3e:	f1a0 0002 	sub.w	r0, r0, #2
 8006b42:	fab0 f080 	clz	r0, r0
 8006b46:	0940      	lsrs	r0, r0, #5
 8006b48:	f7f9 fe0a 	bl	8000760 <_test_assert>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d1c4      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
 8006b50:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8006b52:	4923      	ldr	r1, [pc, #140]	; (8006be0 <oslib_test_004_004_execute+0x120>)
 8006b54:	442b      	add	r3, r5
 8006b56:	4628      	mov	r0, r5
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	f7f9 fe01 	bl	8000760 <_test_assert>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d1bb      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	491e      	ldr	r1, [pc, #120]	; (8006be0 <oslib_test_004_004_execute+0x120>)
 8006b66:	f1a0 0c03 	sub.w	ip, r0, #3
 8006b6a:	f1dc 0000 	rsbs	r0, ip, #0
 8006b6e:	eb40 000c 	adc.w	r0, r0, ip
 8006b72:	f7f9 fdf5 	bl	8000760 <_test_assert>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d1af      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	f7ff ff88 	bl	8006a90 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4918      	ldr	r1, [pc, #96]	; (8006be4 <oslib_test_004_004_execute+0x124>)
 8006b84:	1e82      	subs	r2, r0, #2
 8006b86:	4250      	negs	r0, r2
 8006b88:	4150      	adcs	r0, r2
 8006b8a:	f7f9 fde9 	bl	8000760 <_test_assert>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d1a3      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 8006b92:	4638      	mov	r0, r7
 8006b94:	f7ff ff7c 	bl	8006a90 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8006b98:	6870      	ldr	r0, [r6, #4]
 8006b9a:	4912      	ldr	r1, [pc, #72]	; (8006be4 <oslib_test_004_004_execute+0x124>)
 8006b9c:	1b43      	subs	r3, r0, r5
 8006b9e:	4258      	negs	r0, r3
 8006ba0:	4158      	adcs	r0, r3
 8006ba2:	f7f9 fddd 	bl	8000760 <_test_assert>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d197      	bne.n	8006ada <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 8006baa:	4630      	mov	r0, r6
  test_set_step(5);
 8006bac:	2305      	movs	r3, #5
 8006bae:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 8006bb0:	f7ff ff6e 	bl	8006a90 <chFactoryReleaseMailbox>
  test_set_step(6);
 8006bb4:	2306      	movs	r3, #6
 8006bb6:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8006bb8:	f7ff f90a 	bl	8005dd0 <chFactoryFindMailbox.constprop.6>
    test_assert(dmp == NULL, "found");
 8006bbc:	fab0 f080 	clz	r0, r0
 8006bc0:	0940      	lsrs	r0, r0, #5
 8006bc2:	4903      	ldr	r1, [pc, #12]	; (8006bd0 <oslib_test_004_004_execute+0x110>)
}
 8006bc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 8006bc8:	f7f9 bdca 	b.w	8000760 <_test_assert>
 8006bcc:	20002354 	.word	0x20002354
 8006bd0:	0800bec0 	.word	0x0800bec0
 8006bd4:	0800bea0 	.word	0x0800bea0
 8006bd8:	0800beb0 	.word	0x0800beb0
 8006bdc:	0800bebc 	.word	0x0800bebc
 8006be0:	0800bec8 	.word	0x0800bec8
 8006be4:	0800bee4 	.word	0x0800bee4
	...

08006bf0 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
 8006bf0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8006bf2:	f7ff f8ed 	bl	8005dd0 <chFactoryFindMailbox.constprop.6>
  if (dmp != NULL) {
 8006bf6:	b140      	cbz	r0, 8006c0a <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 8006bf8:	6843      	ldr	r3, [r0, #4]
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	b12b      	cbz	r3, 8006c0a <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff ff46 	bl	8006a90 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f9      	bne.n	8006bfe <oslib_test_004_004_teardown+0xe>
}
 8006c0a:	bd10      	pop	{r4, pc}
 8006c0c:	0000      	movs	r0, r0
	...

08006c10 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006c10:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006c12:	4c07      	ldr	r4, [pc, #28]	; (8006c30 <chFactoryReleaseBuffer+0x20>)
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8006c14:	4605      	mov	r5, r0
  F_LOCK();
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7fe fefa 	bl	8005a10 <chMtxLock>
  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006c22:	f7ff fe55 	bl	80068d0 <dyn_release_object_heap>
  F_UNLOCK();
 8006c26:	4620      	mov	r0, r4
}
 8006c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8006c2c:	f7fe bdc0 	b.w	80057b0 <chMtxUnlock>
 8006c30:	20001a38 	.word	0x20001a38
	...

08006c40 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006c42:	4c42      	ldr	r4, [pc, #264]	; (8006d4c <oslib_test_004_002_execute+0x10c>)
 8006c44:	2501      	movs	r5, #1
 8006c46:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006c48:	f7ff f842 	bl	8005cd0 <chFactoryFindBuffer.constprop.10>
    test_assert(dbp == NULL, "found");
 8006c4c:	fab0 f080 	clz	r0, r0
 8006c50:	0940      	lsrs	r0, r0, #5
 8006c52:	493f      	ldr	r1, [pc, #252]	; (8006d50 <oslib_test_004_002_execute+0x110>)
 8006c54:	f7f9 fd84 	bl	8000760 <_test_assert>
 8006c58:	b100      	cbz	r0, 8006c5c <oslib_test_004_002_execute+0x1c>
}
 8006c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8006c60:	f7ff f816 	bl	8005c90 <chFactoryCreateBuffer.constprop.11>
    test_assert(dbp != NULL, "cannot create");
 8006c64:	4606      	mov	r6, r0
 8006c66:	3000      	adds	r0, #0
 8006c68:	bf18      	it	ne
 8006c6a:	2001      	movne	r0, #1
 8006c6c:	4939      	ldr	r1, [pc, #228]	; (8006d54 <oslib_test_004_002_execute+0x114>)
 8006c6e:	f7f9 fd77 	bl	8000760 <_test_assert>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1f1      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
 8006c76:	2303      	movs	r3, #3
 8006c78:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8006c7a:	f7ff f809 	bl	8005c90 <chFactoryCreateBuffer.constprop.11>
    test_assert(dbp1 == NULL, "can create");
 8006c7e:	fab0 f080 	clz	r0, r0
 8006c82:	0940      	lsrs	r0, r0, #5
 8006c84:	4934      	ldr	r1, [pc, #208]	; (8006d58 <oslib_test_004_002_execute+0x118>)
 8006c86:	f7f9 fd6b 	bl	8000760 <_test_assert>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d1e5      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
 8006c8e:	2304      	movs	r3, #4
 8006c90:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8006c92:	f7ff f81d 	bl	8005cd0 <chFactoryFindBuffer.constprop.10>
    test_assert(dbp1 != NULL, "not found");
 8006c96:	4607      	mov	r7, r0
 8006c98:	3000      	adds	r0, #0
 8006c9a:	bf18      	it	ne
 8006c9c:	2001      	movne	r0, #1
 8006c9e:	492f      	ldr	r1, [pc, #188]	; (8006d5c <oslib_test_004_002_execute+0x11c>)
 8006ca0:	f7f9 fd5e 	bl	8000760 <_test_assert>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d1d8      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 8006ca8:	1bf0      	subs	r0, r6, r7
 8006caa:	fab0 f080 	clz	r0, r0
 8006cae:	492c      	ldr	r1, [pc, #176]	; (8006d60 <oslib_test_004_002_execute+0x120>)
 8006cb0:	0940      	lsrs	r0, r0, #5
 8006cb2:	f7f9 fd55 	bl	8000760 <_test_assert>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d1cf      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4928      	ldr	r1, [pc, #160]	; (8006d60 <oslib_test_004_002_execute+0x120>)
 8006cbe:	f1a0 0002 	sub.w	r0, r0, #2
 8006cc2:	fab0 f080 	clz	r0, r0
 8006cc6:	0940      	lsrs	r0, r0, #5
 8006cc8:	f7f9 fd4a 	bl	8000760 <_test_assert>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d1c4      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8006cd2:	4923      	ldr	r1, [pc, #140]	; (8006d60 <oslib_test_004_002_execute+0x120>)
 8006cd4:	442b      	add	r3, r5
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	607b      	str	r3, [r7, #4]
 8006cda:	f7f9 fd41 	bl	8000760 <_test_assert>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1bb      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	491e      	ldr	r1, [pc, #120]	; (8006d60 <oslib_test_004_002_execute+0x120>)
 8006ce6:	f1a0 0c03 	sub.w	ip, r0, #3
 8006cea:	f1dc 0000 	rsbs	r0, ip, #0
 8006cee:	eb40 000c 	adc.w	r0, r0, ip
 8006cf2:	f7f9 fd35 	bl	8000760 <_test_assert>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d1af      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f7ff ff88 	bl	8006c10 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4918      	ldr	r1, [pc, #96]	; (8006d64 <oslib_test_004_002_execute+0x124>)
 8006d04:	1e82      	subs	r2, r0, #2
 8006d06:	4250      	negs	r0, r2
 8006d08:	4150      	adcs	r0, r2
 8006d0a:	f7f9 fd29 	bl	8000760 <_test_assert>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1a3      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff7c 	bl	8006c10 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8006d18:	6870      	ldr	r0, [r6, #4]
 8006d1a:	4912      	ldr	r1, [pc, #72]	; (8006d64 <oslib_test_004_002_execute+0x124>)
 8006d1c:	1b43      	subs	r3, r0, r5
 8006d1e:	4258      	negs	r0, r3
 8006d20:	4158      	adcs	r0, r3
 8006d22:	f7f9 fd1d 	bl	8000760 <_test_assert>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d197      	bne.n	8006c5a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 8006d2a:	4630      	mov	r0, r6
  test_set_step(5);
 8006d2c:	2305      	movs	r3, #5
 8006d2e:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 8006d30:	f7ff ff6e 	bl	8006c10 <chFactoryReleaseBuffer>
  test_set_step(6);
 8006d34:	2306      	movs	r3, #6
 8006d36:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8006d38:	f7fe ffca 	bl	8005cd0 <chFactoryFindBuffer.constprop.10>
    test_assert(dbp == NULL, "found");
 8006d3c:	fab0 f080 	clz	r0, r0
 8006d40:	0940      	lsrs	r0, r0, #5
 8006d42:	4903      	ldr	r1, [pc, #12]	; (8006d50 <oslib_test_004_002_execute+0x110>)
}
 8006d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8006d48:	f7f9 bd0a 	b.w	8000760 <_test_assert>
 8006d4c:	20002354 	.word	0x20002354
 8006d50:	0800bec0 	.word	0x0800bec0
 8006d54:	0800bea0 	.word	0x0800bea0
 8006d58:	0800beb0 	.word	0x0800beb0
 8006d5c:	0800bebc 	.word	0x0800bebc
 8006d60:	0800bec8 	.word	0x0800bec8
 8006d64:	0800bee4 	.word	0x0800bee4
	...

08006d70 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
 8006d70:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8006d72:	f7fe ffad 	bl	8005cd0 <chFactoryFindBuffer.constprop.10>
  if (dbp != NULL) {
 8006d76:	b140      	cbz	r0, 8006d8a <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 8006d78:	6843      	ldr	r3, [r0, #4]
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	b12b      	cbz	r3, 8006d8a <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff46 	bl	8006c10 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8006d84:	6863      	ldr	r3, [r4, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f9      	bne.n	8006d7e <oslib_test_004_002_teardown+0xe>
}
 8006d8a:	bd10      	pop	{r4, pc}
 8006d8c:	0000      	movs	r0, r0
	...

08006d90 <chSemSignal>:
void chSemSignal(semaphore_t *sp) {
 8006d90:	b510      	push	{r4, lr}
 8006d92:	2320      	movs	r3, #32
 8006d94:	4604      	mov	r4, r0
 8006d96:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006d9a:	f7fc fc09 	bl	80035b0 <_dbg_check_lock>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	db04      	blt.n	8006db0 <chSemSignal+0x20>
 8006da6:	42a0      	cmp	r0, r4
 8006da8:	d004      	beq.n	8006db4 <chSemSignal+0x24>
 8006daa:	4811      	ldr	r0, [pc, #68]	; (8006df0 <chSemSignal+0x60>)
 8006dac:	f7f9 fe98 	bl	8000ae0 <chSysHalt>
 8006db0:	42a0      	cmp	r0, r4
 8006db2:	d0fa      	beq.n	8006daa <chSemSignal+0x1a>
  if (++sp->cnt <= (cnt_t)0) {
 8006db4:	3301      	adds	r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	dd11      	ble.n	8006de0 <chSemSignal+0x50>
  _dbg_check_unlock();
 8006dbc:	f7fc fb90 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <chSemSignal+0x64>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d004      	beq.n	8006dd2 <chSemSignal+0x42>
 8006dc8:	6999      	ldr	r1, [r3, #24]
 8006dca:	6893      	ldr	r3, [r2, #8]
 8006dcc:	688a      	ldr	r2, [r1, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d303      	bcc.n	8006dda <chSemSignal+0x4a>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f383 8811 	msr	BASEPRI, r3
}
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	4807      	ldr	r0, [pc, #28]	; (8006df8 <chSemSignal+0x68>)
 8006ddc:	f7f9 fe80 	bl	8000ae0 <chSysHalt>
  tqp->next             = tp->queue.next;
 8006de0:	6803      	ldr	r3, [r0, #0]
 8006de2:	6023      	str	r3, [r4, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8006de4:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8006de6:	605c      	str	r4, [r3, #4]
 8006de8:	f7fc f932 	bl	8003050 <chSchWakeupS>
 8006dec:	e7e6      	b.n	8006dbc <chSemSignal+0x2c>
 8006dee:	bf00      	nop
 8006df0:	0800b540 	.word	0x0800b540
 8006df4:	200011b0 	.word	0x200011b0
 8006df8:	0800b2b0 	.word	0x0800b2b0
 8006dfc:	00000000 	.word	0x00000000

08006e00 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	2320      	movs	r3, #32
 8006e06:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006e0a:	f7fc fbd1 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassS();
 8006e0e:	f7f9 fe97 	bl	8000b40 <chDbgCheckClassS>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	db04      	blt.n	8006e24 <chSemWait+0x24>
 8006e1a:	42a2      	cmp	r2, r4
 8006e1c:	d004      	beq.n	8006e28 <chSemWait+0x28>
 8006e1e:	4815      	ldr	r0, [pc, #84]	; (8006e74 <chSemWait+0x74>)
 8006e20:	f7f9 fe5e 	bl	8000ae0 <chSysHalt>
 8006e24:	42a2      	cmp	r2, r4
 8006e26:	d0fa      	beq.n	8006e1e <chSemWait+0x1e>
  if (--sp->cnt < (cnt_t)0) {
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	60a3      	str	r3, [r4, #8]
    currp->u.wtsemp = sp;
 8006e2e:	4d12      	ldr	r5, [pc, #72]	; (8006e78 <chSemWait+0x78>)
  if (--sp->cnt < (cnt_t)0) {
 8006e30:	db12      	blt.n	8006e58 <chSemWait+0x58>
  return MSG_OK;
 8006e32:	2400      	movs	r4, #0
  _dbg_check_unlock();
 8006e34:	f7fc fb54 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	42ab      	cmp	r3, r5
 8006e3c:	d004      	beq.n	8006e48 <chSemWait+0x48>
 8006e3e:	69aa      	ldr	r2, [r5, #24]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	6892      	ldr	r2, [r2, #8]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d304      	bcc.n	8006e52 <chSemWait+0x52>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f383 8811 	msr	BASEPRI, r3
}
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	480a      	ldr	r0, [pc, #40]	; (8006e7c <chSemWait+0x7c>)
 8006e54:	f7f9 fe44 	bl	8000ae0 <chSysHalt>
    currp->u.wtsemp = sp;
 8006e58:	69ab      	ldr	r3, [r5, #24]
 8006e5a:	625c      	str	r4, [r3, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8006e5c:	6862      	ldr	r2, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8006e5e:	2005      	movs	r0, #5
 8006e60:	e9c3 4200 	strd	r4, r2, [r3]
  tp->queue.prev->queue.next = tp;
 8006e64:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8006e66:	6063      	str	r3, [r4, #4]
 8006e68:	f7fc f932 	bl	80030d0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8006e6c:	69ab      	ldr	r3, [r5, #24]
 8006e6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006e70:	e7e0      	b.n	8006e34 <chSemWait+0x34>
 8006e72:	bf00      	nop
 8006e74:	0800b4b8 	.word	0x0800b4b8
 8006e78:	200011b0 	.word	0x200011b0
 8006e7c:	0800b2b0 	.word	0x0800b2b0

08006e80 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4c08      	ldr	r4, [pc, #32]	; (8006ea4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8006e84:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8006e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e8a:	075a      	lsls	r2, r3, #29
 8006e8c:	d408      	bmi.n	8006ea0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 8006e8e:	4d06      	ldr	r5, [pc, #24]	; (8006ea8 <bmk_thread7+0x28>)
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7ff ffb5 	bl	8006e00 <chSemWait>
 8006e96:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 8006e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e9c:	075b      	lsls	r3, r3, #29
 8006e9e:	d5f7      	bpl.n	8006e90 <bmk_thread7+0x10>
}
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200011b0 	.word	0x200011b0
 8006ea8:	20001c2c 	.word	0x20001c2c
 8006eac:	00000000 	.word	0x00000000

08006eb0 <thread3>:
static THD_FUNCTION(thread3, p) {
 8006eb0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8006eb2:	4c04      	ldr	r4, [pc, #16]	; (8006ec4 <thread3+0x14>)
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7ff ffa3 	bl	8006e00 <chSemWait>
  chSemSignal(&sem1);
 8006eba:	4620      	mov	r0, r4
}
 8006ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8006ec0:	f7ff bf66 	b.w	8006d90 <chSemSignal>
 8006ec4:	20001c20 	.word	0x20001c20
	...

08006ed0 <thread1.lto_priv.180>:
static THD_FUNCTION(thread1, p) {
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8006ed4:	4803      	ldr	r0, [pc, #12]	; (8006ee4 <thread1.lto_priv.180+0x14>)
 8006ed6:	f7ff ff93 	bl	8006e00 <chSemWait>
  test_emit_token(*(char *)p);
 8006eda:	7820      	ldrb	r0, [r4, #0]
}
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8006ee0:	f7fd b9b6 	b.w	8004250 <test_emit_token>
 8006ee4:	20001c20 	.word	0x20001c20
	...

08006ef0 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460e      	mov	r6, r1
 8006ef8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006efc:	f7fc fb58 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8006f00:	f7f9 fe2e 	bl	8000b60 <chDbgCheckClassI>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8006f04:	68a5      	ldr	r5, [r4, #8]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	db04      	blt.n	8006f16 <chSemReset+0x26>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d004      	beq.n	8006f1a <chSemReset+0x2a>
 8006f10:	4814      	ldr	r0, [pc, #80]	; (8006f64 <chSemReset+0x74>)
 8006f12:	f7f9 fde5 	bl	8000ae0 <chSysHalt>
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	d0fa      	beq.n	8006f10 <chSemReset+0x20>
  while (++cnt <= (cnt_t)0) {
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	2d00      	cmp	r5, #0
  sp->cnt = n;
 8006f1e:	60a6      	str	r6, [r4, #8]
  while (++cnt <= (cnt_t)0) {
 8006f20:	dc0b      	bgt.n	8006f3a <chSemReset+0x4a>
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8006f22:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8006f26:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 8006f28:	6843      	ldr	r3, [r0, #4]
 8006f2a:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8006f2c:	601c      	str	r4, [r3, #0]
 8006f2e:	f7f9 fec7 	bl	8000cc0 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8006f32:	3501      	adds	r5, #1
 8006f34:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8006f36:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 8006f38:	d1f5      	bne.n	8006f26 <chSemReset+0x36>
  chSchRescheduleS();
 8006f3a:	f7fc fab9 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8006f3e:	f7fc facf 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <chSemReset+0x78>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d004      	beq.n	8006f54 <chSemReset+0x64>
 8006f4a:	6999      	ldr	r1, [r3, #24]
 8006f4c:	6893      	ldr	r3, [r2, #8]
 8006f4e:	688a      	ldr	r2, [r1, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d303      	bcc.n	8006f5c <chSemReset+0x6c>
 8006f54:	2300      	movs	r3, #0
 8006f56:	f383 8811 	msr	BASEPRI, r3
}
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	4803      	ldr	r0, [pc, #12]	; (8006f6c <chSemReset+0x7c>)
 8006f5e:	f7f9 fdbf 	bl	8000ae0 <chSysHalt>
 8006f62:	bf00      	nop
 8006f64:	0800b42c 	.word	0x0800b42c
 8006f68:	200011b0 	.word	0x200011b0
 8006f6c:	0800b2b0 	.word	0x0800b2b0

08006f70 <rt_test_005_001_execute>:
static void rt_test_005_001_execute(void) {
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    msg = chSemWait(&sem1);
 8006f72:	4c41      	ldr	r4, [pc, #260]	; (8007078 <rt_test_005_001_execute+0x108>)
  test_set_step(1);
 8006f74:	4e41      	ldr	r6, [pc, #260]	; (800707c <rt_test_005_001_execute+0x10c>)
 8006f76:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 8006f78:	4620      	mov	r0, r4
  test_set_step(1);
 8006f7a:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 8006f7c:	f7ff ff40 	bl	8006e00 <chSemWait>
 8006f80:	2320      	movs	r3, #32
 8006f82:	4607      	mov	r7, r0
 8006f84:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006f88:	f7fc fb12 	bl	80035b0 <_dbg_check_lock>
 *
 * @iclass
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();
 8006f8c:	f7f9 fde8 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 8006f90:	68a0      	ldr	r0, [r4, #8]
 8006f92:	493b      	ldr	r1, [pc, #236]	; (8007080 <rt_test_005_001_execute+0x110>)
 8006f94:	fab0 f080 	clz	r0, r0
 8006f98:	0940      	lsrs	r0, r0, #5
 8006f9a:	f7f9 fbe1 	bl	8000760 <_test_assert>
 8006f9e:	b9a8      	cbnz	r0, 8006fcc <rt_test_005_001_execute+0x5c>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006fa0:	4d38      	ldr	r5, [pc, #224]	; (8007084 <rt_test_005_001_execute+0x114>)
  _dbg_check_unlock();
 8006fa2:	f7fc fa9d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	d004      	beq.n	8006fb6 <rt_test_005_001_execute+0x46>
 8006fac:	69aa      	ldr	r2, [r5, #24]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6892      	ldr	r2, [r2, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d35c      	bcc.n	8007070 <rt_test_005_001_execute+0x100>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f383 8811 	msr	BASEPRI, r3
    test_assert(MSG_OK == msg, "wrong returned message");
 8006fbc:	fab7 f087 	clz	r0, r7
 8006fc0:	0940      	lsrs	r0, r0, #5
 8006fc2:	4931      	ldr	r1, [pc, #196]	; (8007088 <rt_test_005_001_execute+0x118>)
 8006fc4:	f7f9 fbcc 	bl	8000760 <_test_assert>
 8006fc8:	b178      	cbz	r0, 8006fea <rt_test_005_001_execute+0x7a>
}
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _dbg_check_unlock();
 8006fcc:	f7fc fa88 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006fd0:	4b2c      	ldr	r3, [pc, #176]	; (8007084 <rt_test_005_001_execute+0x114>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d004      	beq.n	8006fe2 <rt_test_005_001_execute+0x72>
 8006fd8:	6999      	ldr	r1, [r3, #24]
 8006fda:	6893      	ldr	r3, [r2, #8]
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d346      	bcc.n	8007070 <rt_test_005_001_execute+0x100>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006fea:	2302      	movs	r3, #2
    chSemSignal(&sem1);
 8006fec:	4822      	ldr	r0, [pc, #136]	; (8007078 <rt_test_005_001_execute+0x108>)
  test_set_step(2);
 8006fee:	6033      	str	r3, [r6, #0]
    chSemSignal(&sem1);
 8006ff0:	f7ff fece 	bl	8006d90 <chSemSignal>
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006ffa:	f7fc fad9 	bl	80035b0 <_dbg_check_lock>
 8006ffe:	f7f9 fdaf 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 8007002:	68a0      	ldr	r0, [r4, #8]
 8007004:	491e      	ldr	r1, [pc, #120]	; (8007080 <rt_test_005_001_execute+0x110>)
 8007006:	f1a0 0001 	sub.w	r0, r0, #1
 800700a:	fab0 f080 	clz	r0, r0
 800700e:	0940      	lsrs	r0, r0, #5
 8007010:	f7f9 fba6 	bl	8000760 <_test_assert>
 8007014:	bb10      	cbnz	r0, 800705c <rt_test_005_001_execute+0xec>
  _dbg_check_unlock();
 8007016:	f7fc fa63 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	42ab      	cmp	r3, r5
 800701e:	d004      	beq.n	800702a <rt_test_005_001_execute+0xba>
 8007020:	69aa      	ldr	r2, [r5, #24]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	6892      	ldr	r2, [r2, #8]
 8007026:	429a      	cmp	r2, r3
 8007028:	d322      	bcc.n	8007070 <rt_test_005_001_execute+0x100>
 800702a:	2300      	movs	r3, #0
 800702c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8007030:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 8007032:	2102      	movs	r1, #2
 8007034:	4810      	ldr	r0, [pc, #64]	; (8007078 <rt_test_005_001_execute+0x108>)
  test_set_step(3);
 8007036:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8007038:	f7ff ff5a 	bl	8006ef0 <chSemReset>
 800703c:	2320      	movs	r3, #32
 800703e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007042:	f7fc fab5 	bl	80035b0 <_dbg_check_lock>
 8007046:	f7f9 fd8b 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 800704a:	68a0      	ldr	r0, [r4, #8]
 800704c:	490c      	ldr	r1, [pc, #48]	; (8007080 <rt_test_005_001_execute+0x110>)
 800704e:	f1a0 0002 	sub.w	r0, r0, #2
 8007052:	fab0 f080 	clz	r0, r0
 8007056:	0940      	lsrs	r0, r0, #5
 8007058:	f7f9 fb82 	bl	8000760 <_test_assert>
  _dbg_check_unlock();
 800705c:	f7fc fa40 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	42ab      	cmp	r3, r5
 8007064:	d0bd      	beq.n	8006fe2 <rt_test_005_001_execute+0x72>
 8007066:	69aa      	ldr	r2, [r5, #24]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	6892      	ldr	r2, [r2, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	d2b8      	bcs.n	8006fe2 <rt_test_005_001_execute+0x72>
 8007070:	4806      	ldr	r0, [pc, #24]	; (800708c <rt_test_005_001_execute+0x11c>)
 8007072:	f7f9 fd35 	bl	8000ae0 <chSysHalt>
 8007076:	bf00      	nop
 8007078:	20001c20 	.word	0x20001c20
 800707c:	20002354 	.word	0x20002354
 8007080:	0800cc60 	.word	0x0800cc60
 8007084:	200011b0 	.word	0x200011b0
 8007088:	0800cc74 	.word	0x0800cc74
 800708c:	0800b358 	.word	0x0800b358

08007090 <rt_test_005_001_teardown>:
  chSemReset(&sem1, 0);
 8007090:	2100      	movs	r1, #0
 8007092:	4801      	ldr	r0, [pc, #4]	; (8007098 <rt_test_005_001_teardown+0x8>)
 8007094:	f7ff bf2c 	b.w	8006ef0 <chSemReset>
 8007098:	20001c20 	.word	0x20001c20
 800709c:	00000000 	.word	0x00000000

080070a0 <chThdYield>:
void chThdYield(void) {
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	2320      	movs	r3, #32
 80070a4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 80070a8:	4c1b      	ldr	r4, [pc, #108]	; (8007118 <chThdYield+0x78>)
  _dbg_check_lock();
 80070aa:	f7fc fa81 	bl	80035b0 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();
 80070ae:	f7f9 fd47 	bl	8000b40 <chDbgCheckClassS>
  chDbgCheckClassS();
 80070b2:	f7f9 fd45 	bl	8000b40 <chDbgCheckClassS>
  return firstprio(&ch.rlist.queue) >= currp->prio;
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	69a0      	ldr	r0, [r4, #24]

  if (chSchCanYieldS()) {
 80070ba:	6899      	ldr	r1, [r3, #8]
 80070bc:	6882      	ldr	r2, [r0, #8]
 80070be:	4291      	cmp	r1, r2
 80070c0:	d210      	bcs.n	80070e4 <chThdYield+0x44>
  _dbg_check_unlock();
 80070c2:	f7fc fa0d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d004      	beq.n	80070d6 <chThdYield+0x36>
 80070cc:	69a2      	ldr	r2, [r4, #24]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	6892      	ldr	r2, [r2, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d303      	bcc.n	80070de <chThdYield+0x3e>
 80070d6:	2300      	movs	r3, #0
 80070d8:	f383 8811 	msr	BASEPRI, r3
}
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	480f      	ldr	r0, [pc, #60]	; (800711c <chThdYield+0x7c>)
 80070e0:	f7f9 fcfe 	bl	8000ae0 <chSysHalt>
  tqp->next             = tp->queue.next;
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 80070e8:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80070ea:	6054      	str	r4, [r2, #4]
 80070ec:	f883 1020 	strb.w	r1, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80070f0:	61a3      	str	r3, [r4, #24]
  otp = chSchReadyI(otp);
 80070f2:	f7f9 fde5 	bl	8000cc0 <chSchReadyI>
 80070f6:	4605      	mov	r5, r0
  chSysSwitch(currp, otp);
 80070f8:	f7f9 fca2 	bl	8000a40 <_trace_switch.constprop.88>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80070fc:	f3ef 8309 	mrs	r3, PSP
 8007100:	69ea      	ldr	r2, [r5, #28]
 8007102:	3b24      	subs	r3, #36	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	d804      	bhi.n	8007112 <chThdYield+0x72>
 8007108:	4629      	mov	r1, r5
 800710a:	69a0      	ldr	r0, [r4, #24]
 800710c:	f7f9 f8b8 	bl	8000280 <_port_switch>
 8007110:	e7d7      	b.n	80070c2 <chThdYield+0x22>
 8007112:	4803      	ldr	r0, [pc, #12]	; (8007120 <chThdYield+0x80>)
 8007114:	f7f9 fce4 	bl	8000ae0 <chSysHalt>
 8007118:	200011b0 	.word	0x200011b0
 800711c:	0800b2a4 	.word	0x0800b2a4
 8007120:	0800b8d0 	.word	0x0800b8d0
	...

08007130 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d09      	ldr	r5, [pc, #36]	; (8007158 <bmk_thread8+0x28>)
 8007134:	4604      	mov	r4, r0
    chThdYield();
 8007136:	f7ff ffb3 	bl	80070a0 <chThdYield>
    chThdYield();
 800713a:	f7ff ffb1 	bl	80070a0 <chThdYield>
    chThdYield();
 800713e:	f7ff ffaf 	bl	80070a0 <chThdYield>
    chThdYield();
 8007142:	f7ff ffad 	bl	80070a0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	69aa      	ldr	r2, [r5, #24]
 800714a:	3304      	adds	r3, #4
 800714c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800714e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8007152:	075b      	lsls	r3, r3, #29
 8007154:	d5ef      	bpl.n	8007136 <bmk_thread8+0x6>
}
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	200011b0 	.word	0x200011b0
 800715c:	00000000 	.word	0x00000000

08007160 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8007160:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007162:	2320      	movs	r3, #32
 8007164:	4604      	mov	r4, r0
 8007166:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800716a:	f7fc fa21 	bl	80035b0 <_dbg_check_lock>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800716e:	4621      	mov	r1, r4
 8007170:	2008      	movs	r0, #8
 8007172:	f7fc f885 	bl	8003280 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8007176:	f7fc f9b3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <chThdSleep+0x3c>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d004      	beq.n	800718c <chThdSleep+0x2c>
 8007182:	6999      	ldr	r1, [r3, #24]
 8007184:	6893      	ldr	r3, [r2, #8]
 8007186:	688a      	ldr	r2, [r1, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d303      	bcc.n	8007194 <chThdSleep+0x34>
 800718c:	2300      	movs	r3, #0
 800718e:	f383 8811 	msr	BASEPRI, r3
}
 8007192:	bd10      	pop	{r4, pc}
 8007194:	4802      	ldr	r0, [pc, #8]	; (80071a0 <chThdSleep+0x40>)
 8007196:	f7f9 fca3 	bl	8000ae0 <chSysHalt>
 800719a:	bf00      	nop
 800719c:	200011b0 	.word	0x200011b0
 80071a0:	0800b2a4 	.word	0x0800b2a4
	...

080071b0 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80071b0:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <Thread1+0x38>)
 80071b2:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <Thread1+0x3c>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80071f4 <Thread1+0x44>
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time;

    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
    palClearLine(PORTAB_BLINK_LED1);
 80071ba:	4d0d      	ldr	r5, [pc, #52]	; (80071f0 <Thread1+0x40>)
 80071bc:	f44f 7600 	mov.w	r6, #512	; 0x200
static THD_FUNCTION(Thread1, arg) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	619a      	str	r2, [r3, #24]
    palClearLine(PORTAB_BLINK_LED1);
 80071c4:	4637      	mov	r7, r6
    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
 80071c6:	f898 3000 	ldrb.w	r3, [r8]
    palClearLine(PORTAB_BLINK_LED1);
 80071ca:	836f      	strh	r7, [r5, #26]
    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	f24c 3450 	movw	r4, #50000	; 0xc350
 80071d2:	bf08      	it	eq
 80071d4:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
    chThdSleepMilliseconds(time);
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff ffc1 	bl	8007160 <chThdSleep>
    palSetLine(PORTAB_BLINK_LED1);
    chThdSleepMilliseconds(time);
 80071de:	4620      	mov	r0, r4
    palSetLine(PORTAB_BLINK_LED1);
 80071e0:	832e      	strh	r6, [r5, #24]
    chThdSleepMilliseconds(time);
 80071e2:	f7ff ffbd 	bl	8007160 <chThdSleep>
 80071e6:	e7ee      	b.n	80071c6 <Thread1+0x16>
 80071e8:	200011b0 	.word	0x200011b0
 80071ec:	0800b284 	.word	0x0800b284
 80071f0:	48001000 	.word	0x48001000
 80071f4:	20001128 	.word	0x20001128
	...

08007200 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	2320      	movs	r3, #32
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	4c1a      	ldr	r4, [pc, #104]	; (8007274 <evt_thread7+0x74>)
  _dbg_check_lock();
 800720a:	f7fc f9d1 	bl	80035b0 <_dbg_check_lock>
  chEvtBroadcastFlagsI(esp, flags);
 800720e:	2100      	movs	r1, #0
 8007210:	4819      	ldr	r0, [pc, #100]	; (8007278 <evt_thread7+0x78>)
 8007212:	f7f9 fe0d 	bl	8000e30 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8007216:	f7fc f94b 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 800721a:	f7fc f961 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	42a3      	cmp	r3, r4
 8007222:	d004      	beq.n	800722e <evt_thread7+0x2e>
 8007224:	69a2      	ldr	r2, [r4, #24]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	d31f      	bcc.n	800726e <evt_thread7+0x6e>
 800722e:	2500      	movs	r5, #0
 8007230:	f385 8811 	msr	BASEPRI, r5
  chThdSleepMilliseconds(50);
 8007234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007238:	f7ff ff92 	bl	8007160 <chThdSleep>
 800723c:	2320      	movs	r3, #32
 800723e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007242:	f7fc f9b5 	bl	80035b0 <_dbg_check_lock>
  chEvtBroadcastFlagsI(esp, flags);
 8007246:	4629      	mov	r1, r5
 8007248:	480c      	ldr	r0, [pc, #48]	; (800727c <evt_thread7+0x7c>)
 800724a:	f7f9 fdf1 	bl	8000e30 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800724e:	f7fc f92f 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8007252:	f7fc f945 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	42a3      	cmp	r3, r4
 800725a:	d004      	beq.n	8007266 <evt_thread7+0x66>
 800725c:	69a2      	ldr	r2, [r4, #24]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	6892      	ldr	r2, [r2, #8]
 8007262:	429a      	cmp	r2, r3
 8007264:	d303      	bcc.n	800726e <evt_thread7+0x6e>
 8007266:	2300      	movs	r3, #0
 8007268:	f383 8811 	msr	BASEPRI, r3
}
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	4804      	ldr	r0, [pc, #16]	; (8007280 <evt_thread7+0x80>)
 8007270:	f7f9 fc36 	bl	8000ae0 <chSysHalt>
 8007274:	200011b0 	.word	0x200011b0
 8007278:	20000c0c 	.word	0x20000c0c
 800727c:	20000c10 	.word	0x20000c10
 8007280:	0800b2d4 	.word	0x0800b2d4
	...

08007290 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8007290:	b510      	push	{r4, lr}
 8007292:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8007294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007298:	f7ff ff62 	bl	8007160 <chThdSleep>
  chDbgCheck(tp != NULL);
 800729c:	b1e4      	cbz	r4, 80072d8 <evt_thread3+0x48>
 800729e:	2320      	movs	r3, #32
 80072a0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80072a4:	f7fc f984 	bl	80035b0 <_dbg_check_lock>
  chEvtSignalI(tp, events);
 80072a8:	4620      	mov	r0, r4
 80072aa:	2101      	movs	r1, #1
 80072ac:	f7f9 fd98 	bl	8000de0 <chEvtSignalI>
  chSchRescheduleS();
 80072b0:	f7fc f8fe 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 80072b4:	f7fc f914 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80072b8:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <evt_thread3+0x50>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d004      	beq.n	80072ca <evt_thread3+0x3a>
 80072c0:	6999      	ldr	r1, [r3, #24]
 80072c2:	6893      	ldr	r3, [r2, #8]
 80072c4:	688a      	ldr	r2, [r1, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d303      	bcc.n	80072d2 <evt_thread3+0x42>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f383 8811 	msr	BASEPRI, r3
}
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	4804      	ldr	r0, [pc, #16]	; (80072e4 <evt_thread3+0x54>)
 80072d4:	f7f9 fc04 	bl	8000ae0 <chSysHalt>
  chDbgCheck(tp != NULL);
 80072d8:	4803      	ldr	r0, [pc, #12]	; (80072e8 <evt_thread3+0x58>)
 80072da:	f7f9 fc01 	bl	8000ae0 <chSysHalt>
 80072de:	bf00      	nop
 80072e0:	200011b0 	.word	0x200011b0
 80072e4:	0800b2d4 	.word	0x0800b2d4
 80072e8:	0800b590 	.word	0x0800b590
 80072ec:	00000000 	.word	0x00000000

080072f0 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 80072f0:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 80072f2:	4c06      	ldr	r4, [pc, #24]	; (800730c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 80072f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072f8:	f7ff ff32 	bl	8007160 <chThdSleep>
  chMtxLock(&m1);
 80072fc:	4620      	mov	r0, r4
 80072fe:	f7fe fb87 	bl	8005a10 <chMtxLock>
  chMtxUnlock(&m1);
 8007302:	4620      	mov	r0, r4
}
 8007304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8007308:	f7fe ba52 	b.w	80057b0 <chMtxUnlock>
 800730c:	20000c38 	.word	0x20000c38

08007310 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8007310:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(150);
 8007312:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007316:	f7ff ff23 	bl	8007160 <chThdSleep>
 800731a:	2320      	movs	r3, #32
 800731c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007320:	f7fc f946 	bl	80035b0 <_dbg_check_lock>
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8007324:	480c      	ldr	r0, [pc, #48]	; (8007358 <thread4B+0x48>)
 8007326:	f7fb fefb 	bl	8003120 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 800732a:	480b      	ldr	r0, [pc, #44]	; (8007358 <thread4B+0x48>)
 800732c:	f7f9 fda0 	bl	8000e70 <chMtxUnlockS>
  chSchRescheduleS();
 8007330:	f7fc f8be 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8007334:	f7fc f8d4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007338:	4b08      	ldr	r3, [pc, #32]	; (800735c <thread4B+0x4c>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d004      	beq.n	800734a <thread4B+0x3a>
 8007340:	6999      	ldr	r1, [r3, #24]
 8007342:	6893      	ldr	r3, [r2, #8]
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d303      	bcc.n	8007352 <thread4B+0x42>
 800734a:	2300      	movs	r3, #0
 800734c:	f383 8811 	msr	BASEPRI, r3
}
 8007350:	bd08      	pop	{r3, pc}
 8007352:	4803      	ldr	r0, [pc, #12]	; (8007360 <thread4B+0x50>)
 8007354:	f7f9 fbc4 	bl	8000ae0 <chSysHalt>
 8007358:	20000c48 	.word	0x20000c48
 800735c:	200011b0 	.word	0x200011b0
 8007360:	0800b364 	.word	0x0800b364
	...

08007370 <thread2>:
static THD_FUNCTION(thread2, p) {
 8007370:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 8007372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007376:	f7ff fef3 	bl	8007160 <chThdSleep>
 800737a:	2320      	movs	r3, #32
 800737c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007380:	f7fc f916 	bl	80035b0 <_dbg_check_lock>
  chSemSignalI(&sem1); /* For coverage reasons */
 8007384:	480b      	ldr	r0, [pc, #44]	; (80073b4 <thread2+0x44>)
 8007386:	f7f9 fdbb 	bl	8000f00 <chSemSignalI>
  chSchRescheduleS();
 800738a:	f7fc f891 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 800738e:	f7fc f8a7 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <thread2+0x48>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d004      	beq.n	80073a4 <thread2+0x34>
 800739a:	6999      	ldr	r1, [r3, #24]
 800739c:	6893      	ldr	r3, [r2, #8]
 800739e:	688a      	ldr	r2, [r1, #8]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d303      	bcc.n	80073ac <thread2+0x3c>
 80073a4:	2300      	movs	r3, #0
 80073a6:	f383 8811 	msr	BASEPRI, r3
}
 80073aa:	bd08      	pop	{r3, pc}
 80073ac:	4803      	ldr	r0, [pc, #12]	; (80073bc <thread2+0x4c>)
 80073ae:	f7f9 fb97 	bl	8000ae0 <chSysHalt>
 80073b2:	bf00      	nop
 80073b4:	20001c20 	.word	0x20001c20
 80073b8:	200011b0 	.word	0x200011b0
 80073bc:	0800b358 	.word	0x0800b358

080073c0 <rt_test_003_001_execute>:
 * - [3.1.5] Function chThdSleepUntil() is tested with a timeline of
 *   "now" + 100 ticks.
 * .
 */

static void rt_test_003_001_execute(void) {
 80073c0:	b570      	push	{r4, r5, r6, lr}
  systime_t time;

  /* [3.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 80073c2:	4e34      	ldr	r6, [pc, #208]	; (8007494 <rt_test_003_001_execute+0xd4>)
 80073c4:	2301      	movs	r3, #1
 80073c6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 80073ce:	2064      	movs	r0, #100	; 0x64
 80073d0:	f7ff fec6 	bl	8007160 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 80073d4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80073d8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80073dc:	f7f9 f988 	bl	80006f0 <_test_assert_time_window.constprop.1>
 80073e0:	b100      	cbz	r0, 80073e4 <rt_test_003_001_execute+0x24>
    chThdSleepUntil(chTimeAddX(time, 100));
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
}
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80073e4:	2302      	movs	r3, #2
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 80073ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073ee:	f7ff feb7 	bl	8007160 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 80073f2:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 80073f6:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 80073fa:	f7f9 f979 	bl	80006f0 <_test_assert_time_window.constprop.1>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d1ef      	bne.n	80073e2 <rt_test_003_001_execute+0x22>
  test_set_step(3);
 8007402:	2303      	movs	r3, #3
 8007404:	6033      	str	r3, [r6, #0]
 8007406:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 8007408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800740c:	f7ff fea8 	bl	8007160 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8007410:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8007414:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8007418:	f7f9 f96a 	bl	80006f0 <_test_assert_time_window.constprop.1>
 800741c:	2800      	cmp	r0, #0
 800741e:	d1e0      	bne.n	80073e2 <rt_test_003_001_execute+0x22>
  test_set_step(4);
 8007420:	2304      	movs	r3, #4
 8007422:	6033      	str	r3, [r6, #0]
 8007424:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8007426:	f242 7010 	movw	r0, #10000	; 0x2710
 800742a:	f7ff fe99 	bl	8007160 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800742e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8007432:	4608      	mov	r0, r1
 8007434:	3010      	adds	r0, #16
 8007436:	3113      	adds	r1, #19
 8007438:	f7f9 f95a 	bl	80006f0 <_test_assert_time_window.constprop.1>
 800743c:	2800      	cmp	r0, #0
 800743e:	d1d0      	bne.n	80073e2 <rt_test_003_001_execute+0x22>
  test_set_step(5);
 8007440:	2305      	movs	r3, #5
 8007442:	6033      	str	r3, [r6, #0]
 8007444:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8007446:	2320      	movs	r3, #32
 8007448:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800744c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007450:	f7fc f8ae 	bl	80035b0 <_dbg_check_lock>
 8007454:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8007456:	1a61      	subs	r1, r4, r1
 8007458:	d114      	bne.n	8007484 <rt_test_003_001_execute+0xc4>
  _dbg_check_unlock();
 800745a:	f7fc f841 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <rt_test_003_001_execute+0xd8>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d004      	beq.n	8007470 <rt_test_003_001_execute+0xb0>
 8007466:	6999      	ldr	r1, [r3, #24]
 8007468:	6893      	ldr	r3, [r2, #8]
 800746a:	688a      	ldr	r2, [r1, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	d30d      	bcc.n	800748c <rt_test_003_001_execute+0xcc>
 8007470:	2300      	movs	r3, #0
 8007472:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 8007476:	f106 0167 	add.w	r1, r6, #103	; 0x67
 800747a:	4620      	mov	r0, r4
}
 800747c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 8007480:	f7f9 b936 	b.w	80006f0 <_test_assert_time_window.constprop.1>
 8007484:	2008      	movs	r0, #8
 8007486:	f7fb fefb 	bl	8003280 <chSchGoSleepTimeoutS>
 800748a:	e7e6      	b.n	800745a <rt_test_003_001_execute+0x9a>
 800748c:	4803      	ldr	r0, [pc, #12]	; (800749c <rt_test_003_001_execute+0xdc>)
 800748e:	f7f9 fb27 	bl	8000ae0 <chSysHalt>
 8007492:	bf00      	nop
 8007494:	20002354 	.word	0x20002354
 8007498:	200011b0 	.word	0x200011b0
 800749c:	0800b2a4 	.word	0x0800b2a4

080074a0 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 80074a0:	b510      	push	{r4, lr}

  chThdSleep(1);
 80074a2:	2001      	movs	r0, #1
 80074a4:	f7ff fe5c 	bl	8007160 <chThdSleep>
 80074a8:	2320      	movs	r3, #32
 80074aa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80074ae:	f7fc f87f 	bl	80035b0 <_dbg_check_lock>
 80074b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  _dbg_check_unlock();
 80074b8:	f7fc f812 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <test_wait_tick+0x40>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d004      	beq.n	80074ce <test_wait_tick+0x2e>
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	6893      	ldr	r3, [r2, #8]
 80074c8:	688a      	ldr	r2, [r1, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d304      	bcc.n	80074d8 <test_wait_tick+0x38>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 80074d4:	4620      	mov	r0, r4
 80074d6:	bd10      	pop	{r4, pc}
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <test_wait_tick+0x44>)
 80074da:	f7f9 fb01 	bl	8000ae0 <chSysHalt>
 80074de:	bf00      	nop
 80074e0:	200011b0 	.word	0x200011b0
 80074e4:	0800b328 	.word	0x0800b328
	...

080074f0 <rt_test_010_011_execute>:
static void rt_test_010_011_execute(void) {
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80074f4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007578 <rt_test_010_011_execute+0x88>
      chMtxLock(&mtx1);
 80074f8:	4c1c      	ldr	r4, [pc, #112]	; (800756c <rt_test_010_011_execute+0x7c>)
  test_set_step(1);
 80074fa:	2301      	movs	r3, #1
 80074fc:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8007500:	f7ff ffce 	bl	80074a0 <test_wait_tick>
    n = 0;
 8007504:	2500      	movs	r5, #0
    start = test_wait_tick();
 8007506:	4680      	mov	r8, r0
 8007508:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800750c:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 8007510:	4620      	mov	r0, r4
 8007512:	f7fe fa7d 	bl	8005a10 <chMtxLock>
      chMtxUnlock(&mtx1);
 8007516:	4620      	mov	r0, r4
 8007518:	f7fe f94a 	bl	80057b0 <chMtxUnlock>
      chMtxLock(&mtx1);
 800751c:	4620      	mov	r0, r4
 800751e:	f7fe fa77 	bl	8005a10 <chMtxLock>
      chMtxUnlock(&mtx1);
 8007522:	4620      	mov	r0, r4
 8007524:	f7fe f944 	bl	80057b0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8007528:	4620      	mov	r0, r4
 800752a:	f7fe fa71 	bl	8005a10 <chMtxLock>
      chMtxUnlock(&mtx1);
 800752e:	4620      	mov	r0, r4
 8007530:	f7fe f93e 	bl	80057b0 <chMtxUnlock>
      chMtxLock(&mtx1);
 8007534:	4620      	mov	r0, r4
 8007536:	f7fe fa6b 	bl	8005a10 <chMtxLock>
      chMtxUnlock(&mtx1);
 800753a:	4620      	mov	r0, r4
 800753c:	f7fe f938 	bl	80057b0 <chMtxUnlock>
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  return (bool)((time - start) < (end - start));
 8007542:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8007546:	42b3      	cmp	r3, r6
      n++;
 8007548:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800754c:	d9e0      	bls.n	8007510 <rt_test_010_011_execute+0x20>
  test_set_step(2);
 800754e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007550:	4807      	ldr	r0, [pc, #28]	; (8007570 <rt_test_010_011_execute+0x80>)
  test_set_step(2);
 8007552:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8007556:	f7f9 f98b 	bl	8000870 <test_print>
    test_printn(n * 4);
 800755a:	00a8      	lsls	r0, r5, #2
 800755c:	f7f9 f958 	bl	8000810 <test_printn>
    test_println(" lock+unlock/S");
 8007560:	4804      	ldr	r0, [pc, #16]	; (8007574 <rt_test_010_011_execute+0x84>)
}
 8007562:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8007566:	f7f9 b963 	b.w	8000830 <test_println>
 800756a:	bf00      	nop
 800756c:	20001c00 	.word	0x20001c00
 8007570:	0800d124 	.word	0x0800d124
 8007574:	0800d134 	.word	0x0800d134
 8007578:	20002354 	.word	0x20002354
 800757c:	00000000 	.word	0x00000000

08007580 <rt_test_010_010_execute>:
static void rt_test_010_010_execute(void) {
 8007580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8007584:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007608 <rt_test_010_010_execute+0x88>
      chSemWait(&sem1);
 8007588:	4c1c      	ldr	r4, [pc, #112]	; (80075fc <rt_test_010_010_execute+0x7c>)
  test_set_step(1);
 800758a:	2301      	movs	r3, #1
 800758c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8007590:	f7ff ff86 	bl	80074a0 <test_wait_tick>
    n = 0;
 8007594:	2500      	movs	r5, #0
    start = test_wait_tick();
 8007596:	4680      	mov	r8, r0
 8007598:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800759c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff fc2d 	bl	8006e00 <chSemWait>
      chSemSignal(&sem1);
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7ff fbf2 	bl	8006d90 <chSemSignal>
      chSemWait(&sem1);
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7ff fc27 	bl	8006e00 <chSemWait>
      chSemSignal(&sem1);
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff fbec 	bl	8006d90 <chSemSignal>
      chSemWait(&sem1);
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff fc21 	bl	8006e00 <chSemWait>
      chSemSignal(&sem1);
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff fbe6 	bl	8006d90 <chSemSignal>
      chSemWait(&sem1);
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff fc1b 	bl	8006e00 <chSemWait>
      chSemSignal(&sem1);
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7ff fbe0 	bl	8006d90 <chSemSignal>
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 80075d6:	42b3      	cmp	r3, r6
      n++;
 80075d8:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80075dc:	d9e0      	bls.n	80075a0 <rt_test_010_010_execute+0x20>
  test_set_step(2);
 80075de:	2302      	movs	r3, #2
    test_print("--- Score : ");
 80075e0:	4807      	ldr	r0, [pc, #28]	; (8007600 <rt_test_010_010_execute+0x80>)
  test_set_step(2);
 80075e2:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 80075e6:	f7f9 f943 	bl	8000870 <test_print>
    test_printn(n * 4);
 80075ea:	00a8      	lsls	r0, r5, #2
 80075ec:	f7f9 f910 	bl	8000810 <test_printn>
    test_println(" wait+signal/S");
 80075f0:	4804      	ldr	r0, [pc, #16]	; (8007604 <rt_test_010_010_execute+0x84>)
}
 80075f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80075f6:	f7f9 b91b 	b.w	8000830 <test_println>
 80075fa:	bf00      	nop
 80075fc:	20001c2c 	.word	0x20001c2c
 8007600:	0800d124 	.word	0x0800d124
 8007604:	0800d104 	.word	0x0800d104
 8007608:	20002354 	.word	0x20002354
 800760c:	00000000 	.word	0x00000000

08007610 <rt_test_010_009_execute>:
static void rt_test_010_009_execute(void) {
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8007614:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80076d0 <rt_test_010_009_execute+0xc0>
 8007618:	4c26      	ldr	r4, [pc, #152]	; (80076b4 <rt_test_010_009_execute+0xa4>)
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800761a:	4f27      	ldr	r7, [pc, #156]	; (80076b8 <rt_test_010_009_execute+0xa8>)
 800761c:	4e27      	ldr	r6, [pc, #156]	; (80076bc <rt_test_010_009_execute+0xac>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 800761e:	4d28      	ldr	r5, [pc, #160]	; (80076c0 <rt_test_010_009_execute+0xb0>)
  test_set_step(1);
 8007620:	2301      	movs	r3, #1
 8007622:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 8007626:	f7ff ff3b 	bl	80074a0 <test_wait_tick>
    n = 0;
 800762a:	f04f 0800 	mov.w	r8, #0
    start = test_wait_tick();
 800762e:	4681      	mov	r9, r0
 8007630:	2320      	movs	r3, #32
 8007632:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007636:	f7fb ffbb 	bl	80035b0 <_dbg_check_lock>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800763a:	463a      	mov	r2, r7
 800763c:	4630      	mov	r0, r6
 800763e:	2300      	movs	r3, #0
 8007640:	2101      	movs	r1, #1
 8007642:	f7fa fc3d 	bl	8001ec0 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8007646:	2300      	movs	r3, #0
 8007648:	463a      	mov	r2, r7
 800764a:	f242 7110 	movw	r1, #10000	; 0x2710
 800764e:	4628      	mov	r0, r5
 8007650:	f7fa fc36 	bl	8001ec0 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8007654:	4630      	mov	r0, r6
 8007656:	f7fa fbeb 	bl	8001e30 <chVTDoResetI>
      chVTDoResetI(&vt2);
 800765a:	4628      	mov	r0, r5
 800765c:	f7fa fbe8 	bl	8001e30 <chVTDoResetI>
  _dbg_check_unlock();
 8007660:	f7fb ff3e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	42a3      	cmp	r3, r4
 8007668:	d004      	beq.n	8007674 <rt_test_010_009_execute+0x64>
 800766a:	69a2      	ldr	r2, [r4, #24]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	6892      	ldr	r2, [r2, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d31c      	bcc.n	80076ae <rt_test_010_009_execute+0x9e>
 8007674:	2300      	movs	r3, #0
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800767e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	eba3 0309 	sub.w	r3, r3, r9
 8007688:	4293      	cmp	r3, r2
      n++;
 800768a:	f108 0801 	add.w	r8, r8, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800768e:	d9cf      	bls.n	8007630 <rt_test_010_009_execute+0x20>
  test_set_step(2);
 8007690:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8007692:	480c      	ldr	r0, [pc, #48]	; (80076c4 <rt_test_010_009_execute+0xb4>)
  test_set_step(2);
 8007694:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 8007698:	f7f9 f8ea 	bl	8000870 <test_print>
    test_printn(n * 2);
 800769c:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80076a0:	f7f9 f8b6 	bl	8000810 <test_printn>
    test_println(" timers/S");
 80076a4:	4808      	ldr	r0, [pc, #32]	; (80076c8 <rt_test_010_009_execute+0xb8>)
}
 80076a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" timers/S");
 80076aa:	f7f9 b8c1 	b.w	8000830 <test_println>
 80076ae:	4807      	ldr	r0, [pc, #28]	; (80076cc <rt_test_010_009_execute+0xbc>)
 80076b0:	f7f9 fa16 	bl	8000ae0 <chSysHalt>
 80076b4:	200011b0 	.word	0x200011b0
 80076b8:	08000741 	.word	0x08000741
 80076bc:	20002384 	.word	0x20002384
 80076c0:	20002398 	.word	0x20002398
 80076c4:	0800d124 	.word	0x0800d124
 80076c8:	0800d0e8 	.word	0x0800d0e8
 80076cc:	0800b37c 	.word	0x0800b37c
 80076d0:	20002354 	.word	0x20002354
	...

080076e0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	4605      	mov	r5, r0
  start = test_wait_tick();
 80076e6:	f7ff fedb 	bl	80074a0 <test_wait_tick>
  uint32_t n = 0;
 80076ea:	2400      	movs	r4, #0
  start = test_wait_tick();
 80076ec:	4680      	mov	r8, r0
 80076ee:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 80076f2:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 80076f6:	2101      	movs	r1, #1
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7fd fee1 	bl	80054c0 <chMsgSend>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 8007704:	42b3      	cmp	r3, r6
    n++;
 8007706:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800770a:	d9f4      	bls.n	80076f6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800770c:	4628      	mov	r0, r5
 800770e:	2100      	movs	r1, #0
 8007710:	f7fd fed6 	bl	80054c0 <chMsgSend>
}
 8007714:	4620      	mov	r0, r4
 8007716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771a:	bf00      	nop
 800771c:	0000      	movs	r0, r0
	...

08007720 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int tseq, tcase;

  test_chp = stream;
 8007724:	4c9d      	ldr	r4, [pc, #628]	; (800799c <test_execute+0x27c>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8007726:	4689      	mov	r9, r1
  test_chp = stream;
 8007728:	6020      	str	r0, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800772a:	b083      	sub	sp, #12
  test_println("");
 800772c:	489c      	ldr	r0, [pc, #624]	; (80079a0 <test_execute+0x280>)
 800772e:	f7f9 f87f 	bl	8000830 <test_println>
  if (tsp->name != NULL) {
 8007732:	f8d9 3000 	ldr.w	r3, [r9]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8186 	beq.w	8007a48 <test_execute+0x328>
 800773c:	4d99      	ldr	r5, [pc, #612]	; (80079a4 <test_execute+0x284>)
  while (*msgp)
 800773e:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	6803      	ldr	r3, [r0, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	4798      	blx	r3
  while (*msgp)
 8007748:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800774c:	2900      	cmp	r1, #0
 800774e:	d1f7      	bne.n	8007740 <test_execute+0x20>
    test_print("*** ");
    test_println(tsp->name);
 8007750:	f8d9 0000 	ldr.w	r0, [r9]
 8007754:	f7f9 f86c 	bl	8000830 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8007758:	4893      	ldr	r0, [pc, #588]	; (80079a8 <test_execute+0x288>)
 800775a:	4d94      	ldr	r5, [pc, #592]	; (80079ac <test_execute+0x28c>)
 800775c:	f7f9 f868 	bl	8000830 <test_println>
  while (*msgp)
 8007760:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	6803      	ldr	r3, [r0, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4798      	blx	r3
  while (*msgp)
 800776a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800776e:	2900      	cmp	r1, #0
 8007770:	d1f7      	bne.n	8007762 <test_execute+0x42>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8007772:	488f      	ldr	r0, [pc, #572]	; (80079b0 <test_execute+0x290>)
 8007774:	4d8f      	ldr	r5, [pc, #572]	; (80079b4 <test_execute+0x294>)
 8007776:	f7f9 f85b 	bl	8000830 <test_println>
  while (*msgp)
 800777a:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 800777c:	6820      	ldr	r0, [r4, #0]
 800777e:	6803      	ldr	r3, [r0, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	4798      	blx	r3
  while (*msgp)
 8007784:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f7      	bne.n	800777c <test_execute+0x5c>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800778c:	488a      	ldr	r0, [pc, #552]	; (80079b8 <test_execute+0x298>)
 800778e:	4d8b      	ldr	r5, [pc, #556]	; (80079bc <test_execute+0x29c>)
 8007790:	f7f9 f84e 	bl	8000830 <test_println>
  while (*msgp)
 8007794:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8007796:	6820      	ldr	r0, [r4, #0]
 8007798:	6803      	ldr	r3, [r0, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4798      	blx	r3
  while (*msgp)
 800779e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80077a2:	2900      	cmp	r1, #0
 80077a4:	d1f7      	bne.n	8007796 <test_execute+0x76>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80077a6:	4886      	ldr	r0, [pc, #536]	; (80079c0 <test_execute+0x2a0>)
 80077a8:	9101      	str	r1, [sp, #4]
 80077aa:	f7f9 f841 	bl	8000830 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 80077ae:	487c      	ldr	r0, [pc, #496]	; (80079a0 <test_execute+0x280>)
  test_tokp = test_tokens_buffer;
 80077b0:	4f84      	ldr	r7, [pc, #528]	; (80079c4 <test_execute+0x2a4>)
  test_println("");
 80077b2:	f7f9 f83d 	bl	8000830 <test_println>

  test_global_fail = false;
 80077b6:	4b84      	ldr	r3, [pc, #528]	; (80079c8 <test_execute+0x2a8>)
  tseq = 0;
 80077b8:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 80077ba:	7019      	strb	r1, [r3, #0]
 80077bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
  tseq = 0;
 80077c0:	468b      	mov	fp, r1
  while (tsp->sequences[tseq] != NULL) {
 80077c2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80077c6:	ea4f 068b 	mov.w	r6, fp, lsl #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 811a 	beq.w	8007a04 <test_execute+0x2e4>
 80077d0:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	6803      	ldr	r3, [r0, #0]
 80077d6:	213d      	movs	r1, #61	; 0x3d
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80077dc:	3d01      	subs	r5, #1
 80077de:	d1f8      	bne.n	80077d2 <test_execute+0xb2>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	497a      	ldr	r1, [pc, #488]	; (80079cc <test_execute+0x2ac>)
 80077e4:	6803      	ldr	r3, [r0, #0]
 80077e6:	4d7a      	ldr	r5, [pc, #488]	; (80079d0 <test_execute+0x2b0>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	4798      	blx	r3
  while (*msgp)
 80077ee:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	6803      	ldr	r3, [r0, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	4798      	blx	r3
  while (*msgp)
 80077f8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d1f7      	bne.n	80077f0 <test_execute+0xd0>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8007800:	f10b 0b01 	add.w	fp, fp, #1
 8007804:	4658      	mov	r0, fp
 8007806:	4d73      	ldr	r5, [pc, #460]	; (80079d4 <test_execute+0x2b4>)
 8007808:	f7f9 f802 	bl	8000810 <test_printn>
  while (*msgp)
 800780c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	6803      	ldr	r3, [r0, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4798      	blx	r3
  while (*msgp)
 8007816:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800781a:	2900      	cmp	r1, #0
 800781c:	d1f7      	bne.n	800780e <test_execute+0xee>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 800781e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007822:	599b      	ldr	r3, [r3, r6]
 8007824:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8007826:	7829      	ldrb	r1, [r5, #0]
 8007828:	b139      	cbz	r1, 800783a <test_execute+0x11a>
    streamPut(test_chp, *msgp++);
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	6803      	ldr	r3, [r0, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4798      	blx	r3
  while (*msgp)
 8007832:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007836:	2900      	cmp	r1, #0
 8007838:	d1f7      	bne.n	800782a <test_execute+0x10a>
    test_println(")");
 800783a:	4867      	ldr	r0, [pc, #412]	; (80079d8 <test_execute+0x2b8>)
 800783c:	f7f8 fff8 	bl	8000830 <test_println>
#endif
    tcase = 0;
 8007840:	2500      	movs	r5, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8007842:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007846:	599a      	ldr	r2, [r3, r6]
 8007848:	6852      	ldr	r2, [r2, #4]
 800784a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800784e:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8007852:	2a00      	cmp	r2, #0
 8007854:	d0b5      	beq.n	80077c2 <test_execute+0xa2>
      print_line();
 8007856:	f8df a198 	ldr.w	sl, [pc, #408]	; 80079f0 <test_execute+0x2d0>
 800785a:	f7f9 f849 	bl	80008f0 <print_line>
  while (*msgp)
 800785e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	6803      	ldr	r3, [r0, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	4798      	blx	r3
  while (*msgp)
 8007868:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800786c:	2900      	cmp	r1, #0
 800786e:	d1f7      	bne.n	8007860 <test_execute+0x140>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 8007870:	4658      	mov	r0, fp
 8007872:	f7f8 ffcd 	bl	8000810 <test_printn>
    streamPut(test_chp, *msgp++);
 8007876:	6820      	ldr	r0, [r4, #0]
      test_print(".");
      test_printn(tcase + 1);
 8007878:	f8df a158 	ldr.w	sl, [pc, #344]	; 80079d4 <test_execute+0x2b4>
    streamPut(test_chp, *msgp++);
 800787c:	6803      	ldr	r3, [r0, #0]
 800787e:	212e      	movs	r1, #46	; 0x2e
 8007880:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 8007882:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 8007884:	4798      	blx	r3
      test_printn(tcase + 1);
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 ffc2 	bl	8000810 <test_printn>
  while (*msgp)
 800788c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	6803      	ldr	r3, [r0, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	4798      	blx	r3
  while (*msgp)
 8007896:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800789a:	2900      	cmp	r1, #0
 800789c:	d1f7      	bne.n	800788e <test_execute+0x16e>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 800789e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80078a2:	599b      	ldr	r3, [r3, r6]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f853 3008 	ldr.w	r3, [r3, r8]
 80078aa:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 80078ae:	f89a 1000 	ldrb.w	r1, [sl]
 80078b2:	b139      	cbz	r1, 80078c4 <test_execute+0x1a4>
    streamPut(test_chp, *msgp++);
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4798      	blx	r3
  while (*msgp)
 80078bc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80078c0:	2900      	cmp	r1, #0
 80078c2:	d1f7      	bne.n	80078b4 <test_execute+0x194>
      test_println(")");
 80078c4:	4844      	ldr	r0, [pc, #272]	; (80079d8 <test_execute+0x2b8>)
  test_local_fail = false;
 80078c6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80079f4 <test_execute+0x2d4>
      test_println(")");
 80078ca:	f7f8 ffb1 	bl	8000830 <test_println>
  chThdSleep(delay);
 80078ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80078d2:	f7ff fc45 	bl	8007160 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80078d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  test_tokp = test_tokens_buffer;
 80078da:	4a40      	ldr	r2, [pc, #256]	; (80079dc <test_execute+0x2bc>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80078dc:	599b      	ldr	r3, [r3, r6]
  test_tokp = test_tokens_buffer;
 80078de:	603a      	str	r2, [r7, #0]
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f853 8008 	ldr.w	r8, [r3, r8]
  if (tcp->setup != NULL)
 80078e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
  test_local_fail = false;
 80078ea:	2200      	movs	r2, #0
 80078ec:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 80078f0:	b103      	cbz	r3, 80078f4 <test_execute+0x1d4>
    tcp->setup();
 80078f2:	4798      	blx	r3
  tcp->execute();
 80078f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078f8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80078fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078fe:	b103      	cbz	r3, 8007902 <test_execute+0x1e2>
    tcp->teardown();
 8007900:	4798      	blx	r3
      if (test_local_fail) {
 8007902:	f89a 3000 	ldrb.w	r3, [sl]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d044      	beq.n	8007994 <test_execute+0x274>
 800790a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80079f8 <test_execute+0x2d8>
  while (*msgp)
 800790e:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	6803      	ldr	r3, [r0, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	4798      	blx	r3
  while (*msgp)
 8007918:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800791c:	2900      	cmp	r1, #0
 800791e:	d1f7      	bne.n	8007910 <test_execute+0x1f0>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8007920:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <test_execute+0x2c0>)
 8007922:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80079fc <test_execute+0x2dc>
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	f7f8 ff72 	bl	8000810 <test_printn>
  while (*msgp)
 800792c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	6803      	ldr	r3, [r0, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	4798      	blx	r3
  while (*msgp)
 8007936:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800793a:	2900      	cmp	r1, #0
 800793c:	d1f7      	bne.n	800792e <test_execute+0x20e>
  while (cp < test_tokp)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	4a26      	ldr	r2, [pc, #152]	; (80079dc <test_execute+0x2bc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d909      	bls.n	800795a <test_execute+0x23a>
  char *cp = test_tokens_buffer;
 8007946:	4690      	mov	r8, r2
    streamPut(test_chp, *cp++);
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	f818 1b01 	ldrb.w	r1, [r8], #1
 800794e:	6803      	ldr	r3, [r0, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	4798      	blx	r3
  while (cp < test_tokp)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	4598      	cmp	r8, r3
 8007958:	d3f6      	bcc.n	8007948 <test_execute+0x228>
  while (*msgp)
 800795a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8007a00 <test_execute+0x2e0>
 800795e:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	6803      	ldr	r3, [r0, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4798      	blx	r3
  while (*msgp)
 8007968:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800796c:	2900      	cmp	r1, #0
 800796e:	d1f7      	bne.n	8007960 <test_execute+0x240>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 8007970:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <test_execute+0x2c4>)
 8007972:	f8d3 8000 	ldr.w	r8, [r3]
  while (*msgp)
 8007976:	f898 1000 	ldrb.w	r1, [r8]
 800797a:	b139      	cbz	r1, 800798c <test_execute+0x26c>
    streamPut(test_chp, *msgp++);
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4798      	blx	r3
  while (*msgp)
 8007984:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8007988:	2900      	cmp	r1, #0
 800798a:	d1f7      	bne.n	800797c <test_execute+0x25c>
        test_println("\")");
 800798c:	4816      	ldr	r0, [pc, #88]	; (80079e8 <test_execute+0x2c8>)
 800798e:	f7f8 ff4f 	bl	8000830 <test_println>
 8007992:	e756      	b.n	8007842 <test_execute+0x122>
      }
      else {
        test_println("--- Result: SUCCESS");
 8007994:	4815      	ldr	r0, [pc, #84]	; (80079ec <test_execute+0x2cc>)
 8007996:	f7f8 ff4b 	bl	8000830 <test_println>
 800799a:	e752      	b.n	8007842 <test_execute+0x122>
 800799c:	200022a8 	.word	0x200022a8
 80079a0:	0800d3c4 	.word	0x0800d3c4
 80079a4:	0800ddb0 	.word	0x0800ddb0
 80079a8:	0800de5c 	.word	0x0800de5c
 80079ac:	0800ddb8 	.word	0x0800ddb8
 80079b0:	0800de60 	.word	0x0800de60
 80079b4:	0800ddcc 	.word	0x0800ddcc
 80079b8:	0800b998 	.word	0x0800b998
 80079bc:	0800dde0 	.word	0x0800dde0
 80079c0:	0800b9c8 	.word	0x0800b9c8
 80079c4:	20002368 	.word	0x20002368
 80079c8:	200022b0 	.word	0x200022b0
 80079cc:	0800bb6c 	.word	0x0800bb6c
 80079d0:	0800ddf4 	.word	0x0800ddf4
 80079d4:	0800de08 	.word	0x0800de08
 80079d8:	0800de78 	.word	0x0800de78
 80079dc:	20002358 	.word	0x20002358
 80079e0:	20002354 	.word	0x20002354
 80079e4:	200022ac 	.word	0x200022ac
 80079e8:	0800de7c 	.word	0x0800de7c
 80079ec:	0800de80 	.word	0x0800de80
 80079f0:	0800de0c 	.word	0x0800de0c
 80079f4:	20002350 	.word	0x20002350
 80079f8:	0800de1c 	.word	0x0800de1c
 80079fc:	0800de34 	.word	0x0800de34
 8007a00:	0800de38 	.word	0x0800de38
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8007a04:	f7f8 ff74 	bl	80008f0 <print_line>
  test_println("");
 8007a08:	4d11      	ldr	r5, [pc, #68]	; (8007a50 <test_execute+0x330>)
 8007a0a:	4812      	ldr	r0, [pc, #72]	; (8007a54 <test_execute+0x334>)
 8007a0c:	f7f8 ff10 	bl	8000830 <test_println>
  while (*msgp)
 8007a10:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 8007a12:	6820      	ldr	r0, [r4, #0]
 8007a14:	6803      	ldr	r3, [r0, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	4798      	blx	r3
  while (*msgp)
 8007a1a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d1f7      	bne.n	8007a12 <test_execute+0x2f2>
  test_print("Final result: ");
  if (test_global_fail)
 8007a22:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <test_execute+0x338>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b93b      	cbnz	r3, 8007a38 <test_execute+0x318>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8007a28:	480c      	ldr	r0, [pc, #48]	; (8007a5c <test_execute+0x33c>)
 8007a2a:	f7f8 ff01 	bl	8000830 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <test_execute+0x338>)
 8007a30:	7818      	ldrb	r0, [r3, #0]
 8007a32:	b003      	add	sp, #12
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8007a38:	4809      	ldr	r0, [pc, #36]	; (8007a60 <test_execute+0x340>)
 8007a3a:	f7f8 fef9 	bl	8000830 <test_println>
}
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <test_execute+0x338>)
 8007a40:	7818      	ldrb	r0, [r3, #0]
 8007a42:	b003      	add	sp, #12
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8007a48:	4806      	ldr	r0, [pc, #24]	; (8007a64 <test_execute+0x344>)
 8007a4a:	f7f8 fef1 	bl	8000830 <test_println>
 8007a4e:	e683      	b.n	8007758 <test_execute+0x38>
 8007a50:	0800de3c 	.word	0x0800de3c
 8007a54:	0800d3c4 	.word	0x0800d3c4
 8007a58:	200022b0 	.word	0x200022b0
 8007a5c:	0800de8c 	.word	0x0800de8c
 8007a60:	0800de94 	.word	0x0800de94
 8007a64:	0800de4c 	.word	0x0800de4c
	...

08007a70 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 8007a70:	4901      	ldr	r1, [pc, #4]	; (8007a78 <test_rt+0x8>)
 8007a72:	f7ff be55 	b.w	8007720 <test_execute>
 8007a76:	bf00      	nop
 8007a78:	0800d31c 	.word	0x0800d31c
 8007a7c:	00000000 	.word	0x00000000

08007a80 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 8007a80:	4901      	ldr	r1, [pc, #4]	; (8007a88 <test_oslib+0x8>)
 8007a82:	f7ff be4d 	b.w	8007720 <test_execute>
 8007a86:	bf00      	nop
 8007a88:	0800bf7c 	.word	0x0800bf7c
 8007a8c:	00000000 	.word	0x00000000

08007a90 <chThdSetPriority>:
  chDbgCheck(newprio <= HIGHPRIO);
 8007a90:	28ff      	cmp	r0, #255	; 0xff
tprio_t chThdSetPriority(tprio_t newprio) {
 8007a92:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck(newprio <= HIGHPRIO);
 8007a94:	d820      	bhi.n	8007ad8 <chThdSetPriority+0x48>
 8007a96:	4604      	mov	r4, r0
 8007a98:	2320      	movs	r3, #32
 8007a9a:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8007a9e:	4d11      	ldr	r5, [pc, #68]	; (8007ae4 <chThdSetPriority+0x54>)
  _dbg_check_lock();
 8007aa0:	f7fb fd86 	bl	80035b0 <_dbg_check_lock>
 8007aa4:	69ab      	ldr	r3, [r5, #24]
 8007aa6:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	42b2      	cmp	r2, r6
 8007aac:	d001      	beq.n	8007ab2 <chThdSetPriority+0x22>
 8007aae:	42a2      	cmp	r2, r4
 8007ab0:	d200      	bcs.n	8007ab4 <chThdSetPriority+0x24>
    currp->prio = newprio;
 8007ab2:	609c      	str	r4, [r3, #8]
  currp->realprio = newprio;
 8007ab4:	63dc      	str	r4, [r3, #60]	; 0x3c
  chSchRescheduleS();
 8007ab6:	f7fb fcfb 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8007aba:	f7fb fd11 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	42ab      	cmp	r3, r5
 8007ac2:	d004      	beq.n	8007ace <chThdSetPriority+0x3e>
 8007ac4:	69aa      	ldr	r2, [r5, #24]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	6892      	ldr	r2, [r2, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d307      	bcc.n	8007ade <chThdSetPriority+0x4e>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f383 8811 	msr	BASEPRI, r3
}
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(newprio <= HIGHPRIO);
 8007ad8:	4803      	ldr	r0, [pc, #12]	; (8007ae8 <chThdSetPriority+0x58>)
 8007ada:	f7f9 f801 	bl	8000ae0 <chSysHalt>
 8007ade:	4803      	ldr	r0, [pc, #12]	; (8007aec <chThdSetPriority+0x5c>)
 8007ae0:	f7f8 fffe 	bl	8000ae0 <chSysHalt>
 8007ae4:	200011b0 	.word	0x200011b0
 8007ae8:	0800b620 	.word	0x0800b620
 8007aec:	0800b2a4 	.word	0x0800b2a4

08007af0 <rt_test_003_004_execute>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8007af4:	4d37      	ldr	r5, [pc, #220]	; (8007bd4 <rt_test_003_004_execute+0xe4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8007af6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8007bec <rt_test_003_004_execute+0xfc>
 8007afa:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8007afc:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 8007afe:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 8007b00:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 8007b02:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8007b04:	4638      	mov	r0, r7
  test_set_step(2);
 8007b06:	2302      	movs	r3, #2
 8007b08:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 8007b0c:	f7ff ffc0 	bl	8007a90 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8007b10:	1b00      	subs	r0, r0, r4
 8007b12:	fab0 f080 	clz	r0, r0
 8007b16:	4930      	ldr	r1, [pc, #192]	; (8007bd8 <rt_test_003_004_execute+0xe8>)
 8007b18:	0940      	lsrs	r0, r0, #5
 8007b1a:	f7f8 fe21 	bl	8000760 <_test_assert>
 8007b1e:	b108      	cbz	r0, 8007b24 <rt_test_003_004_execute+0x34>
    chSysLock();
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
}
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8007b24:	69ab      	ldr	r3, [r5, #24]
 8007b26:	492d      	ldr	r1, [pc, #180]	; (8007bdc <rt_test_003_004_execute+0xec>)
 8007b28:	6898      	ldr	r0, [r3, #8]
 8007b2a:	1b80      	subs	r0, r0, r6
 8007b2c:	fab0 f080 	clz	r0, r0
 8007b30:	0940      	lsrs	r0, r0, #5
 8007b32:	f7f8 fe15 	bl	8000760 <_test_assert>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d1f2      	bne.n	8007b20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8007b3a:	69ab      	ldr	r3, [r5, #24]
 8007b3c:	4928      	ldr	r1, [pc, #160]	; (8007be0 <rt_test_003_004_execute+0xf0>)
 8007b3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b40:	1bc0      	subs	r0, r0, r7
 8007b42:	fab0 f080 	clz	r0, r0
 8007b46:	0940      	lsrs	r0, r0, #5
 8007b48:	f7f8 fe0a 	bl	8000760 <_test_assert>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1e7      	bne.n	8007b20 <rt_test_003_004_execute+0x30>
    p1 = chThdSetPriority(prio + 3);
 8007b50:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8007b52:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8007b54:	4630      	mov	r0, r6
  test_set_step(3);
 8007b56:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 8007b5a:	f7ff ff99 	bl	8007a90 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8007b5e:	1a38      	subs	r0, r7, r0
 8007b60:	fab0 f080 	clz	r0, r0
 8007b64:	491c      	ldr	r1, [pc, #112]	; (8007bd8 <rt_test_003_004_execute+0xe8>)
 8007b66:	0940      	lsrs	r0, r0, #5
 8007b68:	f7f8 fdfa 	bl	8000760 <_test_assert>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d1d7      	bne.n	8007b20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	491a      	ldr	r1, [pc, #104]	; (8007bdc <rt_test_003_004_execute+0xec>)
 8007b74:	6898      	ldr	r0, [r3, #8]
 8007b76:	1b80      	subs	r0, r0, r6
 8007b78:	fab0 f080 	clz	r0, r0
 8007b7c:	0940      	lsrs	r0, r0, #5
 8007b7e:	f7f8 fdef 	bl	8000760 <_test_assert>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1cc      	bne.n	8007b20 <rt_test_003_004_execute+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8007b86:	69ab      	ldr	r3, [r5, #24]
 8007b88:	4916      	ldr	r1, [pc, #88]	; (8007be4 <rt_test_003_004_execute+0xf4>)
 8007b8a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007b8c:	1b80      	subs	r0, r0, r6
 8007b8e:	fab0 f080 	clz	r0, r0
 8007b92:	0940      	lsrs	r0, r0, #5
 8007b94:	f7f8 fde4 	bl	8000760 <_test_assert>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1c1      	bne.n	8007b20 <rt_test_003_004_execute+0x30>
  test_set_step(4);
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	f8c8 3000 	str.w	r3, [r8]
 8007ba2:	2320      	movs	r3, #32
 8007ba4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007ba8:	f7fb fd02 	bl	80035b0 <_dbg_check_lock>
  return ch.rlist.current;
 8007bac:	69ab      	ldr	r3, [r5, #24]
    chThdGetSelfX()->prio = prio;
 8007bae:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8007bb0:	63dc      	str	r4, [r3, #60]	; 0x3c
  _dbg_check_unlock();
 8007bb2:	f7fb fc95 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007bb6:	682b      	ldr	r3, [r5, #0]
 8007bb8:	42ab      	cmp	r3, r5
 8007bba:	d004      	beq.n	8007bc6 <rt_test_003_004_execute+0xd6>
 8007bbc:	69aa      	ldr	r2, [r5, #24]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	6892      	ldr	r2, [r2, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d303      	bcc.n	8007bce <rt_test_003_004_execute+0xde>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	e7a8      	b.n	8007b20 <rt_test_003_004_execute+0x30>
 8007bce:	4806      	ldr	r0, [pc, #24]	; (8007be8 <rt_test_003_004_execute+0xf8>)
 8007bd0:	f7f8 ff86 	bl	8000ae0 <chSysHalt>
 8007bd4:	200011b0 	.word	0x200011b0
 8007bd8:	0800cbac 	.word	0x0800cbac
 8007bdc:	0800cbd0 	.word	0x0800cbd0
 8007be0:	0800cbec 	.word	0x0800cbec
 8007be4:	0800cc14 	.word	0x0800cc14
 8007be8:	0800b340 	.word	0x0800b340
 8007bec:	20002354 	.word	0x20002354

08007bf0 <rt_test_003_003_execute>:
static void rt_test_003_003_execute(void) {
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf4:	4e1c      	ldr	r6, [pc, #112]	; (8007c68 <rt_test_003_003_execute+0x78>)
  test_set_step(1);
 8007bf6:	4f1d      	ldr	r7, [pc, #116]	; (8007c6c <rt_test_003_003_execute+0x7c>)
  return chThdGetSelfX()->prio;
 8007bf8:	69b3      	ldr	r3, [r6, #24]
 8007bfa:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8007bfc:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 8007bfe:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8007c00:	4628      	mov	r0, r5
  test_set_step(1);
 8007c02:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8007c04:	f7ff ff44 	bl	8007a90 <chThdSetPriority>
 8007c08:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 8007c0a:	1b00      	subs	r0, r0, r4
 8007c0c:	fab0 f080 	clz	r0, r0
 8007c10:	0940      	lsrs	r0, r0, #5
 8007c12:	4917      	ldr	r1, [pc, #92]	; (8007c70 <rt_test_003_003_execute+0x80>)
 8007c14:	f7f8 fda4 	bl	8000760 <_test_assert>
 8007c18:	b108      	cbz	r0, 8007c1e <rt_test_003_003_execute+0x2e>
}
 8007c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1e:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 8007c20:	4914      	ldr	r1, [pc, #80]	; (8007c74 <rt_test_003_003_execute+0x84>)
 8007c22:	6898      	ldr	r0, [r3, #8]
 8007c24:	1b40      	subs	r0, r0, r5
 8007c26:	fab0 f080 	clz	r0, r0
 8007c2a:	0940      	lsrs	r0, r0, #5
 8007c2c:	f7f8 fd98 	bl	8000760 <_test_assert>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d1f2      	bne.n	8007c1a <rt_test_003_003_execute+0x2a>
  test_set_step(2);
 8007c34:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 8007c36:	4640      	mov	r0, r8
  test_set_step(2);
 8007c38:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 8007c3a:	f7ff ff29 	bl	8007a90 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8007c3e:	1a28      	subs	r0, r5, r0
 8007c40:	fab0 f080 	clz	r0, r0
 8007c44:	490a      	ldr	r1, [pc, #40]	; (8007c70 <rt_test_003_003_execute+0x80>)
 8007c46:	0940      	lsrs	r0, r0, #5
 8007c48:	f7f8 fd8a 	bl	8000760 <_test_assert>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1e4      	bne.n	8007c1a <rt_test_003_003_execute+0x2a>
 8007c50:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8007c52:	4908      	ldr	r1, [pc, #32]	; (8007c74 <rt_test_003_003_execute+0x84>)
 8007c54:	6898      	ldr	r0, [r3, #8]
 8007c56:	1b00      	subs	r0, r0, r4
 8007c58:	fab0 f080 	clz	r0, r0
 8007c5c:	0940      	lsrs	r0, r0, #5
}
 8007c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8007c62:	f7f8 bd7d 	b.w	8000760 <_test_assert>
 8007c66:	bf00      	nop
 8007c68:	200011b0 	.word	0x200011b0
 8007c6c:	20002354 	.word	0x20002354
 8007c70:	0800cbac 	.word	0x0800cbac
 8007c74:	0800cbd0 	.word	0x0800cbd0
	...

08007c80 <chThdExit>:
void chThdExit(msg_t msg) {
 8007c80:	b508      	push	{r3, lr}
 8007c82:	4604      	mov	r4, r0
 8007c84:	2320      	movs	r3, #32
 8007c86:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007c8a:	f7fb fc91 	bl	80035b0 <_dbg_check_lock>
  chThdExitS(msg);
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f7fb face 	bl	8003230 <chThdExitS>
	...

08007ca0 <bmk_thread3>:
static THD_FUNCTION(bmk_thread3, p) {
 8007ca0:	b508      	push	{r3, lr}
  chThdExit((msg_t)p);
 8007ca2:	f7ff ffed 	bl	8007c80 <chThdExit>
 8007ca6:	bf00      	nop
	...

08007cb0 <chThdRelease>:
void chThdRelease(thread_t *tp) {
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	2320      	movs	r3, #32
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f7fb fc79 	bl	80035b0 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8007cbe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d037      	beq.n	8007d36 <chThdRelease+0x86>
  tp->refs--;
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8007ccc:	6a23      	ldr	r3, [r4, #32]
 8007cce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d00e      	beq.n	8007cf4 <chThdRelease+0x44>
  _dbg_check_unlock();
 8007cd6:	f7fb fc03 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007cda:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <chThdRelease+0x9c>)
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d004      	beq.n	8007cec <chThdRelease+0x3c>
 8007ce2:	6999      	ldr	r1, [r3, #24]
 8007ce4:	6893      	ldr	r3, [r2, #8]
 8007ce6:	688a      	ldr	r2, [r1, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d327      	bcc.n	8007d3c <chThdRelease+0x8c>
 8007cec:	2300      	movs	r3, #0
 8007cee:	f383 8811 	msr	BASEPRI, r3
}
 8007cf2:	bd10      	pop	{r4, pc}
    REG_REMOVE(tp);
 8007cf4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8007cf8:	611a      	str	r2, [r3, #16]
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 8007cfe:	f7fb fbef 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <chThdRelease+0x9c>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d004      	beq.n	8007d14 <chThdRelease+0x64>
 8007d0a:	6999      	ldr	r1, [r3, #24]
 8007d0c:	6893      	ldr	r3, [r2, #8]
 8007d0e:	688a      	ldr	r2, [r1, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d313      	bcc.n	8007d3c <chThdRelease+0x8c>
 8007d14:	2300      	movs	r3, #0
 8007d16:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8007d1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d00d      	beq.n	8007d42 <chThdRelease+0x92>
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d1e3      	bne.n	8007cf2 <chThdRelease+0x42>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8007d2a:	69e1      	ldr	r1, [r4, #28]
 8007d2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8007d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8007d32:	f7fd b9a5 	b.w	8005080 <chPoolFree>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8007d36:	4806      	ldr	r0, [pc, #24]	; (8007d50 <chThdRelease+0xa0>)
 8007d38:	f7f8 fed2 	bl	8000ae0 <chSysHalt>
 8007d3c:	4805      	ldr	r0, [pc, #20]	; (8007d54 <chThdRelease+0xa4>)
 8007d3e:	f7f8 fecf 	bl	8000ae0 <chSysHalt>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8007d42:	69e0      	ldr	r0, [r4, #28]
}
 8007d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8007d48:	f7fe bb92 	b.w	8006470 <chHeapFree>
 8007d4c:	200011b0 	.word	0x200011b0
 8007d50:	0800b5d8 	.word	0x0800b5d8
 8007d54:	0800b2a4 	.word	0x0800b2a4
	...

08007d60 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	2320      	movs	r3, #32
 8007d64:	4606      	mov	r6, r0
 8007d66:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007d6a:	f7fb fc21 	bl	80035b0 <_dbg_check_lock>
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8007d6e:	4d12      	ldr	r5, [pc, #72]	; (8007db8 <chRegNextThread+0x58>)
  ntp = tp->newer;
 8007d70:	6934      	ldr	r4, [r6, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8007d72:	42ac      	cmp	r4, r5
 8007d74:	d01e      	beq.n	8007db4 <chRegNextThread+0x54>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8007d76:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d017      	beq.n	8007dae <chRegNextThread+0x4e>
    ntp->refs++;
 8007d7e:	3301      	adds	r3, #1
 8007d80:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 8007d84:	f7fb fbac 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	42ab      	cmp	r3, r5
 8007d8c:	d004      	beq.n	8007d98 <chRegNextThread+0x38>
 8007d8e:	69aa      	ldr	r2, [r5, #24]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	6892      	ldr	r2, [r2, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d307      	bcc.n	8007da8 <chRegNextThread+0x48>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff ff86 	bl	8007cb0 <chThdRelease>
#endif

  return ntp;
}
 8007da4:	4620      	mov	r0, r4
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	4804      	ldr	r0, [pc, #16]	; (8007dbc <chRegNextThread+0x5c>)
 8007daa:	f7f8 fe99 	bl	8000ae0 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8007dae:	4804      	ldr	r0, [pc, #16]	; (8007dc0 <chRegNextThread+0x60>)
 8007db0:	f7f8 fe96 	bl	8000ae0 <chSysHalt>
    ntp = NULL;
 8007db4:	2400      	movs	r4, #0
 8007db6:	e7e5      	b.n	8007d84 <chRegNextThread+0x24>
 8007db8:	200011b0 	.word	0x200011b0
 8007dbc:	0800b3cc 	.word	0x0800b3cc
 8007dc0:	0800b65c 	.word	0x0800b65c
	...

08007dd0 <cmd_threads>:
  if (argc > 0) {
 8007dd0:	2900      	cmp	r1, #0
 8007dd2:	dd03      	ble.n	8007ddc <cmd_threads+0xc>
    shellUsage(chp, "threads");
 8007dd4:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <cmd_threads+0xa0>)
 8007dd6:	4927      	ldr	r1, [pc, #156]	; (8007e74 <cmd_threads+0xa4>)
 8007dd8:	f7fa be92 	b.w	8002b00 <chprintf>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8007de0:	4925      	ldr	r1, [pc, #148]	; (8007e78 <cmd_threads+0xa8>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007de2:	b086      	sub	sp, #24
 8007de4:	4606      	mov	r6, r0
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8007de6:	f7fa fe8b 	bl	8002b00 <chprintf>
 8007dea:	2320      	movs	r3, #32
 8007dec:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 8007df0:	4d22      	ldr	r5, [pc, #136]	; (8007e7c <cmd_threads+0xac>)
  _dbg_check_lock();
 8007df2:	f7fb fbdd 	bl	80035b0 <_dbg_check_lock>
 8007df6:	692c      	ldr	r4, [r5, #16]
  tp->refs++;
 8007df8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 8007e02:	f7fb fb6d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	d004      	beq.n	8007e16 <cmd_threads+0x46>
 8007e0c:	69aa      	ldr	r2, [r5, #24]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	6892      	ldr	r2, [r2, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d328      	bcc.n	8007e68 <cmd_threads+0x98>
 8007e16:	2300      	movs	r3, #0
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8007e84 <cmd_threads+0xb4>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007e20:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007e88 <cmd_threads+0xb8>
 8007e24:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007e8c <cmd_threads+0xbc>
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8007e28:	f894 0020 	ldrb.w	r0, [r4, #32]
 8007e2c:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007e30:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8007e34:	68a7      	ldr	r7, [r4, #8]
 8007e36:	68e3      	ldr	r3, [r4, #12]
    uint32_t stklimit = (uint32_t)tp->wabase;
 8007e38:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8007e3c:	3d01      	subs	r5, #1
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	bf08      	it	eq
 8007e42:	4641      	moveq	r1, r8
 8007e44:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8007e48:	9400      	str	r4, [sp, #0]
 8007e4a:	4651      	mov	r1, sl
 8007e4c:	9702      	str	r7, [sp, #8]
 8007e4e:	9501      	str	r5, [sp, #4]
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7fa fe55 	bl	8002b00 <chprintf>
    tp = chRegNextThread(tp);
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff ff82 	bl	8007d60 <chRegNextThread>
  } while (tp != NULL);
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d1e2      	bne.n	8007e28 <cmd_threads+0x58>
}
 8007e62:	b006      	add	sp, #24
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	4805      	ldr	r0, [pc, #20]	; (8007e80 <cmd_threads+0xb0>)
 8007e6a:	f7f8 fe39 	bl	8000ae0 <chSysHalt>
 8007e6e:	bf00      	nop
 8007e70:	0800da20 	.word	0x0800da20
 8007e74:	0800b918 	.word	0x0800b918
 8007e78:	0800bae8 	.word	0x0800bae8
 8007e7c:	200011b0 	.word	0x200011b0
 8007e80:	0800b3cc 	.word	0x0800b3cc
 8007e84:	0800d410 	.word	0x0800d410
 8007e88:	0800d3c4 	.word	0x0800d3c4
 8007e8c:	0800bb28 	.word	0x0800bb28

08007e90 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8007e90:	b530      	push	{r4, r5, lr}
 8007e92:	2320      	movs	r3, #32
 8007e94:	b083      	sub	sp, #12
 8007e96:	4604      	mov	r4, r0
 8007e98:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 8007e9c:	4d11      	ldr	r5, [pc, #68]	; (8007ee4 <chRegFindThreadByWorkingArea+0x54>)
  _dbg_check_lock();
 8007e9e:	f7fb fb87 	bl	80035b0 <_dbg_check_lock>
 8007ea2:	6928      	ldr	r0, [r5, #16]
  tp->refs++;
 8007ea4:	9001      	str	r0, [sp, #4]
 8007ea6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  _dbg_check_unlock();
 8007eb0:	f7fb fb16 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	9801      	ldr	r0, [sp, #4]
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	d004      	beq.n	8007ec6 <chRegFindThreadByWorkingArea+0x36>
 8007ebc:	69aa      	ldr	r2, [r5, #24]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	6892      	ldr	r2, [r2, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d30b      	bcc.n	8007ede <chRegFindThreadByWorkingArea+0x4e>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	e002      	b.n	8007ed4 <chRegFindThreadByWorkingArea+0x44>
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 8007ece:	f7ff ff47 	bl	8007d60 <chRegNextThread>
  } while (ctp != NULL);
 8007ed2:	b110      	cbz	r0, 8007eda <chRegFindThreadByWorkingArea+0x4a>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8007ed4:	69c3      	ldr	r3, [r0, #28]
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	d1f9      	bne.n	8007ece <chRegFindThreadByWorkingArea+0x3e>

  return NULL;
}
 8007eda:	b003      	add	sp, #12
 8007edc:	bd30      	pop	{r4, r5, pc}
 8007ede:	4802      	ldr	r0, [pc, #8]	; (8007ee8 <chRegFindThreadByWorkingArea+0x58>)
 8007ee0:	f7f8 fdfe 	bl	8000ae0 <chSysHalt>
 8007ee4:	200011b0 	.word	0x200011b0
 8007ee8:	0800b3cc 	.word	0x0800b3cc
 8007eec:	00000000 	.word	0x00000000

08007ef0 <chThdCreateStatic.constprop.60>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	b085      	sub	sp, #20
  chDbgCheck((wsp != NULL) &&
 8007ef4:	b110      	cbz	r0, 8007efc <chThdCreateStatic.constprop.60+0xc>
 8007ef6:	0745      	lsls	r5, r0, #29
 8007ef8:	4604      	mov	r4, r0
 8007efa:	d002      	beq.n	8007f02 <chThdCreateStatic.constprop.60+0x12>
 8007efc:	4835      	ldr	r0, [pc, #212]	; (8007fd4 <chThdCreateStatic.constprop.60+0xe4>)
 8007efe:	f7f8 fdef 	bl	8000ae0 <chSysHalt>
 8007f02:	29ff      	cmp	r1, #255	; 0xff
 8007f04:	d8fa      	bhi.n	8007efc <chThdCreateStatic.constprop.60+0xc>
 8007f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f0a:	9101      	str	r1, [sp, #4]
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8007f0c:	f7ff ffc0 	bl	8007e90 <chRegFindThreadByWorkingArea>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1f3      	bne.n	8007efc <chThdCreateStatic.constprop.60+0xc>
    *startp++ = v;
 8007f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f18:	9901      	ldr	r1, [sp, #4]
  _thread_memfill((uint8_t *)wsp,
 8007f1a:	f504 76a4 	add.w	r6, r4, #328	; 0x148
 8007f1e:	4620      	mov	r0, r4
    *startp++ = v;
 8007f20:	2555      	movs	r5, #85	; 0x55
 8007f22:	f800 5b01 	strb.w	r5, [r0], #1
  while (startp < endp) {
 8007f26:	4286      	cmp	r6, r0
 8007f28:	d1fb      	bne.n	8007f22 <chThdCreateStatic.constprop.60+0x32>
 8007f2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f2e:	9101      	str	r1, [sp, #4]
 8007f30:	2020      	movs	r0, #32
 8007f32:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 8007f36:	4d28      	ldr	r5, [pc, #160]	; (8007fd8 <chThdCreateStatic.constprop.60+0xe8>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f38:	4e28      	ldr	r6, [pc, #160]	; (8007fdc <chThdCreateStatic.constprop.60+0xec>)
  _dbg_check_lock();
 8007f3a:	f7fb fb39 	bl	80035b0 <_dbg_check_lock>
 8007f3e:	9a02      	ldr	r2, [sp, #8]
 8007f40:	9b03      	ldr	r3, [sp, #12]
  REG_INSERT(tp);
 8007f42:	6968      	ldr	r0, [r5, #20]
  tp->prio      = prio;
 8007f44:	9901      	ldr	r1, [sp, #4]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f46:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 8007f4a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007f4e:	2201      	movs	r2, #1
  tp->name      = name;
 8007f50:	4b23      	ldr	r3, [pc, #140]	; (8007fe0 <chThdCreateStatic.constprop.60+0xf0>)
  tp->prio      = prio;
 8007f52:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f56:	f104 0cdc 	add.w	ip, r4, #220	; 0xdc
  tp->realprio  = prio;
 8007f5a:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f5e:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  tp->mtxlist   = NULL;
 8007f62:	2100      	movs	r1, #0
  tp = (thread_t *)((uint8_t *)wsp + size -
 8007f64:	f504 7680 	add.w	r6, r4, #256	; 0x100
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007f68:	f884 2122 	strb.w	r2, [r4, #290]	; 0x122
  tp->name      = name;
 8007f6c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  list_init(&tp->waiting);
 8007f70:	f504 7294 	add.w	r2, r4, #296	; 0x128
  queue_init(&tp->msgqueue);
 8007f74:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  tp->state     = CH_STATE_WTSTART;
 8007f78:	2702      	movs	r7, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007f7a:	f8c4 c10c 	str.w	ip, [r4, #268]	; 0x10c
  tp->mtxlist   = NULL;
 8007f7e:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 8007f82:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
  REG_INSERT(tp);
 8007f86:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 8007f8a:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  tp->state     = CH_STATE_WTSTART;
 8007f8e:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
  REG_INSERT(tp);
 8007f92:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8007f96:	6106      	str	r6, [r0, #16]
  tqp->next = (thread_t *)tqp;
 8007f98:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 8007f9c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  tlp->next = (thread_t *)tlp;
 8007fa0:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
  chSchWakeupS(tp, MSG_OK);
 8007fa4:	4630      	mov	r0, r6
  REG_INSERT(tp);
 8007fa6:	616e      	str	r6, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 8007fa8:	f7fb f852 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 8007fac:	f7fb fa98 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	42ab      	cmp	r3, r5
 8007fb4:	d004      	beq.n	8007fc0 <chThdCreateStatic.constprop.60+0xd0>
 8007fb6:	69aa      	ldr	r2, [r5, #24]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	6892      	ldr	r2, [r2, #8]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d305      	bcc.n	8007fcc <chThdCreateStatic.constprop.60+0xdc>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f383 8811 	msr	BASEPRI, r3
}
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	b005      	add	sp, #20
 8007fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fcc:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <chThdCreateStatic.constprop.60+0xf4>)
 8007fce:	f7f8 fd87 	bl	8000ae0 <chSysHalt>
 8007fd2:	bf00      	nop
 8007fd4:	0800b52c 	.word	0x0800b52c
 8007fd8:	200011b0 	.word	0x200011b0
 8007fdc:	08000291 	.word	0x08000291
 8007fe0:	0800b8e0 	.word	0x0800b8e0
 8007fe4:	0800b2a4 	.word	0x0800b2a4
	...

08007ff0 <rt_test_010_006_execute>:
static void rt_test_010_006_execute(void) {
 8007ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8007ff4:	4b17      	ldr	r3, [pc, #92]	; (8008054 <rt_test_010_006_execute+0x64>)
  test_set_step(1);
 8007ff6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008064 <rt_test_010_006_execute+0x74>
  return chThdGetSelfX()->prio;
 8007ffa:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8007ffc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008068 <rt_test_010_006_execute+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 8008000:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008002:	4f15      	ldr	r7, [pc, #84]	; (8008058 <rt_test_010_006_execute+0x68>)
  test_set_step(1);
 8008004:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 8008006:	441d      	add	r5, r3
  test_set_step(1);
 8008008:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800800c:	f7ff fa48 	bl	80074a0 <test_wait_tick>
    n = 0;
 8008010:	2400      	movs	r4, #0
    start = test_wait_tick();
 8008012:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008014:	2300      	movs	r3, #0
 8008016:	4642      	mov	r2, r8
 8008018:	4629      	mov	r1, r5
 800801a:	4638      	mov	r0, r7
 800801c:	f7ff ff68 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008020:	f7ff fe46 	bl	8007cb0 <chThdRelease>
 8008024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008028:	f242 720f 	movw	r2, #9999	; 0x270f
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	1b9b      	subs	r3, r3, r6
 8008030:	4293      	cmp	r3, r2
      n++;
 8008032:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008036:	d9ed      	bls.n	8008014 <rt_test_010_006_execute+0x24>
  test_set_step(2);
 8008038:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800803a:	4808      	ldr	r0, [pc, #32]	; (800805c <rt_test_010_006_execute+0x6c>)
  test_set_step(2);
 800803c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8008040:	f7f8 fc16 	bl	8000870 <test_print>
    test_printn(n);
 8008044:	4620      	mov	r0, r4
 8008046:	f7f8 fbe3 	bl	8000810 <test_printn>
    test_println(" threads/S");
 800804a:	4805      	ldr	r0, [pc, #20]	; (8008060 <rt_test_010_006_execute+0x70>)
}
 800804c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8008050:	f7f8 bbee 	b.w	8000830 <test_println>
 8008054:	200011b0 	.word	0x200011b0
 8008058:	20001c40 	.word	0x20001c40
 800805c:	0800d124 	.word	0x0800d124
 8008060:	0800d08c 	.word	0x0800d08c
 8008064:	20002354 	.word	0x20002354
 8008068:	08007ca1 	.word	0x08007ca1
 800806c:	00000000 	.word	0x00000000

08008070 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8008074:	4d40      	ldr	r5, [pc, #256]	; (8008178 <rt_test_006_004_execute+0x108>)
  test_set_step(2);
 8008076:	4e41      	ldr	r6, [pc, #260]	; (800817c <rt_test_006_004_execute+0x10c>)
  return chThdGetSelfX()->prio;
 8008078:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800807a:	4b41      	ldr	r3, [pc, #260]	; (8008180 <rt_test_006_004_execute+0x110>)
 800807c:	6894      	ldr	r4, [r2, #8]
 800807e:	4841      	ldr	r0, [pc, #260]	; (8008184 <rt_test_006_004_execute+0x114>)
 8008080:	4a41      	ldr	r2, [pc, #260]	; (8008188 <rt_test_006_004_execute+0x118>)
 8008082:	4f42      	ldr	r7, [pc, #264]	; (800818c <rt_test_006_004_execute+0x11c>)
    pa = p + 1;
 8008084:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8008088:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800808c:	4641      	mov	r1, r8
  test_set_step(2);
 800808e:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8008092:	f7ff ff2d 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    pb = p + 2;
 8008096:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800809a:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 800809c:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 800809e:	4b3c      	ldr	r3, [pc, #240]	; (8008190 <rt_test_006_004_execute+0x120>)
 80080a0:	4a3c      	ldr	r2, [pc, #240]	; (8008194 <rt_test_006_004_execute+0x124>)
 80080a2:	483d      	ldr	r0, [pc, #244]	; (8008198 <rt_test_006_004_execute+0x128>)
 80080a4:	f7ff ff24 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(3);
 80080a8:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 80080aa:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 80080ac:	483b      	ldr	r0, [pc, #236]	; (800819c <rt_test_006_004_execute+0x12c>)
  test_set_step(3);
 80080ae:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 80080b0:	f7fd fcae 	bl	8005a10 <chMtxLock>
 80080b4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 80080b6:	493a      	ldr	r1, [pc, #232]	; (80081a0 <rt_test_006_004_execute+0x130>)
 80080b8:	6898      	ldr	r0, [r3, #8]
 80080ba:	1b00      	subs	r0, r0, r4
 80080bc:	fab0 f080 	clz	r0, r0
 80080c0:	0940      	lsrs	r0, r0, #5
 80080c2:	f7f8 fb4d 	bl	8000760 <_test_assert>
 80080c6:	b108      	cbz	r0, 80080cc <rt_test_006_004_execute+0x5c>
}
 80080c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 80080cc:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 80080ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 80080d2:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 80080d4:	f7ff f844 	bl	8007160 <chThdSleep>
 80080d8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80080da:	4931      	ldr	r1, [pc, #196]	; (80081a0 <rt_test_006_004_execute+0x130>)
 80080dc:	6898      	ldr	r0, [r3, #8]
 80080de:	eba0 0008 	sub.w	r0, r0, r8
 80080e2:	fab0 f080 	clz	r0, r0
 80080e6:	0940      	lsrs	r0, r0, #5
 80080e8:	f7f8 fb3a 	bl	8000760 <_test_assert>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1eb      	bne.n	80080c8 <rt_test_006_004_execute+0x58>
  test_set_step(5);
 80080f0:	2305      	movs	r3, #5
    chMtxLock(&m2);
 80080f2:	482c      	ldr	r0, [pc, #176]	; (80081a4 <rt_test_006_004_execute+0x134>)
  test_set_step(5);
 80080f4:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 80080f6:	f7fd fc8b 	bl	8005a10 <chMtxLock>
 80080fa:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 80080fc:	4928      	ldr	r1, [pc, #160]	; (80081a0 <rt_test_006_004_execute+0x130>)
 80080fe:	6898      	ldr	r0, [r3, #8]
 8008100:	eba0 0008 	sub.w	r0, r0, r8
 8008104:	fab0 f080 	clz	r0, r0
 8008108:	0940      	lsrs	r0, r0, #5
 800810a:	f7f8 fb29 	bl	8000760 <_test_assert>
 800810e:	2800      	cmp	r0, #0
 8008110:	d1da      	bne.n	80080c8 <rt_test_006_004_execute+0x58>
  test_set_step(6);
 8008112:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8008114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8008118:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 800811a:	f7ff f821 	bl	8007160 <chThdSleep>
 800811e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8008120:	491f      	ldr	r1, [pc, #124]	; (80081a0 <rt_test_006_004_execute+0x130>)
 8008122:	6898      	ldr	r0, [r3, #8]
 8008124:	eba0 0009 	sub.w	r0, r0, r9
 8008128:	fab0 f080 	clz	r0, r0
 800812c:	0940      	lsrs	r0, r0, #5
 800812e:	f7f8 fb17 	bl	8000760 <_test_assert>
 8008132:	2800      	cmp	r0, #0
 8008134:	d1c8      	bne.n	80080c8 <rt_test_006_004_execute+0x58>
  test_set_step(7);
 8008136:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8008138:	481a      	ldr	r0, [pc, #104]	; (80081a4 <rt_test_006_004_execute+0x134>)
  test_set_step(7);
 800813a:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 800813c:	f7fd fb38 	bl	80057b0 <chMtxUnlock>
 8008140:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8008142:	4917      	ldr	r1, [pc, #92]	; (80081a0 <rt_test_006_004_execute+0x130>)
 8008144:	6898      	ldr	r0, [r3, #8]
 8008146:	eba0 0008 	sub.w	r0, r0, r8
 800814a:	fab0 f080 	clz	r0, r0
 800814e:	0940      	lsrs	r0, r0, #5
 8008150:	f7f8 fb06 	bl	8000760 <_test_assert>
 8008154:	2800      	cmp	r0, #0
 8008156:	d1b7      	bne.n	80080c8 <rt_test_006_004_execute+0x58>
  test_set_step(8);
 8008158:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 800815a:	4810      	ldr	r0, [pc, #64]	; (800819c <rt_test_006_004_execute+0x12c>)
  test_set_step(8);
 800815c:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 800815e:	f7fd fb27 	bl	80057b0 <chMtxUnlock>
 8008162:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8008164:	490e      	ldr	r1, [pc, #56]	; (80081a0 <rt_test_006_004_execute+0x130>)
 8008166:	6898      	ldr	r0, [r3, #8]
 8008168:	1b00      	subs	r0, r0, r4
 800816a:	fab0 f080 	clz	r0, r0
 800816e:	0940      	lsrs	r0, r0, #5
}
 8008170:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8008174:	f7f8 baf4 	b.w	8000760 <_test_assert>
 8008178:	200011b0 	.word	0x200011b0
 800817c:	20002354 	.word	0x20002354
 8008180:	0800cd60 	.word	0x0800cd60
 8008184:	20001c40 	.word	0x20001c40
 8008188:	080072f1 	.word	0x080072f1
 800818c:	2000236c 	.word	0x2000236c
 8008190:	0800cd64 	.word	0x0800cd64
 8008194:	08007311 	.word	0x08007311
 8008198:	20001d88 	.word	0x20001d88
 800819c:	20000c38 	.word	0x20000c38
 80081a0:	0800cdb0 	.word	0x0800cdb0
 80081a4:	20000c48 	.word	0x20000c48
	...

080081b0 <rt_test_005_006_execute>:

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
}

static void rt_test_005_006_execute(void) {
 80081b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 80081b2:	4ea7      	ldr	r6, [pc, #668]	; (8008450 <rt_test_005_006_execute+0x2a0>)
static void rt_test_005_006_execute(void) {
 80081b4:	b085      	sub	sp, #20
  test_set_step(1);
 80081b6:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 80081b8:	ac01      	add	r4, sp, #4
  sp->cnt = n;
 80081ba:	2300      	movs	r3, #0
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	6032      	str	r2, [r6, #0]
  tqp->prev = (thread_t *)tqp;
 80081c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80081c4:	2320      	movs	r3, #32
 80081c6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80081ca:	f7fb f9f1 	bl	80035b0 <_dbg_check_lock>
 *
 * @iclass
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();
 80081ce:	f7f8 fcc7 	bl	8000b60 <chDbgCheckClassI>

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80081d2:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80081d4:	499f      	ldr	r1, [pc, #636]	; (8008454 <rt_test_005_006_execute+0x2a4>)
 80081d6:	2800      	cmp	r0, #0
 80081d8:	bfcc      	ite	gt
 80081da:	2000      	movgt	r0, #0
 80081dc:	2001      	movle	r0, #1
 80081de:	f7f8 fabf 	bl	8000760 <_test_assert>
 80081e2:	b180      	cbz	r0, 8008206 <rt_test_005_006_execute+0x56>
  _dbg_check_unlock();
 80081e4:	f7fb f97c 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80081e8:	4b9b      	ldr	r3, [pc, #620]	; (8008458 <rt_test_005_006_execute+0x2a8>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d005      	beq.n	80081fc <rt_test_005_006_execute+0x4c>
 80081f0:	6999      	ldr	r1, [r3, #24]
 80081f2:	6893      	ldr	r3, [r2, #8]
 80081f4:	688a      	ldr	r2, [r1, #8]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	f0c0 811f 	bcc.w	800843a <rt_test_005_006_execute+0x28a>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8008202:	b005      	add	sp, #20
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008206:	4d94      	ldr	r5, [pc, #592]	; (8008458 <rt_test_005_006_execute+0x2a8>)
  _dbg_check_unlock();
 8008208:	f7fb f96a 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	42ab      	cmp	r3, r5
 8008210:	d005      	beq.n	800821e <rt_test_005_006_execute+0x6e>
 8008212:	69aa      	ldr	r2, [r5, #24]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	6892      	ldr	r2, [r2, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	f0c0 810e 	bcc.w	800843a <rt_test_005_006_execute+0x28a>
 800821e:	2100      	movs	r1, #0
 8008220:	f381 8811 	msr	BASEPRI, r1
  test_set_step(2);
 8008224:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8008226:	4620      	mov	r0, r4
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	f7fe fe61 	bl	8006ef0 <chSemReset>
 800822e:	2320      	movs	r3, #32
 8008230:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008234:	f7fb f9bc 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8008238:	f7f8 fc92 	bl	8000b60 <chDbgCheckClassI>
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800823c:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 800823e:	4985      	ldr	r1, [pc, #532]	; (8008454 <rt_test_005_006_execute+0x2a4>)
 8008240:	2800      	cmp	r0, #0
 8008242:	bfcc      	ite	gt
 8008244:	2000      	movgt	r0, #0
 8008246:	2001      	movle	r0, #1
 8008248:	f7f8 fa8a 	bl	8000760 <_test_assert>
 800824c:	2800      	cmp	r0, #0
 800824e:	f040 80e8 	bne.w	8008422 <rt_test_005_006_execute+0x272>
  _dbg_check_unlock();
 8008252:	f7fb f945 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008256:	682b      	ldr	r3, [r5, #0]
 8008258:	42ab      	cmp	r3, r5
 800825a:	d005      	beq.n	8008268 <rt_test_005_006_execute+0xb8>
 800825c:	69aa      	ldr	r2, [r5, #24]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	6892      	ldr	r2, [r2, #8]
 8008262:	429a      	cmp	r2, r3
 8008264:	f0c0 80e9 	bcc.w	800843a <rt_test_005_006_execute+0x28a>
 8008268:	2300      	movs	r3, #0
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8008270:	4a7a      	ldr	r2, [pc, #488]	; (800845c <rt_test_005_006_execute+0x2ac>)
 8008272:	6899      	ldr	r1, [r3, #8]
 8008274:	487a      	ldr	r0, [pc, #488]	; (8008460 <rt_test_005_006_execute+0x2b0>)
 8008276:	3901      	subs	r1, #1
 8008278:	4623      	mov	r3, r4
  test_set_step(3);
 800827a:	2703      	movs	r7, #3
 800827c:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800827e:	f7ff fe37 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008282:	4a78      	ldr	r2, [pc, #480]	; (8008464 <rt_test_005_006_execute+0x2b4>)
  test_set_step(4);
 8008284:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8008286:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 8008288:	4620      	mov	r0, r4
  test_set_step(4);
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	f7fe fdb8 	bl	8006e00 <chSemWait>
 8008290:	2320      	movs	r3, #32
 8008292:	4607      	mov	r7, r0
 8008294:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008298:	f7fb f98a 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 800829c:	f7f8 fc60 	bl	8000b60 <chDbgCheckClassI>
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80082a0:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80082a2:	496c      	ldr	r1, [pc, #432]	; (8008454 <rt_test_005_006_execute+0x2a4>)
 80082a4:	2800      	cmp	r0, #0
 80082a6:	bfcc      	ite	gt
 80082a8:	2000      	movgt	r0, #0
 80082aa:	2001      	movle	r0, #1
 80082ac:	f7f8 fa58 	bl	8000760 <_test_assert>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	f040 80b6 	bne.w	8008422 <rt_test_005_006_execute+0x272>
  _dbg_check_unlock();
 80082b6:	f7fb f913 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	42ab      	cmp	r3, r5
 80082be:	d005      	beq.n	80082cc <rt_test_005_006_execute+0x11c>
 80082c0:	69aa      	ldr	r2, [r5, #24]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	6892      	ldr	r2, [r2, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	f0c0 80b7 	bcc.w	800843a <rt_test_005_006_execute+0x28a>
 80082cc:	2300      	movs	r3, #0
 80082ce:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_OK, "unexpected message");
 80082d2:	fab7 f087 	clz	r0, r7
 80082d6:	0940      	lsrs	r0, r0, #5
 80082d8:	4963      	ldr	r1, [pc, #396]	; (8008468 <rt_test_005_006_execute+0x2b8>)
 80082da:	f7f8 fa41 	bl	8000760 <_test_assert>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d18f      	bne.n	8008202 <rt_test_005_006_execute+0x52>
  test_set_step(5);
 80082e2:	2305      	movs	r3, #5
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	2320      	movs	r3, #32
 80082e8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80082ec:	f7fb f960 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80082f0:	f7f8 fc36 	bl	8000b60 <chDbgCheckClassI>
  if (bsp->sem.cnt < (cnt_t)1) {
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f340 80a2 	ble.w	8008440 <rt_test_005_006_execute+0x290>
  chSchRescheduleS();
 80082fc:	f7fb f8d8 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8008300:	f7fb f8ee 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	42ab      	cmp	r3, r5
 8008308:	d005      	beq.n	8008316 <rt_test_005_006_execute+0x166>
 800830a:	69aa      	ldr	r2, [r5, #24]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	6892      	ldr	r2, [r2, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	f0c0 8092 	bcc.w	800843a <rt_test_005_006_execute+0x28a>
 8008316:	2300      	movs	r3, #0
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	2320      	movs	r3, #32
 800831e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008322:	f7fb f945 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8008326:	f7f8 fc1b 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 800832a:	9803      	ldr	r0, [sp, #12]
 800832c:	494f      	ldr	r1, [pc, #316]	; (800846c <rt_test_005_006_execute+0x2bc>)
 800832e:	2800      	cmp	r0, #0
 8008330:	bfd4      	ite	le
 8008332:	2000      	movle	r0, #0
 8008334:	2001      	movgt	r0, #1
 8008336:	f7f8 fa13 	bl	8000760 <_test_assert>
 800833a:	2800      	cmp	r0, #0
 800833c:	d171      	bne.n	8008422 <rt_test_005_006_execute+0x272>
  _dbg_check_unlock();
 800833e:	f7fb f8cf 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	42ab      	cmp	r3, r5
 8008346:	d004      	beq.n	8008352 <rt_test_005_006_execute+0x1a2>
 8008348:	69aa      	ldr	r2, [r5, #24]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	6892      	ldr	r2, [r2, #8]
 800834e:	429a      	cmp	r2, r3
 8008350:	d373      	bcc.n	800843a <rt_test_005_006_execute+0x28a>
 8008352:	2300      	movs	r3, #0
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	2320      	movs	r3, #32
 800835a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800835e:	f7fb f927 	bl	80035b0 <_dbg_check_lock>
 8008362:	f7f8 fbfd 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8008366:	9803      	ldr	r0, [sp, #12]
 8008368:	4941      	ldr	r1, [pc, #260]	; (8008470 <rt_test_005_006_execute+0x2c0>)
 800836a:	f1a0 0001 	sub.w	r0, r0, #1
 800836e:	fab0 f080 	clz	r0, r0
 8008372:	0940      	lsrs	r0, r0, #5
 8008374:	f7f8 f9f4 	bl	8000760 <_test_assert>
 8008378:	2800      	cmp	r0, #0
 800837a:	d152      	bne.n	8008422 <rt_test_005_006_execute+0x272>
  _dbg_check_unlock();
 800837c:	f7fb f8b0 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	42ab      	cmp	r3, r5
 8008384:	d004      	beq.n	8008390 <rt_test_005_006_execute+0x1e0>
 8008386:	69aa      	ldr	r2, [r5, #24]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	6892      	ldr	r2, [r2, #8]
 800838c:	429a      	cmp	r2, r3
 800838e:	d354      	bcc.n	800843a <rt_test_005_006_execute+0x28a>
 8008390:	2300      	movs	r3, #0
 8008392:	f383 8811 	msr	BASEPRI, r3
  test_set_step(6);
 8008396:	2306      	movs	r3, #6
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	2320      	movs	r3, #32
 800839c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80083a0:	f7fb f906 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80083a4:	f7f8 fbdc 	bl	8000b60 <chDbgCheckClassI>
  if (bsp->sem.cnt < (cnt_t)1) {
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dd4c      	ble.n	8008448 <rt_test_005_006_execute+0x298>
  chSchRescheduleS();
 80083ae:	f7fb f87f 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 80083b2:	f7fb f895 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	d004      	beq.n	80083c6 <rt_test_005_006_execute+0x216>
 80083bc:	69aa      	ldr	r2, [r5, #24]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	6892      	ldr	r2, [r2, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d339      	bcc.n	800843a <rt_test_005_006_execute+0x28a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	2320      	movs	r3, #32
 80083ce:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80083d2:	f7fb f8ed 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80083d6:	f7f8 fbc3 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 80083da:	9803      	ldr	r0, [sp, #12]
 80083dc:	4925      	ldr	r1, [pc, #148]	; (8008474 <rt_test_005_006_execute+0x2c4>)
 80083de:	2800      	cmp	r0, #0
 80083e0:	bfd4      	ite	le
 80083e2:	2000      	movle	r0, #0
 80083e4:	2001      	movgt	r0, #1
 80083e6:	f7f8 f9bb 	bl	8000760 <_test_assert>
 80083ea:	b9d0      	cbnz	r0, 8008422 <rt_test_005_006_execute+0x272>
  _dbg_check_unlock();
 80083ec:	f7fb f878 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	42ab      	cmp	r3, r5
 80083f4:	d004      	beq.n	8008400 <rt_test_005_006_execute+0x250>
 80083f6:	69aa      	ldr	r2, [r5, #24]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	6892      	ldr	r2, [r2, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d31c      	bcc.n	800843a <rt_test_005_006_execute+0x28a>
 8008400:	2300      	movs	r3, #0
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	2320      	movs	r3, #32
 8008408:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800840c:	f7fb f8d0 	bl	80035b0 <_dbg_check_lock>
 8008410:	f7f8 fba6 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8008414:	9803      	ldr	r0, [sp, #12]
 8008416:	4916      	ldr	r1, [pc, #88]	; (8008470 <rt_test_005_006_execute+0x2c0>)
 8008418:	1e43      	subs	r3, r0, #1
 800841a:	4258      	negs	r0, r3
 800841c:	4158      	adcs	r0, r3
 800841e:	f7f8 f99f 	bl	8000760 <_test_assert>
  _dbg_check_unlock();
 8008422:	f7fb f85d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	42ab      	cmp	r3, r5
 800842a:	f43f aee7 	beq.w	80081fc <rt_test_005_006_execute+0x4c>
 800842e:	69aa      	ldr	r2, [r5, #24]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	6892      	ldr	r2, [r2, #8]
 8008434:	429a      	cmp	r2, r3
 8008436:	f4bf aee1 	bcs.w	80081fc <rt_test_005_006_execute+0x4c>
 800843a:	480f      	ldr	r0, [pc, #60]	; (8008478 <rt_test_005_006_execute+0x2c8>)
 800843c:	f7f8 fb50 	bl	8000ae0 <chSysHalt>
    chSemSignalI(&bsp->sem);
 8008440:	4620      	mov	r0, r4
 8008442:	f7f8 fd5d 	bl	8000f00 <chSemSignalI>
 8008446:	e759      	b.n	80082fc <rt_test_005_006_execute+0x14c>
 8008448:	4620      	mov	r0, r4
 800844a:	f7f8 fd59 	bl	8000f00 <chSemSignalI>
 800844e:	e7ae      	b.n	80083ae <rt_test_005_006_execute+0x1fe>
 8008450:	20002354 	.word	0x20002354
 8008454:	0800cd00 	.word	0x0800cd00
 8008458:	200011b0 	.word	0x200011b0
 800845c:	08004071 	.word	0x08004071
 8008460:	20001c40 	.word	0x20001c40
 8008464:	2000236c 	.word	0x2000236c
 8008468:	0800cd0c 	.word	0x0800cd0c
 800846c:	0800cd20 	.word	0x0800cd20
 8008470:	0800cd2c 	.word	0x0800cd2c
 8008474:	0800cd04 	.word	0x0800cd04
 8008478:	0800b358 	.word	0x0800b358
 800847c:	00000000 	.word	0x00000000

08008480 <rt_test_005_005_execute>:
static void rt_test_005_005_execute(void) {
 8008480:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8008482:	4b1e      	ldr	r3, [pc, #120]	; (80084fc <rt_test_005_005_execute+0x7c>)
  test_set_step(1);
 8008484:	4d1e      	ldr	r5, [pc, #120]	; (8008500 <rt_test_005_005_execute+0x80>)
  return chThdGetSelfX()->prio;
 8008486:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8008488:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <rt_test_005_005_execute+0x84>)
 800848a:	6899      	ldr	r1, [r3, #8]
 800848c:	481e      	ldr	r0, [pc, #120]	; (8008508 <rt_test_005_005_execute+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800848e:	4c1f      	ldr	r4, [pc, #124]	; (800850c <rt_test_005_005_execute+0x8c>)
  test_set_step(1);
 8008490:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8008492:	3101      	adds	r1, #1
  test_set_step(1);
 8008494:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8008496:	2300      	movs	r3, #0
 8008498:	f7ff fd2a 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800849c:	4a1c      	ldr	r2, [pc, #112]	; (8008510 <rt_test_005_005_execute+0x90>)
  test_set_step(2);
 800849e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 80084a0:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80084a2:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 80084a4:	f7fb f894 	bl	80035d0 <chSemSignalWait.constprop.55>
 80084a8:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80084aa:	491a      	ldr	r1, [pc, #104]	; (8008514 <rt_test_005_005_execute+0x94>)
 80084ac:	1b00      	subs	r0, r0, r4
 80084ae:	fab0 f080 	clz	r0, r0
 80084b2:	0940      	lsrs	r0, r0, #5
 80084b4:	f7f8 f954 	bl	8000760 <_test_assert>
 80084b8:	b100      	cbz	r0, 80084bc <rt_test_005_005_execute+0x3c>
}
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 80084bc:	68a0      	ldr	r0, [r4, #8]
 80084be:	4916      	ldr	r1, [pc, #88]	; (8008518 <rt_test_005_005_execute+0x98>)
 80084c0:	fab0 f080 	clz	r0, r0
 80084c4:	0940      	lsrs	r0, r0, #5
 80084c6:	f7f8 f94b 	bl	8000760 <_test_assert>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d1f5      	bne.n	80084ba <rt_test_005_005_execute+0x3a>
  test_set_step(3);
 80084ce:	2303      	movs	r3, #3
 80084d0:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 80084d2:	f7fb f87d 	bl	80035d0 <chSemSignalWait.constprop.55>
 80084d6:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80084d8:	490e      	ldr	r1, [pc, #56]	; (8008514 <rt_test_005_005_execute+0x94>)
 80084da:	1b00      	subs	r0, r0, r4
 80084dc:	fab0 f080 	clz	r0, r0
 80084e0:	0940      	lsrs	r0, r0, #5
 80084e2:	f7f8 f93d 	bl	8000760 <_test_assert>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d1e7      	bne.n	80084ba <rt_test_005_005_execute+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80084ea:	68a0      	ldr	r0, [r4, #8]
 80084ec:	490a      	ldr	r1, [pc, #40]	; (8008518 <rt_test_005_005_execute+0x98>)
 80084ee:	fab0 f080 	clz	r0, r0
 80084f2:	0940      	lsrs	r0, r0, #5
}
 80084f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 80084f8:	f7f8 b932 	b.w	8000760 <_test_assert>
 80084fc:	200011b0 	.word	0x200011b0
 8008500:	20002354 	.word	0x20002354
 8008504:	08006eb1 	.word	0x08006eb1
 8008508:	20001c40 	.word	0x20001c40
 800850c:	20001c20 	.word	0x20001c20
 8008510:	2000236c 	.word	0x2000236c
 8008514:	0800cda0 	.word	0x0800cda0
 8008518:	0800ccdc 	.word	0x0800ccdc
 800851c:	00000000 	.word	0x00000000

08008520 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8008520:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck(tp != NULL);
 8008522:	b348      	cbz	r0, 8008578 <chThdWait+0x58>
 8008524:	4604      	mov	r4, r0
 8008526:	2320      	movs	r3, #32
 8008528:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp != currp, "waiting self");
 800852c:	4d15      	ldr	r5, [pc, #84]	; (8008584 <chThdWait+0x64>)
  _dbg_check_lock();
 800852e:	f7fb f83f 	bl	80035b0 <_dbg_check_lock>
 8008532:	69ab      	ldr	r3, [r5, #24]
 8008534:	42a3      	cmp	r3, r4
 8008536:	d01f      	beq.n	8008578 <chThdWait+0x58>
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 8008538:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800853c:	b1e2      	cbz	r2, 8008578 <chThdWait+0x58>
  if (tp->state != CH_STATE_FINAL) {
 800853e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8008542:	2a0f      	cmp	r2, #15
 8008544:	d005      	beq.n	8008552 <chThdWait+0x32>
  tp->queue.next = tlp->next;
 8008546:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008548:	601a      	str	r2, [r3, #0]
    chSchGoSleepS(CH_STATE_WTEXIT);
 800854a:	2009      	movs	r0, #9
  tlp->next = tp;
 800854c:	62a3      	str	r3, [r4, #40]	; 0x28
 800854e:	f7fa fdbf 	bl	80030d0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8008552:	6a66      	ldr	r6, [r4, #36]	; 0x24
  _dbg_check_unlock();
 8008554:	f7fa ffc4 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	42ab      	cmp	r3, r5
 800855c:	d004      	beq.n	8008568 <chThdWait+0x48>
 800855e:	69aa      	ldr	r2, [r5, #24]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	6892      	ldr	r2, [r2, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	d30a      	bcc.n	800857e <chThdWait+0x5e>
 8008568:	2300      	movs	r3, #0
 800856a:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800856e:	4620      	mov	r0, r4
 8008570:	f7ff fb9e 	bl	8007cb0 <chThdRelease>
}
 8008574:	4630      	mov	r0, r6
 8008576:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(tp != NULL);
 8008578:	4803      	ldr	r0, [pc, #12]	; (8008588 <chThdWait+0x68>)
 800857a:	f7f8 fab1 	bl	8000ae0 <chSysHalt>
 800857e:	4803      	ldr	r0, [pc, #12]	; (800858c <chThdWait+0x6c>)
 8008580:	f7f8 faae 	bl	8000ae0 <chSysHalt>
 8008584:	200011b0 	.word	0x200011b0
 8008588:	0800b614 	.word	0x0800b614
 800858c:	0800b2a4 	.word	0x0800b2a4

08008590 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8008590:	4baa      	ldr	r3, [pc, #680]	; (800883c <main+0x2ac>)
  PWR->CR |= PWR_CR_DBP;
 8008592:	48ab      	ldr	r0, [pc, #684]	; (8008840 <main+0x2b0>)
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8008594:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008596:	2200      	movs	r2, #0
 8008598:	f461 01fc 	orn	r1, r1, #8257536	; 0x7e0000
}

/*
 * Application entry point.
 */
int main(void) {
 800859c:	b580      	push	{r7, lr}
 800859e:	6299      	str	r1, [r3, #40]	; 0x28
 80085a0:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80085a2:	f04f 31ff 	mov.w	r1, #4294967295
 80085a6:	691c      	ldr	r4, [r3, #16]
 80085a8:	6119      	str	r1, [r3, #16]
 80085aa:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80085ac:	68dc      	ldr	r4, [r3, #12]
 80085ae:	60d9      	str	r1, [r3, #12]
 80085b0:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80085b2:	69d9      	ldr	r1, [r3, #28]
 80085b4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80085b8:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80085ba:	6801      	ldr	r1, [r0, #0]
 80085bc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80085c0:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80085c2:	6a19      	ldr	r1, [r3, #32]
 80085c4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80085c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80085cc:	b088      	sub	sp, #32
 80085ce:	d003      	beq.n	80085d8 <main+0x48>
    RCC->BDCR = RCC_BDCR_BDRST;
 80085d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80085d4:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 80085d6:	621a      	str	r2, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80085d8:	4b98      	ldr	r3, [pc, #608]	; (800883c <main+0x2ac>)
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	0412      	lsls	r2, r2, #16
 80085de:	d407      	bmi.n	80085f0 <main+0x60>
    RCC->BDCR |= STM32_RTCSEL;
 80085e0:	6a1a      	ldr	r2, [r3, #32]
 80085e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e6:	621a      	str	r2, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80085e8:	6a1a      	ldr	r2, [r3, #32]
 80085ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ee:	621a      	str	r2, [r3, #32]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80085f0:	4b94      	ldr	r3, [pc, #592]	; (8008844 <main+0x2b4>)
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80085f2:	4c92      	ldr	r4, [pc, #584]	; (800883c <main+0x2ac>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 80085f4:	4894      	ldr	r0, [pc, #592]	; (8008848 <main+0x2b8>)
  usbp->state        = USB_STOP;
 80085f6:	4e95      	ldr	r6, [pc, #596]	; (800884c <main+0x2bc>)
 80085f8:	2260      	movs	r2, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80085fa:	2140      	movs	r1, #64	; 0x40
 80085fc:	2580      	movs	r5, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80085fe:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008602:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008606:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008608:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800860c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008610:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008614:	601d      	str	r5, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008616:	f44f 7500 	mov.w	r5, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800861a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800861e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008622:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008624:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008628:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800862c:	601d      	str	r5, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800862e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008632:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008636:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800863a:	601d      	str	r5, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800863c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008640:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008644:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008648:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800864a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800864e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008652:	6059      	str	r1, [r3, #4]
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008654:	69a3      	ldr	r3, [r4, #24]
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	61a3      	str	r3, [r4, #24]
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 800865c:	6803      	ldr	r3, [r0, #0]
 800865e:	2101      	movs	r1, #1
 8008660:	f043 0320 	orr.w	r3, r3, #32
  usbp->config       = NULL;
 8008664:	2200      	movs	r2, #0
 8008666:	6003      	str	r3, [r0, #0]
  usbp->state        = USB_STOP;
 8008668:	7031      	strb	r1, [r6, #0]
  usbp->config       = NULL;
 800866a:	6072      	str	r2, [r6, #4]
 800866c:	f106 032c 	add.w	r3, r6, #44	; 0x2c
 8008670:	f106 0148 	add.w	r1, r6, #72	; 0x48
    usbp->in_params[i]  = NULL;
 8008674:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8008678:	428b      	cmp	r3, r1
    usbp->out_params[i] = NULL;
 800867a:	619a      	str	r2, [r3, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800867c:	d1fa      	bne.n	8008674 <main+0xe4>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800867e:	496f      	ldr	r1, [pc, #444]	; (800883c <main+0x2ac>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8008680:	4873      	ldr	r0, [pc, #460]	; (8008850 <main+0x2c0>)
  ST_ENABLE_CLOCK();
 8008682:	69cb      	ldr	r3, [r1, #28]
  usbp->transmitting = 0;
 8008684:	60b2      	str	r2, [r6, #8]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	61cb      	str	r3, [r1, #28]
  ST_ENABLE_STOP();
 800868c:	6883      	ldr	r3, [r0, #8]
  tqp->next = (thread_t *)tqp;
 800868e:	4d71      	ldr	r5, [pc, #452]	; (8008854 <main+0x2c4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008690:	496c      	ldr	r1, [pc, #432]	; (8008844 <main+0x2b4>)
  tqp->prev = (thread_t *)tqp;
 8008692:	606d      	str	r5, [r5, #4]
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	6083      	str	r3, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800869a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800869e:	f641 401f 	movw	r0, #7199	; 0x1c1f
 80086a2:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295
 80086a8:	62d8      	str	r0, [r3, #44]	; 0x2c
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 80086aa:	4c6b      	ldr	r4, [pc, #428]	; (8008858 <main+0x2c8>)
  ch.vtlist.delta = (sysinterval_t)-1;
 80086ac:	6268      	str	r0, [r5, #36]	; 0x24
  STM32_ST_TIM->CCMR1  = 0;
 80086ae:	619a      	str	r2, [r3, #24]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 80086b0:	f105 0040 	add.w	r0, r5, #64	; 0x40
  ch.rlist.prio = NOPRIO;
 80086b4:	60aa      	str	r2, [r5, #8]
  STM32_ST_TIM->CCR[0] = 0;
 80086b6:	635a      	str	r2, [r3, #52]	; 0x34
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80086b8:	612d      	str	r5, [r5, #16]
  STM32_ST_TIM->DIER   = 0;
 80086ba:	60da      	str	r2, [r3, #12]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80086bc:	616d      	str	r5, [r5, #20]
  STM32_ST_TIM->CR2    = 0;
 80086be:	605a      	str	r2, [r3, #4]
  ch.vtlist.lasttime = (systime_t)0;
 80086c0:	62aa      	str	r2, [r5, #40]	; 0x28
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80086c2:	2201      	movs	r2, #1
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 80086c4:	63ac      	str	r4, [r5, #56]	; 0x38
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 80086c6:	63e8      	str	r0, [r5, #60]	; 0x3c
 80086c8:	615a      	str	r2, [r3, #20]
 80086ca:	2080      	movs	r0, #128	; 0x80
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80086cc:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80086ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80086d2:	f105 021c 	add.w	r2, r5, #28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80086d6:	f881 031c 	strb.w	r0, [r1, #796]	; 0x31c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80086da:	2400      	movs	r4, #0
 80086dc:	61ea      	str	r2, [r5, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80086de:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80086e2:	622a      	str	r2, [r5, #32]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80086e4:	600b      	str	r3, [r1, #0]
  tqp->next = (thread_t *)tqp;
 80086e6:	602d      	str	r5, [r5, #0]
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80086e8:	3401      	adds	r4, #1
 80086ea:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80086ee:	2c80      	cmp	r4, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80086f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80086f4:	f36f 0202 	bfc	r2, #0, #3
 80086f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80086fc:	d1f4      	bne.n	80086e8 <main+0x158>
  ch.dbg.isr_cnt  = (cnt_t)0;
 80086fe:	2700      	movs	r7, #0
  tmp->best       = (rtcnt_t)-1;
 8008700:	f04f 31ff 	mov.w	r1, #4294967295
  tmp->cumulative = (rttime_t)0;
 8008704:	2200      	movs	r2, #0
 8008706:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 8008708:	a802      	add	r0, sp, #8
  tmp->cumulative = (rttime_t)0;
 800870a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tmp->best       = (rtcnt_t)-1;
 800870e:	9102      	str	r1, [sp, #8]
  ch.dbg.lock_cnt = (cnt_t)0;
 8008710:	e9c5 770c 	strd	r7, r7, [r5, #48]	; 0x30
  ch.tm.offset = (rtcnt_t)0;
 8008714:	f8c5 7884 	str.w	r7, [r5, #2180]	; 0x884
  tmp->last       = (rtcnt_t)0;
 8008718:	e9cd 7703 	strd	r7, r7, [sp, #12]
  tmp->n          = (ucnt_t)0;
 800871c:	9705      	str	r7, [sp, #20]
  chTMStartMeasurementX(&tm);
 800871e:	f7f7 ffdf 	bl	80006e0 <chTMStartMeasurementX.constprop.62>
  chTMStopMeasurementX(&tm);
 8008722:	a802      	add	r0, sp, #8
 8008724:	f7f8 f944 	bl	80009b0 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8008728:	4b4c      	ldr	r3, [pc, #304]	; (800885c <main+0x2cc>)
 800872a:	484d      	ldr	r0, [pc, #308]	; (8008860 <main+0x2d0>)
 800872c:	f8df e15c 	ldr.w	lr, [pc, #348]	; 800888c <main+0x2fc>
  tp->prio      = prio;
 8008730:	f8c5 4848 	str.w	r4, [r5, #2120]	; 0x848
 8008734:	f103 010c 	add.w	r1, r3, #12
  tp->realprio  = prio;
 8008738:	f8c5 487c 	str.w	r4, [r5, #2172]	; 0x87c
  H_PAGES(&default_heap.header) = 0;
 800873c:	e9c3 7701 	strd	r7, r7, [r3, #4]
  mp->owner = NULL;
 8008740:	615f      	str	r7, [r3, #20]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8008742:	f8c3 e000 	str.w	lr, [r3]
  dlp->next = (dyn_element_t *)dlp;
 8008746:	f100 0410 	add.w	r4, r0, #16
  tqp->prev = (thread_t *)tqp;
 800874a:	e9c3 1103 	strd	r1, r1, [r3, #12]
 800874e:	f100 0324 	add.w	r3, r0, #36	; 0x24
  mp->object_size = size;
 8008752:	2114      	movs	r1, #20
  ch_memcore.nextmem = __heap_base__;
 8008754:	f8df c138 	ldr.w	ip, [pc, #312]	; 8008890 <main+0x300>
 8008758:	6104      	str	r4, [r0, #16]
 800875a:	6181      	str	r1, [r0, #24]
 800875c:	f100 0428 	add.w	r4, r0, #40	; 0x28
 8008760:	6243      	str	r3, [r0, #36]	; 0x24
 8008762:	211c      	movs	r1, #28
 8008764:	f100 033c 	add.w	r3, r0, #60	; 0x3c
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008768:	4a3e      	ldr	r2, [pc, #248]	; (8008864 <main+0x2d4>)
 800876a:	6284      	str	r4, [r0, #40]	; 0x28
 800876c:	6301      	str	r1, [r0, #48]	; 0x30
 800876e:	f100 0440 	add.w	r4, r0, #64	; 0x40
  mp->align = align;
 8008772:	2104      	movs	r1, #4
 8008774:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008776:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8008894 <main+0x304>
  mp->provider = provider;
 800877a:	4b3b      	ldr	r3, [pc, #236]	; (8008868 <main+0x2d8>)
 800877c:	6404      	str	r4, [r0, #64]	; 0x40
  mp->align = align;
 800877e:	61c1      	str	r1, [r0, #28]
 8008780:	6341      	str	r1, [r0, #52]	; 0x34
  mp->provider = provider;
 8008782:	6203      	str	r3, [r0, #32]
  ch.tm.offset = tm.last;
 8008784:	9904      	ldr	r1, [sp, #16]
 8008786:	6383      	str	r3, [r0, #56]	; 0x38
 8008788:	f8cc e000 	str.w	lr, [ip]
  ch_memcore.endmem  = __heap_end__;
 800878c:	4c37      	ldr	r4, [pc, #220]	; (800886c <main+0x2dc>)
  tp->name      = name;
 800878e:	4b38      	ldr	r3, [pc, #224]	; (8008870 <main+0x2e0>)
 8008790:	6087      	str	r7, [r0, #8]
  tp->refs      = (trefs_t)1;
 8008792:	f04f 0e01 	mov.w	lr, #1
  mp->next = NULL;
 8008796:	6147      	str	r7, [r0, #20]
 8008798:	62c7      	str	r7, [r0, #44]	; 0x2c
 800879a:	f8cc 4004 	str.w	r4, [ip, #4]
 800879e:	f8c5 1884 	str.w	r1, [r5, #2180]	; 0x884
 80087a2:	f885 e862 	strb.w	lr, [r5, #2146]	; 0x862
  tp->flags     = CH_FLAG_MODE_STATIC;
 80087a6:	f885 7861 	strb.w	r7, [r5, #2145]	; 0x861
  tp->mtxlist   = NULL;
 80087aa:	f8c5 7878 	str.w	r7, [r5, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 80087ae:	f8c5 7874 	str.w	r7, [r5, #2164]	; 0x874
 80087b2:	e9c0 0000 	strd	r0, r0, [r0]
  tp->name      = name;
 80087b6:	f8c5 3858 	str.w	r3, [r5, #2136]	; 0x858
 80087ba:	68d0      	ldr	r0, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80087bc:	492d      	ldr	r1, [pc, #180]	; (8008874 <main+0x2e4>)
  REG_INSERT(tp);
 80087be:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80087c2:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <main+0x2e8>)
 80087c4:	f8c5 c854 	str.w	ip, [r5, #2132]	; 0x854
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087c8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80087cc:	4020      	ands	r0, r4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80087ce:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80087d2:	4301      	orrs	r1, r0
 80087d4:	f6a4 340f 	subw	r4, r4, #2831	; 0xb0f
 80087d8:	f8c5 5850 	str.w	r5, [r5, #2128]	; 0x850
 80087dc:	f8cc 3010 	str.w	r3, [ip, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80087e0:	60d1      	str	r1, [r2, #12]
 80087e2:	68e1      	ldr	r1, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80087e4:	4825      	ldr	r0, [pc, #148]	; (800887c <main+0x2ec>)
  currp->state = CH_STATE_CURRENT;
 80087e6:	f885 e860 	strb.w	lr, [r5, #2144]	; 0x860
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80087ea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80087ee:	60e1      	str	r1, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80087f0:	6801      	ldr	r1, [r0, #0]
 80087f2:	616b      	str	r3, [r5, #20]
 80087f4:	ea41 010e 	orr.w	r1, r1, lr
 80087f8:	6001      	str	r1, [r0, #0]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087fa:	f04f 0c10 	mov.w	ip, #16
 80087fe:	2020      	movs	r0, #32
 8008800:	f882 c01f 	strb.w	ip, [r2, #31]
  tlp->next = (thread_t *)tlp;
 8008804:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008808:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
    currp->wabase = &__main_thread_stack_base__;
 800880c:	4c1c      	ldr	r4, [pc, #112]	; (8008880 <main+0x2f0>)
 800880e:	f8c5 1868 	str.w	r1, [r5, #2152]	; 0x868
  tqp->next = (thread_t *)tqp;
 8008812:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008816:	f8c5 286c 	str.w	r2, [r5, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 800881a:	f8c5 2870 	str.w	r2, [r5, #2160]	; 0x870
 800881e:	f8c5 485c 	str.w	r4, [r5, #2140]	; 0x85c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8008822:	61ab      	str	r3, [r5, #24]
  _dbg_check_enable();
 8008824:	f7f8 fc84 	bl	8001130 <_dbg_check_enable>
 8008828:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 800882c:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 800882e:	4815      	ldr	r0, [pc, #84]	; (8008884 <main+0x2f4>)
 8008830:	f7ff fb2e 	bl	8007e90 <chRegFindThreadByWorkingArea>
 8008834:	b380      	cbz	r0, 8008898 <main+0x308>
 8008836:	4814      	ldr	r0, [pc, #80]	; (8008888 <main+0x2f8>)
 8008838:	f7f8 f952 	bl	8000ae0 <chSysHalt>
 800883c:	40021000 	.word	0x40021000
 8008840:	40007000 	.word	0x40007000
 8008844:	e000e100 	.word	0xe000e100
 8008848:	40010000 	.word	0x40010000
 800884c:	20001128 	.word	0x20001128
 8008850:	e0042000 	.word	0xe0042000
 8008854:	200011b0 	.word	0x200011b0
 8008858:	0080fff0 	.word	0x0080fff0
 800885c:	20001b60 	.word	0x20001b60
 8008860:	20001a38 	.word	0x20001a38
 8008864:	e000ed00 	.word	0xe000ed00
 8008868:	08000c01 	.word	0x08000c01
 800886c:	2000a000 	.word	0x2000a000
 8008870:	0800b8e8 	.word	0x0800b8e8
 8008874:	05fa0300 	.word	0x05fa0300
 8008878:	200019f0 	.word	0x200019f0
 800887c:	e0001000 	.word	0xe0001000
 8008880:	20000400 	.word	0x20000400
 8008884:	20001a80 	.word	0x20001a80
 8008888:	0800b4c4 	.word	0x0800b4c4
 800888c:	08003c91 	.word	0x08003c91
 8008890:	20001b58 	.word	0x20001b58
 8008894:	200024f8 	.word	0x200024f8
 8008898:	4b74      	ldr	r3, [pc, #464]	; (8008a6c <main+0x4dc>)
    *startp++ = v;
 800889a:	2155      	movs	r1, #85	; 0x55
 800889c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80088a0:	f803 1b01 	strb.w	r1, [r3], #1
  while (startp < endp) {
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d1fb      	bne.n	80088a0 <main+0x310>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80088a8:	2320      	movs	r3, #32
 80088aa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80088ae:	f7fa fe7f 	bl	80035b0 <_dbg_check_lock>
  tp = chThdCreateSuspendedI(tdp);
 80088b2:	486f      	ldr	r0, [pc, #444]	; (8008a70 <main+0x4e0>)
 80088b4:	f7f8 f9ac 	bl	8000c10 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 80088b8:	2100      	movs	r1, #0
 80088ba:	f7fa fbc9 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 80088be:	f7fa fe0f 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	42ab      	cmp	r3, r5
 80088c6:	d005      	beq.n	80088d4 <main+0x344>
 80088c8:	69aa      	ldr	r2, [r5, #24]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	6892      	ldr	r2, [r2, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	f0c0 809d 	bcc.w	8008a0e <main+0x47e>
 80088d4:	2300      	movs	r3, #0
 80088d6:	f383 8811 	msr	BASEPRI, r3
  sdup->vmt = &vmt;
 80088da:	4c66      	ldr	r4, [pc, #408]	; (8008a74 <main+0x4e4>)
 80088dc:	4a66      	ldr	r2, [pc, #408]	; (8008a78 <main+0x4e8>)
  ibqp->bcounter  = 0;
 80088de:	61a3      	str	r3, [r4, #24]
 80088e0:	4621      	mov	r1, r4
  ibqp->ptr       = NULL;
 80088e2:	6363      	str	r3, [r4, #52]	; 0x34
 80088e4:	f841 2b04 	str.w	r2, [r1], #4
  ibqp->top       = NULL;
 80088e8:	63a3      	str	r3, [r4, #56]	; 0x38
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80088ea:	f204 428c 	addw	r2, r4, #1164	; 0x48c
  obqp->top       = NULL;
 80088ee:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  obqp->notify    = onfy;
 80088f2:	4b62      	ldr	r3, [pc, #392]	; (8008a7c <main+0x4ec>)
  ibqp->notify    = infy;
 80088f4:	4862      	ldr	r0, [pc, #392]	; (8008a80 <main+0x4f0>)
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80088f6:	65e2      	str	r2, [r4, #92]	; 0x5c
  obqp->notify    = onfy;
 80088f8:	6763      	str	r3, [r4, #116]	; 0x74
  ibqp->brdptr    = bp;
 80088fa:	f104 027c 	add.w	r2, r4, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80088fe:	f504 7321 	add.w	r3, r4, #644	; 0x284
  ibqp->bn        = n;
 8008902:	2702      	movs	r7, #2
  ibqp->notify    = infy;
 8008904:	63e0      	str	r0, [r4, #60]	; 0x3c
  esp->next = (event_listener_t *)esp;
 8008906:	6061      	str	r1, [r4, #4]
  tqp->next = (thread_t *)tqp;
 8008908:	f104 000c 	add.w	r0, r4, #12
 800890c:	f104 0144 	add.w	r1, r4, #68	; 0x44
  ibqp->bwrptr    = bp;
 8008910:	e9c4 2207 	strd	r2, r2, [r4, #28]
  ibqp->buffers   = bp;
 8008914:	6322      	str	r2, [r4, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8008916:	6263      	str	r3, [r4, #36]	; 0x24
  sdup->state = SDU_STOP;
 8008918:	2201      	movs	r2, #1
  obqp->bwrptr    = bp;
 800891a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->buffers   = bp;
 800891e:	66a3      	str	r3, [r4, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 8008920:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008924:	62a3      	str	r3, [r4, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8008926:	6623      	str	r3, [r4, #96]	; 0x60
  ibqp->link      = link;
 8008928:	6424      	str	r4, [r4, #64]	; 0x40
  obqp->link      = link;
 800892a:	67a4      	str	r4, [r4, #120]	; 0x78
  tqp->prev = (thread_t *)tqp;
 800892c:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008930:	e9c4 1111 	strd	r1, r1, [r4, #68]	; 0x44
 8008934:	7222      	strb	r2, [r4, #8]
  ibqp->suspended = suspended;
 8008936:	7522      	strb	r2, [r4, #20]
  obqp->suspended = suspended;
 8008938:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  ibqp->bn        = n;
 800893c:	62e7      	str	r7, [r4, #44]	; 0x2c
  obqp->bcounter  = n;
 800893e:	6527      	str	r7, [r4, #80]	; 0x50
  obqp->bn        = n;
 8008940:	6667      	str	r7, [r4, #100]	; 0x64
 8008942:	2320      	movs	r3, #32
 8008944:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008948:	f7fa fe32 	bl	80035b0 <_dbg_check_lock>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 800894c:	7a23      	ldrb	r3, [r4, #8]
 800894e:	3b01      	subs	r3, #1
 8008950:	2b01      	cmp	r3, #1
 8008952:	d85f      	bhi.n	8008a14 <main+0x484>
  sdup->config = config;
 8008954:	4b4b      	ldr	r3, [pc, #300]	; (8008a84 <main+0x4f4>)
 8008956:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800895a:	62f4      	str	r4, [r6, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800895c:	64b4      	str	r4, [r6, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800895e:	6334      	str	r4, [r6, #48]	; 0x30
  sdup->state = SDU_READY;
 8008960:	7227      	strb	r7, [r4, #8]
  _dbg_check_unlock();
 8008962:	f7fa fdbd 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	42ab      	cmp	r3, r5
 800896a:	d004      	beq.n	8008976 <main+0x3e6>
 800896c:	69aa      	ldr	r2, [r5, #24]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	6892      	ldr	r2, [r2, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	d354      	bcc.n	8008a20 <main+0x490>
 8008976:	2700      	movs	r7, #0
 8008978:	f387 8811 	msr	BASEPRI, r7
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
  chThdSleepMilliseconds(1500);
 800897c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8008980:	f7fe fbee 	bl	8007160 <chThdSleep>
 8008984:	2320      	movs	r3, #32
 8008986:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800898a:	f7fa fe11 	bl	80035b0 <_dbg_check_lock>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 800898e:	7832      	ldrb	r2, [r6, #0]
 8008990:	1e53      	subs	r3, r2, #1
 8008992:	2b01      	cmp	r3, #1
 8008994:	d841      	bhi.n	8008a1a <main+0x48a>
  usbp->config = config;
 8008996:	4b3c      	ldr	r3, [pc, #240]	; (8008a88 <main+0x4f8>)
 8008998:	6073      	str	r3, [r6, #4]
  if (usbp->state == USB_STOP) {
 800899a:	2a01      	cmp	r2, #1
    usbp->epc[i] = NULL;
 800899c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80089a0:	e9c6 7705 	strd	r7, r7, [r6, #20]
 80089a4:	e9c6 7707 	strd	r7, r7, [r6, #28]
 80089a8:	e9c6 7709 	strd	r7, r7, [r6, #36]	; 0x24
 80089ac:	d03b      	beq.n	8008a26 <main+0x496>
  usbp->state = USB_READY;
 80089ae:	2302      	movs	r3, #2
 80089b0:	7033      	strb	r3, [r6, #0]
  _dbg_check_unlock();
 80089b2:	f7fa fd95 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80089b6:	682b      	ldr	r3, [r5, #0]
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	d004      	beq.n	80089c6 <main+0x436>
 80089bc:	69aa      	ldr	r2, [r5, #24]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	6892      	ldr	r2, [r2, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d34f      	bcc.n	8008a66 <main+0x4d6>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	492f      	ldr	r1, [pc, #188]	; (8008a8c <main+0x4fc>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80089ce:	4a30      	ldr	r2, [pc, #192]	; (8008a90 <main+0x500>)
 80089d0:	6009      	str	r1, [r1, #0]
 80089d2:	4830      	ldr	r0, [pc, #192]	; (8008a94 <main+0x504>)
 80089d4:	4f30      	ldr	r7, [pc, #192]	; (8008a98 <main+0x508>)
 80089d6:	4e31      	ldr	r6, [pc, #196]	; (8008a9c <main+0x50c>)
  /*
   * Normal main() thread activity, spawning shells.
   */
  while (true) {
    if (PORTAB_SDU1.config->usbp->state == USB_ACTIVE) {
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 80089d8:	4d31      	ldr	r5, [pc, #196]	; (8008aa0 <main+0x510>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80089da:	2180      	movs	r1, #128	; 0x80
 80089dc:	f7ff fa88 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 80089e0:	e003      	b.n	80089ea <main+0x45a>
                                              "shell", NORMALPRIO + 1,
                                              shellThread, (void *)&shell_cfg1);
      chThdWait(shelltp);               /* Waiting termination.             */
    }
    chThdSleepMilliseconds(1000);
 80089e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80089e6:	f7fe fbbb 	bl	8007160 <chThdSleep>
    if (PORTAB_SDU1.config->usbp->state == USB_ACTIVE) {
 80089ea:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d1f5      	bne.n	80089e2 <main+0x452>
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 80089f6:	2381      	movs	r3, #129	; 0x81
 80089f8:	462a      	mov	r2, r5
 80089fa:	f640 01c8 	movw	r1, #2248	; 0x8c8
 80089fe:	e9cd 6700 	strd	r6, r7, [sp]
 8008a02:	2000      	movs	r0, #0
 8008a04:	f7fd f8cc 	bl	8005ba0 <chThdCreateFromHeap>
      chThdWait(shelltp);               /* Waiting termination.             */
 8008a08:	f7ff fd8a 	bl	8008520 <chThdWait>
 8008a0c:	e7e9      	b.n	80089e2 <main+0x452>
 8008a0e:	4825      	ldr	r0, [pc, #148]	; (8008aa4 <main+0x514>)
 8008a10:	f7f8 f866 	bl	8000ae0 <chSysHalt>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 8008a14:	4824      	ldr	r0, [pc, #144]	; (8008aa8 <main+0x518>)
 8008a16:	f7f8 f863 	bl	8000ae0 <chSysHalt>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 8008a1a:	4824      	ldr	r0, [pc, #144]	; (8008aac <main+0x51c>)
 8008a1c:	f7f8 f860 	bl	8000ae0 <chSysHalt>
 8008a20:	4823      	ldr	r0, [pc, #140]	; (8008ab0 <main+0x520>)
 8008a22:	f7f8 f85d 	bl	8000ae0 <chSysHalt>
      rccEnableUSB(true);
 8008a26:	4823      	ldr	r0, [pc, #140]	; (8008ab4 <main+0x524>)
      STM32_USB->CNTR = CNTR_FRES;
 8008a28:	f8df c098 	ldr.w	ip, [pc, #152]	; 8008ac4 <main+0x534>
      rccEnableUSB(true);
 8008a2c:	69c1      	ldr	r1, [r0, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008a2e:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <main+0x528>)
 8008a30:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008a34:	61c1      	str	r1, [r0, #28]
      STM32_USB->CNTR = CNTR_FRES;
 8008a36:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
 8008a3a:	21d0      	movs	r1, #208	; 0xd0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008a40:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008a44:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008a48:	21e0      	movs	r1, #224	; 0xe0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008a4a:	609a      	str	r2, [r3, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8008a50:	f883 134b 	strb.w	r1, [r3, #843]	; 0x34b
    usb_lld_reset(usbp);
 8008a54:	4819      	ldr	r0, [pc, #100]	; (8008abc <main+0x52c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8008a56:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8008a5a:	609a      	str	r2, [r3, #8]
      STM32_USB->CNTR = 0;
 8008a5c:	f8cc 7040 	str.w	r7, [ip, #64]	; 0x40
    usb_lld_reset(usbp);
 8008a60:	f7f8 fc3e 	bl	80012e0 <usb_lld_reset>
 8008a64:	e7a3      	b.n	80089ae <main+0x41e>
 8008a66:	4816      	ldr	r0, [pc, #88]	; (8008ac0 <main+0x530>)
 8008a68:	f7f8 f83a 	bl	8000ae0 <chSysHalt>
 8008a6c:	20001a80 	.word	0x20001a80
 8008a70:	0800bbfc 	.word	0x0800bbfc
 8008a74:	20000c98 	.word	0x20000c98
 8008a78:	0800dfa0 	.word	0x0800dfa0
 8008a7c:	08001c11 	.word	0x08001c11
 8008a80:	08001af1 	.word	0x08001af1
 8008a84:	0800d350 	.word	0x0800d350
 8008a88:	0800de9c 	.word	0x0800de9c
 8008a8c:	20001c38 	.word	0x20001c38
 8008a90:	080071b1 	.word	0x080071b1
 8008a94:	200023b0 	.word	0x200023b0
 8008a98:	0800d3c8 	.word	0x0800d3c8
 8008a9c:	08004cb1 	.word	0x08004cb1
 8008aa0:	0800bc14 	.word	0x0800bc14
 8008aa4:	0800b2a4 	.word	0x0800b2a4
 8008aa8:	0800b6cc 	.word	0x0800b6cc
 8008aac:	0800b758 	.word	0x0800b758
 8008ab0:	0800b28c 	.word	0x0800b28c
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	e000e100 	.word	0xe000e100
 8008abc:	20001128 	.word	0x20001128
 8008ac0:	0800b3c0 	.word	0x0800b3c0
 8008ac4:	40005c00 	.word	0x40005c00
	...

08008ad0 <rt_test_010_005_execute>:
static void rt_test_010_005_execute(void) {
 8008ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8008ad4:	4b17      	ldr	r3, [pc, #92]	; (8008b34 <rt_test_010_005_execute+0x64>)
  test_set_step(1);
 8008ad6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008b44 <rt_test_010_005_execute+0x74>
  return chThdGetSelfX()->prio;
 8008ada:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008adc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008b48 <rt_test_010_005_execute+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 8008ae0:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008ae2:	4f15      	ldr	r7, [pc, #84]	; (8008b38 <rt_test_010_005_execute+0x68>)
  test_set_step(1);
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8008aea:	f7fe fcd9 	bl	80074a0 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 8008aee:	3d01      	subs	r5, #1
    n = 0;
 8008af0:	2400      	movs	r4, #0
    start = test_wait_tick();
 8008af2:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8008af4:	2300      	movs	r3, #0
 8008af6:	4642      	mov	r2, r8
 8008af8:	4629      	mov	r1, r5
 8008afa:	4638      	mov	r0, r7
 8008afc:	f7ff f9f8 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008b00:	f7ff fd0e 	bl	8008520 <chThdWait>
 8008b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b08:	f242 720f 	movw	r2, #9999	; 0x270f
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	1b9b      	subs	r3, r3, r6
 8008b10:	4293      	cmp	r3, r2
      n++;
 8008b12:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b16:	d9ed      	bls.n	8008af4 <rt_test_010_005_execute+0x24>
  test_set_step(2);
 8008b18:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <rt_test_010_005_execute+0x6c>)
  test_set_step(2);
 8008b1c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8008b20:	f7f7 fea6 	bl	8000870 <test_print>
    test_printn(n);
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7f7 fe73 	bl	8000810 <test_printn>
    test_println(" threads/S");
 8008b2a:	4805      	ldr	r0, [pc, #20]	; (8008b40 <rt_test_010_005_execute+0x70>)
}
 8008b2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8008b30:	f7f7 be7e 	b.w	8000830 <test_println>
 8008b34:	200011b0 	.word	0x200011b0
 8008b38:	20001c40 	.word	0x20001c40
 8008b3c:	0800d124 	.word	0x0800d124
 8008b40:	0800d08c 	.word	0x0800d08c
 8008b44:	20002354 	.word	0x20002354
 8008b48:	08007ca1 	.word	0x08007ca1
 8008b4c:	00000000 	.word	0x00000000

08008b50 <test_wait_threads>:
void test_wait_threads(void) {
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4c07      	ldr	r4, [pc, #28]	; (8008b70 <test_wait_threads+0x20>)
      threads[i] = NULL;
 8008b54:	2600      	movs	r6, #0
 8008b56:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8008b5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8008b5e:	b118      	cbz	r0, 8008b68 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8008b60:	f7ff fcde 	bl	8008520 <chThdWait>
      threads[i] = NULL;
 8008b64:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8008b68:	42ac      	cmp	r4, r5
 8008b6a:	d1f6      	bne.n	8008b5a <test_wait_threads+0xa>
}
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000236c 	.word	0x2000236c
	...

08008b80 <rt_test_010_008_execute>:
static void rt_test_010_008_execute(void) {
 8008b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b84:	b083      	sub	sp, #12
    n = 0;
 8008b86:	ac02      	add	r4, sp, #8
  return ch.rlist.current;
 8008b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c5c <rt_test_010_008_execute+0xdc>
  test_set_step(1);
 8008b8c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8008c60 <rt_test_010_008_execute+0xe0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008b90:	4f2d      	ldr	r7, [pc, #180]	; (8008c48 <rt_test_010_008_execute+0xc8>)
 8008b92:	4e2e      	ldr	r6, [pc, #184]	; (8008c4c <rt_test_010_008_execute+0xcc>)
 8008b94:	4d2e      	ldr	r5, [pc, #184]	; (8008c50 <rt_test_010_008_execute+0xd0>)
  test_set_step(1);
 8008b96:	2201      	movs	r2, #1
    n = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 8008b9e:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008ba2:	f7fe fc7d 	bl	80074a0 <test_wait_tick>
  return chThdGetSelfX()->prio;
 8008ba6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008baa:	6899      	ldr	r1, [r3, #8]
 8008bac:	463a      	mov	r2, r7
 8008bae:	4623      	mov	r3, r4
 8008bb0:	3901      	subs	r1, #1
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7ff f99c 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008bb8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008bbc:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008bbe:	6899      	ldr	r1, [r3, #8]
 8008bc0:	463a      	mov	r2, r7
 8008bc2:	4623      	mov	r3, r4
 8008bc4:	3901      	subs	r1, #1
 8008bc6:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8008bca:	f7ff f991 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008bce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008bd2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008bd4:	6899      	ldr	r1, [r3, #8]
 8008bd6:	463a      	mov	r2, r7
 8008bd8:	4623      	mov	r3, r4
 8008bda:	3901      	subs	r1, #1
 8008bdc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008be0:	f7ff f986 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008be4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008be8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008bea:	6899      	ldr	r1, [r3, #8]
 8008bec:	463a      	mov	r2, r7
 8008bee:	4623      	mov	r3, r4
 8008bf0:	3901      	subs	r1, #1
 8008bf2:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008bf6:	f7ff f97b 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008bfa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008bfe:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008c00:	6899      	ldr	r1, [r3, #8]
 8008c02:	463a      	mov	r2, r7
 8008c04:	3901      	subs	r1, #1
 8008c06:	4623      	mov	r3, r4
 8008c08:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8008c0c:	f7ff f970 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(2);
 8008c10:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8008c12:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 8008c14:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 8008c18:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 8008c1c:	f7fe faa0 	bl	8007160 <chThdSleep>
    test_terminate_threads();
 8008c20:	f7fb fae6 	bl	80041f0 <test_terminate_threads>
    test_wait_threads();
 8008c24:	f7ff ff94 	bl	8008b50 <test_wait_threads>
  test_set_step(3);
 8008c28:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8008c2a:	480a      	ldr	r0, [pc, #40]	; (8008c54 <rt_test_010_008_execute+0xd4>)
  test_set_step(3);
 8008c2c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8008c30:	f7f7 fe1e 	bl	8000870 <test_print>
    test_printn(n);
 8008c34:	9801      	ldr	r0, [sp, #4]
 8008c36:	f7f7 fdeb 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8008c3a:	4807      	ldr	r0, [pc, #28]	; (8008c58 <rt_test_010_008_execute+0xd8>)
 8008c3c:	f7f7 fdf8 	bl	8000830 <test_println>
}
 8008c40:	b003      	add	sp, #12
 8008c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c46:	bf00      	nop
 8008c48:	08007131 	.word	0x08007131
 8008c4c:	20001c40 	.word	0x20001c40
 8008c50:	2000236c 	.word	0x2000236c
 8008c54:	0800d124 	.word	0x0800d124
 8008c58:	0800d0cc 	.word	0x0800d0cc
 8008c5c:	200011b0 	.word	0x200011b0
 8008c60:	20002354 	.word	0x20002354
	...

08008c70 <rt_test_010_007_execute>:
static void rt_test_010_007_execute(void) {
 8008c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008c74:	4d35      	ldr	r5, [pc, #212]	; (8008d4c <rt_test_010_007_execute+0xdc>)
  test_set_step(1);
 8008c76:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8008d7c <rt_test_010_007_execute+0x10c>
  return chThdGetSelfX()->prio;
 8008c7a:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008c7c:	4a34      	ldr	r2, [pc, #208]	; (8008d50 <rt_test_010_007_execute+0xe0>)
 8008c7e:	6899      	ldr	r1, [r3, #8]
 8008c80:	4834      	ldr	r0, [pc, #208]	; (8008d54 <rt_test_010_007_execute+0xe4>)
 8008c82:	4c35      	ldr	r4, [pc, #212]	; (8008d58 <rt_test_010_007_execute+0xe8>)
      chSemReset(&sem1, 0);
 8008c84:	4f35      	ldr	r7, [pc, #212]	; (8008d5c <rt_test_010_007_execute+0xec>)
  test_set_step(1);
 8008c86:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008c88:	3105      	adds	r1, #5
  test_set_step(1);
 8008c8a:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f7ff f92e 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008c94:	69ab      	ldr	r3, [r5, #24]
 8008c96:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 8008c98:	6899      	ldr	r1, [r3, #8]
 8008c9a:	4a2d      	ldr	r2, [pc, #180]	; (8008d50 <rt_test_010_007_execute+0xe0>)
 8008c9c:	4830      	ldr	r0, [pc, #192]	; (8008d60 <rt_test_010_007_execute+0xf0>)
 8008c9e:	3104      	adds	r1, #4
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f7ff f925 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008ca6:	69ab      	ldr	r3, [r5, #24]
 8008ca8:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8008caa:	6899      	ldr	r1, [r3, #8]
 8008cac:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <rt_test_010_007_execute+0xe0>)
 8008cae:	482d      	ldr	r0, [pc, #180]	; (8008d64 <rt_test_010_007_execute+0xf4>)
 8008cb0:	3103      	adds	r1, #3
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f7ff f91c 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008cb8:	69ab      	ldr	r3, [r5, #24]
 8008cba:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <rt_test_010_007_execute+0xe0>)
 8008cc0:	4829      	ldr	r0, [pc, #164]	; (8008d68 <rt_test_010_007_execute+0xf8>)
 8008cc2:	3102      	adds	r1, #2
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f7ff f913 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008cca:	69ab      	ldr	r3, [r5, #24]
 8008ccc:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8008cce:	6899      	ldr	r1, [r3, #8]
 8008cd0:	4a1f      	ldr	r2, [pc, #124]	; (8008d50 <rt_test_010_007_execute+0xe0>)
 8008cd2:	4826      	ldr	r0, [pc, #152]	; (8008d6c <rt_test_010_007_execute+0xfc>)
 8008cd4:	3101      	adds	r1, #1
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f7ff f90a 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(2);
 8008cdc:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8008cde:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8008ce0:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8008ce4:	f7fe fbdc 	bl	80074a0 <test_wait_tick>
    n = 0;
 8008ce8:	2400      	movs	r4, #0
    start = test_wait_tick();
 8008cea:	4606      	mov	r6, r0
 8008cec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      chSemReset(&sem1, 0);
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7fe f8fc 	bl	8006ef0 <chSemReset>
 8008cf8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8008cfa:	f242 720f 	movw	r2, #9999	; 0x270f
 8008cfe:	1b9b      	subs	r3, r3, r6
 8008d00:	4293      	cmp	r3, r2
      n++;
 8008d02:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d06:	d9f3      	bls.n	8008cf0 <rt_test_010_007_execute+0x80>
  test_set_step(3);
 8008d08:	2303      	movs	r3, #3
 8008d0a:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 8008d0e:	f7fb fa6f 	bl	80041f0 <test_terminate_threads>
    chSemReset(&sem1, 0);
 8008d12:	2100      	movs	r1, #0
 8008d14:	4811      	ldr	r0, [pc, #68]	; (8008d5c <rt_test_010_007_execute+0xec>)
 8008d16:	f7fe f8eb 	bl	8006ef0 <chSemReset>
    test_wait_threads();
 8008d1a:	f7ff ff19 	bl	8008b50 <test_wait_threads>
  test_set_step(4);
 8008d1e:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008d20:	4813      	ldr	r0, [pc, #76]	; (8008d70 <rt_test_010_007_execute+0x100>)
  test_set_step(4);
 8008d22:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8008d26:	f7f7 fda3 	bl	8000870 <test_print>
    test_printn(n);
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7f7 fd70 	bl	8000810 <test_printn>
    test_printn(n * 6);
 8008d30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8008d34:	480f      	ldr	r0, [pc, #60]	; (8008d74 <rt_test_010_007_execute+0x104>)
 8008d36:	f7f7 fd9b 	bl	8000870 <test_print>
    test_printn(n * 6);
 8008d3a:	0060      	lsls	r0, r4, #1
 8008d3c:	f7f7 fd68 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8008d40:	480d      	ldr	r0, [pc, #52]	; (8008d78 <rt_test_010_007_execute+0x108>)
}
 8008d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008d46:	f7f7 bd73 	b.w	8000830 <test_println>
 8008d4a:	bf00      	nop
 8008d4c:	200011b0 	.word	0x200011b0
 8008d50:	08006e81 	.word	0x08006e81
 8008d54:	20001c40 	.word	0x20001c40
 8008d58:	2000236c 	.word	0x2000236c
 8008d5c:	20001c2c 	.word	0x20001c2c
 8008d60:	20001d88 	.word	0x20001d88
 8008d64:	20001ed0 	.word	0x20001ed0
 8008d68:	20002018 	.word	0x20002018
 8008d6c:	20002160 	.word	0x20002160
 8008d70:	0800d124 	.word	0x0800d124
 8008d74:	0800d0a8 	.word	0x0800d0a8
 8008d78:	0800d0cc 	.word	0x0800d0cc
 8008d7c:	20002354 	.word	0x20002354

08008d80 <rt_test_010_004_execute>:
static void rt_test_010_004_execute(void) {
 8008d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return ch.rlist.current;
 8008d84:	4d39      	ldr	r5, [pc, #228]	; (8008e6c <rt_test_010_004_execute+0xec>)
  test_set_step(1);
 8008d86:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8008e88 <rt_test_010_004_execute+0x108>
  return chThdGetSelfX()->prio;
 8008d8a:	69ab      	ldr	r3, [r5, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008d8c:	4a38      	ldr	r2, [pc, #224]	; (8008e70 <rt_test_010_004_execute+0xf0>)
 8008d8e:	6899      	ldr	r1, [r3, #8]
 8008d90:	4838      	ldr	r0, [pc, #224]	; (8008e74 <rt_test_010_004_execute+0xf4>)
 8008d92:	3101      	adds	r1, #1
  test_set_step(1);
 8008d94:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008d96:	2300      	movs	r3, #0
  test_set_step(1);
 8008d98:	f8c8 4000 	str.w	r4, [r8]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008d9c:	f7ff f8a8 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008da0:	4a35      	ldr	r2, [pc, #212]	; (8008e78 <rt_test_010_004_execute+0xf8>)
  test_set_step(2);
 8008da2:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008da4:	4604      	mov	r4, r0
 8008da6:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008da8:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8008dac:	f7fe fb78 	bl	80074a0 <test_wait_tick>
    n = 0;
 8008db0:	2600      	movs	r6, #0
      chSchWakeupS(tp, MSG_OK);
 8008db2:	46b3      	mov	fp, r6
    start = test_wait_tick();
 8008db4:	4682      	mov	sl, r0
 8008db6:	2720      	movs	r7, #32
 8008db8:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8008dbc:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8008dc0:	f7fa fbf6 	bl	80035b0 <_dbg_check_lock>
      chSchWakeupS(tp, MSG_OK);
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f7fa f942 	bl	8003050 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8008dcc:	4620      	mov	r0, r4
 8008dce:	2100      	movs	r1, #0
 8008dd0:	f7fa f93e 	bl	8003050 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f7fa f93a 	bl	8003050 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8008ddc:	4620      	mov	r0, r4
 8008dde:	2100      	movs	r1, #0
 8008de0:	f7fa f936 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 8008de4:	f7fa fb7c 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	42ab      	cmp	r3, r5
 8008dec:	d004      	beq.n	8008df8 <rt_test_010_004_execute+0x78>
 8008dee:	69aa      	ldr	r2, [r5, #24]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	6892      	ldr	r2, [r2, #8]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d335      	bcc.n	8008e64 <rt_test_010_004_execute+0xe4>
 8008df8:	f38b 8811 	msr	BASEPRI, fp
 8008dfc:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8008e00:	f242 720f 	movw	r2, #9999	; 0x270f
 8008e04:	eba3 030a 	sub.w	r3, r3, sl
 8008e08:	4293      	cmp	r3, r2
      n += 4;
 8008e0a:	f106 0604 	add.w	r6, r6, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8008e0e:	d9d5      	bls.n	8008dbc <rt_test_010_004_execute+0x3c>
  test_set_step(3);
 8008e10:	2303      	movs	r3, #3
 8008e12:	f8c8 3000 	str.w	r3, [r8]
 8008e16:	2320      	movs	r3, #32
 8008e18:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008e1c:	f7fa fbc8 	bl	80035b0 <_dbg_check_lock>
    chSchWakeupS(tp, MSG_TIMEOUT);
 8008e20:	4620      	mov	r0, r4
 8008e22:	f04f 31ff 	mov.w	r1, #4294967295
 8008e26:	f7fa f913 	bl	8003050 <chSchWakeupS>
  _dbg_check_unlock();
 8008e2a:	f7fa fb59 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008e2e:	682b      	ldr	r3, [r5, #0]
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	d004      	beq.n	8008e3e <rt_test_010_004_execute+0xbe>
 8008e34:	69aa      	ldr	r2, [r5, #24]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	6892      	ldr	r2, [r2, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d312      	bcc.n	8008e64 <rt_test_010_004_execute+0xe4>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8008e44:	f7ff fe84 	bl	8008b50 <test_wait_threads>
  test_set_step(4);
 8008e48:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008e4a:	480c      	ldr	r0, [pc, #48]	; (8008e7c <rt_test_010_004_execute+0xfc>)
  test_set_step(4);
 8008e4c:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8008e50:	f7f7 fd0e 	bl	8000870 <test_print>
    test_printn(n * 2);
 8008e54:	0070      	lsls	r0, r6, #1
 8008e56:	f7f7 fcdb 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8008e5a:	4809      	ldr	r0, [pc, #36]	; (8008e80 <rt_test_010_004_execute+0x100>)
}
 8008e5c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 8008e60:	f7f7 bce6 	b.w	8000830 <test_println>
 8008e64:	4807      	ldr	r0, [pc, #28]	; (8008e84 <rt_test_010_004_execute+0x104>)
 8008e66:	f7f7 fe3b 	bl	8000ae0 <chSysHalt>
 8008e6a:	bf00      	nop
 8008e6c:	200011b0 	.word	0x200011b0
 8008e70:	08003e61 	.word	0x08003e61
 8008e74:	20001c40 	.word	0x20001c40
 8008e78:	2000236c 	.word	0x2000236c
 8008e7c:	0800d124 	.word	0x0800d124
 8008e80:	0800d0cc 	.word	0x0800d0cc
 8008e84:	0800b37c 	.word	0x0800b37c
 8008e88:	20002354 	.word	0x20002354
 8008e8c:	00000000 	.word	0x00000000

08008e90 <rt_test_010_003_execute>:
static void rt_test_010_003_execute(void) {
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8008e94:	4e2c      	ldr	r6, [pc, #176]	; (8008f48 <rt_test_010_003_execute+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008e96:	4d2d      	ldr	r5, [pc, #180]	; (8008f4c <rt_test_010_003_execute+0xbc>)
  return chThdGetSelfX()->prio;
 8008e98:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 8008e9a:	4f2d      	ldr	r7, [pc, #180]	; (8008f50 <rt_test_010_003_execute+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008e9c:	6899      	ldr	r1, [r3, #8]
 8008e9e:	4a2d      	ldr	r2, [pc, #180]	; (8008f54 <rt_test_010_003_execute+0xc4>)
 8008ea0:	4c2d      	ldr	r4, [pc, #180]	; (8008f58 <rt_test_010_003_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008ea2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8008f68 <rt_test_010_003_execute+0xd8>
  test_set_step(1);
 8008ea6:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008eaa:	3101      	adds	r1, #1
 8008eac:	4628      	mov	r0, r5
 8008eae:	2300      	movs	r3, #0
  test_set_step(1);
 8008eb0:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008eb4:	f7ff f81c 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008eb8:	69b3      	ldr	r3, [r6, #24]
 8008eba:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008ebc:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 8008ebe:	f04f 0c02 	mov.w	ip, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008ec2:	4642      	mov	r2, r8
 8008ec4:	3902      	subs	r1, #2
 8008ec6:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8008eca:	2300      	movs	r3, #0
  test_set_step(2);
 8008ecc:	f8c7 c000 	str.w	ip, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8008ed0:	f7ff f80e 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008ed4:	69b3      	ldr	r3, [r6, #24]
 8008ed6:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8008ed8:	6899      	ldr	r1, [r3, #8]
 8008eda:	4642      	mov	r2, r8
 8008edc:	3903      	subs	r1, #3
 8008ede:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f7ff f804 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008ee8:	69b3      	ldr	r3, [r6, #24]
 8008eea:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 8008eec:	6899      	ldr	r1, [r3, #8]
 8008eee:	4642      	mov	r2, r8
 8008ef0:	3904      	subs	r1, #4
 8008ef2:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f7fe fffa 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008efc:	69b3      	ldr	r3, [r6, #24]
 8008efe:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008f00:	6899      	ldr	r1, [r3, #8]
 8008f02:	4642      	mov	r2, r8
 8008f04:	3905      	subs	r1, #5
 8008f06:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f7fe fff0 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(3);
 8008f10:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8008f12:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 8008f14:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 8008f16:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 8008f18:	f7fe fbe2 	bl	80076e0 <msg_loop_test>
 8008f1c:	4604      	mov	r4, r0
    test_wait_threads();
 8008f1e:	f7ff fe17 	bl	8008b50 <test_wait_threads>
  test_set_step(4);
 8008f22:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8008f24:	480d      	ldr	r0, [pc, #52]	; (8008f5c <rt_test_010_003_execute+0xcc>)
  test_set_step(4);
 8008f26:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8008f28:	f7f7 fca2 	bl	8000870 <test_print>
    test_printn(n);
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f7f7 fc6f 	bl	8000810 <test_printn>
    test_print(" msgs/S, ");
 8008f32:	480b      	ldr	r0, [pc, #44]	; (8008f60 <rt_test_010_003_execute+0xd0>)
 8008f34:	f7f7 fc9c 	bl	8000870 <test_print>
    test_printn(n << 1);
 8008f38:	0060      	lsls	r0, r4, #1
 8008f3a:	f7f7 fc69 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8008f3e:	4809      	ldr	r0, [pc, #36]	; (8008f64 <rt_test_010_003_execute+0xd4>)
}
 8008f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8008f44:	f7f7 bc74 	b.w	8000830 <test_println>
 8008f48:	200011b0 	.word	0x200011b0
 8008f4c:	20001c40 	.word	0x20001c40
 8008f50:	20002354 	.word	0x20002354
 8008f54:	08005491 	.word	0x08005491
 8008f58:	2000236c 	.word	0x2000236c
 8008f5c:	0800d124 	.word	0x0800d124
 8008f60:	0800d050 	.word	0x0800d050
 8008f64:	0800d0cc 	.word	0x0800d0cc
 8008f68:	08007ca1 	.word	0x08007ca1
 8008f6c:	00000000 	.word	0x00000000

08008f70 <rt_test_010_002_execute>:
static void rt_test_010_002_execute(void) {
 8008f70:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8008f72:	4b14      	ldr	r3, [pc, #80]	; (8008fc4 <rt_test_010_002_execute+0x54>)
  test_set_step(1);
 8008f74:	4c14      	ldr	r4, [pc, #80]	; (8008fc8 <rt_test_010_002_execute+0x58>)
  return chThdGetSelfX()->prio;
 8008f76:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008f78:	4a14      	ldr	r2, [pc, #80]	; (8008fcc <rt_test_010_002_execute+0x5c>)
 8008f7a:	6899      	ldr	r1, [r3, #8]
 8008f7c:	4814      	ldr	r0, [pc, #80]	; (8008fd0 <rt_test_010_002_execute+0x60>)
 8008f7e:	3101      	adds	r1, #1
  test_set_step(1);
 8008f80:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008f82:	2300      	movs	r3, #0
  test_set_step(1);
 8008f84:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008f86:	f7fe ffb3 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8008f8a:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <rt_test_010_002_execute+0x64>)
  test_set_step(2);
 8008f8c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8008f8e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8008f90:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8008f92:	f7fe fba5 	bl	80076e0 <msg_loop_test>
 8008f96:	4605      	mov	r5, r0
    test_wait_threads();
 8008f98:	f7ff fdda 	bl	8008b50 <test_wait_threads>
  test_set_step(3);
 8008f9c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <rt_test_010_002_execute+0x68>)
  test_set_step(3);
 8008fa0:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8008fa2:	f7f7 fc65 	bl	8000870 <test_print>
    test_printn(n);
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7f7 fc32 	bl	8000810 <test_printn>
    test_print(" msgs/S, ");
 8008fac:	480b      	ldr	r0, [pc, #44]	; (8008fdc <rt_test_010_002_execute+0x6c>)
 8008fae:	f7f7 fc5f 	bl	8000870 <test_print>
    test_printn(n << 1);
 8008fb2:	0068      	lsls	r0, r5, #1
 8008fb4:	f7f7 fc2c 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8008fb8:	4809      	ldr	r0, [pc, #36]	; (8008fe0 <rt_test_010_002_execute+0x70>)
}
 8008fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 8008fbe:	f7f7 bc37 	b.w	8000830 <test_println>
 8008fc2:	bf00      	nop
 8008fc4:	200011b0 	.word	0x200011b0
 8008fc8:	20002354 	.word	0x20002354
 8008fcc:	08005491 	.word	0x08005491
 8008fd0:	20001c40 	.word	0x20001c40
 8008fd4:	2000236c 	.word	0x2000236c
 8008fd8:	0800d124 	.word	0x0800d124
 8008fdc:	0800d050 	.word	0x0800d050
 8008fe0:	0800d0cc 	.word	0x0800d0cc
	...

08008ff0 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 8008ff0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	; (8009044 <rt_test_010_001_execute+0x54>)
  test_set_step(1);
 8008ff4:	4c14      	ldr	r4, [pc, #80]	; (8009048 <rt_test_010_001_execute+0x58>)
  return chThdGetSelfX()->prio;
 8008ff6:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8008ff8:	4a14      	ldr	r2, [pc, #80]	; (800904c <rt_test_010_001_execute+0x5c>)
 8008ffa:	6899      	ldr	r1, [r3, #8]
 8008ffc:	4814      	ldr	r0, [pc, #80]	; (8009050 <rt_test_010_001_execute+0x60>)
 8008ffe:	3901      	subs	r1, #1
  test_set_step(1);
 8009000:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8009002:	2300      	movs	r3, #0
  test_set_step(1);
 8009004:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8009006:	f7fe ff73 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800900a:	4a12      	ldr	r2, [pc, #72]	; (8009054 <rt_test_010_001_execute+0x64>)
  test_set_step(2);
 800900c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800900e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8009010:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8009012:	f7fe fb65 	bl	80076e0 <msg_loop_test>
 8009016:	4605      	mov	r5, r0
    test_wait_threads();
 8009018:	f7ff fd9a 	bl	8008b50 <test_wait_threads>
  test_set_step(3);
 800901c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800901e:	480e      	ldr	r0, [pc, #56]	; (8009058 <rt_test_010_001_execute+0x68>)
  test_set_step(3);
 8009020:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8009022:	f7f7 fc25 	bl	8000870 <test_print>
    test_printn(n);
 8009026:	4628      	mov	r0, r5
 8009028:	f7f7 fbf2 	bl	8000810 <test_printn>
    test_print(" msgs/S, ");
 800902c:	480b      	ldr	r0, [pc, #44]	; (800905c <rt_test_010_001_execute+0x6c>)
 800902e:	f7f7 fc1f 	bl	8000870 <test_print>
    test_printn(n << 1);
 8009032:	0068      	lsls	r0, r5, #1
 8009034:	f7f7 fbec 	bl	8000810 <test_printn>
    test_println(" ctxswc/S");
 8009038:	4809      	ldr	r0, [pc, #36]	; (8009060 <rt_test_010_001_execute+0x70>)
}
 800903a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 800903e:	f7f7 bbf7 	b.w	8000830 <test_println>
 8009042:	bf00      	nop
 8009044:	200011b0 	.word	0x200011b0
 8009048:	20002354 	.word	0x20002354
 800904c:	08005491 	.word	0x08005491
 8009050:	20001c40 	.word	0x20001c40
 8009054:	2000236c 	.word	0x2000236c
 8009058:	0800d124 	.word	0x0800d124
 800905c:	0800d050 	.word	0x0800d050
 8009060:	0800d0cc 	.word	0x0800d0cc
	...

08009070 <rt_test_009_002_execute>:

static void rt_test_009_002_execute(void) {
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
  {
    for (i = 0; i < 4; i++)
      chPoolFree(&mp1, wa[i]);
 8009072:	493b      	ldr	r1, [pc, #236]	; (8009160 <rt_test_009_002_execute+0xf0>)
 8009074:	483b      	ldr	r0, [pc, #236]	; (8009164 <rt_test_009_002_execute+0xf4>)
  {
    prio = chThdGetPriorityX();
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
 8009076:	4e3c      	ldr	r6, [pc, #240]	; (8009168 <rt_test_009_002_execute+0xf8>)
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8009078:	4c3c      	ldr	r4, [pc, #240]	; (800916c <rt_test_009_002_execute+0xfc>)
      chPoolFree(&mp1, wa[i]);
 800907a:	f7fc f801 	bl	8005080 <chPoolFree>
 800907e:	493c      	ldr	r1, [pc, #240]	; (8009170 <rt_test_009_002_execute+0x100>)
 8009080:	4838      	ldr	r0, [pc, #224]	; (8009164 <rt_test_009_002_execute+0xf4>)
 8009082:	f7fb fffd 	bl	8005080 <chPoolFree>
 8009086:	493b      	ldr	r1, [pc, #236]	; (8009174 <rt_test_009_002_execute+0x104>)
 8009088:	4836      	ldr	r0, [pc, #216]	; (8009164 <rt_test_009_002_execute+0xf4>)
 800908a:	f7fb fff9 	bl	8005080 <chPoolFree>
 800908e:	493a      	ldr	r1, [pc, #232]	; (8009178 <rt_test_009_002_execute+0x108>)
 8009090:	4834      	ldr	r0, [pc, #208]	; (8009164 <rt_test_009_002_execute+0xf4>)
 8009092:	f7fb fff5 	bl	8005080 <chPoolFree>
  return ch.rlist.current;
 8009096:	4b39      	ldr	r3, [pc, #228]	; (800917c <rt_test_009_002_execute+0x10c>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8009098:	4a39      	ldr	r2, [pc, #228]	; (8009180 <rt_test_009_002_execute+0x110>)
  return chThdGetSelfX()->prio;
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	4839      	ldr	r0, [pc, #228]	; (8009184 <rt_test_009_002_execute+0x114>)
 800909e:	689d      	ldr	r5, [r3, #8]
  test_set_step(3);
 80090a0:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80090a2:	1e69      	subs	r1, r5, #1
  test_set_step(3);
 80090a4:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80090a6:	f7fc f86b 	bl	8005180 <chThdCreateFromMemoryPool.constprop.30>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80090aa:	1ea9      	subs	r1, r5, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 80090ac:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80090ae:	4a36      	ldr	r2, [pc, #216]	; (8009188 <rt_test_009_002_execute+0x118>)
 80090b0:	4836      	ldr	r0, [pc, #216]	; (800918c <rt_test_009_002_execute+0x11c>)
 80090b2:	f7fc f865 	bl	8005180 <chThdCreateFromMemoryPool.constprop.30>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80090b6:	1ee9      	subs	r1, r5, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 80090b8:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80090ba:	4a35      	ldr	r2, [pc, #212]	; (8009190 <rt_test_009_002_execute+0x120>)
 80090bc:	4835      	ldr	r0, [pc, #212]	; (8009194 <rt_test_009_002_execute+0x124>)
 80090be:	f7fc f85f 	bl	8005180 <chThdCreateFromMemoryPool.constprop.30>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80090c2:	1f29      	subs	r1, r5, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 80090c4:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80090c6:	4a34      	ldr	r2, [pc, #208]	; (8009198 <rt_test_009_002_execute+0x128>)
 80090c8:	4834      	ldr	r0, [pc, #208]	; (800919c <rt_test_009_002_execute+0x12c>)
 80090ca:	f7fc f859 	bl	8005180 <chThdCreateFromMemoryPool.constprop.30>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80090ce:	1f69      	subs	r1, r5, #5
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 80090d0:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80090d2:	4a33      	ldr	r2, [pc, #204]	; (80091a0 <rt_test_009_002_execute+0x130>)
 80090d4:	4833      	ldr	r0, [pc, #204]	; (80091a4 <rt_test_009_002_execute+0x134>)
 80090d6:	f7fc f853 	bl	8005180 <chThdCreateFromMemoryPool.constprop.30>
 80090da:	4605      	mov	r5, r0
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 80090dc:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 80090de:	6125      	str	r5, [r4, #16]
  test_set_step(4);
 80090e0:	2304      	movs	r3, #4
 80090e2:	6033      	str	r3, [r6, #0]
    test_assert((threads[0] != NULL) &&
 80090e4:	b138      	cbz	r0, 80090f6 <rt_test_009_002_execute+0x86>
 80090e6:	6860      	ldr	r0, [r4, #4]
 80090e8:	b128      	cbz	r0, 80090f6 <rt_test_009_002_execute+0x86>
 80090ea:	68a0      	ldr	r0, [r4, #8]
 80090ec:	b118      	cbz	r0, 80090f6 <rt_test_009_002_execute+0x86>
 80090ee:	68e0      	ldr	r0, [r4, #12]
 80090f0:	3000      	adds	r0, #0
 80090f2:	bf18      	it	ne
 80090f4:	2001      	movne	r0, #1
 80090f6:	492c      	ldr	r1, [pc, #176]	; (80091a8 <rt_test_009_002_execute+0x138>)
 80090f8:	f7f7 fb32 	bl	8000760 <_test_assert>
 80090fc:	b100      	cbz	r0, 8009100 <rt_test_009_002_execute+0x90>
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
}
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(threads[4] == NULL,
 8009100:	fab5 f085 	clz	r0, r5
 8009104:	0940      	lsrs	r0, r0, #5
 8009106:	4929      	ldr	r1, [pc, #164]	; (80091ac <rt_test_009_002_execute+0x13c>)
 8009108:	f7f7 fb2a 	bl	8000760 <_test_assert>
 800910c:	2800      	cmp	r0, #0
 800910e:	d1f6      	bne.n	80090fe <rt_test_009_002_execute+0x8e>
  test_set_step(5);
 8009110:	2305      	movs	r3, #5
 8009112:	6033      	str	r3, [r6, #0]
    test_wait_threads();
 8009114:	f7ff fd1c 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8009118:	4925      	ldr	r1, [pc, #148]	; (80091b0 <rt_test_009_002_execute+0x140>)
 800911a:	4826      	ldr	r0, [pc, #152]	; (80091b4 <rt_test_009_002_execute+0x144>)
 800911c:	f7f7 fbc0 	bl	80008a0 <_test_assert_sequence>
 8009120:	2800      	cmp	r0, #0
 8009122:	d1ec      	bne.n	80090fe <rt_test_009_002_execute+0x8e>
  test_set_step(6);
 8009124:	2306      	movs	r3, #6
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8009126:	4f0f      	ldr	r7, [pc, #60]	; (8009164 <rt_test_009_002_execute+0xf4>)
 8009128:	4d23      	ldr	r5, [pc, #140]	; (80091b8 <rt_test_009_002_execute+0x148>)
  test_set_step(6);
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 800912e:	4638      	mov	r0, r7
 8009130:	f7fb fff6 	bl	8005120 <chPoolAlloc>
 8009134:	3000      	adds	r0, #0
 8009136:	bf18      	it	ne
 8009138:	2001      	movne	r0, #1
 800913a:	4629      	mov	r1, r5
 800913c:	f7f7 fb10 	bl	8000760 <_test_assert>
 8009140:	2800      	cmp	r0, #0
 8009142:	d1dc      	bne.n	80090fe <rt_test_009_002_execute+0x8e>
    for (i = 0; i < 4; i++)
 8009144:	3c01      	subs	r4, #1
 8009146:	d1f2      	bne.n	800912e <rt_test_009_002_execute+0xbe>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8009148:	4806      	ldr	r0, [pc, #24]	; (8009164 <rt_test_009_002_execute+0xf4>)
 800914a:	f7fb ffe9 	bl	8005120 <chPoolAlloc>
 800914e:	fab0 f080 	clz	r0, r0
 8009152:	0940      	lsrs	r0, r0, #5
 8009154:	4919      	ldr	r1, [pc, #100]	; (80091bc <rt_test_009_002_execute+0x14c>)
}
 8009156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800915a:	f7f7 bb01 	b.w	8000760 <_test_assert>
 800915e:	bf00      	nop
 8009160:	20001c40 	.word	0x20001c40
 8009164:	20001bf0 	.word	0x20001bf0
 8009168:	20002354 	.word	0x20002354
 800916c:	2000236c 	.word	0x2000236c
 8009170:	20001d88 	.word	0x20001d88
 8009174:	20001ed0 	.word	0x20001ed0
 8009178:	20002018 	.word	0x20002018
 800917c:	200011b0 	.word	0x200011b0
 8009180:	0800cd60 	.word	0x0800cd60
 8009184:	0800cf9c 	.word	0x0800cf9c
 8009188:	0800cd64 	.word	0x0800cd64
 800918c:	0800cfa4 	.word	0x0800cfa4
 8009190:	0800cfac 	.word	0x0800cfac
 8009194:	0800cfb0 	.word	0x0800cfb0
 8009198:	0800dd04 	.word	0x0800dd04
 800919c:	0800cfb8 	.word	0x0800cfb8
 80091a0:	0800cdec 	.word	0x0800cdec
 80091a4:	0800cfc0 	.word	0x0800cfc0
 80091a8:	0800cfc8 	.word	0x0800cfc8
 80091ac:	0800cfe0 	.word	0x0800cfe0
 80091b0:	0800ce4c 	.word	0x0800ce4c
 80091b4:	0800bd00 	.word	0x0800bd00
 80091b8:	0800cffc 	.word	0x0800cffc
 80091bc:	0800d00c 	.word	0x0800d00c

080091c0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80091c4:	4b45      	ldr	r3, [pc, #276]	; (80092dc <rt_test_009_001_execute+0x11c>)
  test_set_step(2);
 80091c6:	4c46      	ldr	r4, [pc, #280]	; (80092e0 <rt_test_009_001_execute+0x120>)
  return chThdGetSelfX()->prio;
 80091c8:	699b      	ldr	r3, [r3, #24]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80091ca:	4846      	ldr	r0, [pc, #280]	; (80092e4 <rt_test_009_001_execute+0x124>)
 80091cc:	689e      	ldr	r6, [r3, #8]
static void rt_test_009_001_execute(void) {
 80091ce:	b086      	sub	sp, #24
  test_set_step(2);
 80091d0:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80091d2:	a905      	add	r1, sp, #20
 80091d4:	aa04      	add	r2, sp, #16
  test_set_step(2);
 80091d6:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80091d8:	f7fd f8da 	bl	8006390 <chHeapStatus>
 80091dc:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 80091de:	f1a0 0001 	sub.w	r0, r0, #1
 80091e2:	fab0 f080 	clz	r0, r0
 80091e6:	0940      	lsrs	r0, r0, #5
 80091e8:	493f      	ldr	r1, [pc, #252]	; (80092e8 <rt_test_009_001_execute+0x128>)
 80091ea:	f7f7 fab9 	bl	8000760 <_test_assert>
 80091ee:	b110      	cbz	r0, 80091f6 <rt_test_009_001_execute+0x36>
}
 80091f0:	b006      	add	sp, #24
 80091f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    threads[0] = chThdCreateFromHeap(&heap1,
 80091f6:	4b3d      	ldr	r3, [pc, #244]	; (80092ec <rt_test_009_001_execute+0x12c>)
 80091f8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009324 <rt_test_009_001_execute+0x164>
 80091fc:	4a3c      	ldr	r2, [pc, #240]	; (80092f0 <rt_test_009_001_execute+0x130>)
 80091fe:	4839      	ldr	r0, [pc, #228]	; (80092e4 <rt_test_009_001_execute+0x124>)
 8009200:	4f3c      	ldr	r7, [pc, #240]	; (80092f4 <rt_test_009_001_execute+0x134>)
  test_set_step(3);
 8009202:	2103      	movs	r1, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8009204:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(3);
 8009208:	6021      	str	r1, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 800920a:	1e73      	subs	r3, r6, #1
 800920c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009210:	f7fc fcc6 	bl	8005ba0 <chThdCreateFromHeap>
 8009214:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8009216:	3000      	adds	r0, #0
 8009218:	bf18      	it	ne
 800921a:	2001      	movne	r0, #1
 800921c:	4936      	ldr	r1, [pc, #216]	; (80092f8 <rt_test_009_001_execute+0x138>)
 800921e:	f7f7 fa9f 	bl	8000760 <_test_assert>
 8009222:	2800      	cmp	r0, #0
 8009224:	d1e4      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
    threads[1] = chThdCreateFromHeap(&heap1,
 8009226:	4b35      	ldr	r3, [pc, #212]	; (80092fc <rt_test_009_001_execute+0x13c>)
 8009228:	4a35      	ldr	r2, [pc, #212]	; (8009300 <rt_test_009_001_execute+0x140>)
 800922a:	482e      	ldr	r0, [pc, #184]	; (80092e4 <rt_test_009_001_execute+0x124>)
  test_set_step(4);
 800922c:	2104      	movs	r1, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 800922e:	e9cd 8300 	strd	r8, r3, [sp]
  test_set_step(4);
 8009232:	6021      	str	r1, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8009234:	1eb3      	subs	r3, r6, #2
 8009236:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800923a:	f7fc fcb1 	bl	8005ba0 <chThdCreateFromHeap>
 800923e:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8009240:	3000      	adds	r0, #0
 8009242:	bf18      	it	ne
 8009244:	2001      	movne	r0, #1
 8009246:	492c      	ldr	r1, [pc, #176]	; (80092f8 <rt_test_009_001_execute+0x138>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8009248:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 800924a:	f7f7 fa89 	bl	8000760 <_test_assert>
 800924e:	2800      	cmp	r0, #0
 8009250:	d1ce      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
    threads[2] = chThdCreateFromHeap(&heap1,
 8009252:	4a2c      	ldr	r2, [pc, #176]	; (8009304 <rt_test_009_001_execute+0x144>)
 8009254:	9201      	str	r2, [sp, #4]
  test_set_step(5);
 8009256:	2105      	movs	r1, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8009258:	1ef3      	subs	r3, r6, #3
  test_set_step(5);
 800925a:	6021      	str	r1, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 800925c:	f8cd 8000 	str.w	r8, [sp]
 8009260:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009264:	4a28      	ldr	r2, [pc, #160]	; (8009308 <rt_test_009_001_execute+0x148>)
 8009266:	481f      	ldr	r0, [pc, #124]	; (80092e4 <rt_test_009_001_execute+0x124>)
 8009268:	f7fc fc9a 	bl	8005ba0 <chThdCreateFromHeap>
 800926c:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 800926e:	fab0 f080 	clz	r0, r0
 8009272:	0940      	lsrs	r0, r0, #5
 8009274:	4925      	ldr	r1, [pc, #148]	; (800930c <rt_test_009_001_execute+0x14c>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8009276:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8009278:	f7f7 fa72 	bl	8000760 <_test_assert>
 800927c:	2800      	cmp	r0, #0
 800927e:	d1b7      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
  test_set_step(6);
 8009280:	2306      	movs	r3, #6
 8009282:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8009284:	f7ff fc64 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8009288:	4921      	ldr	r1, [pc, #132]	; (8009310 <rt_test_009_001_execute+0x150>)
 800928a:	4822      	ldr	r0, [pc, #136]	; (8009314 <rt_test_009_001_execute+0x154>)
 800928c:	f7f7 fb08 	bl	80008a0 <_test_assert_sequence>
 8009290:	2800      	cmp	r0, #0
 8009292:	d1ad      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
  test_set_step(7);
 8009294:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8009296:	a903      	add	r1, sp, #12
 8009298:	aa02      	add	r2, sp, #8
 800929a:	4812      	ldr	r0, [pc, #72]	; (80092e4 <rt_test_009_001_execute+0x124>)
  test_set_step(7);
 800929c:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800929e:	f7fd f877 	bl	8006390 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 80092a2:	1a28      	subs	r0, r5, r0
 80092a4:	fab0 f080 	clz	r0, r0
 80092a8:	491b      	ldr	r1, [pc, #108]	; (8009318 <rt_test_009_001_execute+0x158>)
 80092aa:	0940      	lsrs	r0, r0, #5
 80092ac:	f7f7 fa58 	bl	8000760 <_test_assert>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d19d      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
    test_assert(total1 == total2, "total free space changed");
 80092b4:	9805      	ldr	r0, [sp, #20]
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	4918      	ldr	r1, [pc, #96]	; (800931c <rt_test_009_001_execute+0x15c>)
 80092ba:	1ac0      	subs	r0, r0, r3
 80092bc:	fab0 f080 	clz	r0, r0
 80092c0:	0940      	lsrs	r0, r0, #5
 80092c2:	f7f7 fa4d 	bl	8000760 <_test_assert>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d192      	bne.n	80091f0 <rt_test_009_001_execute+0x30>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80092ca:	9804      	ldr	r0, [sp, #16]
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	4914      	ldr	r1, [pc, #80]	; (8009320 <rt_test_009_001_execute+0x160>)
 80092d0:	1ac3      	subs	r3, r0, r3
 80092d2:	4258      	negs	r0, r3
 80092d4:	4158      	adcs	r0, r3
 80092d6:	f7f7 fa43 	bl	8000760 <_test_assert>
 80092da:	e789      	b.n	80091f0 <rt_test_009_001_execute+0x30>
 80092dc:	200011b0 	.word	0x200011b0
 80092e0:	20002354 	.word	0x20002354
 80092e4:	20001bc4 	.word	0x20001bc4
 80092e8:	0800bda8 	.word	0x0800bda8
 80092ec:	0800cd60 	.word	0x0800cd60
 80092f0:	0800cf9c 	.word	0x0800cf9c
 80092f4:	2000236c 	.word	0x2000236c
 80092f8:	0800cfc8 	.word	0x0800cfc8
 80092fc:	0800cd64 	.word	0x0800cd64
 8009300:	0800cfa4 	.word	0x0800cfa4
 8009304:	0800cfac 	.word	0x0800cfac
 8009308:	0800cfb0 	.word	0x0800cfb0
 800930c:	0800cfe0 	.word	0x0800cfe0
 8009310:	0800ce4c 	.word	0x0800ce4c
 8009314:	0800cf34 	.word	0x0800cf34
 8009318:	0800cf38 	.word	0x0800cf38
 800931c:	0800cf50 	.word	0x0800cf50
 8009320:	0800cf6c 	.word	0x0800cf6c
 8009324:	08004c31 	.word	0x08004c31
	...

08009330 <rt_test_008_007_execute>:

static void rt_test_008_007_execute(void) {
 8009330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8009334:	4f4c      	ldr	r7, [pc, #304]	; (8009468 <rt_test_008_007_execute+0x138>)
 8009336:	f04f 0801 	mov.w	r8, #1
static void rt_test_008_007_execute(void) {
 800933a:	b08a      	sub	sp, #40	; 0x28
  test_set_step(1);
 800933c:	f8c7 8000 	str.w	r8, [r7]
 8009340:	2320      	movs	r3, #32
 8009342:	f383 8811 	msr	BASEPRI, r3
  elp->next     = esp->next;
 8009346:	4e49      	ldr	r6, [pc, #292]	; (800946c <rt_test_008_007_execute+0x13c>)
  elp->listener = currp;
 8009348:	4c49      	ldr	r4, [pc, #292]	; (8009470 <rt_test_008_007_execute+0x140>)
  elp->next     = esp->next;
 800934a:	ad0a      	add	r5, sp, #40	; 0x28
  _dbg_check_lock();
 800934c:	f7fa f930 	bl	80035b0 <_dbg_check_lock>
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	f845 3d14 	str.w	r3, [r5, #-20]!
  elp->listener = currp;
 8009356:	69a3      	ldr	r3, [r4, #24]
 8009358:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 800935a:	2200      	movs	r2, #0
  elp->wflags   = wflags;
 800935c:	f04f 33ff 	mov.w	r3, #4294967295
 8009360:	e9cd 2308 	strd	r2, r3, [sp, #32]
  elp->events   = events;
 8009364:	f8cd 801c 	str.w	r8, [sp, #28]
  esp->next     = elp;
 8009368:	6035      	str	r5, [r6, #0]
  _dbg_check_unlock();
 800936a:	f7fa f8b9 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	42a3      	cmp	r3, r4
 8009372:	d004      	beq.n	800937e <rt_test_008_007_execute+0x4e>
 8009374:	69a2      	ldr	r2, [r4, #24]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	6892      	ldr	r2, [r2, #8]
 800937a:	429a      	cmp	r2, r3
 800937c:	d345      	bcc.n	800940a <rt_test_008_007_execute+0xda>
 800937e:	f04f 0a00 	mov.w	sl, #0
 8009382:	f38a 8811 	msr	BASEPRI, sl
 8009386:	2320      	movs	r3, #32
 8009388:	f383 8811 	msr	BASEPRI, r3
  elp->next     = esp->next;
 800938c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800948c <rt_test_008_007_execute+0x15c>
 8009390:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  _dbg_check_lock();
 8009394:	f7fa f90c 	bl	80035b0 <_dbg_check_lock>
 8009398:	f8d9 3000 	ldr.w	r3, [r9]
 800939c:	f848 3d28 	str.w	r3, [r8, #-40]!
  elp->listener = currp;
 80093a0:	69a3      	ldr	r3, [r4, #24]
 80093a2:	9301      	str	r3, [sp, #4]
  elp->events   = events;
 80093a4:	2204      	movs	r2, #4
  elp->wflags   = wflags;
 80093a6:	f04f 33ff 	mov.w	r3, #4294967295
 80093aa:	9304      	str	r3, [sp, #16]
  elp->flags    = (eventflags_t)0;
 80093ac:	f8cd a00c 	str.w	sl, [sp, #12]
  elp->events   = events;
 80093b0:	9202      	str	r2, [sp, #8]
  esp->next     = elp;
 80093b2:	f8c9 8000 	str.w	r8, [r9]
  _dbg_check_unlock();
 80093b6:	f7fa f893 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d004      	beq.n	80093ca <rt_test_008_007_execute+0x9a>
 80093c0:	69a2      	ldr	r2, [r4, #24]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	6892      	ldr	r2, [r2, #8]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d31f      	bcc.n	800940a <rt_test_008_007_execute+0xda>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80093d0:	2302      	movs	r3, #2
 80093d2:	603b      	str	r3, [r7, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80093d4:	f7fe f864 	bl	80074a0 <test_wait_tick>
 80093d8:	69a2      	ldr	r2, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80093da:	4b26      	ldr	r3, [pc, #152]	; (8009474 <rt_test_008_007_execute+0x144>)
 80093dc:	6891      	ldr	r1, [r2, #8]
 80093de:	4a26      	ldr	r2, [pc, #152]	; (8009478 <rt_test_008_007_execute+0x148>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80093e0:	4682      	mov	sl, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80093e2:	3901      	subs	r1, #1
 80093e4:	4825      	ldr	r0, [pc, #148]	; (800947c <rt_test_008_007_execute+0x14c>)
 80093e6:	f7fe fd83 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 80093ea:	4a25      	ldr	r2, [pc, #148]	; (8009480 <rt_test_008_007_execute+0x150>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80093ec:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80093ee:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 80093f0:	603b      	str	r3, [r7, #0]
  {
    m = chEvtWaitAll(5);
 80093f2:	f7fa fa55 	bl	80038a0 <chEvtWaitAll.constprop.35>
    test_assert_time_window(target_time,
 80093f6:	f50a 7102 	add.w	r1, sl, #520	; 0x208
 80093fa:	f50a 70fa 	add.w	r0, sl, #500	; 0x1f4
 80093fe:	f7f7 f977 	bl	80006f0 <_test_assert_time_window.constprop.1>
 8009402:	b128      	cbz	r0, 8009410 <rt_test_008_007_execute+0xe0>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8009404:	b00a      	add	sp, #40	; 0x28
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	481e      	ldr	r0, [pc, #120]	; (8009484 <rt_test_008_007_execute+0x154>)
 800940c:	f7f7 fb68 	bl	8000ae0 <chSysHalt>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8009410:	f7fa f986 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 8009414:	fab0 f080 	clz	r0, r0
 8009418:	0940      	lsrs	r0, r0, #5
 800941a:	491b      	ldr	r1, [pc, #108]	; (8009488 <rt_test_008_007_execute+0x158>)
 800941c:	f7f7 f9a0 	bl	8000760 <_test_assert>
 8009420:	2800      	cmp	r0, #0
 8009422:	d1ef      	bne.n	8009404 <rt_test_008_007_execute+0xd4>
    test_wait_threads();
 8009424:	f7ff fb94 	bl	8008b50 <test_wait_threads>
  test_set_step(4);
 8009428:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el1);
 800942a:	4629      	mov	r1, r5
 800942c:	480f      	ldr	r0, [pc, #60]	; (800946c <rt_test_008_007_execute+0x13c>)
  test_set_step(4);
 800942e:	603b      	str	r3, [r7, #0]
    chEvtUnregister(&es1, &el1);
 8009430:	f7fc f8c6 	bl	80055c0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8009434:	4641      	mov	r1, r8
 8009436:	4815      	ldr	r0, [pc, #84]	; (800948c <rt_test_008_007_execute+0x15c>)
 8009438:	f7fc f8c2 	bl	80055c0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 800943c:	6830      	ldr	r0, [r6, #0]
 800943e:	4914      	ldr	r1, [pc, #80]	; (8009490 <rt_test_008_007_execute+0x160>)
 8009440:	1b80      	subs	r0, r0, r6
 8009442:	fab0 f080 	clz	r0, r0
 8009446:	0940      	lsrs	r0, r0, #5
 8009448:	f7f7 f98a 	bl	8000760 <_test_assert>
 800944c:	2800      	cmp	r0, #0
 800944e:	d1d9      	bne.n	8009404 <rt_test_008_007_execute+0xd4>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8009450:	f8d9 0000 	ldr.w	r0, [r9]
 8009454:	490e      	ldr	r1, [pc, #56]	; (8009490 <rt_test_008_007_execute+0x160>)
 8009456:	eba0 0009 	sub.w	r0, r0, r9
 800945a:	fab0 f080 	clz	r0, r0
 800945e:	0940      	lsrs	r0, r0, #5
 8009460:	f7f7 f97e 	bl	8000760 <_test_assert>
 8009464:	e7ce      	b.n	8009404 <rt_test_008_007_execute+0xd4>
 8009466:	bf00      	nop
 8009468:	20002354 	.word	0x20002354
 800946c:	20000c0c 	.word	0x20000c0c
 8009470:	200011b0 	.word	0x200011b0
 8009474:	0800cd60 	.word	0x0800cd60
 8009478:	08007201 	.word	0x08007201
 800947c:	20001c40 	.word	0x20001c40
 8009480:	2000236c 	.word	0x2000236c
 8009484:	0800b2d4 	.word	0x0800b2d4
 8009488:	0800cf18 	.word	0x0800cf18
 800948c:	20000c10 	.word	0x20000c10
 8009490:	0800ce2c 	.word	0x0800ce2c
	...

080094a0 <rt_test_008_005_execute>:
static void rt_test_008_005_execute(void) {
 80094a0:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 80094a2:	2005      	movs	r0, #5
  test_set_step(2);
 80094a4:	4c28      	ldr	r4, [pc, #160]	; (8009548 <rt_test_008_005_execute+0xa8>)
    chEvtAddEvents(5);
 80094a6:	f7fc f863 	bl	8005570 <chEvtAddEvents>
  test_set_step(2);
 80094aa:	2302      	movs	r3, #2
 80094ac:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 80094ae:	f7fa f9f7 	bl	80038a0 <chEvtWaitAll.constprop.35>
    test_assert(m == 5, "unexpected pending bit");
 80094b2:	f1a0 0005 	sub.w	r0, r0, #5
 80094b6:	fab0 f080 	clz	r0, r0
 80094ba:	4924      	ldr	r1, [pc, #144]	; (800954c <rt_test_008_005_execute+0xac>)
 80094bc:	0940      	lsrs	r0, r0, #5
 80094be:	f7f7 f94f 	bl	8000760 <_test_assert>
 80094c2:	b100      	cbz	r0, 80094c6 <rt_test_008_005_execute+0x26>
}
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80094c6:	f7fa f92b 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 80094ca:	fab0 f080 	clz	r0, r0
 80094ce:	0940      	lsrs	r0, r0, #5
 80094d0:	491f      	ldr	r1, [pc, #124]	; (8009550 <rt_test_008_005_execute+0xb0>)
 80094d2:	f7f7 f945 	bl	8000760 <_test_assert>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1f4      	bne.n	80094c4 <rt_test_008_005_execute+0x24>
    chEvtAddEvents(4);
 80094da:	2004      	movs	r0, #4
 80094dc:	f7fc f848 	bl	8005570 <chEvtAddEvents>
  test_set_step(4);
 80094e0:	2304      	movs	r3, #4
 80094e2:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80094e4:	f7fd ffdc 	bl	80074a0 <test_wait_tick>
  return ch.rlist.current;
 80094e8:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <rt_test_008_005_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80094ea:	4a1b      	ldr	r2, [pc, #108]	; (8009558 <rt_test_008_005_execute+0xb8>)
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80094f0:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80094f2:	3901      	subs	r1, #1
 80094f4:	4819      	ldr	r0, [pc, #100]	; (800955c <rt_test_008_005_execute+0xbc>)
 80094f6:	f7fe fcfb 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 80094fa:	4a19      	ldr	r2, [pc, #100]	; (8009560 <rt_test_008_005_execute+0xc0>)
  test_set_step(5);
 80094fc:	2305      	movs	r3, #5
 80094fe:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009500:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 8009502:	f7fa f9cd 	bl	80038a0 <chEvtWaitAll.constprop.35>
    test_assert_time_window(target_time,
 8009506:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 800950a:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 800950c:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8009510:	f7f7 f8ee 	bl	80006f0 <_test_assert_time_window.constprop.1>
 8009514:	2800      	cmp	r0, #0
 8009516:	d1d5      	bne.n	80094c4 <rt_test_008_005_execute+0x24>
    test_assert(m == 5, "event flags error");
 8009518:	f1a4 0005 	sub.w	r0, r4, #5
 800951c:	fab0 f080 	clz	r0, r0
 8009520:	0940      	lsrs	r0, r0, #5
 8009522:	4910      	ldr	r1, [pc, #64]	; (8009564 <rt_test_008_005_execute+0xc4>)
 8009524:	f7f7 f91c 	bl	8000760 <_test_assert>
 8009528:	2800      	cmp	r0, #0
 800952a:	d1cb      	bne.n	80094c4 <rt_test_008_005_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800952c:	f7fa f8f8 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 8009530:	fab0 f080 	clz	r0, r0
 8009534:	0940      	lsrs	r0, r0, #5
 8009536:	4906      	ldr	r1, [pc, #24]	; (8009550 <rt_test_008_005_execute+0xb0>)
 8009538:	f7f7 f912 	bl	8000760 <_test_assert>
 800953c:	2800      	cmp	r0, #0
 800953e:	d1c1      	bne.n	80094c4 <rt_test_008_005_execute+0x24>
}
 8009540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8009544:	f7ff bb04 	b.w	8008b50 <test_wait_threads>
 8009548:	20002354 	.word	0x20002354
 800954c:	0800cebc 	.word	0x0800cebc
 8009550:	0800cf18 	.word	0x0800cf18
 8009554:	200011b0 	.word	0x200011b0
 8009558:	08007291 	.word	0x08007291
 800955c:	20001c40 	.word	0x20001c40
 8009560:	2000236c 	.word	0x2000236c
 8009564:	0800ced4 	.word	0x0800ced4
	...

08009570 <rt_test_008_004_execute>:
static void rt_test_008_004_execute(void) {
 8009570:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(5);
 8009572:	2005      	movs	r0, #5
  test_set_step(2);
 8009574:	4c27      	ldr	r4, [pc, #156]	; (8009614 <rt_test_008_004_execute+0xa4>)
    chEvtAddEvents(5);
 8009576:	f7fb fffb 	bl	8005570 <chEvtAddEvents>
  test_set_step(2);
 800957a:	2302      	movs	r3, #2
 800957c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 800957e:	f7fa f95f 	bl	8003840 <chEvtWaitAny.constprop.36>
    test_assert(m == 5, "unexpected pending bit");
 8009582:	f1a0 0005 	sub.w	r0, r0, #5
 8009586:	fab0 f080 	clz	r0, r0
 800958a:	4923      	ldr	r1, [pc, #140]	; (8009618 <rt_test_008_004_execute+0xa8>)
 800958c:	0940      	lsrs	r0, r0, #5
 800958e:	f7f7 f8e7 	bl	8000760 <_test_assert>
 8009592:	b100      	cbz	r0, 8009596 <rt_test_008_004_execute+0x26>
}
 8009594:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8009596:	f7fa f8c3 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 800959a:	fab0 f080 	clz	r0, r0
 800959e:	0940      	lsrs	r0, r0, #5
 80095a0:	491e      	ldr	r1, [pc, #120]	; (800961c <rt_test_008_004_execute+0xac>)
 80095a2:	f7f7 f8dd 	bl	8000760 <_test_assert>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d1f4      	bne.n	8009594 <rt_test_008_004_execute+0x24>
  test_set_step(3);
 80095aa:	2303      	movs	r3, #3
 80095ac:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80095ae:	f7fd ff77 	bl	80074a0 <test_wait_tick>
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <rt_test_008_004_execute+0xb0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80095b4:	4a1b      	ldr	r2, [pc, #108]	; (8009624 <rt_test_008_004_execute+0xb4>)
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80095ba:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80095bc:	3901      	subs	r1, #1
 80095be:	481a      	ldr	r0, [pc, #104]	; (8009628 <rt_test_008_004_execute+0xb8>)
 80095c0:	f7fe fc96 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 80095c4:	4a19      	ldr	r2, [pc, #100]	; (800962c <rt_test_008_004_execute+0xbc>)
  test_set_step(4);
 80095c6:	2304      	movs	r3, #4
 80095c8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80095ca:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80095cc:	f7fa f938 	bl	8003840 <chEvtWaitAny.constprop.36>
    test_assert_time_window(target_time,
 80095d0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 80095d4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 80095d6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80095da:	f7f7 f889 	bl	80006f0 <_test_assert_time_window.constprop.1>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d1d8      	bne.n	8009594 <rt_test_008_004_execute+0x24>
    test_assert(m == 1, "event flag error");
 80095e2:	f1a4 0001 	sub.w	r0, r4, #1
 80095e6:	fab0 f080 	clz	r0, r0
 80095ea:	0940      	lsrs	r0, r0, #5
 80095ec:	4910      	ldr	r1, [pc, #64]	; (8009630 <rt_test_008_004_execute+0xc0>)
 80095ee:	f7f7 f8b7 	bl	8000760 <_test_assert>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d1ce      	bne.n	8009594 <rt_test_008_004_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80095f6:	f7fa f893 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 80095fa:	fab0 f080 	clz	r0, r0
 80095fe:	0940      	lsrs	r0, r0, #5
 8009600:	4906      	ldr	r1, [pc, #24]	; (800961c <rt_test_008_004_execute+0xac>)
 8009602:	f7f7 f8ad 	bl	8000760 <_test_assert>
 8009606:	2800      	cmp	r0, #0
 8009608:	d1c4      	bne.n	8009594 <rt_test_008_004_execute+0x24>
}
 800960a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800960e:	f7ff ba9f 	b.w	8008b50 <test_wait_threads>
 8009612:	bf00      	nop
 8009614:	20002354 	.word	0x20002354
 8009618:	0800cebc 	.word	0x0800cebc
 800961c:	0800cf18 	.word	0x0800cf18
 8009620:	200011b0 	.word	0x200011b0
 8009624:	08007291 	.word	0x08007291
 8009628:	20001c40 	.word	0x20001c40
 800962c:	2000236c 	.word	0x2000236c
 8009630:	0800ce98 	.word	0x0800ce98
	...

08009640 <rt_test_008_003_execute>:
static void rt_test_008_003_execute(void) {
 8009640:	b538      	push	{r3, r4, r5, lr}
    chEvtAddEvents(7);
 8009642:	2007      	movs	r0, #7
  test_set_step(2);
 8009644:	4c33      	ldr	r4, [pc, #204]	; (8009714 <rt_test_008_003_execute+0xd4>)
    chEvtAddEvents(7);
 8009646:	f7fb ff93 	bl	8005570 <chEvtAddEvents>
  test_set_step(2);
 800964a:	2302      	movs	r3, #2
 800964c:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 800964e:	f7fa f8c7 	bl	80037e0 <chEvtWaitOne.constprop.37>
    test_assert(m == 1, "single event error");
 8009652:	f1a0 0001 	sub.w	r0, r0, #1
 8009656:	fab0 f080 	clz	r0, r0
 800965a:	492f      	ldr	r1, [pc, #188]	; (8009718 <rt_test_008_003_execute+0xd8>)
 800965c:	0940      	lsrs	r0, r0, #5
 800965e:	f7f7 f87f 	bl	8000760 <_test_assert>
 8009662:	b100      	cbz	r0, 8009666 <rt_test_008_003_execute+0x26>
}
 8009664:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 8009666:	f7fa f8bb 	bl	80037e0 <chEvtWaitOne.constprop.37>
    test_assert(m == 2, "single event error");
 800966a:	f1a0 0002 	sub.w	r0, r0, #2
 800966e:	fab0 f080 	clz	r0, r0
 8009672:	4929      	ldr	r1, [pc, #164]	; (8009718 <rt_test_008_003_execute+0xd8>)
 8009674:	0940      	lsrs	r0, r0, #5
 8009676:	f7f7 f873 	bl	8000760 <_test_assert>
 800967a:	2800      	cmp	r0, #0
 800967c:	d1f2      	bne.n	8009664 <rt_test_008_003_execute+0x24>
    m = chEvtWaitOne(ALL_EVENTS);
 800967e:	f7fa f8af 	bl	80037e0 <chEvtWaitOne.constprop.37>
    test_assert(m == 4, "single event error");
 8009682:	f1a0 0004 	sub.w	r0, r0, #4
 8009686:	fab0 f080 	clz	r0, r0
 800968a:	4923      	ldr	r1, [pc, #140]	; (8009718 <rt_test_008_003_execute+0xd8>)
 800968c:	0940      	lsrs	r0, r0, #5
 800968e:	f7f7 f867 	bl	8000760 <_test_assert>
 8009692:	2800      	cmp	r0, #0
 8009694:	d1e6      	bne.n	8009664 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8009696:	f7fa f843 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 800969a:	fab0 f080 	clz	r0, r0
 800969e:	0940      	lsrs	r0, r0, #5
 80096a0:	491e      	ldr	r1, [pc, #120]	; (800971c <rt_test_008_003_execute+0xdc>)
 80096a2:	f7f7 f85d 	bl	8000760 <_test_assert>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d1dc      	bne.n	8009664 <rt_test_008_003_execute+0x24>
  test_set_step(3);
 80096aa:	2303      	movs	r3, #3
 80096ac:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80096ae:	f7fd fef7 	bl	80074a0 <test_wait_tick>
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <rt_test_008_003_execute+0xe0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80096b4:	4a1b      	ldr	r2, [pc, #108]	; (8009724 <rt_test_008_003_execute+0xe4>)
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80096ba:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80096bc:	3901      	subs	r1, #1
 80096be:	481a      	ldr	r0, [pc, #104]	; (8009728 <rt_test_008_003_execute+0xe8>)
 80096c0:	f7fe fc16 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 80096c4:	4a19      	ldr	r2, [pc, #100]	; (800972c <rt_test_008_003_execute+0xec>)
  test_set_step(4);
 80096c6:	2304      	movs	r3, #4
 80096c8:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80096ca:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80096cc:	f7fa f888 	bl	80037e0 <chEvtWaitOne.constprop.37>
    test_assert_time_window(target_time,
 80096d0:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 80096d4:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 80096d6:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 80096da:	f7f7 f809 	bl	80006f0 <_test_assert_time_window.constprop.1>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d1c0      	bne.n	8009664 <rt_test_008_003_execute+0x24>
    test_assert(m == 1, "event flag error");
 80096e2:	f1a4 0001 	sub.w	r0, r4, #1
 80096e6:	fab0 f080 	clz	r0, r0
 80096ea:	0940      	lsrs	r0, r0, #5
 80096ec:	4910      	ldr	r1, [pc, #64]	; (8009730 <rt_test_008_003_execute+0xf0>)
 80096ee:	f7f7 f837 	bl	8000760 <_test_assert>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1b6      	bne.n	8009664 <rt_test_008_003_execute+0x24>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80096f6:	f7fa f813 	bl	8003720 <chEvtGetAndClearEvents.constprop.41>
    test_assert(m == 0, "stuck event");
 80096fa:	fab0 f080 	clz	r0, r0
 80096fe:	0940      	lsrs	r0, r0, #5
 8009700:	4906      	ldr	r1, [pc, #24]	; (800971c <rt_test_008_003_execute+0xdc>)
 8009702:	f7f7 f82d 	bl	8000760 <_test_assert>
 8009706:	2800      	cmp	r0, #0
 8009708:	d1ac      	bne.n	8009664 <rt_test_008_003_execute+0x24>
}
 800970a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800970e:	f7ff ba1f 	b.w	8008b50 <test_wait_threads>
 8009712:	bf00      	nop
 8009714:	20002354 	.word	0x20002354
 8009718:	0800ce74 	.word	0x0800ce74
 800971c:	0800cf18 	.word	0x0800cf18
 8009720:	200011b0 	.word	0x200011b0
 8009724:	08007291 	.word	0x08007291
 8009728:	20001c40 	.word	0x20001c40
 800972c:	2000236c 	.word	0x2000236c
 8009730:	0800ce98 	.word	0x0800ce98
	...

08009740 <rt_test_007_001_execute>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <rt_test_007_001_execute+0x58>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8009744:	4c15      	ldr	r4, [pc, #84]	; (800979c <rt_test_007_001_execute+0x5c>)
 8009746:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8009748:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <rt_test_007_001_execute+0x60>)
 800974a:	6899      	ldr	r1, [r3, #8]
 800974c:	4815      	ldr	r0, [pc, #84]	; (80097a4 <rt_test_007_001_execute+0x64>)
 800974e:	3101      	adds	r1, #1
  test_set_step(1);
 8009750:	2501      	movs	r5, #1
 8009752:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8009754:	f7fe fbcc 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009758:	4a13      	ldr	r2, [pc, #76]	; (80097a8 <rt_test_007_001_execute+0x68>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800975a:	2302      	movs	r3, #2
 800975c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800975e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8009760:	2404      	movs	r4, #4
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8009762:	f7fb fe5d 	bl	8005420 <chMsgWait>
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 8009766:	f890 2020 	ldrb.w	r2, [r0, #32]
 800976a:	2a0d      	cmp	r2, #13
 800976c:	d002      	beq.n	8009774 <rt_test_007_001_execute+0x34>
 800976e:	480f      	ldr	r0, [pc, #60]	; (80097ac <rt_test_007_001_execute+0x6c>)
 8009770:	f7f7 f9b6 	bl	8000ae0 <chSysHalt>
  return tp->u.sentmsg;
 8009774:	6a45      	ldr	r5, [r0, #36]	; 0x24
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
 8009776:	4629      	mov	r1, r5
 8009778:	f7fb fe22 	bl	80053c0 <chMsgRelease>
      test_emit_token(msg);
 800977c:	b2e8      	uxtb	r0, r5
 800977e:	f7fa fd67 	bl	8004250 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8009782:	3c01      	subs	r4, #1
 8009784:	d1ed      	bne.n	8009762 <rt_test_007_001_execute+0x22>
    }
    test_wait_threads();
 8009786:	f7ff f9e3 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 800978a:	4909      	ldr	r1, [pc, #36]	; (80097b0 <rt_test_007_001_execute+0x70>)
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <rt_test_007_001_execute+0x74>)
  }
}
 800978e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 8009792:	f7f7 b885 	b.w	80008a0 <_test_assert_sequence>
 8009796:	bf00      	nop
 8009798:	200011b0 	.word	0x200011b0
 800979c:	20002354 	.word	0x20002354
 80097a0:	08005541 	.word	0x08005541
 80097a4:	20001c40 	.word	0x20001c40
 80097a8:	2000236c 	.word	0x2000236c
 80097ac:	0800b3e4 	.word	0x0800b3e4
 80097b0:	0800ce4c 	.word	0x0800ce4c
 80097b4:	0800bd00 	.word	0x0800bd00
	...

080097c0 <rt_test_006_009_execute>:

static void rt_test_006_009_execute(void) {
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	4b1c      	ldr	r3, [pc, #112]	; (8009834 <rt_test_006_009_execute+0x74>)

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80097c4:	4e1c      	ldr	r6, [pc, #112]	; (8009838 <rt_test_006_009_execute+0x78>)
  return chThdGetSelfX()->prio;
 80097c6:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 80097c8:	4c1c      	ldr	r4, [pc, #112]	; (800983c <rt_test_006_009_execute+0x7c>)
 80097ca:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80097cc:	4a1c      	ldr	r2, [pc, #112]	; (8009840 <rt_test_006_009_execute+0x80>)
 80097ce:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <rt_test_006_009_execute+0x84>)
 80097d0:	4d1d      	ldr	r5, [pc, #116]	; (8009848 <rt_test_006_009_execute+0x88>)
 80097d2:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 80097d4:	f04f 0c02 	mov.w	ip, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80097d8:	4630      	mov	r0, r6
  test_set_step(2);
 80097da:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80097de:	f7fe fb87 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 80097e2:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80097e6:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80097e8:	1cb9      	adds	r1, r7, #2
 80097ea:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80097ee:	4b17      	ldr	r3, [pc, #92]	; (800984c <rt_test_006_009_execute+0x8c>)
 80097f0:	4a17      	ldr	r2, [pc, #92]	; (8009850 <rt_test_006_009_execute+0x90>)
  test_set_step(3);
 80097f2:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80097f6:	f7fe fb7b 	bl	8007ef0 <chThdCreateStatic.constprop.60>

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80097fa:	1cf9      	adds	r1, r7, #3
 80097fc:	4a15      	ldr	r2, [pc, #84]	; (8009854 <rt_test_006_009_execute+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80097fe:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8009800:	2704      	movs	r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8009802:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <rt_test_006_009_execute+0x98>)
  test_set_step(4);
 8009808:	6027      	str	r7, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800980a:	f7fe fb71 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800980e:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8009810:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8009812:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8009814:	f7f9 ff5c 	bl	80036d0 <chCondSignal.constprop.50>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8009818:	2306      	movs	r3, #6
 800981a:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800981c:	f7f9 ff58 	bl	80036d0 <chCondSignal.constprop.50>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8009820:	2307      	movs	r3, #7
 8009822:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8009824:	f7ff f994 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8009828:	490c      	ldr	r1, [pc, #48]	; (800985c <rt_test_006_009_execute+0x9c>)
 800982a:	480d      	ldr	r0, [pc, #52]	; (8009860 <rt_test_006_009_execute+0xa0>)
  }
}
 800982c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8009830:	f7f7 b836 	b.w	80008a0 <_test_assert_sequence>
 8009834:	200011b0 	.word	0x200011b0
 8009838:	20001c40 	.word	0x20001c40
 800983c:	20002354 	.word	0x20002354
 8009840:	08005ea1 	.word	0x08005ea1
 8009844:	0800cd60 	.word	0x0800cd60
 8009848:	2000236c 	.word	0x2000236c
 800984c:	0800cfac 	.word	0x0800cfac
 8009850:	08005f61 	.word	0x08005f61
 8009854:	08006001 	.word	0x08006001
 8009858:	0800cd64 	.word	0x0800cd64
 800985c:	0800ce4c 	.word	0x0800ce4c
 8009860:	0800ce60 	.word	0x0800ce60
	...

08009870 <rt_test_006_008_execute>:
static void rt_test_006_008_execute(void) {
 8009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8009872:	4e2f      	ldr	r6, [pc, #188]	; (8009930 <rt_test_006_008_execute+0xc0>)
  test_set_step(1);
 8009874:	4f2f      	ldr	r7, [pc, #188]	; (8009934 <rt_test_006_008_execute+0xc4>)
  return chThdGetSelfX()->prio;
 8009876:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <rt_test_006_008_execute+0xc8>)
 800987a:	6895      	ldr	r5, [r2, #8]
 800987c:	482f      	ldr	r0, [pc, #188]	; (800993c <rt_test_006_008_execute+0xcc>)
 800987e:	4a30      	ldr	r2, [pc, #192]	; (8009940 <rt_test_006_008_execute+0xd0>)
 8009880:	4c30      	ldr	r4, [pc, #192]	; (8009944 <rt_test_006_008_execute+0xd4>)
  test_set_step(1);
 8009882:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8009886:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8009888:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800988c:	f7fe fb30 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8009890:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8009892:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8009894:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <rt_test_006_008_execute+0xd8>)
 8009896:	4a2a      	ldr	r2, [pc, #168]	; (8009940 <rt_test_006_008_execute+0xd0>)
 8009898:	482c      	ldr	r0, [pc, #176]	; (800994c <rt_test_006_008_execute+0xdc>)
 800989a:	f7fe fb29 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800989e:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80098a0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80098a2:	4b2b      	ldr	r3, [pc, #172]	; (8009950 <rt_test_006_008_execute+0xe0>)
 80098a4:	4a26      	ldr	r2, [pc, #152]	; (8009940 <rt_test_006_008_execute+0xd0>)
 80098a6:	482b      	ldr	r0, [pc, #172]	; (8009954 <rt_test_006_008_execute+0xe4>)
 80098a8:	f7fe fb22 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80098ac:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80098ae:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80098b0:	4b29      	ldr	r3, [pc, #164]	; (8009958 <rt_test_006_008_execute+0xe8>)
 80098b2:	4a23      	ldr	r2, [pc, #140]	; (8009940 <rt_test_006_008_execute+0xd0>)
 80098b4:	4829      	ldr	r0, [pc, #164]	; (800995c <rt_test_006_008_execute+0xec>)
 80098b6:	f7fe fb1b 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80098ba:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80098bc:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80098be:	4b28      	ldr	r3, [pc, #160]	; (8009960 <rt_test_006_008_execute+0xf0>)
 80098c0:	4a1f      	ldr	r2, [pc, #124]	; (8009940 <rt_test_006_008_execute+0xd0>)
 80098c2:	4828      	ldr	r0, [pc, #160]	; (8009964 <rt_test_006_008_execute+0xf4>)
 80098c4:	f7fe fb14 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(2);
 80098c8:	2302      	movs	r3, #2
 80098ca:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	2320      	movs	r3, #32
 80098d0:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80098d4:	4c24      	ldr	r4, [pc, #144]	; (8009968 <rt_test_006_008_execute+0xf8>)
  _dbg_check_lock();
 80098d6:	f7f9 fe6b 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 80098da:	f7f7 f941 	bl	8000b60 <chDbgCheckClassI>
 80098de:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(&cp->queue)) {
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d00b      	beq.n	80098fc <rt_test_006_008_execute+0x8c>
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80098e4:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80098ee:	6054      	str	r4, [r2, #4]
 80098f0:	f7f7 f9e6 	bl	8000cc0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	d1f5      	bne.n	80098e8 <rt_test_006_008_execute+0x78>
  chSchRescheduleS();
 80098fc:	f7f9 fdd8 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8009900:	f7f9 fdee 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	42b3      	cmp	r3, r6
 8009908:	d004      	beq.n	8009914 <rt_test_006_008_execute+0xa4>
 800990a:	69b2      	ldr	r2, [r6, #24]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	6892      	ldr	r2, [r2, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d30a      	bcc.n	800992a <rt_test_006_008_execute+0xba>
 8009914:	2300      	movs	r3, #0
 8009916:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800991a:	f7ff f919 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800991e:	4913      	ldr	r1, [pc, #76]	; (800996c <rt_test_006_008_execute+0xfc>)
 8009920:	4813      	ldr	r0, [pc, #76]	; (8009970 <rt_test_006_008_execute+0x100>)
}
 8009922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009926:	f7f6 bfbb 	b.w	80008a0 <_test_assert_sequence>
 800992a:	4812      	ldr	r0, [pc, #72]	; (8009974 <rt_test_006_008_execute+0x104>)
 800992c:	f7f7 f8d8 	bl	8000ae0 <chSysHalt>
 8009930:	200011b0 	.word	0x200011b0
 8009934:	20002354 	.word	0x20002354
 8009938:	0800cdec 	.word	0x0800cdec
 800993c:	20001c40 	.word	0x20001c40
 8009940:	08005f61 	.word	0x08005f61
 8009944:	2000236c 	.word	0x2000236c
 8009948:	0800dd04 	.word	0x0800dd04
 800994c:	20001d88 	.word	0x20001d88
 8009950:	0800cfac 	.word	0x0800cfac
 8009954:	20001ed0 	.word	0x20001ed0
 8009958:	0800cd64 	.word	0x0800cd64
 800995c:	20002018 	.word	0x20002018
 8009960:	0800cd60 	.word	0x0800cd60
 8009964:	20002160 	.word	0x20002160
 8009968:	20000c04 	.word	0x20000c04
 800996c:	0800ce4c 	.word	0x0800ce4c
 8009970:	0800cde8 	.word	0x0800cde8
 8009974:	0800b2c8 	.word	0x0800b2c8
	...

08009980 <rt_test_006_007_execute>:
static void rt_test_006_007_execute(void) {
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8009982:	4e2b      	ldr	r6, [pc, #172]	; (8009a30 <rt_test_006_007_execute+0xb0>)
  test_set_step(1);
 8009984:	4f2b      	ldr	r7, [pc, #172]	; (8009a34 <rt_test_006_007_execute+0xb4>)
  return chThdGetSelfX()->prio;
 8009986:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8009988:	4b2b      	ldr	r3, [pc, #172]	; (8009a38 <rt_test_006_007_execute+0xb8>)
 800998a:	6895      	ldr	r5, [r2, #8]
 800998c:	482b      	ldr	r0, [pc, #172]	; (8009a3c <rt_test_006_007_execute+0xbc>)
 800998e:	4a2c      	ldr	r2, [pc, #176]	; (8009a40 <rt_test_006_007_execute+0xc0>)
 8009990:	4c2c      	ldr	r4, [pc, #176]	; (8009a44 <rt_test_006_007_execute+0xc4>)
  test_set_step(1);
 8009992:	f04f 0c01 	mov.w	ip, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8009996:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8009998:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800999c:	f7fe faa8 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80099a0:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80099a2:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80099a4:	4b28      	ldr	r3, [pc, #160]	; (8009a48 <rt_test_006_007_execute+0xc8>)
 80099a6:	4a26      	ldr	r2, [pc, #152]	; (8009a40 <rt_test_006_007_execute+0xc0>)
 80099a8:	4828      	ldr	r0, [pc, #160]	; (8009a4c <rt_test_006_007_execute+0xcc>)
 80099aa:	f7fe faa1 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80099ae:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80099b0:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80099b2:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <rt_test_006_007_execute+0xd0>)
 80099b4:	4a22      	ldr	r2, [pc, #136]	; (8009a40 <rt_test_006_007_execute+0xc0>)
 80099b6:	4827      	ldr	r0, [pc, #156]	; (8009a54 <rt_test_006_007_execute+0xd4>)
 80099b8:	f7fe fa9a 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80099bc:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80099be:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80099c0:	4b25      	ldr	r3, [pc, #148]	; (8009a58 <rt_test_006_007_execute+0xd8>)
 80099c2:	4a1f      	ldr	r2, [pc, #124]	; (8009a40 <rt_test_006_007_execute+0xc0>)
 80099c4:	4825      	ldr	r0, [pc, #148]	; (8009a5c <rt_test_006_007_execute+0xdc>)
 80099c6:	f7fe fa93 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80099ca:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80099cc:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80099ce:	4b24      	ldr	r3, [pc, #144]	; (8009a60 <rt_test_006_007_execute+0xe0>)
 80099d0:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <rt_test_006_007_execute+0xc0>)
 80099d2:	4824      	ldr	r0, [pc, #144]	; (8009a64 <rt_test_006_007_execute+0xe4>)
 80099d4:	f7fe fa8c 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(2);
 80099d8:	2302      	movs	r3, #2
 80099da:	603b      	str	r3, [r7, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80099dc:	6120      	str	r0, [r4, #16]
 80099de:	2320      	movs	r3, #32
 80099e0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80099e4:	f7f9 fde4 	bl	80035b0 <_dbg_check_lock>
    chCondSignalI(&c1);
 80099e8:	f7f8 faca 	bl	8001f80 <chCondSignalI.constprop.49>
    chCondSignalI(&c1);
 80099ec:	f7f8 fac8 	bl	8001f80 <chCondSignalI.constprop.49>
    chCondSignalI(&c1);
 80099f0:	f7f8 fac6 	bl	8001f80 <chCondSignalI.constprop.49>
    chCondSignalI(&c1);
 80099f4:	f7f8 fac4 	bl	8001f80 <chCondSignalI.constprop.49>
    chCondSignalI(&c1);
 80099f8:	f7f8 fac2 	bl	8001f80 <chCondSignalI.constprop.49>
    chSchRescheduleS();
 80099fc:	f7f9 fd58 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8009a00:	f7f9 fd6e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	42b3      	cmp	r3, r6
 8009a08:	d004      	beq.n	8009a14 <rt_test_006_007_execute+0x94>
 8009a0a:	69b2      	ldr	r2, [r6, #24]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	6892      	ldr	r2, [r2, #8]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d30a      	bcc.n	8009a2a <rt_test_006_007_execute+0xaa>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8009a1a:	f7ff f899 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009a1e:	4912      	ldr	r1, [pc, #72]	; (8009a68 <rt_test_006_007_execute+0xe8>)
 8009a20:	4812      	ldr	r0, [pc, #72]	; (8009a6c <rt_test_006_007_execute+0xec>)
}
 8009a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009a26:	f7f6 bf3b 	b.w	80008a0 <_test_assert_sequence>
 8009a2a:	4811      	ldr	r0, [pc, #68]	; (8009a70 <rt_test_006_007_execute+0xf0>)
 8009a2c:	f7f7 f858 	bl	8000ae0 <chSysHalt>
 8009a30:	200011b0 	.word	0x200011b0
 8009a34:	20002354 	.word	0x20002354
 8009a38:	0800cdec 	.word	0x0800cdec
 8009a3c:	20001c40 	.word	0x20001c40
 8009a40:	08005f61 	.word	0x08005f61
 8009a44:	2000236c 	.word	0x2000236c
 8009a48:	0800dd04 	.word	0x0800dd04
 8009a4c:	20001d88 	.word	0x20001d88
 8009a50:	0800cfac 	.word	0x0800cfac
 8009a54:	20001ed0 	.word	0x20001ed0
 8009a58:	0800cd64 	.word	0x0800cd64
 8009a5c:	20002018 	.word	0x20002018
 8009a60:	0800cd60 	.word	0x0800cd60
 8009a64:	20002160 	.word	0x20002160
 8009a68:	0800ce4c 	.word	0x0800ce4c
 8009a6c:	0800cde8 	.word	0x0800cde8
 8009a70:	0800b364 	.word	0x0800b364
	...

08009a80 <rt_test_005_006_teardown>:
  test_wait_threads();
 8009a80:	f7ff b866 	b.w	8008b50 <test_wait_threads>
	...

08009a90 <rt_test_006_004_teardown>:
 8009a90:	f7ff b85e 	b.w	8008b50 <test_wait_threads>
	...

08009aa0 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8009aa2:	4f24      	ldr	r7, [pc, #144]	; (8009b34 <rt_test_006_001_execute+0x94>)
  test_set_step(2);
 8009aa4:	4e24      	ldr	r6, [pc, #144]	; (8009b38 <rt_test_006_001_execute+0x98>)
  return chThdGetSelfX()->prio;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8009aa8:	4824      	ldr	r0, [pc, #144]	; (8009b3c <rt_test_006_001_execute+0x9c>)
 8009aaa:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8009aac:	4d24      	ldr	r5, [pc, #144]	; (8009b40 <rt_test_006_001_execute+0xa0>)
  test_set_step(2);
 8009aae:	2302      	movs	r3, #2
 8009ab0:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8009ab2:	f7fb ffad 	bl	8005a10 <chMtxLock>
  test_set_step(3);
 8009ab6:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8009aba:	1c61      	adds	r1, r4, #1
 8009abc:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <rt_test_006_001_execute+0xa4>)
 8009abe:	4a22      	ldr	r2, [pc, #136]	; (8009b48 <rt_test_006_001_execute+0xa8>)
 8009ac0:	4822      	ldr	r0, [pc, #136]	; (8009b4c <rt_test_006_001_execute+0xac>)
  test_set_step(3);
 8009ac2:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8009ac6:	f7fe fa13 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8009aca:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8009acc:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8009ace:	4b20      	ldr	r3, [pc, #128]	; (8009b50 <rt_test_006_001_execute+0xb0>)
 8009ad0:	4a1d      	ldr	r2, [pc, #116]	; (8009b48 <rt_test_006_001_execute+0xa8>)
 8009ad2:	4820      	ldr	r0, [pc, #128]	; (8009b54 <rt_test_006_001_execute+0xb4>)
 8009ad4:	f7fe fa0c 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8009ad8:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8009ada:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <rt_test_006_001_execute+0xb8>)
 8009ade:	4a1a      	ldr	r2, [pc, #104]	; (8009b48 <rt_test_006_001_execute+0xa8>)
 8009ae0:	481e      	ldr	r0, [pc, #120]	; (8009b5c <rt_test_006_001_execute+0xbc>)
 8009ae2:	f7fe fa05 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8009ae6:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8009ae8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8009aea:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <rt_test_006_001_execute+0xc0>)
 8009aec:	4a16      	ldr	r2, [pc, #88]	; (8009b48 <rt_test_006_001_execute+0xa8>)
 8009aee:	481d      	ldr	r0, [pc, #116]	; (8009b64 <rt_test_006_001_execute+0xc4>)
 8009af0:	f7fe f9fe 	bl	8007ef0 <chThdCreateStatic.constprop.60>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8009af4:	1d61      	adds	r1, r4, #5
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <rt_test_006_001_execute+0xa8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8009af8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8009afa:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <rt_test_006_001_execute+0xc8>)
 8009afc:	481b      	ldr	r0, [pc, #108]	; (8009b6c <rt_test_006_001_execute+0xcc>)
 8009afe:	f7fe f9f7 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(4);
 8009b02:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8009b04:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8009b06:	480d      	ldr	r0, [pc, #52]	; (8009b3c <rt_test_006_001_execute+0x9c>)
  test_set_step(4);
 8009b08:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8009b0a:	f7fb fe51 	bl	80057b0 <chMtxUnlock>
    test_wait_threads();
 8009b0e:	f7ff f81f 	bl	8008b50 <test_wait_threads>
 8009b12:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8009b14:	4916      	ldr	r1, [pc, #88]	; (8009b70 <rt_test_006_001_execute+0xd0>)
 8009b16:	6898      	ldr	r0, [r3, #8]
 8009b18:	1b00      	subs	r0, r0, r4
 8009b1a:	fab0 f080 	clz	r0, r0
 8009b1e:	0940      	lsrs	r0, r0, #5
 8009b20:	f7f6 fe1e 	bl	8000760 <_test_assert>
 8009b24:	b100      	cbz	r0, 8009b28 <rt_test_006_001_execute+0x88>
}
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009b28:	4912      	ldr	r1, [pc, #72]	; (8009b74 <rt_test_006_001_execute+0xd4>)
 8009b2a:	4813      	ldr	r0, [pc, #76]	; (8009b78 <rt_test_006_001_execute+0xd8>)
}
 8009b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009b30:	f7f6 beb6 	b.w	80008a0 <_test_assert_sequence>
 8009b34:	200011b0 	.word	0x200011b0
 8009b38:	20002354 	.word	0x20002354
 8009b3c:	20000c38 	.word	0x20000c38
 8009b40:	2000236c 	.word	0x2000236c
 8009b44:	0800cdec 	.word	0x0800cdec
 8009b48:	08006021 	.word	0x08006021
 8009b4c:	20001c40 	.word	0x20001c40
 8009b50:	0800dd04 	.word	0x0800dd04
 8009b54:	20001d88 	.word	0x20001d88
 8009b58:	0800cfac 	.word	0x0800cfac
 8009b5c:	20001ed0 	.word	0x20001ed0
 8009b60:	0800cd64 	.word	0x0800cd64
 8009b64:	20002018 	.word	0x20002018
 8009b68:	0800cd60 	.word	0x0800cd60
 8009b6c:	20002160 	.word	0x20002160
 8009b70:	0800cdb0 	.word	0x0800cdb0
 8009b74:	0800ce4c 	.word	0x0800ce4c
 8009b78:	0800cde8 	.word	0x0800cde8
 8009b7c:	00000000 	.word	0x00000000

08009b80 <rt_test_005_005_teardown>:
 8009b80:	f7fe bfe6 	b.w	8008b50 <test_wait_threads>
	...

08009b90 <rt_test_005_004_execute>:
static void rt_test_005_004_execute(void) {
 8009b90:	b570      	push	{r4, r5, r6, lr}
  return ch.rlist.current;
 8009b92:	4d42      	ldr	r5, [pc, #264]	; (8009c9c <rt_test_005_004_execute+0x10c>)
  test_set_step(1);
 8009b94:	4c42      	ldr	r4, [pc, #264]	; (8009ca0 <rt_test_005_004_execute+0x110>)
  return chThdGetSelfX()->prio;
 8009b96:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8009b98:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <rt_test_005_004_execute+0x114>)
 8009b9a:	6891      	ldr	r1, [r2, #8]
 8009b9c:	4842      	ldr	r0, [pc, #264]	; (8009ca8 <rt_test_005_004_execute+0x118>)
 8009b9e:	4a43      	ldr	r2, [pc, #268]	; (8009cac <rt_test_005_004_execute+0x11c>)
 8009ba0:	3101      	adds	r1, #1
  test_set_step(1);
 8009ba2:	2601      	movs	r6, #1
 8009ba4:	6026      	str	r6, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8009ba6:	f7fe f9a3 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009baa:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <rt_test_005_004_execute+0x120>)
  test_set_step(2);
 8009bac:	2302      	movs	r3, #2
 8009bae:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8009bb0:	6010      	str	r0, [r2, #0]
 8009bb2:	2320      	movs	r3, #32
 8009bb4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009bb8:	4c3e      	ldr	r4, [pc, #248]	; (8009cb4 <rt_test_005_004_execute+0x124>)
  _dbg_check_lock();
 8009bba:	f7f9 fcf9 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 8009bbe:	f7f6 ffcf 	bl	8000b60 <chDbgCheckClassI>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	db04      	blt.n	8009bd4 <rt_test_005_004_execute+0x44>
 8009bca:	42a2      	cmp	r2, r4
 8009bcc:	d004      	beq.n	8009bd8 <rt_test_005_004_execute+0x48>
 8009bce:	483a      	ldr	r0, [pc, #232]	; (8009cb8 <rt_test_005_004_execute+0x128>)
 8009bd0:	f7f6 ff86 	bl	8000ae0 <chSysHalt>
 8009bd4:	42a2      	cmp	r2, r4
 8009bd6:	d0fa      	beq.n	8009bce <rt_test_005_004_execute+0x3e>
    if (++sp->cnt <= (cnt_t)0) {
 8009bd8:	3301      	adds	r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	60a3      	str	r3, [r4, #8]
 8009bde:	dd53      	ble.n	8009c88 <rt_test_005_004_execute+0xf8>
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	3301      	adds	r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	60a3      	str	r3, [r4, #8]
 8009be8:	dd45      	ble.n	8009c76 <rt_test_005_004_execute+0xe6>
    chSchRescheduleS();
 8009bea:	f7f9 fc61 	bl	80034b0 <chSchRescheduleS>
  _dbg_check_unlock();
 8009bee:	f7f9 fc77 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	42ab      	cmp	r3, r5
 8009bf6:	d004      	beq.n	8009c02 <rt_test_005_004_execute+0x72>
 8009bf8:	69aa      	ldr	r2, [r5, #24]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	6892      	ldr	r2, [r2, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d328      	bcc.n	8009c54 <rt_test_005_004_execute+0xc4>
 8009c02:	2300      	movs	r3, #0
 8009c04:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8009c08:	f7fe ffa2 	bl	8008b50 <test_wait_threads>
 8009c0c:	2320      	movs	r3, #32
 8009c0e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009c12:	f7f9 fccd 	bl	80035b0 <_dbg_check_lock>
 8009c16:	f7f6 ffa3 	bl	8000b60 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8009c1a:	68a0      	ldr	r0, [r4, #8]
 8009c1c:	4927      	ldr	r1, [pc, #156]	; (8009cbc <rt_test_005_004_execute+0x12c>)
 8009c1e:	f1a0 0001 	sub.w	r0, r0, #1
 8009c22:	fab0 f080 	clz	r0, r0
 8009c26:	0940      	lsrs	r0, r0, #5
 8009c28:	f7f6 fd9a 	bl	8000760 <_test_assert>
 8009c2c:	b9a8      	cbnz	r0, 8009c5a <rt_test_005_004_execute+0xca>
  _dbg_check_unlock();
 8009c2e:	f7f9 fc57 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	d004      	beq.n	8009c42 <rt_test_005_004_execute+0xb2>
 8009c38:	69aa      	ldr	r2, [r5, #24]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	6892      	ldr	r2, [r2, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d308      	bcc.n	8009c54 <rt_test_005_004_execute+0xc4>
 8009c42:	2300      	movs	r3, #0
 8009c44:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 8009c48:	491d      	ldr	r1, [pc, #116]	; (8009cc0 <rt_test_005_004_execute+0x130>)
 8009c4a:	4816      	ldr	r0, [pc, #88]	; (8009ca4 <rt_test_005_004_execute+0x114>)
}
 8009c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 8009c50:	f7f6 be26 	b.w	80008a0 <_test_assert_sequence>
 8009c54:	481b      	ldr	r0, [pc, #108]	; (8009cc4 <rt_test_005_004_execute+0x134>)
 8009c56:	f7f6 ff43 	bl	8000ae0 <chSysHalt>
  _dbg_check_unlock();
 8009c5a:	f7f9 fc41 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	d004      	beq.n	8009c6e <rt_test_005_004_execute+0xde>
 8009c64:	69aa      	ldr	r2, [r5, #24]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	6892      	ldr	r2, [r2, #8]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d3f2      	bcc.n	8009c54 <rt_test_005_004_execute+0xc4>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f383 8811 	msr	BASEPRI, r3
}
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
  thread_t *tp = tqp->next;
 8009c76:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8009c78:	6803      	ldr	r3, [r0, #0]
 8009c7a:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009c7c:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8009c7e:	f7f7 f81f 	bl	8000cc0 <chSchReadyI>
 8009c82:	2300      	movs	r3, #0
 8009c84:	6243      	str	r3, [r0, #36]	; 0x24
 8009c86:	e7b0      	b.n	8009bea <rt_test_005_004_execute+0x5a>
  thread_t *tp = tqp->next;
 8009c88:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8009c8a:	6803      	ldr	r3, [r0, #0]
 8009c8c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009c8e:	605c      	str	r4, [r3, #4]
 8009c90:	f7f7 f816 	bl	8000cc0 <chSchReadyI>
 8009c94:	2300      	movs	r3, #0
 8009c96:	6243      	str	r3, [r0, #36]	; 0x24
 8009c98:	e7a2      	b.n	8009be0 <rt_test_005_004_execute+0x50>
 8009c9a:	bf00      	nop
 8009c9c:	200011b0 	.word	0x200011b0
 8009ca0:	20002354 	.word	0x20002354
 8009ca4:	0800cd60 	.word	0x0800cd60
 8009ca8:	20001c40 	.word	0x20001c40
 8009cac:	08006ed1 	.word	0x08006ed1
 8009cb0:	2000236c 	.word	0x2000236c
 8009cb4:	20001c20 	.word	0x20001c20
 8009cb8:	0800b5b4 	.word	0x0800b5b4
 8009cbc:	0800ccbc 	.word	0x0800ccbc
 8009cc0:	0800ce4c 	.word	0x0800ce4c
 8009cc4:	0800b358 	.word	0x0800b358
	...

08009cd0 <rt_test_005_003_execute>:
static void rt_test_005_003_execute(void) {
 8009cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8009cd4:	4d6b      	ldr	r5, [pc, #428]	; (8009e84 <rt_test_005_003_execute+0x1b4>)
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	2320      	movs	r3, #32
 8009cdc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009ce0:	f7f9 fc66 	bl	80035b0 <_dbg_check_lock>
  msg = chSemWaitTimeoutS(sp, timeout);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4868      	ldr	r0, [pc, #416]	; (8009e88 <rt_test_005_003_execute+0x1b8>)
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009ce8:	4c68      	ldr	r4, [pc, #416]	; (8009e8c <rt_test_005_003_execute+0x1bc>)
 8009cea:	f7f9 faf9 	bl	80032e0 <chSemWaitTimeoutS>
 8009cee:	4606      	mov	r6, r0
  _dbg_check_unlock();
 8009cf0:	f7f9 fbf6 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	d004      	beq.n	8009d04 <rt_test_005_003_execute+0x34>
 8009cfa:	69a2      	ldr	r2, [r4, #24]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	6892      	ldr	r2, [r2, #8]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d30d      	bcc.n	8009d20 <rt_test_005_003_execute+0x50>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009d0a:	f1a6 30ff 	sub.w	r0, r6, #4294967295
 8009d0e:	fab0 f080 	clz	r0, r0
 8009d12:	495f      	ldr	r1, [pc, #380]	; (8009e90 <rt_test_005_003_execute+0x1c0>)
 8009d14:	0940      	lsrs	r0, r0, #5
 8009d16:	f7f6 fd23 	bl	8000760 <_test_assert>
 8009d1a:	b120      	cbz	r0, 8009d26 <rt_test_005_003_execute+0x56>
}
 8009d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	485c      	ldr	r0, [pc, #368]	; (8009e94 <rt_test_005_003_execute+0x1c4>)
 8009d22:	f7f6 fedd 	bl	8000ae0 <chSysHalt>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8009d26:	4e58      	ldr	r6, [pc, #352]	; (8009e88 <rt_test_005_003_execute+0x1b8>)
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009d28:	495b      	ldr	r1, [pc, #364]	; (8009e98 <rt_test_005_003_execute+0x1c8>)
 8009d2a:	6830      	ldr	r0, [r6, #0]
 8009d2c:	1b80      	subs	r0, r0, r6
 8009d2e:	fab0 f080 	clz	r0, r0
 8009d32:	0940      	lsrs	r0, r0, #5
 8009d34:	f7f6 fd14 	bl	8000760 <_test_assert>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1ef      	bne.n	8009d1c <rt_test_005_003_execute+0x4c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009d3c:	68b0      	ldr	r0, [r6, #8]
 8009d3e:	4957      	ldr	r1, [pc, #348]	; (8009e9c <rt_test_005_003_execute+0x1cc>)
 8009d40:	fab0 f080 	clz	r0, r0
 8009d44:	0940      	lsrs	r0, r0, #5
 8009d46:	f7f6 fd0b 	bl	8000760 <_test_assert>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1e5      	bne.n	8009d1c <rt_test_005_003_execute+0x4c>
 8009d50:	69a1      	ldr	r1, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009d52:	4a53      	ldr	r2, [pc, #332]	; (8009ea0 <rt_test_005_003_execute+0x1d0>)
 8009d54:	6889      	ldr	r1, [r1, #8]
 8009d56:	4853      	ldr	r0, [pc, #332]	; (8009ea4 <rt_test_005_003_execute+0x1d4>)
 8009d58:	3901      	subs	r1, #1
  test_set_step(2);
 8009d5a:	2702      	movs	r7, #2
 8009d5c:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009d5e:	f7fe f8c7 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009d62:	4a51      	ldr	r2, [pc, #324]	; (8009ea8 <rt_test_005_003_execute+0x1d8>)
 8009d64:	2320      	movs	r3, #32
 8009d66:	6010      	str	r0, [r2, #0]
 8009d68:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009d6c:	f7f9 fc20 	bl	80035b0 <_dbg_check_lock>
 8009d70:	f241 3188 	movw	r1, #5000	; 0x1388
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7f9 fab3 	bl	80032e0 <chSemWaitTimeoutS>
 8009d7a:	4607      	mov	r7, r0
  _dbg_check_unlock();
 8009d7c:	f7f9 fbb0 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	d004      	beq.n	8009d90 <rt_test_005_003_execute+0xc0>
 8009d86:	69a2      	ldr	r2, [r4, #24]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	6892      	ldr	r2, [r2, #8]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d3c7      	bcc.n	8009d20 <rt_test_005_003_execute+0x50>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8009d96:	f7fe fedb 	bl	8008b50 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 8009d9a:	fab7 f087 	clz	r0, r7
 8009d9e:	0940      	lsrs	r0, r0, #5
 8009da0:	493b      	ldr	r1, [pc, #236]	; (8009e90 <rt_test_005_003_execute+0x1c0>)
 8009da2:	f7f6 fcdd 	bl	8000760 <_test_assert>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1b8      	bne.n	8009d1c <rt_test_005_003_execute+0x4c>
 8009daa:	6830      	ldr	r0, [r6, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009dac:	493a      	ldr	r1, [pc, #232]	; (8009e98 <rt_test_005_003_execute+0x1c8>)
 8009dae:	1b80      	subs	r0, r0, r6
 8009db0:	fab0 f080 	clz	r0, r0
 8009db4:	0940      	lsrs	r0, r0, #5
 8009db6:	f7f6 fcd3 	bl	8000760 <_test_assert>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d1ae      	bne.n	8009d1c <rt_test_005_003_execute+0x4c>
    test_assert(sem1.cnt == 0, "counter not zero");
 8009dbe:	68b0      	ldr	r0, [r6, #8]
 8009dc0:	4936      	ldr	r1, [pc, #216]	; (8009e9c <rt_test_005_003_execute+0x1cc>)
 8009dc2:	fab0 f080 	clz	r0, r0
 8009dc6:	0940      	lsrs	r0, r0, #5
 8009dc8:	f7f6 fcca 	bl	8000760 <_test_assert>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d1a5      	bne.n	8009d1c <rt_test_005_003_execute+0x4c>
  test_set_step(3);
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8009dd4:	f7fd fb64 	bl	80074a0 <test_wait_tick>
 8009dd8:	4f2b      	ldr	r7, [pc, #172]	; (8009e88 <rt_test_005_003_execute+0x1b8>)
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009dda:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009e90 <rt_test_005_003_execute+0x1c0>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009dde:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009e98 <rt_test_005_003_execute+0x1c8>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8009de2:	2541      	movs	r5, #65	; 0x41
 8009de4:	4682      	mov	sl, r0
      test_emit_token('A' + i);
 8009de6:	4628      	mov	r0, r5
 8009de8:	f7fa fa32 	bl	8004250 <test_emit_token>
 8009dec:	2320      	movs	r3, #32
 8009dee:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009df2:	f7f9 fbdd 	bl	80035b0 <_dbg_check_lock>
 8009df6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f7f9 fa70 	bl	80032e0 <chSemWaitTimeoutS>
 8009e00:	4683      	mov	fp, r0
  _dbg_check_unlock();
 8009e02:	f7f9 fb6d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d004      	beq.n	8009e16 <rt_test_005_003_execute+0x146>
 8009e0c:	69a2      	ldr	r2, [r4, #24]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	6892      	ldr	r2, [r2, #8]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d384      	bcc.n	8009d20 <rt_test_005_003_execute+0x50>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f383 8811 	msr	BASEPRI, r3
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8009e1c:	f1ab 30ff 	sub.w	r0, fp, #4294967295
 8009e20:	fab0 f080 	clz	r0, r0
 8009e24:	0940      	lsrs	r0, r0, #5
 8009e26:	4649      	mov	r1, r9
 8009e28:	f7f6 fc9a 	bl	8000760 <_test_assert>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f47f af75 	bne.w	8009d1c <rt_test_005_003_execute+0x4c>
 8009e32:	6830      	ldr	r0, [r6, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8009e34:	1b80      	subs	r0, r0, r6
 8009e36:	fab0 f080 	clz	r0, r0
 8009e3a:	4641      	mov	r1, r8
 8009e3c:	0940      	lsrs	r0, r0, #5
 8009e3e:	f7f6 fc8f 	bl	8000760 <_test_assert>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f47f af6a 	bne.w	8009d1c <rt_test_005_003_execute+0x4c>
      test_assert(sem1.cnt == 0, "counter not zero");
 8009e48:	68b0      	ldr	r0, [r6, #8]
 8009e4a:	4914      	ldr	r1, [pc, #80]	; (8009e9c <rt_test_005_003_execute+0x1cc>)
 8009e4c:	fab0 f080 	clz	r0, r0
 8009e50:	0940      	lsrs	r0, r0, #5
 8009e52:	f7f6 fc85 	bl	8000760 <_test_assert>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f47f af60 	bne.w	8009d1c <rt_test_005_003_execute+0x4c>
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	b2ed      	uxtb	r5, r5
    for (i = 0; i < 5; i++) {
 8009e60:	2d46      	cmp	r5, #70	; 0x46
 8009e62:	d1c0      	bne.n	8009de6 <rt_test_005_003_execute+0x116>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009e64:	4911      	ldr	r1, [pc, #68]	; (8009eac <rt_test_005_003_execute+0x1dc>)
 8009e66:	4812      	ldr	r0, [pc, #72]	; (8009eb0 <rt_test_005_003_execute+0x1e0>)
 8009e68:	f7f6 fd1a 	bl	80008a0 <_test_assert_sequence>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f47f af55 	bne.w	8009d1c <rt_test_005_003_execute+0x4c>
    test_assert_time_window(target_time,
 8009e72:	f60a 11d8 	addw	r1, sl, #2520	; 0x9d8
 8009e76:	f60a 10c4 	addw	r0, sl, #2500	; 0x9c4
}
 8009e7a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_time_window(target_time,
 8009e7e:	f7f6 bc37 	b.w	80006f0 <_test_assert_time_window.constprop.1>
 8009e82:	bf00      	nop
 8009e84:	20002354 	.word	0x20002354
 8009e88:	20001c20 	.word	0x20001c20
 8009e8c:	200011b0 	.word	0x200011b0
 8009e90:	0800bd18 	.word	0x0800bd18
 8009e94:	0800b2b0 	.word	0x0800b2b0
 8009e98:	0800cda0 	.word	0x0800cda0
 8009e9c:	0800ccdc 	.word	0x0800ccdc
 8009ea0:	08007371 	.word	0x08007371
 8009ea4:	20001c40 	.word	0x20001c40
 8009ea8:	2000236c 	.word	0x2000236c
 8009eac:	0800ce4c 	.word	0x0800ce4c
 8009eb0:	0800cde8 	.word	0x0800cde8
	...

08009ec0 <rt_test_005_002_execute>:
static void rt_test_005_002_execute(void) {
 8009ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8009ec4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8009fa8 <rt_test_005_002_execute+0xe8>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009ec8:	4f2c      	ldr	r7, [pc, #176]	; (8009f7c <rt_test_005_002_execute+0xbc>)
  return chThdGetSelfX()->prio;
 8009eca:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009ece:	4e2c      	ldr	r6, [pc, #176]	; (8009f80 <rt_test_005_002_execute+0xc0>)
 8009ed0:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8009ed2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8009fac <rt_test_005_002_execute+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009ed6:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <rt_test_005_002_execute+0xc4>)
 8009ed8:	4d2b      	ldr	r5, [pc, #172]	; (8009f88 <rt_test_005_002_execute+0xc8>)
 8009eda:	463a      	mov	r2, r7
 8009edc:	3105      	adds	r1, #5
 8009ede:	4630      	mov	r0, r6
  test_set_step(1);
 8009ee0:	2401      	movs	r4, #1
 8009ee2:	f8c9 4000 	str.w	r4, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8009ee6:	f7fe f803 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009eea:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009eee:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8009ef0:	6899      	ldr	r1, [r3, #8]
 8009ef2:	4b26      	ldr	r3, [pc, #152]	; (8009f8c <rt_test_005_002_execute+0xcc>)
    chSemSignal(&sem1);
 8009ef4:	4c26      	ldr	r4, [pc, #152]	; (8009f90 <rt_test_005_002_execute+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	3101      	adds	r1, #1
 8009efa:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8009efe:	f7fd fff7 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009f02:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009f06:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8009f08:	6899      	ldr	r1, [r3, #8]
 8009f0a:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <rt_test_005_002_execute+0xd4>)
 8009f0c:	463a      	mov	r2, r7
 8009f0e:	3103      	adds	r1, #3
 8009f10:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8009f14:	f7fd ffec 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009f18:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009f1c:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8009f1e:	6899      	ldr	r1, [r3, #8]
 8009f20:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <rt_test_005_002_execute+0xd8>)
 8009f22:	463a      	mov	r2, r7
 8009f24:	3104      	adds	r1, #4
 8009f26:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8009f2a:	f7fd ffe1 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009f2e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009f32:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8009f34:	6899      	ldr	r1, [r3, #8]
 8009f36:	4b19      	ldr	r3, [pc, #100]	; (8009f9c <rt_test_005_002_execute+0xdc>)
 8009f38:	3102      	adds	r1, #2
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8009f40:	f7fd ffd6 	bl	8007ef0 <chThdCreateStatic.constprop.60>
  test_set_step(2);
 8009f44:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8009f46:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 8009f48:	4620      	mov	r0, r4
  test_set_step(2);
 8009f4a:	f8c9 3000 	str.w	r3, [r9]
    chSemSignal(&sem1);
 8009f4e:	f7fc ff1f 	bl	8006d90 <chSemSignal>
    chSemSignal(&sem1);
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7fc ff1c 	bl	8006d90 <chSemSignal>
    chSemSignal(&sem1);
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f7fc ff19 	bl	8006d90 <chSemSignal>
    chSemSignal(&sem1);
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7fc ff16 	bl	8006d90 <chSemSignal>
    chSemSignal(&sem1);
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7fc ff13 	bl	8006d90 <chSemSignal>
    test_wait_threads();
 8009f6a:	f7fe fdf1 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8009f6e:	490c      	ldr	r1, [pc, #48]	; (8009fa0 <rt_test_005_002_execute+0xe0>)
 8009f70:	480c      	ldr	r0, [pc, #48]	; (8009fa4 <rt_test_005_002_execute+0xe4>)
}
 8009f72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8009f76:	f7f6 bc93 	b.w	80008a0 <_test_assert_sequence>
 8009f7a:	bf00      	nop
 8009f7c:	08006ed1 	.word	0x08006ed1
 8009f80:	20001c40 	.word	0x20001c40
 8009f84:	0800cd60 	.word	0x0800cd60
 8009f88:	2000236c 	.word	0x2000236c
 8009f8c:	0800cd64 	.word	0x0800cd64
 8009f90:	20001c20 	.word	0x20001c20
 8009f94:	0800cfac 	.word	0x0800cfac
 8009f98:	0800dd04 	.word	0x0800dd04
 8009f9c:	0800cdec 	.word	0x0800cdec
 8009fa0:	0800ce4c 	.word	0x0800ce4c
 8009fa4:	0800cde8 	.word	0x0800cde8
 8009fa8:	200011b0 	.word	0x200011b0
 8009fac:	20002354 	.word	0x20002354

08009fb0 <rt_test_004_001_execute>:

static void rt_test_004_001_execute(void) {
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8009fb2:	4c42      	ldr	r4, [pc, #264]	; (800a0bc <rt_test_004_001_execute+0x10c>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8009fb4:	4e42      	ldr	r6, [pc, #264]	; (800a0c0 <rt_test_004_001_execute+0x110>)
  return chThdGetSelfX()->prio;
 8009fb6:	69a2      	ldr	r2, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8009fb8:	4b42      	ldr	r3, [pc, #264]	; (800a0c4 <rt_test_004_001_execute+0x114>)
 8009fba:	6891      	ldr	r1, [r2, #8]
 8009fbc:	4842      	ldr	r0, [pc, #264]	; (800a0c8 <rt_test_004_001_execute+0x118>)
 8009fbe:	4a43      	ldr	r2, [pc, #268]	; (800a0cc <rt_test_004_001_execute+0x11c>)
 8009fc0:	3901      	subs	r1, #1
  test_set_step(1);
 8009fc2:	2501      	movs	r5, #1
 8009fc4:	6035      	str	r5, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8009fc6:	f7fd ff93 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 8009fca:	4a41      	ldr	r2, [pc, #260]	; (800a0d0 <rt_test_004_001_execute+0x120>)
 8009fcc:	2320      	movs	r3, #32
 8009fce:	6010      	str	r0, [r2, #0]
 8009fd0:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(*trp == NULL, "not NULL");
 8009fd4:	4d3f      	ldr	r5, [pc, #252]	; (800a0d4 <rt_test_004_001_execute+0x124>)
  _dbg_check_lock();
 8009fd6:	f7f9 faeb 	bl	80035b0 <_dbg_check_lock>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b113      	cbz	r3, 8009fe4 <rt_test_004_001_execute+0x34>
 8009fde:	483e      	ldr	r0, [pc, #248]	; (800a0d8 <rt_test_004_001_execute+0x128>)
 8009fe0:	f7f6 fd7e 	bl	8000ae0 <chSysHalt>
  return ch.rlist.current;
 8009fe4:	69a3      	ldr	r3, [r4, #24]
  *trp = tp;
 8009fe6:	602b      	str	r3, [r5, #0]
  tp->u.wttrp = trp;
 8009fe8:	625d      	str	r5, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8009fea:	f04f 31ff 	mov.w	r1, #4294967295
 8009fee:	2003      	movs	r0, #3
 8009ff0:	f7f9 f946 	bl	8003280 <chSchGoSleepTimeoutS>
 8009ff4:	4607      	mov	r7, r0
  _dbg_check_unlock();
 8009ff6:	f7f9 fa73 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	d004      	beq.n	800a00a <rt_test_004_001_execute+0x5a>
 800a000:	69a2      	ldr	r2, [r4, #24]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	6892      	ldr	r2, [r2, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	d354      	bcc.n	800a0b4 <rt_test_004_001_execute+0x104>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 800a010:	6828      	ldr	r0, [r5, #0]
 800a012:	4932      	ldr	r1, [pc, #200]	; (800a0dc <rt_test_004_001_execute+0x12c>)
 800a014:	fab0 f080 	clz	r0, r0
 800a018:	0940      	lsrs	r0, r0, #5
 800a01a:	f7f6 fba1 	bl	8000760 <_test_assert>
 800a01e:	b100      	cbz	r0, 800a022 <rt_test_004_001_execute+0x72>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
}
 800a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 800a022:	fab7 f087 	clz	r0, r7
 800a026:	0940      	lsrs	r0, r0, #5
 800a028:	492d      	ldr	r1, [pc, #180]	; (800a0e0 <rt_test_004_001_execute+0x130>)
 800a02a:	f7f6 fb99 	bl	8000760 <_test_assert>
 800a02e:	2800      	cmp	r0, #0
 800a030:	d1f6      	bne.n	800a020 <rt_test_004_001_execute+0x70>
    test_wait_threads();
 800a032:	f7fe fd8d 	bl	8008b50 <test_wait_threads>
  test_set_step(2);
 800a036:	2302      	movs	r3, #2
 800a038:	6033      	str	r3, [r6, #0]
 800a03a:	2320      	movs	r3, #32
 800a03c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a040:	f7f9 fab6 	bl	80035b0 <_dbg_check_lock>
 800a044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  chDbgAssert(*trp == NULL, "not NULL");
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	6a56      	ldr	r6, [r2, #36]	; 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1c6      	bne.n	8009fde <rt_test_004_001_execute+0x2e>
 800a050:	69a3      	ldr	r3, [r4, #24]
  *trp = tp;
 800a052:	602b      	str	r3, [r5, #0]
  tp->u.wttrp = trp;
 800a054:	625d      	str	r5, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800a056:	f242 7110 	movw	r1, #10000	; 0x2710
 800a05a:	2003      	movs	r0, #3
 800a05c:	f7f9 f910 	bl	8003280 <chSchGoSleepTimeoutS>
 800a060:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800a062:	f7f9 fa3d 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d004      	beq.n	800a076 <rt_test_004_001_execute+0xc6>
 800a06c:	69a2      	ldr	r2, [r4, #24]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	6892      	ldr	r2, [r2, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	d31e      	bcc.n	800a0b4 <rt_test_004_001_execute+0x104>
 800a076:	2300      	movs	r3, #0
 800a078:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 800a07c:	f506 511c 	add.w	r1, r6, #9984	; 0x2700
 800a080:	4608      	mov	r0, r1
 800a082:	3010      	adds	r0, #16
 800a084:	3113      	adds	r1, #19
 800a086:	f7f6 fb33 	bl	80006f0 <_test_assert_time_window.constprop.1>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1c8      	bne.n	800a020 <rt_test_004_001_execute+0x70>
    test_assert(NULL == tr1, "not NULL");
 800a08e:	6828      	ldr	r0, [r5, #0]
 800a090:	4912      	ldr	r1, [pc, #72]	; (800a0dc <rt_test_004_001_execute+0x12c>)
 800a092:	fab0 f080 	clz	r0, r0
 800a096:	0940      	lsrs	r0, r0, #5
 800a098:	f7f6 fb62 	bl	8000760 <_test_assert>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1bf      	bne.n	800a020 <rt_test_004_001_execute+0x70>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800a0a0:	f1a7 30ff 	sub.w	r0, r7, #4294967295
 800a0a4:	fab0 f080 	clz	r0, r0
 800a0a8:	0940      	lsrs	r0, r0, #5
 800a0aa:	490d      	ldr	r1, [pc, #52]	; (800a0e0 <rt_test_004_001_execute+0x130>)
}
 800a0ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800a0b0:	f7f6 bb56 	b.w	8000760 <_test_assert>
 800a0b4:	480b      	ldr	r0, [pc, #44]	; (800a0e4 <rt_test_004_001_execute+0x134>)
 800a0b6:	f7f6 fd13 	bl	8000ae0 <chSysHalt>
 800a0ba:	bf00      	nop
 800a0bc:	200011b0 	.word	0x200011b0
 800a0c0:	20002354 	.word	0x20002354
 800a0c4:	0800cd60 	.word	0x0800cd60
 800a0c8:	20001c40 	.word	0x20001c40
 800a0cc:	08004bb1 	.word	0x08004bb1
 800a0d0:	2000236c 	.word	0x2000236c
 800a0d4:	20002380 	.word	0x20002380
 800a0d8:	0800b634 	.word	0x0800b634
 800a0dc:	0800cc44 	.word	0x0800cc44
 800a0e0:	0800cc74 	.word	0x0800cc74
 800a0e4:	0800b34c 	.word	0x0800b34c
	...

0800a0f0 <rt_test_003_002_execute>:
static void rt_test_003_002_execute(void) {
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	4d54      	ldr	r5, [pc, #336]	; (800a244 <rt_test_003_002_execute+0x154>)
  test_set_step(1);
 800a0f4:	4e54      	ldr	r6, [pc, #336]	; (800a248 <rt_test_003_002_execute+0x158>)
  return chThdGetSelfX()->prio;
 800a0f6:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800a0f8:	4b54      	ldr	r3, [pc, #336]	; (800a24c <rt_test_003_002_execute+0x15c>)
 800a0fa:	6891      	ldr	r1, [r2, #8]
 800a0fc:	4854      	ldr	r0, [pc, #336]	; (800a250 <rt_test_003_002_execute+0x160>)
 800a0fe:	4a55      	ldr	r2, [pc, #340]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a100:	4c55      	ldr	r4, [pc, #340]	; (800a258 <rt_test_003_002_execute+0x168>)
 800a102:	3905      	subs	r1, #5
  test_set_step(1);
 800a104:	2701      	movs	r7, #1
 800a106:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800a108:	f7fd fef2 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a10c:	69ab      	ldr	r3, [r5, #24]
 800a10e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800a110:	6899      	ldr	r1, [r3, #8]
 800a112:	4a50      	ldr	r2, [pc, #320]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a114:	4b51      	ldr	r3, [pc, #324]	; (800a25c <rt_test_003_002_execute+0x16c>)
 800a116:	4852      	ldr	r0, [pc, #328]	; (800a260 <rt_test_003_002_execute+0x170>)
 800a118:	3904      	subs	r1, #4
 800a11a:	f7fd fee9 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a11e:	69ab      	ldr	r3, [r5, #24]
 800a120:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800a122:	6899      	ldr	r1, [r3, #8]
 800a124:	4a4b      	ldr	r2, [pc, #300]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a126:	4b4f      	ldr	r3, [pc, #316]	; (800a264 <rt_test_003_002_execute+0x174>)
 800a128:	484f      	ldr	r0, [pc, #316]	; (800a268 <rt_test_003_002_execute+0x178>)
 800a12a:	3903      	subs	r1, #3
 800a12c:	f7fd fee0 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a130:	69ab      	ldr	r3, [r5, #24]
 800a132:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800a134:	6899      	ldr	r1, [r3, #8]
 800a136:	4a47      	ldr	r2, [pc, #284]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a138:	4b4c      	ldr	r3, [pc, #304]	; (800a26c <rt_test_003_002_execute+0x17c>)
 800a13a:	484d      	ldr	r0, [pc, #308]	; (800a270 <rt_test_003_002_execute+0x180>)
 800a13c:	3902      	subs	r1, #2
 800a13e:	f7fd fed7 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a142:	69ab      	ldr	r3, [r5, #24]
 800a144:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800a146:	6899      	ldr	r1, [r3, #8]
 800a148:	4a42      	ldr	r2, [pc, #264]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a14a:	4b4a      	ldr	r3, [pc, #296]	; (800a274 <rt_test_003_002_execute+0x184>)
 800a14c:	484a      	ldr	r0, [pc, #296]	; (800a278 <rt_test_003_002_execute+0x188>)
 800a14e:	3901      	subs	r1, #1
 800a150:	f7fd fece 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a154:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 800a156:	f7fe fcfb 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800a15a:	4948      	ldr	r1, [pc, #288]	; (800a27c <rt_test_003_002_execute+0x18c>)
 800a15c:	4848      	ldr	r0, [pc, #288]	; (800a280 <rt_test_003_002_execute+0x190>)
 800a15e:	f7f6 fb9f 	bl	80008a0 <_test_assert_sequence>
 800a162:	b100      	cbz	r0, 800a166 <rt_test_003_002_execute+0x76>
}
 800a164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a166:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800a168:	4b42      	ldr	r3, [pc, #264]	; (800a274 <rt_test_003_002_execute+0x184>)
 800a16a:	6891      	ldr	r1, [r2, #8]
 800a16c:	4842      	ldr	r0, [pc, #264]	; (800a278 <rt_test_003_002_execute+0x188>)
 800a16e:	4a39      	ldr	r2, [pc, #228]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a170:	3901      	subs	r1, #1
  test_set_step(2);
 800a172:	2702      	movs	r7, #2
 800a174:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800a176:	f7fd febb 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a17a:	69ab      	ldr	r3, [r5, #24]
 800a17c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800a17e:	6899      	ldr	r1, [r3, #8]
 800a180:	4a34      	ldr	r2, [pc, #208]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a182:	4b3a      	ldr	r3, [pc, #232]	; (800a26c <rt_test_003_002_execute+0x17c>)
 800a184:	483a      	ldr	r0, [pc, #232]	; (800a270 <rt_test_003_002_execute+0x180>)
 800a186:	3902      	subs	r1, #2
 800a188:	f7fd feb2 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a18c:	69ab      	ldr	r3, [r5, #24]
 800a18e:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800a190:	6899      	ldr	r1, [r3, #8]
 800a192:	4a30      	ldr	r2, [pc, #192]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a194:	4b33      	ldr	r3, [pc, #204]	; (800a264 <rt_test_003_002_execute+0x174>)
 800a196:	4834      	ldr	r0, [pc, #208]	; (800a268 <rt_test_003_002_execute+0x178>)
 800a198:	3903      	subs	r1, #3
 800a19a:	f7fd fea9 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a19e:	69ab      	ldr	r3, [r5, #24]
 800a1a0:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800a1a2:	6899      	ldr	r1, [r3, #8]
 800a1a4:	4a2b      	ldr	r2, [pc, #172]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a1a6:	4b2d      	ldr	r3, [pc, #180]	; (800a25c <rt_test_003_002_execute+0x16c>)
 800a1a8:	482d      	ldr	r0, [pc, #180]	; (800a260 <rt_test_003_002_execute+0x170>)
 800a1aa:	3904      	subs	r1, #4
 800a1ac:	f7fd fea0 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a1b0:	69ab      	ldr	r3, [r5, #24]
 800a1b2:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800a1b4:	6899      	ldr	r1, [r3, #8]
 800a1b6:	4a27      	ldr	r2, [pc, #156]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a1b8:	4b24      	ldr	r3, [pc, #144]	; (800a24c <rt_test_003_002_execute+0x15c>)
 800a1ba:	4825      	ldr	r0, [pc, #148]	; (800a250 <rt_test_003_002_execute+0x160>)
 800a1bc:	3905      	subs	r1, #5
 800a1be:	f7fd fe97 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a1c2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 800a1c4:	f7fe fcc4 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800a1c8:	492c      	ldr	r1, [pc, #176]	; (800a27c <rt_test_003_002_execute+0x18c>)
 800a1ca:	482d      	ldr	r0, [pc, #180]	; (800a280 <rt_test_003_002_execute+0x190>)
 800a1cc:	f7f6 fb68 	bl	80008a0 <_test_assert_sequence>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d1c7      	bne.n	800a164 <rt_test_003_002_execute+0x74>
 800a1d4:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800a1d6:	4b21      	ldr	r3, [pc, #132]	; (800a25c <rt_test_003_002_execute+0x16c>)
 800a1d8:	6891      	ldr	r1, [r2, #8]
 800a1da:	4821      	ldr	r0, [pc, #132]	; (800a260 <rt_test_003_002_execute+0x170>)
 800a1dc:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a1de:	3904      	subs	r1, #4
  test_set_step(3);
 800a1e0:	2703      	movs	r7, #3
 800a1e2:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800a1e4:	f7fd fe84 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a1e8:	69ab      	ldr	r3, [r5, #24]
 800a1ea:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800a1ec:	6899      	ldr	r1, [r3, #8]
 800a1ee:	4a19      	ldr	r2, [pc, #100]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a1f0:	4b16      	ldr	r3, [pc, #88]	; (800a24c <rt_test_003_002_execute+0x15c>)
 800a1f2:	4817      	ldr	r0, [pc, #92]	; (800a250 <rt_test_003_002_execute+0x160>)
 800a1f4:	3905      	subs	r1, #5
 800a1f6:	f7fd fe7b 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a1fa:	69ab      	ldr	r3, [r5, #24]
 800a1fc:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800a1fe:	6899      	ldr	r1, [r3, #8]
 800a200:	4a14      	ldr	r2, [pc, #80]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a202:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <rt_test_003_002_execute+0x184>)
 800a204:	481c      	ldr	r0, [pc, #112]	; (800a278 <rt_test_003_002_execute+0x188>)
 800a206:	3901      	subs	r1, #1
 800a208:	f7fd fe72 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a20c:	69ab      	ldr	r3, [r5, #24]
 800a20e:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800a210:	6899      	ldr	r1, [r3, #8]
 800a212:	4a10      	ldr	r2, [pc, #64]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a214:	4b15      	ldr	r3, [pc, #84]	; (800a26c <rt_test_003_002_execute+0x17c>)
 800a216:	4816      	ldr	r0, [pc, #88]	; (800a270 <rt_test_003_002_execute+0x180>)
 800a218:	3902      	subs	r1, #2
 800a21a:	f7fd fe69 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a21e:	69ab      	ldr	r3, [r5, #24]
 800a220:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800a222:	6899      	ldr	r1, [r3, #8]
 800a224:	4a0b      	ldr	r2, [pc, #44]	; (800a254 <rt_test_003_002_execute+0x164>)
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <rt_test_003_002_execute+0x174>)
 800a228:	480f      	ldr	r0, [pc, #60]	; (800a268 <rt_test_003_002_execute+0x178>)
 800a22a:	3903      	subs	r1, #3
 800a22c:	f7fd fe60 	bl	8007ef0 <chThdCreateStatic.constprop.60>
 800a230:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800a232:	f7fe fc8d 	bl	8008b50 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800a236:	4911      	ldr	r1, [pc, #68]	; (800a27c <rt_test_003_002_execute+0x18c>)
 800a238:	4811      	ldr	r0, [pc, #68]	; (800a280 <rt_test_003_002_execute+0x190>)
}
 800a23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800a23e:	f7f6 bb2f 	b.w	80008a0 <_test_assert_sequence>
 800a242:	bf00      	nop
 800a244:	200011b0 	.word	0x200011b0
 800a248:	20002354 	.word	0x20002354
 800a24c:	0800cdec 	.word	0x0800cdec
 800a250:	20001c40 	.word	0x20001c40
 800a254:	08004c21 	.word	0x08004c21
 800a258:	2000236c 	.word	0x2000236c
 800a25c:	0800dd04 	.word	0x0800dd04
 800a260:	20001d88 	.word	0x20001d88
 800a264:	0800cfac 	.word	0x0800cfac
 800a268:	20001ed0 	.word	0x20001ed0
 800a26c:	0800cd64 	.word	0x0800cd64
 800a270:	20002018 	.word	0x20002018
 800a274:	0800cd60 	.word	0x0800cd60
 800a278:	20002160 	.word	0x20002160
 800a27c:	0800ce4c 	.word	0x0800ce4c
 800a280:	0800cde8 	.word	0x0800cde8
	...

0800a290 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a290:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 800a292:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800a294:	b083      	sub	sp, #12
 800a296:	4604      	mov	r4, r0
  if (argc != 1) {
 800a298:	d11c      	bne.n	800a2d4 <cmd_test+0x44>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800a29a:	6815      	ldr	r5, [r2, #0]
 800a29c:	4916      	ldr	r1, [pc, #88]	; (800a2f8 <cmd_test+0x68>)
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f7f6 f8b2 	bl	8000408 <strcmp>
 800a2a4:	b1f0      	cbz	r0, 800a2e4 <cmd_test+0x54>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	4914      	ldr	r1, [pc, #80]	; (800a2fc <cmd_test+0x6c>)
 800a2aa:	f7f6 f8ad 	bl	8000408 <strcmp>
 800a2ae:	b988      	cbnz	r0, 800a2d4 <cmd_test+0x44>
    tfp = test_oslib;
 800a2b0:	4913      	ldr	r1, [pc, #76]	; (800a300 <cmd_test+0x70>)
  return ch.rlist.current;
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 800a2b4:	4a14      	ldr	r2, [pc, #80]	; (800a308 <cmd_test+0x78>)
  return chThdGetSelfX()->prio;
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	e9cd 1400 	strd	r1, r4, [sp]
 800a2c0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800a2c4:	f7fb fc6c 	bl	8005ba0 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 800a2c8:	b170      	cbz	r0, 800a2e8 <cmd_test+0x58>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 800a2d0:	f7fe b926 	b.w	8008520 <chThdWait>
    shellUsage(chp, "test rt|oslib");
 800a2d4:	4a0d      	ldr	r2, [pc, #52]	; (800a30c <cmd_test+0x7c>)
 800a2d6:	490e      	ldr	r1, [pc, #56]	; (800a310 <cmd_test+0x80>)
 800a2d8:	4620      	mov	r0, r4
}
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 800a2e0:	f7f8 bc0e 	b.w	8002b00 <chprintf>
    tfp = test_rt;
 800a2e4:	490b      	ldr	r1, [pc, #44]	; (800a314 <cmd_test+0x84>)
 800a2e6:	e7e4      	b.n	800a2b2 <cmd_test+0x22>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800a2e8:	490b      	ldr	r1, [pc, #44]	; (800a318 <cmd_test+0x88>)
 800a2ea:	4620      	mov	r0, r4
}
 800a2ec:	b003      	add	sp, #12
 800a2ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800a2f2:	f7f8 bc05 	b.w	8002b00 <chprintf>
 800a2f6:	bf00      	nop
 800a2f8:	0800bad4 	.word	0x0800bad4
 800a2fc:	0800bacc 	.word	0x0800bacc
 800a300:	08007a81 	.word	0x08007a81
 800a304:	200011b0 	.word	0x200011b0
 800a308:	0800d904 	.word	0x0800d904
 800a30c:	0800bac4 	.word	0x0800bac4
 800a310:	0800b918 	.word	0x0800b918
 800a314:	08007a71 	.word	0x08007a71
 800a318:	0800bad8 	.word	0x0800bad8
 800a31c:	00000000 	.word	0x00000000

0800a320 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a320:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 800a324:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800a328:	b923      	cbnz	r3, 800a334 <chSysGetStatusAndLockX.part.1+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a32a:	2320      	movs	r3, #32
 800a32c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a330:	f7f9 b93e 	b.w	80035b0 <_dbg_check_lock>
 800a334:	2320      	movs	r3, #32
 800a336:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800a33a:	f7f6 bea9 	b.w	8001090 <_dbg_check_lock_from_isr>
 800a33e:	bf00      	nop

0800a340 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 800a340:	b530      	push	{r4, r5, lr}
  test_set_step(1);
 800a342:	4d61      	ldr	r5, [pc, #388]	; (800a4c8 <rt_test_002_002_execute+0x188>)
 800a344:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 800a346:	b087      	sub	sp, #28
  test_set_step(1);
 800a348:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a34a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 800a34e:	b91b      	cbnz	r3, 800a358 <rt_test_002_002_execute+0x18>
 800a350:	f7ff ffe6 	bl	800a320 <chSysGetStatusAndLockX.part.1>
 800a354:	f7f9 f904 	bl	8003560 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 800a358:	2302      	movs	r3, #2
 800a35a:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a35c:	2320      	movs	r3, #32
 800a35e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a362:	f7f9 f925 	bl	80035b0 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a366:	f3ef 8311 	mrs	r3, BASEPRI
 800a36a:	b91b      	cbnz	r3, 800a374 <rt_test_002_002_execute+0x34>
 800a36c:	f7ff ffd8 	bl	800a320 <chSysGetStatusAndLockX.part.1>
 800a370:	f7f9 f8f6 	bl	8003560 <chSysRestoreStatusX.part.2>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a374:	4c55      	ldr	r4, [pc, #340]	; (800a4cc <rt_test_002_002_execute+0x18c>)
  _dbg_check_unlock();
 800a376:	f7f9 f8b3 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d004      	beq.n	800a38a <rt_test_002_002_execute+0x4a>
 800a380:	69a2      	ldr	r2, [r4, #24]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	6892      	ldr	r2, [r2, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	d36c      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a38a:	2300      	movs	r3, #0
 800a38c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 800a390:	2303      	movs	r3, #3
 800a392:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a394:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d06c      	beq.n	800a476 <rt_test_002_002_execute+0x136>
 800a39c:	f3ef 8311 	mrs	r3, BASEPRI
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d062      	beq.n	800a46a <rt_test_002_002_execute+0x12a>
  _dbg_check_unlock();
 800a3a4:	f7f9 f89c 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	d004      	beq.n	800a3b8 <rt_test_002_002_execute+0x78>
 800a3ae:	69a2      	ldr	r2, [r4, #24]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	6892      	ldr	r2, [r2, #8]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d355      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 800a3be:	2304      	movs	r3, #4
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	2320      	movs	r3, #32
 800a3c4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a3c8:	f7f9 f8f2 	bl	80035b0 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3cc:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d15a      	bne.n	800a48a <rt_test_002_002_execute+0x14a>
 800a3d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d167      	bne.n	800a4ac <rt_test_002_002_execute+0x16c>
  test_set_step(5);
 800a3dc:	2205      	movs	r2, #5
  vtp->func = NULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9304      	str	r3, [sp, #16]
 800a3e2:	602a      	str	r2, [r5, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a3ea:	f7f9 f8e1 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 800a3ee:	f7f6 fbb7 	bl	8000b60 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 800a3f2:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 800a3f4:	ad01      	add	r5, sp, #4
  if (chVTIsArmedI(vtp)) {
 800a3f6:	b113      	cbz	r3, 800a3fe <rt_test_002_002_execute+0xbe>
    chVTDoResetI(vtp);
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f7f7 fd19 	bl	8001e30 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 800a3fe:	2300      	movs	r3, #0
 800a400:	4628      	mov	r0, r5
 800a402:	4a33      	ldr	r2, [pc, #204]	; (800a4d0 <rt_test_002_002_execute+0x190>)
 800a404:	2101      	movs	r1, #1
 800a406:	f7f7 fd5b 	bl	8001ec0 <chVTDoSetI>
  _dbg_check_unlock();
 800a40a:	f7f9 f869 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	42a3      	cmp	r3, r4
 800a412:	d004      	beq.n	800a41e <rt_test_002_002_execute+0xde>
 800a414:	69a2      	ldr	r2, [r4, #24]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	6892      	ldr	r2, [r2, #8]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d322      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
 800a41e:	2300      	movs	r3, #0
 800a420:	f383 8811 	msr	BASEPRI, r3
    chThdSleep(10);
 800a424:	200a      	movs	r0, #10
 800a426:	f7fc fe9b 	bl	8007160 <chThdSleep>
 800a42a:	2320      	movs	r3, #32
 800a42c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a430:	f7f9 f8be 	bl	80035b0 <_dbg_check_lock>
  chDbgCheckClassI();
 800a434:	f7f6 fb94 	bl	8000b60 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
 800a438:	9d04      	ldr	r5, [sp, #16]
  _dbg_check_unlock();
 800a43a:	f7f9 f851 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	42a3      	cmp	r3, r4
 800a442:	d004      	beq.n	800a44e <rt_test_002_002_execute+0x10e>
 800a444:	69a2      	ldr	r2, [r4, #24]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	6892      	ldr	r2, [r2, #8]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d30a      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
 800a44e:	2300      	movs	r3, #0
 800a450:	f383 8811 	msr	BASEPRI, r3
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 800a454:	fab5 f085 	clz	r0, r5
 800a458:	491e      	ldr	r1, [pc, #120]	; (800a4d4 <rt_test_002_002_execute+0x194>)
 800a45a:	0940      	lsrs	r0, r0, #5
 800a45c:	f7f6 f980 	bl	8000760 <_test_assert>
}
 800a460:	b007      	add	sp, #28
 800a462:	bd30      	pop	{r4, r5, pc}
 800a464:	481c      	ldr	r0, [pc, #112]	; (800a4d8 <rt_test_002_002_execute+0x198>)
 800a466:	f7f6 fb3b 	bl	8000ae0 <chSysHalt>
 800a46a:	2320      	movs	r3, #32
 800a46c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a470:	f7f9 f89e 	bl	80035b0 <_dbg_check_lock>
 800a474:	e796      	b.n	800a3a4 <rt_test_002_002_execute+0x64>
 800a476:	2320      	movs	r3, #32
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f7f9 f898 	bl	80035b0 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a480:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(port_get_irq_status())) {
 800a484:	2b00      	cmp	r3, #0
 800a486:	d18d      	bne.n	800a3a4 <rt_test_002_002_execute+0x64>
 800a488:	e7ef      	b.n	800a46a <rt_test_002_002_execute+0x12a>
  _dbg_check_unlock();
 800a48a:	f7f9 f829 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	42a3      	cmp	r3, r4
 800a492:	d004      	beq.n	800a49e <rt_test_002_002_execute+0x15e>
 800a494:	69a2      	ldr	r2, [r4, #24]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	6892      	ldr	r2, [r2, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d3e2      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4a4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!port_irq_enabled(port_get_irq_status())) {
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d097      	beq.n	800a3dc <rt_test_002_002_execute+0x9c>
  _dbg_check_unlock();
 800a4ac:	f7f9 f818 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	d004      	beq.n	800a4c0 <rt_test_002_002_execute+0x180>
 800a4b6:	69a2      	ldr	r2, [r4, #24]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	6892      	ldr	r2, [r2, #8]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d3d1      	bcc.n	800a464 <rt_test_002_002_execute+0x124>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	e789      	b.n	800a3dc <rt_test_002_002_execute+0x9c>
 800a4c8:	20002354 	.word	0x20002354
 800a4cc:	200011b0 	.word	0x200011b0
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800cb30 	.word	0x0800cb30
 800a4d8:	0800b334 	.word	0x0800b334
 800a4dc:	00000000 	.word	0x00000000

0800a4e0 <vtcb>:
static void vtcb(void *p) {
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	2420      	movs	r4, #32
 800a4e4:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock_from_isr();
 800a4e8:	f7f6 fdd2 	bl	8001090 <_dbg_check_lock_from_isr>
  _dbg_check_unlock_from_isr();
 800a4ec:	f7f6 fdb8 	bl	8001060 <_dbg_check_unlock_from_isr>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock_from_isr();
 800a4fa:	f7f6 fdc9 	bl	8001090 <_dbg_check_lock_from_isr>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4fe:	f3ef 8311 	mrs	r3, BASEPRI
 800a502:	b91b      	cbnz	r3, 800a50c <vtcb+0x2c>
 800a504:	f7ff ff0c 	bl	800a320 <chSysGetStatusAndLockX.part.1>
 800a508:	f7f9 f82a 	bl	8003560 <chSysRestoreStatusX.part.2>
  _dbg_check_unlock_from_isr();
 800a50c:	f7f6 fda8 	bl	8001060 <_dbg_check_unlock_from_isr>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a510:	2300      	movs	r3, #0
 800a512:	f383 8811 	msr	BASEPRI, r3
}
 800a516:	bd10      	pop	{r4, pc}
	...

0800a520 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 800a526:	2a00      	cmp	r2, #0
 800a528:	f000 8090 	beq.w	800a64c <obqWriteTimeout+0x12c>
 800a52c:	4698      	mov	r8, r3
 800a52e:	4604      	mov	r4, r0
 800a530:	468b      	mov	fp, r1
 800a532:	4617      	mov	r7, r2
 800a534:	2320      	movs	r3, #32
 800a536:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a53a:	f7f9 f839 	bl	80035b0 <_dbg_check_lock>
 800a53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (obqp->ptr == NULL) {
 800a542:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a546:	4e43      	ldr	r6, [pc, #268]	; (800a654 <obqWriteTimeout+0x134>)
  return systime + (systime_t)interval;
 800a548:	4442      	add	r2, r8
  size_t w = 0;
 800a54a:	2500      	movs	r5, #0
 800a54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800a550:	f108 33ff 	add.w	r3, r8, #4294967295
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	46a9      	mov	r9, r5
    if (obqp->ptr == NULL) {
 800a558:	2800      	cmp	r0, #0
 800a55a:	d04f      	beq.n	800a5fc <obqWriteTimeout+0xdc>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800a55c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - w)) {
 800a55e:	eba7 0a05 	sub.w	sl, r7, r5
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800a562:	1a1b      	subs	r3, r3, r0
 800a564:	459a      	cmp	sl, r3
 800a566:	bf28      	it	cs
 800a568:	469a      	movcs	sl, r3
    if (size > 64U) {
 800a56a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800a56e:	d923      	bls.n	800a5b8 <obqWriteTimeout+0x98>
      memcpy(obqp->ptr, bp, 64U);
 800a570:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 800a574:	f8db c000 	ldr.w	ip, [fp]
 800a578:	f8db 1004 	ldr.w	r1, [fp, #4]
 800a57c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800a580:	f8db e00c 	ldr.w	lr, [fp, #12]
 800a584:	f8c0 e00c 	str.w	lr, [r0, #12]
 800a588:	f10b 0b10 	add.w	fp, fp, #16
 800a58c:	459b      	cmp	fp, r3
 800a58e:	f8c0 c000 	str.w	ip, [r0]
 800a592:	6041      	str	r1, [r0, #4]
 800a594:	6082      	str	r2, [r0, #8]
 800a596:	f100 0010 	add.w	r0, r0, #16
 800a59a:	d1eb      	bne.n	800a574 <obqWriteTimeout+0x54>
      obqp->ptr += 64U;
 800a59c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800a59e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += 64U;
 800a5a0:	3340      	adds	r3, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 800a5a2:	429a      	cmp	r2, r3
      w         += 64U;
 800a5a4:	f105 0540 	add.w	r5, r5, #64	; 0x40
      obqp->ptr += 64U;
 800a5a8:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800a5aa:	d811      	bhi.n	800a5d0 <obqWriteTimeout+0xb0>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800a5ac:	69e1      	ldr	r1, [r4, #28]
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	3904      	subs	r1, #4
 800a5b2:	f7f7 faed 	bl	8001b90 <obqPostFullBufferS>
 800a5b6:	e00b      	b.n	800a5d0 <obqWriteTimeout+0xb0>
      memcpy(obqp->ptr, bp, size);
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	4659      	mov	r1, fp
 800a5bc:	f7f5 fe7a 	bl	80002b4 <memcpy>
      obqp->ptr += size;
 800a5c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800a5c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += size;
 800a5c4:	4453      	add	r3, sl
    if (obqp->ptr >= obqp->top) {
 800a5c6:	429a      	cmp	r2, r3
      w         += size;
 800a5c8:	4455      	add	r5, sl
      bp        += size;
 800a5ca:	44d3      	add	fp, sl
      obqp->ptr += size;
 800a5cc:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800a5ce:	d9ed      	bls.n	800a5ac <obqWriteTimeout+0x8c>
  _dbg_check_unlock();
 800a5d0:	f7f8 ff86 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a5d4:	6833      	ldr	r3, [r6, #0]
 800a5d6:	42b3      	cmp	r3, r6
 800a5d8:	d004      	beq.n	800a5e4 <obqWriteTimeout+0xc4>
 800a5da:	69b2      	ldr	r2, [r6, #24]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	6892      	ldr	r2, [r2, #8]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d32b      	bcc.n	800a63c <obqWriteTimeout+0x11c>
 800a5e4:	f389 8811 	msr	BASEPRI, r9
    if (w >= n) {
 800a5e8:	42bd      	cmp	r5, r7
 800a5ea:	d223      	bcs.n	800a634 <obqWriteTimeout+0x114>
 800a5ec:	2320      	movs	r3, #32
 800a5ee:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a5f2:	f7f8 ffdd 	bl	80035b0 <_dbg_check_lock>
    if (obqp->ptr == NULL) {
 800a5f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1af      	bne.n	800a55c <obqWriteTimeout+0x3c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	3303      	adds	r3, #3
 800a600:	d81f      	bhi.n	800a642 <obqWriteTimeout+0x122>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800a606:	9b02      	ldr	r3, [sp, #8]
 800a608:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 800a60a:	4588      	cmp	r8, r1
 800a60c:	d305      	bcc.n	800a61a <obqWriteTimeout+0xfa>
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 800a60e:	4620      	mov	r0, r4
 800a610:	f7f8 feae 	bl	8003370 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800a614:	b908      	cbnz	r0, 800a61a <obqWriteTimeout+0xfa>
 800a616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a618:	e7a0      	b.n	800a55c <obqWriteTimeout+0x3c>
  _dbg_check_unlock();
 800a61a:	f7f8 ff61 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a61e:	6833      	ldr	r3, [r6, #0]
 800a620:	42b3      	cmp	r3, r6
 800a622:	d004      	beq.n	800a62e <obqWriteTimeout+0x10e>
 800a624:	69b2      	ldr	r2, [r6, #24]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	6892      	ldr	r2, [r2, #8]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d306      	bcc.n	800a63c <obqWriteTimeout+0x11c>
 800a62e:	2300      	movs	r3, #0
 800a630:	f383 8811 	msr	BASEPRI, r3
}
 800a634:	4628      	mov	r0, r5
 800a636:	b005      	add	sp, #20
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4806      	ldr	r0, [pc, #24]	; (800a658 <obqWriteTimeout+0x138>)
 800a63e:	f7f6 fa4f 	bl	8000ae0 <chSysHalt>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800a642:	4641      	mov	r1, r8
 800a644:	4620      	mov	r0, r4
 800a646:	f7f8 fe93 	bl	8003370 <obqGetEmptyBufferTimeoutS>
 800a64a:	e7e3      	b.n	800a614 <obqWriteTimeout+0xf4>
  osalDbgCheck(n > 0U);
 800a64c:	4803      	ldr	r0, [pc, #12]	; (800a65c <obqWriteTimeout+0x13c>)
 800a64e:	f7f6 fa47 	bl	8000ae0 <chSysHalt>
 800a652:	bf00      	nop
 800a654:	200011b0 	.word	0x200011b0
 800a658:	0800b3b4 	.word	0x0800b3b4
 800a65c:	0800b818 	.word	0x0800b818

0800a660 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 800a660:	3044      	adds	r0, #68	; 0x44
 800a662:	f7ff bf5d 	b.w	800a520 <obqWriteTimeout>
 800a666:	bf00      	nop
	...

0800a670 <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 800a670:	3044      	adds	r0, #68	; 0x44
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	f7ff bf53 	b.w	800a520 <obqWriteTimeout>
 800a67a:	bf00      	nop
 800a67c:	0000      	movs	r0, r0
	...

0800a680 <obqPutTimeout>:
                    sysinterval_t timeout) {
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	2320      	movs	r3, #32
 800a684:	b082      	sub	sp, #8
 800a686:	4604      	mov	r4, r0
 800a688:	460d      	mov	r5, r1
 800a68a:	4616      	mov	r6, r2
 800a68c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a690:	f7f8 ff8e 	bl	80035b0 <_dbg_check_lock>
  if (obqp->ptr == NULL) {
 800a694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a696:	b1fb      	cbz	r3, 800a6d8 <obqPutTimeout+0x58>
  *obqp->ptr = b;
 800a698:	701d      	strb	r5, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 800a69a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 800a69e:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 800a6a0:	4293      	cmp	r3, r2
  obqp->ptr++;
 800a6a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800a6a4:	d212      	bcs.n	800a6cc <obqPutTimeout+0x4c>
  _dbg_check_unlock();
 800a6a6:	f7f8 ff1b 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a6aa:	4b17      	ldr	r3, [pc, #92]	; (800a708 <obqPutTimeout+0x88>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d004      	beq.n	800a6bc <obqPutTimeout+0x3c>
 800a6b2:	6999      	ldr	r1, [r3, #24]
 800a6b4:	6893      	ldr	r3, [r2, #8]
 800a6b6:	688a      	ldr	r2, [r1, #8]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d304      	bcc.n	800a6c6 <obqPutTimeout+0x46>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f380 8811 	msr	BASEPRI, r0
}
 800a6c2:	b002      	add	sp, #8
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	4811      	ldr	r0, [pc, #68]	; (800a70c <obqPutTimeout+0x8c>)
 800a6c8:	f7f6 fa0a 	bl	8000ae0 <chSysHalt>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800a6cc:	69e1      	ldr	r1, [r4, #28]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	3904      	subs	r1, #4
 800a6d2:	f7f7 fa5d 	bl	8001b90 <obqPostFullBufferS>
 800a6d6:	e7e6      	b.n	800a6a6 <obqPutTimeout+0x26>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7f8 fe48 	bl	8003370 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 800a6e0:	b908      	cbnz	r0, 800a6e6 <obqPutTimeout+0x66>
 800a6e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a6e4:	e7d8      	b.n	800a698 <obqPutTimeout+0x18>
 800a6e6:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 800a6e8:	f7f8 fefa 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <obqPutTimeout+0x88>)
 800a6ee:	9801      	ldr	r0, [sp, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d004      	beq.n	800a700 <obqPutTimeout+0x80>
 800a6f6:	6999      	ldr	r1, [r3, #24]
 800a6f8:	6893      	ldr	r3, [r2, #8]
 800a6fa:	688a      	ldr	r2, [r1, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d3e2      	bcc.n	800a6c6 <obqPutTimeout+0x46>
 800a700:	2300      	movs	r3, #0
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	e7dc      	b.n	800a6c2 <obqPutTimeout+0x42>
 800a708:	200011b0 	.word	0x200011b0
 800a70c:	0800b3b4 	.word	0x0800b3b4

0800a710 <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800a710:	3044      	adds	r0, #68	; 0x44
 800a712:	f7ff bfb5 	b.w	800a680 <obqPutTimeout>
 800a716:	bf00      	nop
	...

0800a720 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800a720:	3044      	adds	r0, #68	; 0x44
 800a722:	f04f 32ff 	mov.w	r2, #4294967295
 800a726:	f7ff bfab 	b.w	800a680 <obqPutTimeout>
 800a72a:	bf00      	nop
 800a72c:	0000      	movs	r0, r0
	...

0800a730 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 800a736:	2a00      	cmp	r2, #0
 800a738:	f000 8090 	beq.w	800a85c <ibqReadTimeout+0x12c>
 800a73c:	4699      	mov	r9, r3
 800a73e:	4604      	mov	r4, r0
 800a740:	460f      	mov	r7, r1
 800a742:	4690      	mov	r8, r2
 800a744:	2320      	movs	r3, #32
 800a746:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a74a:	f7f8 ff31 	bl	80035b0 <_dbg_check_lock>
 800a74e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (ibqp->ptr == NULL) {
 800a752:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a756:	4e43      	ldr	r6, [pc, #268]	; (800a864 <ibqReadTimeout+0x134>)
  return systime + (systime_t)interval;
 800a758:	444a      	add	r2, r9
  size_t r = 0;
 800a75a:	2500      	movs	r5, #0
 800a75c:	e9cd 2302 	strd	r2, r3, [sp, #8]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800a760:	f109 33ff 	add.w	r3, r9, #4294967295
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	46aa      	mov	sl, r5
    if (ibqp->ptr == NULL) {
 800a768:	2900      	cmp	r1, #0
 800a76a:	d04f      	beq.n	800a80c <ibqReadTimeout+0xdc>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800a76c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 800a76e:	eba8 0b05 	sub.w	fp, r8, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	459b      	cmp	fp, r3
 800a776:	bf28      	it	cs
 800a778:	469b      	movcs	fp, r3
    if (size > 64U) {
 800a77a:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800a77e:	d923      	bls.n	800a7c8 <ibqReadTimeout+0x98>
      memcpy(bp, ibqp->ptr, 64U);
 800a780:	f101 0240 	add.w	r2, r1, #64	; 0x40
 800a784:	463b      	mov	r3, r7
 800a786:	f8d1 e000 	ldr.w	lr, [r1]
 800a78a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800a78e:	6888      	ldr	r0, [r1, #8]
 800a790:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800a794:	f8c3 b00c 	str.w	fp, [r3, #12]
 800a798:	3110      	adds	r1, #16
 800a79a:	4291      	cmp	r1, r2
 800a79c:	f8c3 e000 	str.w	lr, [r3]
 800a7a0:	f8c3 c004 	str.w	ip, [r3, #4]
 800a7a4:	6098      	str	r0, [r3, #8]
 800a7a6:	f103 0310 	add.w	r3, r3, #16
 800a7aa:	d1ec      	bne.n	800a786 <ibqReadTimeout+0x56>
      ibqp->ptr += 64U;
 800a7ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 800a7ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      ibqp->ptr += 64U;
 800a7b0:	3340      	adds	r3, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 800a7b2:	429a      	cmp	r2, r3
      bp        += 64U;
 800a7b4:	f107 0740 	add.w	r7, r7, #64	; 0x40
      r         += 64U;
 800a7b8:	f105 0540 	add.w	r5, r5, #64	; 0x40
      ibqp->ptr += 64U;
 800a7bc:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 800a7be:	d80f      	bhi.n	800a7e0 <ibqReadTimeout+0xb0>
      ibqReleaseEmptyBufferS(ibqp);
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f7f7 fb05 	bl	8001dd0 <ibqReleaseEmptyBufferS>
 800a7c6:	e00b      	b.n	800a7e0 <ibqReadTimeout+0xb0>
      memcpy(bp, ibqp->ptr, size);
 800a7c8:	465a      	mov	r2, fp
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7f5 fd72 	bl	80002b4 <memcpy>
      ibqp->ptr += size;
 800a7d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 800a7d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      ibqp->ptr += size;
 800a7d4:	445b      	add	r3, fp
    if (ibqp->ptr >= ibqp->top) {
 800a7d6:	429a      	cmp	r2, r3
      r         += size;
 800a7d8:	445d      	add	r5, fp
      bp        += size;
 800a7da:	445f      	add	r7, fp
      ibqp->ptr += size;
 800a7dc:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 800a7de:	d9ef      	bls.n	800a7c0 <ibqReadTimeout+0x90>
  _dbg_check_unlock();
 800a7e0:	f7f8 fe7e 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a7e4:	6833      	ldr	r3, [r6, #0]
 800a7e6:	42b3      	cmp	r3, r6
 800a7e8:	d004      	beq.n	800a7f4 <ibqReadTimeout+0xc4>
 800a7ea:	69b2      	ldr	r2, [r6, #24]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	6892      	ldr	r2, [r2, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d32b      	bcc.n	800a84c <ibqReadTimeout+0x11c>
 800a7f4:	f38a 8811 	msr	BASEPRI, sl
    if (r >= n) {
 800a7f8:	4545      	cmp	r5, r8
 800a7fa:	d223      	bcs.n	800a844 <ibqReadTimeout+0x114>
 800a7fc:	2320      	movs	r3, #32
 800a7fe:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a802:	f7f8 fed5 	bl	80035b0 <_dbg_check_lock>
    if (ibqp->ptr == NULL) {
 800a806:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a808:	2900      	cmp	r1, #0
 800a80a:	d1af      	bne.n	800a76c <ibqReadTimeout+0x3c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	3303      	adds	r3, #3
 800a810:	d81f      	bhi.n	800a852 <ibqReadTimeout+0x122>
 800a812:	9b03      	ldr	r3, [sp, #12]
 800a814:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800a816:	9b02      	ldr	r3, [sp, #8]
 800a818:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 800a81a:	4589      	cmp	r9, r1
 800a81c:	d305      	bcc.n	800a82a <ibqReadTimeout+0xfa>
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 800a81e:	4620      	mov	r0, r4
 800a820:	f7f8 fdce 	bl	80033c0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 800a824:	b908      	cbnz	r0, 800a82a <ibqReadTimeout+0xfa>
 800a826:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a828:	e7a0      	b.n	800a76c <ibqReadTimeout+0x3c>
  _dbg_check_unlock();
 800a82a:	f7f8 fe59 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a82e:	6833      	ldr	r3, [r6, #0]
 800a830:	42b3      	cmp	r3, r6
 800a832:	d004      	beq.n	800a83e <ibqReadTimeout+0x10e>
 800a834:	69b2      	ldr	r2, [r6, #24]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	6892      	ldr	r2, [r2, #8]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d306      	bcc.n	800a84c <ibqReadTimeout+0x11c>
 800a83e:	2300      	movs	r3, #0
 800a840:	f383 8811 	msr	BASEPRI, r3
}
 800a844:	4628      	mov	r0, r5
 800a846:	b005      	add	sp, #20
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	4806      	ldr	r0, [pc, #24]	; (800a868 <ibqReadTimeout+0x138>)
 800a84e:	f7f6 f947 	bl	8000ae0 <chSysHalt>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800a852:	4649      	mov	r1, r9
 800a854:	4620      	mov	r0, r4
 800a856:	f7f8 fdb3 	bl	80033c0 <ibqGetFullBufferTimeoutS>
 800a85a:	e7e3      	b.n	800a824 <ibqReadTimeout+0xf4>
  osalDbgCheck(n > 0U);
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <ibqReadTimeout+0x13c>)
 800a85e:	f7f6 f93f 	bl	8000ae0 <chSysHalt>
 800a862:	bf00      	nop
 800a864:	200011b0 	.word	0x200011b0
 800a868:	0800b3b4 	.word	0x0800b3b4
 800a86c:	0800b748 	.word	0x0800b748

0800a870 <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 800a870:	300c      	adds	r0, #12
 800a872:	f7ff bf5d 	b.w	800a730 <ibqReadTimeout>
 800a876:	bf00      	nop
	...

0800a880 <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 800a880:	300c      	adds	r0, #12
 800a882:	f04f 33ff 	mov.w	r3, #4294967295
 800a886:	f7ff bf53 	b.w	800a730 <ibqReadTimeout>
 800a88a:	bf00      	nop
 800a88c:	0000      	movs	r0, r0
	...

0800a890 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 800a890:	b530      	push	{r4, r5, lr}
 800a892:	2320      	movs	r3, #32
 800a894:	b083      	sub	sp, #12
 800a896:	4604      	mov	r4, r0
 800a898:	460d      	mov	r5, r1
 800a89a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a89e:	f7f8 fe87 	bl	80035b0 <_dbg_check_lock>
  if (ibqp->ptr == NULL) {
 800a8a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8a4:	b353      	cbz	r3, 800a8fc <ibqGetTimeout+0x6c>
  msg = (msg_t)*ibqp->ptr;
 800a8a6:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 800a8aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 800a8ac:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d220      	bcs.n	800a8f4 <ibqGetTimeout+0x64>
  _dbg_check_unlock();
 800a8b2:	f7f8 fe15 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a8b6:	4b15      	ldr	r3, [pc, #84]	; (800a90c <ibqGetTimeout+0x7c>)
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d004      	beq.n	800a8c8 <ibqGetTimeout+0x38>
 800a8be:	6999      	ldr	r1, [r3, #24]
 800a8c0:	6893      	ldr	r3, [r2, #8]
 800a8c2:	688a      	ldr	r2, [r1, #8]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d312      	bcc.n	800a8ee <ibqGetTimeout+0x5e>
  msg = (msg_t)*ibqp->ptr;
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f383 8811 	msr	BASEPRI, r3
}
 800a8d0:	b003      	add	sp, #12
 800a8d2:	bd30      	pop	{r4, r5, pc}
 800a8d4:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 800a8d6:	f7f8 fe03 	bl	80034e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <ibqGetTimeout+0x7c>)
 800a8dc:	9801      	ldr	r0, [sp, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d0f2      	beq.n	800a8ca <ibqGetTimeout+0x3a>
 800a8e4:	6999      	ldr	r1, [r3, #24]
 800a8e6:	6893      	ldr	r3, [r2, #8]
 800a8e8:	688a      	ldr	r2, [r1, #8]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d2ed      	bcs.n	800a8ca <ibqGetTimeout+0x3a>
 800a8ee:	4808      	ldr	r0, [pc, #32]	; (800a910 <ibqGetTimeout+0x80>)
 800a8f0:	f7f6 f8f6 	bl	8000ae0 <chSysHalt>
    ibqReleaseEmptyBufferS(ibqp);
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7f7 fa6b 	bl	8001dd0 <ibqReleaseEmptyBufferS>
 800a8fa:	e7da      	b.n	800a8b2 <ibqGetTimeout+0x22>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7f8 fd5e 	bl	80033c0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800a904:	2800      	cmp	r0, #0
 800a906:	d1e5      	bne.n	800a8d4 <ibqGetTimeout+0x44>
 800a908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a90a:	e7cc      	b.n	800a8a6 <ibqGetTimeout+0x16>
 800a90c:	200011b0 	.word	0x200011b0
 800a910:	0800b3b4 	.word	0x0800b3b4
	...

0800a920 <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 800a920:	300c      	adds	r0, #12
 800a922:	f7ff bfb5 	b.w	800a890 <ibqGetTimeout>
 800a926:	bf00      	nop
	...

0800a930 <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 800a930:	300c      	adds	r0, #12
 800a932:	f04f 31ff 	mov.w	r1, #4294967295
 800a936:	f7ff bfab 	b.w	800a890 <ibqGetTimeout>
 800a93a:	bf00      	nop
 800a93c:	0000      	movs	r0, r0
	...

0800a940 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 800a940:	4b56      	ldr	r3, [pc, #344]	; (800aa9c <__early_init+0x15c>)
  gpiop->OTYPER  = config->otyper;
 800a942:	4857      	ldr	r0, [pc, #348]	; (800aaa0 <__early_init+0x160>)
  rccResetAHB(STM32_GPIO_EN_MASK);
 800a944:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a946:	2200      	movs	r2, #0
 800a948:	f441 01fc 	orr.w	r1, r1, #8257536	; 0x7e0000
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800a94c:	b470      	push	{r4, r5, r6}
  rccResetAHB(STM32_GPIO_EN_MASK);
 800a94e:	6299      	str	r1, [r3, #40]	; 0x28
 800a950:	629a      	str	r2, [r3, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 800a952:	695d      	ldr	r5, [r3, #20]
  gpiop->OSPEEDR = config->ospeedr;
 800a954:	4e53      	ldr	r6, [pc, #332]	; (800aaa4 <__early_init+0x164>)
  gpiop->OTYPER  = config->otyper;
 800a956:	4954      	ldr	r1, [pc, #336]	; (800aaa8 <__early_init+0x168>)
 800a958:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 800a95c:	f445 05fc 	orr.w	r5, r5, #8257536	; 0x7e0000
 800a960:	615d      	str	r5, [r3, #20]
  gpiop->OTYPER  = config->otyper;
 800a962:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800a964:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800a966:	4e51      	ldr	r6, [pc, #324]	; (800aaac <__early_init+0x16c>)
 800a968:	60e6      	str	r6, [r4, #12]
  gpiop->ODR     = config->odr;
 800a96a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 800a96e:	4e50      	ldr	r6, [pc, #320]	; (800aab0 <__early_init+0x170>)
  gpiop->ODR     = config->odr;
 800a970:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800a972:	6226      	str	r6, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800a974:	f44f 266e 	mov.w	r6, #974848	; 0xee000
 800a978:	6266      	str	r6, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800a97a:	4e4e      	ldr	r6, [pc, #312]	; (800aab4 <__early_init+0x174>)
 800a97c:	6026      	str	r6, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800a97e:	24c0      	movs	r4, #192	; 0xc0
 800a980:	6044      	str	r4, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800a982:	f24f 04c0 	movw	r4, #61632	; 0xf0c0
 800a986:	6084      	str	r4, [r0, #8]
  gpiop->AFRL    = config->afrl;
 800a988:	f04f 4688 	mov.w	r6, #1140850688	; 0x44000000
  gpiop->PUPDR   = config->pupdr;
 800a98c:	4c4a      	ldr	r4, [pc, #296]	; (800aab8 <__early_init+0x178>)
 800a98e:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 800a990:	6145      	str	r5, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800a992:	6206      	str	r6, [r0, #32]
  gpiop->MODER   = config->moder;
 800a994:	f24a 0680 	movw	r6, #41088	; 0xa080
  gpiop->AFRH    = config->afrh;
 800a998:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800a99a:	6006      	str	r6, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800a99c:	f04f 4670 	mov.w	r6, #4026531840	; 0xf0000000
  gpiop->OTYPER  = config->otyper;
 800a9a0:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800a9a2:	608e      	str	r6, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800a9a4:	4e45      	ldr	r6, [pc, #276]	; (800aabc <__early_init+0x17c>)
 800a9a6:	60ce      	str	r6, [r1, #12]
  gpiop->AFRL    = config->afrl;
 800a9a8:	f44f 06ee 	mov.w	r6, #7798784	; 0x770000
  gpiop->ODR     = config->odr;
 800a9ac:	614d      	str	r5, [r1, #20]
  gpiop->OTYPER  = config->otyper;
 800a9ae:	4c44      	ldr	r4, [pc, #272]	; (800aac0 <__early_init+0x180>)
  gpiop->AFRL    = config->afrl;
 800a9b0:	620e      	str	r6, [r1, #32]
  gpiop->MODER   = config->moder;
 800a9b2:	f44f 6620 	mov.w	r6, #2560	; 0xa00
  gpiop->AFRH    = config->afrh;
 800a9b6:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800a9b8:	600e      	str	r6, [r1, #0]
  gpiop->PUPDR   = config->pupdr;
 800a9ba:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 800a9be:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800a9c0:	60a2      	str	r2, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800a9c2:	60e6      	str	r6, [r4, #12]
  gpiop->ODR     = config->odr;
 800a9c4:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800a9c6:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800a9c8:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800a9ca:	6022      	str	r2, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
 800a9cc:	4c3d      	ldr	r4, [pc, #244]	; (800aac4 <__early_init+0x184>)
  gpiop->OTYPER  = config->otyper;
 800a9ce:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 800a9d2:	f8c0 4c08 	str.w	r4, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 800a9d6:	4c3c      	ldr	r4, [pc, #240]	; (800aac8 <__early_init+0x188>)
 800a9d8:	f8c0 4c0c 	str.w	r4, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 800a9dc:	24ff      	movs	r4, #255	; 0xff
 800a9de:	f8c0 4c14 	str.w	r4, [r0, #3092]	; 0xc14
  gpiop->MODER   = config->moder;
 800a9e2:	4c3a      	ldr	r4, [pc, #232]	; (800aacc <__early_init+0x18c>)
  gpiop->AFRL    = config->afrl;
 800a9e4:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 800a9e8:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 800a9ec:	f8c0 4c00 	str.w	r4, [r0, #3072]	; 0xc00
  gpiop->OSPEEDR = config->ospeedr;
 800a9f0:	240f      	movs	r4, #15
  gpiop->PUPDR   = config->pupdr;
 800a9f2:	4837      	ldr	r0, [pc, #220]	; (800aad0 <__early_init+0x190>)
  gpiop->OTYPER  = config->otyper;
 800a9f4:	f8c1 2c04 	str.w	r2, [r1, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 800a9f8:	f8c1 4c08 	str.w	r4, [r1, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 800a9fc:	f8c1 0c0c 	str.w	r0, [r1, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 800aa00:	f8c1 5c14 	str.w	r5, [r1, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 800aa04:	f8c1 2c20 	str.w	r2, [r1, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 800aa08:	f8c1 2c24 	str.w	r2, [r1, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 800aa0c:	f8c1 2c00 	str.w	r2, [r1, #3072]	; 0xc00
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	0794      	lsls	r4, r2, #30
 800aa1c:	d5fc      	bpl.n	800aa18 <__early_init+0xd8>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800aa1e:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800aa20:	4a1e      	ldr	r2, [pc, #120]	; (800aa9c <__early_init+0x15c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800aa22:	f021 0103 	bic.w	r1, r1, #3
 800aa26:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800aa28:	6853      	ldr	r3, [r2, #4]
 800aa2a:	f013 030c 	ands.w	r3, r3, #12
 800aa2e:	d1fb      	bne.n	800aa28 <__early_init+0xe8>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800aa30:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 800aa32:	491a      	ldr	r1, [pc, #104]	; (800aa9c <__early_init+0x15c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800aa34:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800aa38:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800aa3a:	6053      	str	r3, [r2, #4]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800aa3c:	6813      	ldr	r3, [r2, #0]
 800aa3e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800aa42:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800aa44:	680b      	ldr	r3, [r1, #0]
 800aa46:	0398      	lsls	r0, r3, #14
 800aa48:	d5fc      	bpl.n	800aa44 <__early_init+0x104>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800aa4a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800aa4c:	4a13      	ldr	r2, [pc, #76]	; (800aa9c <__early_init+0x15c>)
  RCC->CSR |= RCC_CSR_LSION;
 800aa4e:	f043 0301 	orr.w	r3, r3, #1
 800aa52:	624b      	str	r3, [r1, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800aa54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800aa56:	0799      	lsls	r1, r3, #30
 800aa58:	d5fc      	bpl.n	800aa54 <__early_init+0x114>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 800aa5a:	4b1e      	ldr	r3, [pc, #120]	; (800aad4 <__early_init+0x194>)
 800aa5c:	6053      	str	r3, [r2, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 800aa5e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 800aa62:	2330      	movs	r3, #48	; 0x30
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 800aa64:	62d1      	str	r1, [r2, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 800aa66:	6313      	str	r3, [r2, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 800aa68:	6813      	ldr	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800aa6a:	490c      	ldr	r1, [pc, #48]	; (800aa9c <__early_init+0x15c>)
  RCC->CR   |= RCC_CR_PLLON;
 800aa6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa70:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800aa72:	680b      	ldr	r3, [r1, #0]
 800aa74:	019b      	lsls	r3, r3, #6
 800aa76:	d5fc      	bpl.n	800aa72 <__early_init+0x132>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800aa78:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <__early_init+0x198>)

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800aa7a:	4a08      	ldr	r2, [pc, #32]	; (800aa9c <__early_init+0x15c>)
  FLASH->ACR = STM32_FLASHBITS;
 800aa7c:	2012      	movs	r0, #18
 800aa7e:	6018      	str	r0, [r3, #0]
  RCC->CFGR |= STM32_SW;
 800aa80:	684b      	ldr	r3, [r1, #4]
 800aa82:	f043 0302 	orr.w	r3, r3, #2
 800aa86:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800aa88:	6853      	ldr	r3, [r2, #4]
 800aa8a:	f003 030c 	and.w	r3, r3, #12
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d1fa      	bne.n	800aa88 <__early_init+0x148>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_HRTIM1SW | STM32_TIM8SW | STM32_TIM1SW;
 800aa92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aa94:	6313      	str	r3, [r2, #48]	; 0x30

  stm32_gpio_init();
  stm32_clock_init();
}
 800aa96:	bc70      	pop	{r4, r5, r6}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	48000400 	.word	0x48000400
 800aaa4:	3cc0fc00 	.word	0x3cc0fc00
 800aaa8:	48000800 	.word	0x48000800
 800aaac:	64151154 	.word	0x64151154
 800aab0:	55500000 	.word	0x55500000
 800aab4:	2a80a800 	.word	0x2a80a800
 800aab8:	55550515 	.word	0x55550515
 800aabc:	05555555 	.word	0x05555555
 800aac0:	48000c00 	.word	0x48000c00
 800aac4:	ffff00c0 	.word	0xffff00c0
 800aac8:	01155515 	.word	0x01155515
 800aacc:	55550040 	.word	0x55550040
 800aad0:	55555550 	.word	0x55555550
 800aad4:	001d2400 	.word	0x001d2400
 800aad8:	40022000 	.word	0x40022000
 800aadc:	00000000 	.word	0x00000000

0800aae0 <Vector16C>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_PROLOGUE();
 800aae4:	48ba      	ldr	r0, [pc, #744]	; (800add0 <Vector16C+0x2f0>)
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 800aae6:	b085      	sub	sp, #20
  OSAL_IRQ_PROLOGUE();
 800aae8:	f7f5 ffe2 	bl	8000ab0 <_trace_isr_enter>
 800aaec:	f7f6 faa0 	bl	8001030 <_dbg_check_enter_isr>
  istr = STM32_USB->ISTR;
 800aaf0:	4bb8      	ldr	r3, [pc, #736]	; (800add4 <Vector16C+0x2f4>)
 800aaf2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (istr & ISTR_RESET) {
 800aaf4:	0567      	lsls	r7, r4, #21
 800aaf6:	f100 80ac 	bmi.w	800ac52 <Vector16C+0x172>
  if (istr & ISTR_SUSP) {
 800aafa:	0526      	lsls	r6, r4, #20
 800aafc:	f100 80cf 	bmi.w	800ac9e <Vector16C+0x1be>
  if (istr & ISTR_WKUP) {
 800ab00:	04e5      	lsls	r5, r4, #19
 800ab02:	d508      	bpl.n	800ab16 <Vector16C+0x36>
    uint32_t fnr = STM32_USB->FNR;
 800ab04:	4bb3      	ldr	r3, [pc, #716]	; (800add4 <Vector16C+0x2f4>)
 800ab06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 800ab08:	0410      	lsls	r0, r2, #16
 800ab0a:	f140 814d 	bpl.w	800ada8 <Vector16C+0x2c8>
    STM32_USB->ISTR = ~ISTR_WKUP;
 800ab0e:	4bb1      	ldr	r3, [pc, #708]	; (800add4 <Vector16C+0x2f4>)
 800ab10:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 800ab14:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 800ab16:	05a1      	lsls	r1, r4, #22
 800ab18:	d50b      	bpl.n	800ab32 <Vector16C+0x52>
    _usb_isr_invoke_sof_cb(usbp);
 800ab1a:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800add8 <Vector16C+0x2f8>
 800ab1e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	b10b      	cbz	r3, 800ab2a <Vector16C+0x4a>
 800ab26:	4658      	mov	r0, fp
 800ab28:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 800ab2a:	4baa      	ldr	r3, [pc, #680]	; (800add4 <Vector16C+0x2f4>)
 800ab2c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800ab30:	645a      	str	r2, [r3, #68]	; 0x44
  while (istr & ISTR_CTR) {
 800ab32:	0423      	lsls	r3, r4, #16
 800ab34:	d573      	bpl.n	800ac1e <Vector16C+0x13e>
 800ab36:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 800add8 <Vector16C+0x2f8>
    EPR_CLEAR_CTR_TX(ep);
 800ab3a:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 800addc <Vector16C+0x2fc>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800ab3e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800add4 <Vector16C+0x2f4>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 800ab42:	f004 040f 	and.w	r4, r4, #15
 800ab46:	00a5      	lsls	r5, r4, #2
 800ab48:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800ab4c:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800ab50:	1ca6      	adds	r6, r4, #2
  uint32_t epr = STM32_USB->EPR[ep];
 800ab52:	682f      	ldr	r7, [r5, #0]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800ab54:	eb0b 0386 	add.w	r3, fp, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 800ab58:	063a      	lsls	r2, r7, #24
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800ab5a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (epr & EPR_CTR_TX) {
 800ab5e:	d549      	bpl.n	800abf4 <Vector16C+0x114>
    USBInEndpointState *isp = epcp->in_state;
 800ab60:	f8d8 0014 	ldr.w	r0, [r8, #20]
    EPR_CLEAR_CTR_TX(ep);
 800ab64:	682a      	ldr	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 800ab66:	68c3      	ldr	r3, [r0, #12]
    n = isp->txsize - isp->txcnt;
 800ab68:	e9d0 c100 	ldrd	ip, r1, [r0]
    EPR_CLEAR_CTR_TX(ep);
 800ab6c:	ea02 020a 	and.w	r2, r2, sl
    isp->txcnt += isp->txlast;
 800ab70:	4419      	add	r1, r3
    EPR_CLEAR_CTR_TX(ep);
 800ab72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    if (n > 0) {
 800ab76:	ebbc 0c01 	subs.w	ip, ip, r1
    EPR_CLEAR_CTR_TX(ep);
 800ab7a:	602a      	str	r2, [r5, #0]
    isp->txcnt += isp->txlast;
 800ab7c:	6041      	str	r1, [r0, #4]
    if (n > 0) {
 800ab7e:	d058      	beq.n	800ac32 <Vector16C+0x152>
      if (n > epcp->in_maxsize)
 800ab80:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 800ab84:	4562      	cmp	r2, ip
 800ab86:	bf28      	it	cs
 800ab88:	4662      	movcs	r2, ip
      isp->txlast = n;
 800ab8a:	60c2      	str	r2, [r0, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800ab8c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800ab90:	f101 4c80 	add.w	ip, r1, #1073741824	; 0x40000000
 800ab94:	f50c 4cc0 	add.w	ip, ip, #24576	; 0x6000
 800ab98:	ea4f 1e04 	mov.w	lr, r4, lsl #4
 800ab9c:	eb0e 010c 	add.w	r1, lr, ip
 800aba0:	9100      	str	r1, [sp, #0]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800aba2:	f85e c00c 	ldr.w	ip, [lr, ip]
      isp->txbuf += isp->txlast;
 800aba6:	6881      	ldr	r1, [r0, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800aba8:	f10c 5c00 	add.w	ip, ip, #536870912	; 0x20000000
      isp->txbuf += isp->txlast;
 800abac:	440b      	add	r3, r1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800abae:	9900      	ldr	r1, [sp, #0]
      isp->txbuf += isp->txlast;
 800abb0:	6083      	str	r3, [r0, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800abb2:	f50c 5c40 	add.w	ip, ip, #12288	; 0x3000
 800abb6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800abba:	604a      	str	r2, [r1, #4]
  while (i > 0) {
 800abbc:	b172      	cbz	r2, 800abdc <Vector16C+0xfc>
 800abbe:	3a01      	subs	r2, #1
 800abc0:	0852      	lsrs	r2, r2, #1
 800abc2:	f10c 0004 	add.w	r0, ip, #4
 800abc6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800abca:	e000      	b.n	800abce <Vector16C+0xee>
 800abcc:	3004      	adds	r0, #4
    w |= *buf++ << 8;
 800abce:	f833 1b02 	ldrh.w	r1, [r3], #2
    *pmap++ = (stm32_usb_pma_t)w;
 800abd2:	f8cc 1000 	str.w	r1, [ip]
  while (i > 0) {
 800abd6:	4290      	cmp	r0, r2
 800abd8:	4684      	mov	ip, r0
 800abda:	d1f7      	bne.n	800abcc <Vector16C+0xec>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800abe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800abea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf2:	602b      	str	r3, [r5, #0]
  if (epr & EPR_CTR_RX) {
 800abf4:	043b      	lsls	r3, r7, #16
 800abf6:	d50e      	bpl.n	800ac16 <Vector16C+0x136>
    EPR_CLEAR_CTR_RX(ep);
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	ea03 030a 	and.w	r3, r3, sl
 800abfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    if (epr & EPR_SETUP) {
 800ac02:	0538      	lsls	r0, r7, #20
    EPR_CLEAR_CTR_RX(ep);
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	b2e1      	uxtb	r1, r4
    if (epr & EPR_SETUP) {
 800ac08:	d564      	bpl.n	800acd4 <Vector16C+0x1f4>
      _usb_isr_invoke_setup_cb(usbp, ep);
 800ac0a:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 800ac0e:	4872      	ldr	r0, [pc, #456]	; (800add8 <Vector16C+0x2f8>)
 800ac10:	6873      	ldr	r3, [r6, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 800ac16:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
  while (istr & ISTR_CTR) {
 800ac1a:	0422      	lsls	r2, r4, #16
 800ac1c:	d491      	bmi.n	800ab42 <Vector16C+0x62>
  OSAL_IRQ_EPILOGUE();
 800ac1e:	f7f6 f9ef 	bl	8001000 <_dbg_check_leave_isr>
 800ac22:	486b      	ldr	r0, [pc, #428]	; (800add0 <Vector16C+0x2f0>)
 800ac24:	f7f5 ff2c 	bl	8000a80 <_trace_isr_leave>
}
 800ac28:	b005      	add	sp, #20
 800ac2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800ac2e:	f7f5 be8f 	b.w	8000950 <_port_irq_epilogue>
      _usb_isr_invoke_in_cb(usbp, ep);
 800ac32:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800ac36:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	40a1      	lsls	r1, r4
 800ac3e:	ea23 0301 	bic.w	r3, r3, r1
 800ac42:	f8ab 3008 	strh.w	r3, [fp, #8]
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	d0d4      	beq.n	800abf4 <Vector16C+0x114>
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4862      	ldr	r0, [pc, #392]	; (800add8 <Vector16C+0x2f8>)
 800ac4e:	4790      	blx	r2
 800ac50:	e7d0      	b.n	800abf4 <Vector16C+0x114>
  usbp->state         = USB_READY;
 800ac52:	f8df b184 	ldr.w	fp, [pc, #388]	; 800add8 <Vector16C+0x2f8>
    STM32_USB->ISTR = ~ISTR_RESET;
 800ac56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac5a:	645a      	str	r2, [r3, #68]	; 0x44
  usbp->status        = 0;
 800ac5c:	2500      	movs	r5, #0
  usbp->state         = USB_READY;
 800ac5e:	2302      	movs	r3, #2
  usb_lld_reset(usbp);
 800ac60:	4658      	mov	r0, fp
  usbp->state         = USB_READY;
 800ac62:	f88b 3000 	strb.w	r3, [fp]
  usbp->status        = 0;
 800ac66:	f8cb 507c 	str.w	r5, [fp, #124]	; 0x7c
  usbp->receiving     = 0;
 800ac6a:	e9cb 5502 	strd	r5, r5, [fp, #8]
    usbp->epc[i] = NULL;
 800ac6e:	e9cb 5504 	strd	r5, r5, [fp, #16]
 800ac72:	e9cb 5506 	strd	r5, r5, [fp, #24]
 800ac76:	e9cb 5508 	strd	r5, r5, [fp, #32]
 800ac7a:	f8cb 5028 	str.w	r5, [fp, #40]	; 0x28
  usbp->ep0state = USB_EP0_STP_WAITING;
 800ac7e:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64
  usb_lld_reset(usbp);
 800ac82:	f7f6 fb2d 	bl	80012e0 <usb_lld_reset>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800ac86:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f43f af34 	beq.w	800aafa <Vector16C+0x1a>
 800ac92:	4629      	mov	r1, r5
 800ac94:	4658      	mov	r0, fp
 800ac96:	4798      	blx	r3
  if (istr & ISTR_SUSP) {
 800ac98:	0526      	lsls	r6, r4, #20
 800ac9a:	f57f af31 	bpl.w	800ab00 <Vector16C+0x20>
    STM32_USB->CNTR |= CNTR_FSUSP;
 800ac9e:	4b4d      	ldr	r3, [pc, #308]	; (800add4 <Vector16C+0x2f4>)
  usbp->saved_state = usbp->state;
 800aca0:	f8df b134 	ldr.w	fp, [pc, #308]	; 800add8 <Vector16C+0x2f8>
 800aca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800aca6:	f8db 1004 	ldr.w	r1, [fp, #4]
 800acaa:	f042 0208 	orr.w	r2, r2, #8
    STM32_USB->ISTR = ~ISTR_SUSP;
 800acae:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    STM32_USB->CNTR |= CNTR_FSUSP;
 800acb2:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 800acb4:	6458      	str	r0, [r3, #68]	; 0x44
  usbp->saved_state = usbp->state;
 800acb6:	f89b 3000 	ldrb.w	r3, [fp]
 800acba:	f88b 3080 	strb.w	r3, [fp, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 800acbe:	2305      	movs	r3, #5
 800acc0:	f88b 3000 	strb.w	r3, [fp]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800acc4:	680b      	ldr	r3, [r1, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f43f af1a 	beq.w	800ab00 <Vector16C+0x20>
 800accc:	4658      	mov	r0, fp
 800acce:	2104      	movs	r1, #4
 800acd0:	4798      	blx	r3
 800acd2:	e715      	b.n	800ab00 <Vector16C+0x20>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800acd4:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 800acd8:	f8d8 7018 	ldr.w	r7, [r8, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800acdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ace0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800ace4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	9200      	str	r2, [sp, #0]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800acec:	689a      	ldr	r2, [r3, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800acee:	68d8      	ldr	r0, [r3, #12]
 800acf0:	9002      	str	r0, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800acf2:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 800acf6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800acfa:	f3c0 0e09 	ubfx	lr, r0, #0, #10
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800acfe:	005a      	lsls	r2, r3, #1
  while (i >= 2) {
 800ad00:	f1be 0f01 	cmp.w	lr, #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800ad04:	9201      	str	r2, [sp, #4]
  while (i >= 2) {
 800ad06:	d97b      	bls.n	800ae00 <Vector16C+0x320>
 800ad08:	f1ae 0302 	sub.w	r3, lr, #2
 800ad0c:	0858      	lsrs	r0, r3, #1
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	9003      	str	r0, [sp, #12]
 800ad12:	f102 0c04 	add.w	ip, r2, #4
 800ad16:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 800ad1a:	1c98      	adds	r0, r3, #2
    uint32_t w = *pmap++;
 800ad1c:	6813      	ldr	r3, [r2, #0]
    *buf++ = (uint8_t)w;
 800ad1e:	f800 3c02 	strb.w	r3, [r0, #-2]
 800ad22:	3204      	adds	r2, #4
    *buf++ = (uint8_t)(w >> 8);
 800ad24:	0a1b      	lsrs	r3, r3, #8
  while (i >= 2) {
 800ad26:	4594      	cmp	ip, r2
    *buf++ = (uint8_t)(w >> 8);
 800ad28:	f800 3c01 	strb.w	r3, [r0, #-1]
 800ad2c:	f100 0002 	add.w	r0, r0, #2
  while (i >= 2) {
 800ad30:	d1f4      	bne.n	800ad1c <Vector16C+0x23c>
 800ad32:	9b03      	ldr	r3, [sp, #12]
 800ad34:	9a01      	ldr	r2, [sp, #4]
 800ad36:	3301      	adds	r3, #1
 800ad38:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ad3c:	9201      	str	r2, [sp, #4]
 800ad3e:	9a00      	ldr	r2, [sp, #0]
 800ad40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 800ad4c:	b11b      	cbz	r3, 800ad56 <Vector16C+0x276>
    *buf = (uint8_t)*pmap;
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	9a00      	ldr	r2, [sp, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	7013      	strb	r3, [r2, #0]
      osp->rxcnt  += n;
 800ad56:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
      osp->rxpkts -= 1;
 800ad5a:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800ad5e:	f8b8 8012 	ldrh.w	r8, [r8, #18]
      osp->rxsize -= n;
 800ad62:	683b      	ldr	r3, [r7, #0]
      osp->rxpkts -= 1;
 800ad64:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ad68:	fa1f fc8c 	uxth.w	ip, ip
      osp->rxbuf += n;
 800ad6c:	4472      	add	r2, lr
      osp->rxcnt  += n;
 800ad6e:	4470      	add	r0, lr
      osp->rxsize -= n;
 800ad70:	eba3 030e 	sub.w	r3, r3, lr
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800ad74:	45f0      	cmp	r8, lr
      osp->rxpkts -= 1;
 800ad76:	f8a7 c00c 	strh.w	ip, [r7, #12]
      osp->rxcnt  += n;
 800ad7a:	e9c7 0201 	strd	r0, r2, [r7, #4]
      osp->rxsize -= n;
 800ad7e:	603b      	str	r3, [r7, #0]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800ad80:	d92e      	bls.n	800ade0 <Vector16C+0x300>
        _usb_isr_invoke_out_cb(usbp, ep);
 800ad82:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 800ad86:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800ad8a:	6870      	ldr	r0, [r6, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	fa02 f404 	lsl.w	r4, r2, r4
 800ad92:	68c5      	ldr	r5, [r0, #12]
 800ad94:	ea23 0404 	bic.w	r4, r3, r4
 800ad98:	f8ab 400a 	strh.w	r4, [fp, #10]
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	f43f af3a 	beq.w	800ac16 <Vector16C+0x136>
 800ada2:	480d      	ldr	r0, [pc, #52]	; (800add8 <Vector16C+0x2f8>)
 800ada4:	47a8      	blx	r5
 800ada6:	e736      	b.n	800ac16 <Vector16C+0x136>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800ada8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 800adaa:	f8df b02c 	ldr.w	fp, [pc, #44]	; 800add8 <Vector16C+0x2f8>
 800adae:	f022 0208 	bic.w	r2, r2, #8
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40
 800adb4:	f89b 2080 	ldrb.w	r2, [fp, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800adb8:	f8db 3004 	ldr.w	r3, [fp, #4]
  usbp->state = usbp->saved_state;
 800adbc:	f88b 2000 	strb.w	r2, [fp]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f43f aea3 	beq.w	800ab0e <Vector16C+0x2e>
 800adc8:	4658      	mov	r0, fp
 800adca:	2105      	movs	r1, #5
 800adcc:	4798      	blx	r3
 800adce:	e69e      	b.n	800ab0e <Vector16C+0x2e>
 800add0:	0800b73c 	.word	0x0800b73c
 800add4:	40005c00 	.word	0x40005c00
 800add8:	20001128 	.word	0x20001128
 800addc:	ffff070f 	.word	0xffff070f
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800ade0:	f1bc 0f00 	cmp.w	ip, #0
 800ade4:	d0cd      	beq.n	800ad82 <Vector16C+0x2a2>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800adec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800adf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	e70a      	b.n	800ac16 <Vector16C+0x136>
  while (i >= 2) {
 800ae00:	4673      	mov	r3, lr
  if (i >= 1) {
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1a3      	bne.n	800ad4e <Vector16C+0x26e>
 800ae06:	e7a6      	b.n	800ad56 <Vector16C+0x276>
	...

0800ae10 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800ae10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800ae14:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 800ae18:	4834      	ldr	r0, [pc, #208]	; (800aeec <VectorB0+0xdc>)
 800ae1a:	f7f5 fe49 	bl	8000ab0 <_trace_isr_enter>
 800ae1e:	f7f6 f907 	bl	8001030 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800ae22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae26:	079b      	lsls	r3, r3, #30
 800ae28:	d408      	bmi.n	800ae3c <VectorB0+0x2c>
  OSAL_IRQ_EPILOGUE();
 800ae2a:	f7f6 f8e9 	bl	8001000 <_dbg_check_leave_isr>
 800ae2e:	482f      	ldr	r0, [pc, #188]	; (800aeec <VectorB0+0xdc>)
 800ae30:	f7f5 fe26 	bl	8000a80 <_trace_isr_leave>
}
 800ae34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 800ae38:	f7f5 bd8a 	b.w	8000950 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	f8c8 6010 	str.w	r6, [r8, #16]
 800ae42:	2320      	movs	r3, #32
 800ae44:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800ae48:	4d29      	ldr	r5, [pc, #164]	; (800aef0 <VectorB0+0xe0>)
 800ae4a:	46aa      	mov	sl, r5
  _dbg_check_lock_from_isr();
 800ae4c:	f7f6 f920 	bl	8001090 <_dbg_check_lock_from_isr>
  chDbgCheckClassI();
 800ae50:	f7f5 fe86 	bl	8000b60 <chDbgCheckClassI>
  chDbgCheckClassI();
 800ae54:	f7f5 fe84 	bl	8000b60 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 800ae58:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 800ae5c:	68a3      	ldr	r3, [r4, #8]
 800ae5e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800ae62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ae64:	eba1 0902 	sub.w	r9, r1, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800ae68:	4599      	cmp	r9, r3
 800ae6a:	d31f      	bcc.n	800aeac <VectorB0+0x9c>
 800ae6c:	2720      	movs	r7, #32

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800ae6e:	6821      	ldr	r1, [r4, #0]
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
 800ae70:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 800ae74:	441a      	add	r2, r3
      vtp->func = NULL;

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800ae76:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 800ae78:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800ae7a:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 800ae7e:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 800ae80:	60e6      	str	r6, [r4, #12]
  STM32_ST_TIM->DIER = 0;
 800ae82:	bf08      	it	eq
 800ae84:	f8c8 600c 	streq.w	r6, [r8, #12]
      nowdelta -= vtp->delta;
 800ae88:	eba9 0903 	sub.w	r9, r9, r3
  _dbg_check_unlock_from_isr();
 800ae8c:	f7f6 f8e8 	bl	8001060 <_dbg_check_unlock_from_isr>
 800ae90:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800ae94:	6920      	ldr	r0, [r4, #16]
 800ae96:	47d8      	blx	fp
 800ae98:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock_from_isr();
 800ae9c:	f7f6 f8f8 	bl	8001090 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800aea0:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 800aea2:	68a3      	ldr	r3, [r4, #8]
 800aea4:	4599      	cmp	r9, r3
 800aea6:	d3da      	bcc.n	800ae5e <VectorB0+0x4e>
 800aea8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aeaa:	e7e0      	b.n	800ae6e <VectorB0+0x5e>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800aeac:	69eb      	ldr	r3, [r5, #28]
 800aeae:	4553      	cmp	r3, sl
 800aeb0:	d013      	beq.n	800aeda <VectorB0+0xca>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800aeb2:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 800aeb4:	62a9      	str	r1, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800aeb6:	eba2 0209 	sub.w	r2, r2, r9
 800aeba:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 800aebc:	68a4      	ldr	r4, [r4, #8]
 800aebe:	2c02      	cmp	r4, #2
 800aec0:	bf2c      	ite	cs
 800aec2:	190c      	addcs	r4, r1, r4
 800aec4:	1c8c      	addcc	r4, r1, #2
 800aec6:	4620      	mov	r0, r4
 800aec8:	f7f6 ffa2 	bl	8001e10 <stSetAlarm>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 800aecc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (systime_t)STM32_ST_TIM->CNT;
 800aece:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800aed2:	1aa1      	subs	r1, r4, r2
 800aed4:	1a9b      	subs	r3, r3, r2
 800aed6:	428b      	cmp	r3, r1
 800aed8:	d805      	bhi.n	800aee6 <VectorB0+0xd6>
  _dbg_check_unlock_from_isr();
 800aeda:	f7f6 f8c1 	bl	8001060 <_dbg_check_unlock_from_isr>
 800aede:	2300      	movs	r3, #0
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	e7a1      	b.n	800ae2a <VectorB0+0x1a>
 800aee6:	4803      	ldr	r0, [pc, #12]	; (800aef4 <VectorB0+0xe4>)
 800aee8:	f7f5 fdfa 	bl	8000ae0 <chSysHalt>
 800aeec:	0800b69c 	.word	0x0800b69c
 800aef0:	200011b0 	.word	0x200011b0
 800aef4:	0800b394 	.word	0x0800b394
	...

0800af00 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800af00:	b4f0      	push	{r4, r5, r6, r7}
 800af02:	4e14      	ldr	r6, [pc, #80]	; (800af54 <__init_ram_areas+0x54>)
 800af04:	4d14      	ldr	r5, [pc, #80]	; (800af58 <__init_ram_areas+0x58>)
 800af06:	4c15      	ldr	r4, [pc, #84]	; (800af5c <__init_ram_areas+0x5c>)
 800af08:	4b15      	ldr	r3, [pc, #84]	; (800af60 <__init_ram_areas+0x60>)
 800af0a:	4916      	ldr	r1, [pc, #88]	; (800af64 <__init_ram_areas+0x64>)
 800af0c:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800af10:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 800af12:	429c      	cmp	r4, r3
 800af14:	d911      	bls.n	800af3a <__init_ram_areas+0x3a>
 800af16:	3904      	subs	r1, #4
 800af18:	461a      	mov	r2, r3
      *p = *tp;
 800af1a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800af1e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 800af22:	4294      	cmp	r4, r2
 800af24:	d8f9      	bhi.n	800af1a <__init_ram_areas+0x1a>
 800af26:	43da      	mvns	r2, r3
 800af28:	4414      	add	r4, r2
 800af2a:	f024 0403 	bic.w	r4, r4, #3
 800af2e:	3404      	adds	r4, #4
 800af30:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 800af32:	429d      	cmp	r5, r3
 800af34:	d903      	bls.n	800af3e <__init_ram_areas+0x3e>
      *p = 0;
 800af36:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800af3a:	429d      	cmp	r5, r3
 800af3c:	d8fb      	bhi.n	800af36 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800af3e:	4566      	cmp	r6, ip
 800af40:	d005      	beq.n	800af4e <__init_ram_areas+0x4e>
 800af42:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 800af46:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800af4a:	3610      	adds	r6, #16
 800af4c:	e7e1      	b.n	800af12 <__init_ram_areas+0x12>
#endif
}
 800af4e:	bcf0      	pop	{r4, r5, r6, r7}
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	0800bf9c 	.word	0x0800bf9c
 800af58:	200024f8 	.word	0x200024f8
 800af5c:	200024f8 	.word	0x200024f8
 800af60:	200024f8 	.word	0x200024f8
 800af64:	0800e464 	.word	0x0800e464
	...

0800af70 <__default_exit>:
void __default_exit(void) {
 800af70:	e7fe      	b.n	800af70 <__default_exit>
 800af72:	bf00      	nop
	...

0800af80 <__late_init>:
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
	...

0800af90 <__core_init>:
}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop

0800af94 <memset>:
 800af94:	b4f0      	push	{r4, r5, r6, r7}
 800af96:	0786      	lsls	r6, r0, #30
 800af98:	d043      	beq.n	800b022 <memset+0x8e>
 800af9a:	1e54      	subs	r4, r2, #1
 800af9c:	2a00      	cmp	r2, #0
 800af9e:	d03e      	beq.n	800b01e <memset+0x8a>
 800afa0:	b2ca      	uxtb	r2, r1
 800afa2:	4603      	mov	r3, r0
 800afa4:	e002      	b.n	800afac <memset+0x18>
 800afa6:	f114 34ff 	adds.w	r4, r4, #4294967295
 800afaa:	d338      	bcc.n	800b01e <memset+0x8a>
 800afac:	f803 2b01 	strb.w	r2, [r3], #1
 800afb0:	079d      	lsls	r5, r3, #30
 800afb2:	d1f8      	bne.n	800afa6 <memset+0x12>
 800afb4:	2c03      	cmp	r4, #3
 800afb6:	d92b      	bls.n	800b010 <memset+0x7c>
 800afb8:	b2cd      	uxtb	r5, r1
 800afba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800afbe:	2c0f      	cmp	r4, #15
 800afc0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800afc4:	d916      	bls.n	800aff4 <memset+0x60>
 800afc6:	f1a4 0710 	sub.w	r7, r4, #16
 800afca:	093f      	lsrs	r7, r7, #4
 800afcc:	f103 0620 	add.w	r6, r3, #32
 800afd0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800afd4:	f103 0210 	add.w	r2, r3, #16
 800afd8:	e942 5504 	strd	r5, r5, [r2, #-16]
 800afdc:	e942 5502 	strd	r5, r5, [r2, #-8]
 800afe0:	3210      	adds	r2, #16
 800afe2:	42b2      	cmp	r2, r6
 800afe4:	d1f8      	bne.n	800afd8 <memset+0x44>
 800afe6:	f004 040f 	and.w	r4, r4, #15
 800afea:	3701      	adds	r7, #1
 800afec:	2c03      	cmp	r4, #3
 800afee:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800aff2:	d90d      	bls.n	800b010 <memset+0x7c>
 800aff4:	461e      	mov	r6, r3
 800aff6:	4622      	mov	r2, r4
 800aff8:	3a04      	subs	r2, #4
 800affa:	2a03      	cmp	r2, #3
 800affc:	f846 5b04 	str.w	r5, [r6], #4
 800b000:	d8fa      	bhi.n	800aff8 <memset+0x64>
 800b002:	1f22      	subs	r2, r4, #4
 800b004:	f022 0203 	bic.w	r2, r2, #3
 800b008:	3204      	adds	r2, #4
 800b00a:	4413      	add	r3, r2
 800b00c:	f004 0403 	and.w	r4, r4, #3
 800b010:	b12c      	cbz	r4, 800b01e <memset+0x8a>
 800b012:	b2c9      	uxtb	r1, r1
 800b014:	441c      	add	r4, r3
 800b016:	f803 1b01 	strb.w	r1, [r3], #1
 800b01a:	429c      	cmp	r4, r3
 800b01c:	d1fb      	bne.n	800b016 <memset+0x82>
 800b01e:	bcf0      	pop	{r4, r5, r6, r7}
 800b020:	4770      	bx	lr
 800b022:	4614      	mov	r4, r2
 800b024:	4603      	mov	r3, r0
 800b026:	e7c5      	b.n	800afb4 <memset+0x20>

0800b028 <strchr>:
 800b028:	b2c9      	uxtb	r1, r1
 800b02a:	f000 0303 	and.w	r3, r0, #3
 800b02e:	2900      	cmp	r1, #0
 800b030:	d043      	beq.n	800b0ba <strchr+0x92>
 800b032:	b17b      	cbz	r3, 800b054 <strchr+0x2c>
 800b034:	7803      	ldrb	r3, [r0, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d067      	beq.n	800b10a <strchr+0xe2>
 800b03a:	4299      	cmp	r1, r3
 800b03c:	d03c      	beq.n	800b0b8 <strchr+0x90>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	e005      	b.n	800b04e <strchr+0x26>
 800b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b046:	2a00      	cmp	r2, #0
 800b048:	d05d      	beq.n	800b106 <strchr+0xde>
 800b04a:	428a      	cmp	r2, r1
 800b04c:	d034      	beq.n	800b0b8 <strchr+0x90>
 800b04e:	079a      	lsls	r2, r3, #30
 800b050:	4618      	mov	r0, r3
 800b052:	d1f6      	bne.n	800b042 <strchr+0x1a>
 800b054:	b470      	push	{r4, r5, r6}
 800b056:	6804      	ldr	r4, [r0, #0]
 800b058:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800b05c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800b060:	ea86 0504 	eor.w	r5, r6, r4
 800b064:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800b068:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800b06c:	ea23 0305 	bic.w	r3, r3, r5
 800b070:	ea22 0204 	bic.w	r2, r2, r4
 800b074:	4313      	orrs	r3, r2
 800b076:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b07a:	d10f      	bne.n	800b09c <strchr+0x74>
 800b07c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800b080:	ea84 0506 	eor.w	r5, r4, r6
 800b084:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800b088:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800b08c:	ea22 0205 	bic.w	r2, r2, r5
 800b090:	ea23 0304 	bic.w	r3, r3, r4
 800b094:	4313      	orrs	r3, r2
 800b096:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b09a:	d0ef      	beq.n	800b07c <strchr+0x54>
 800b09c:	7803      	ldrb	r3, [r0, #0]
 800b09e:	b143      	cbz	r3, 800b0b2 <strchr+0x8a>
 800b0a0:	4299      	cmp	r1, r3
 800b0a2:	d102      	bne.n	800b0aa <strchr+0x82>
 800b0a4:	e006      	b.n	800b0b4 <strchr+0x8c>
 800b0a6:	428b      	cmp	r3, r1
 800b0a8:	d004      	beq.n	800b0b4 <strchr+0x8c>
 800b0aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1f9      	bne.n	800b0a6 <strchr+0x7e>
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	bc70      	pop	{r4, r5, r6}
 800b0b6:	4770      	bx	lr
 800b0b8:	4770      	bx	lr
 800b0ba:	b15b      	cbz	r3, 800b0d4 <strchr+0xac>
 800b0bc:	7803      	ldrb	r3, [r0, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d0fa      	beq.n	800b0b8 <strchr+0x90>
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	e003      	b.n	800b0ce <strchr+0xa6>
 800b0c6:	7802      	ldrb	r2, [r0, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	d0f4      	beq.n	800b0b8 <strchr+0x90>
 800b0ce:	0799      	lsls	r1, r3, #30
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	d1f8      	bne.n	800b0c6 <strchr+0x9e>
 800b0d4:	6802      	ldr	r2, [r0, #0]
 800b0d6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b0da:	ea23 0302 	bic.w	r3, r3, r2
 800b0de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b0e2:	d108      	bne.n	800b0f6 <strchr+0xce>
 800b0e4:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800b0e8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b0ec:	ea23 0302 	bic.w	r3, r3, r2
 800b0f0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b0f4:	d0f6      	beq.n	800b0e4 <strchr+0xbc>
 800b0f6:	7803      	ldrb	r3, [r0, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0dd      	beq.n	800b0b8 <strchr+0x90>
 800b0fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1fb      	bne.n	800b0fc <strchr+0xd4>
 800b104:	4770      	bx	lr
 800b106:	4610      	mov	r0, r2
 800b108:	4770      	bx	lr
 800b10a:	4618      	mov	r0, r3
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop

0800b110 <strncmp>:
 800b110:	2a00      	cmp	r2, #0
 800b112:	d041      	beq.n	800b198 <strncmp+0x88>
 800b114:	ea40 0301 	orr.w	r3, r0, r1
 800b118:	f013 0303 	ands.w	r3, r3, #3
 800b11c:	b4f0      	push	{r4, r5, r6, r7}
 800b11e:	d125      	bne.n	800b16c <strncmp+0x5c>
 800b120:	2a03      	cmp	r2, #3
 800b122:	d923      	bls.n	800b16c <strncmp+0x5c>
 800b124:	6804      	ldr	r4, [r0, #0]
 800b126:	680d      	ldr	r5, [r1, #0]
 800b128:	42ac      	cmp	r4, r5
 800b12a:	d11f      	bne.n	800b16c <strncmp+0x5c>
 800b12c:	3a04      	subs	r2, #4
 800b12e:	d035      	beq.n	800b19c <strncmp+0x8c>
 800b130:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 800b134:	ea25 0404 	bic.w	r4, r5, r4
 800b138:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800b13c:	d131      	bne.n	800b1a2 <strncmp+0x92>
 800b13e:	1d07      	adds	r7, r0, #4
 800b140:	1d0d      	adds	r5, r1, #4
 800b142:	e00d      	b.n	800b160 <strncmp+0x50>
 800b144:	f857 3b04 	ldr.w	r3, [r7], #4
 800b148:	680e      	ldr	r6, [r1, #0]
 800b14a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800b14e:	42b3      	cmp	r3, r6
 800b150:	ea24 0403 	bic.w	r4, r4, r3
 800b154:	d10a      	bne.n	800b16c <strncmp+0x5c>
 800b156:	3a04      	subs	r2, #4
 800b158:	d020      	beq.n	800b19c <strncmp+0x8c>
 800b15a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800b15e:	d11d      	bne.n	800b19c <strncmp+0x8c>
 800b160:	2a03      	cmp	r2, #3
 800b162:	4629      	mov	r1, r5
 800b164:	4638      	mov	r0, r7
 800b166:	f105 0504 	add.w	r5, r5, #4
 800b16a:	d8eb      	bhi.n	800b144 <strncmp+0x34>
 800b16c:	7803      	ldrb	r3, [r0, #0]
 800b16e:	780c      	ldrb	r4, [r1, #0]
 800b170:	429c      	cmp	r4, r3
 800b172:	f102 32ff 	add.w	r2, r2, #4294967295
 800b176:	d10c      	bne.n	800b192 <strncmp+0x82>
 800b178:	b182      	cbz	r2, 800b19c <strncmp+0x8c>
 800b17a:	b914      	cbnz	r4, 800b182 <strncmp+0x72>
 800b17c:	e00e      	b.n	800b19c <strncmp+0x8c>
 800b17e:	b16a      	cbz	r2, 800b19c <strncmp+0x8c>
 800b180:	b17b      	cbz	r3, 800b1a2 <strncmp+0x92>
 800b182:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b186:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	f102 32ff 	add.w	r2, r2, #4294967295
 800b190:	d0f5      	beq.n	800b17e <strncmp+0x6e>
 800b192:	1b18      	subs	r0, r3, r4
 800b194:	bcf0      	pop	{r4, r5, r6, r7}
 800b196:	4770      	bx	lr
 800b198:	4610      	mov	r0, r2
 800b19a:	4770      	bx	lr
 800b19c:	2000      	movs	r0, #0
 800b19e:	bcf0      	pop	{r4, r5, r6, r7}
 800b1a0:	4770      	bx	lr
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	e7f6      	b.n	800b194 <strncmp+0x84>
 800b1a6:	bf00      	nop

0800b1a8 <strncpy>:
 800b1a8:	ea40 0301 	orr.w	r3, r0, r1
 800b1ac:	079b      	lsls	r3, r3, #30
 800b1ae:	b470      	push	{r4, r5, r6}
 800b1b0:	d12a      	bne.n	800b208 <strncpy+0x60>
 800b1b2:	2a03      	cmp	r2, #3
 800b1b4:	d928      	bls.n	800b208 <strncpy+0x60>
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	f854 6b04 	ldr.w	r6, [r4], #4
 800b1c0:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800b1c4:	ea25 0506 	bic.w	r5, r5, r6
 800b1c8:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b1cc:	d106      	bne.n	800b1dc <strncpy+0x34>
 800b1ce:	3a04      	subs	r2, #4
 800b1d0:	2a03      	cmp	r2, #3
 800b1d2:	f843 6b04 	str.w	r6, [r3], #4
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	d8ef      	bhi.n	800b1ba <strncpy+0x12>
 800b1da:	b19a      	cbz	r2, 800b204 <strncpy+0x5c>
 800b1dc:	780c      	ldrb	r4, [r1, #0]
 800b1de:	701c      	strb	r4, [r3, #0]
 800b1e0:	3a01      	subs	r2, #1
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	b13c      	cbz	r4, 800b1f6 <strncpy+0x4e>
 800b1e6:	b16a      	cbz	r2, 800b204 <strncpy+0x5c>
 800b1e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1ec:	f803 4b01 	strb.w	r4, [r3], #1
 800b1f0:	3a01      	subs	r2, #1
 800b1f2:	2c00      	cmp	r4, #0
 800b1f4:	d1f7      	bne.n	800b1e6 <strncpy+0x3e>
 800b1f6:	b12a      	cbz	r2, 800b204 <strncpy+0x5c>
 800b1f8:	441a      	add	r2, r3
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	f803 1b01 	strb.w	r1, [r3], #1
 800b200:	4293      	cmp	r3, r2
 800b202:	d1fb      	bne.n	800b1fc <strncpy+0x54>
 800b204:	bc70      	pop	{r4, r5, r6}
 800b206:	4770      	bx	lr
 800b208:	4603      	mov	r3, r0
 800b20a:	e7e6      	b.n	800b1da <strncpy+0x32>

0800b20c <strpbrk>:
 800b20c:	b430      	push	{r4, r5}
 800b20e:	7804      	ldrb	r4, [r0, #0]
 800b210:	b1dc      	cbz	r4, 800b24a <strpbrk+0x3e>
 800b212:	780d      	ldrb	r5, [r1, #0]
 800b214:	b19d      	cbz	r5, 800b23e <strpbrk+0x32>
 800b216:	42ac      	cmp	r4, r5
 800b218:	d00f      	beq.n	800b23a <strpbrk+0x2e>
 800b21a:	460a      	mov	r2, r1
 800b21c:	e001      	b.n	800b222 <strpbrk+0x16>
 800b21e:	429c      	cmp	r4, r3
 800b220:	d00b      	beq.n	800b23a <strpbrk+0x2e>
 800b222:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1f9      	bne.n	800b21e <strpbrk+0x12>
 800b22a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b22e:	2c00      	cmp	r4, #0
 800b230:	d1f0      	bne.n	800b214 <strpbrk+0x8>
 800b232:	7813      	ldrb	r3, [r2, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	bf08      	it	eq
 800b238:	2000      	moveq	r0, #0
 800b23a:	bc30      	pop	{r4, r5}
 800b23c:	4770      	bx	lr
 800b23e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b242:	460a      	mov	r2, r1
 800b244:	2c00      	cmp	r4, #0
 800b246:	d1e5      	bne.n	800b214 <strpbrk+0x8>
 800b248:	e7f3      	b.n	800b232 <strpbrk+0x26>
 800b24a:	4620      	mov	r0, r4
 800b24c:	e7f5      	b.n	800b23a <strpbrk+0x2e>
 800b24e:	bf00      	nop

0800b250 <strspn>:
 800b250:	b470      	push	{r4, r5, r6}
 800b252:	7804      	ldrb	r4, [r0, #0]
 800b254:	b1a4      	cbz	r4, 800b280 <strspn+0x30>
 800b256:	780d      	ldrb	r5, [r1, #0]
 800b258:	4606      	mov	r6, r0
 800b25a:	b14d      	cbz	r5, 800b270 <strspn+0x20>
 800b25c:	42a5      	cmp	r5, r4
 800b25e:	d00a      	beq.n	800b276 <strspn+0x26>
 800b260:	460a      	mov	r2, r1
 800b262:	e001      	b.n	800b268 <strspn+0x18>
 800b264:	42a3      	cmp	r3, r4
 800b266:	d006      	beq.n	800b276 <strspn+0x26>
 800b268:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1f9      	bne.n	800b264 <strspn+0x14>
 800b270:	1b80      	subs	r0, r0, r6
 800b272:	bc70      	pop	{r4, r5, r6}
 800b274:	4770      	bx	lr
 800b276:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	d1ed      	bne.n	800b25a <strspn+0xa>
 800b27e:	e7f7      	b.n	800b270 <strspn+0x20>
 800b280:	4620      	mov	r0, r4
 800b282:	e7f6      	b.n	800b272 <strspn+0x22>
