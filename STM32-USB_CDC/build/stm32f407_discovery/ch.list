
build/stm32f407_discovery/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002ba 	.word	0x080002ba
 8000010:	080002ba 	.word	0x080002ba
 8000014:	080002ba 	.word	0x080002ba
 8000018:	080002ba 	.word	0x080002ba
 800001c:	080002ba 	.word	0x080002ba
 8000020:	080002ba 	.word	0x080002ba
 8000024:	080002ba 	.word	0x080002ba
 8000028:	080002ba 	.word	0x080002ba
 800002c:	08003211 	.word	0x08003211
 8000030:	080002ba 	.word	0x080002ba
 8000034:	080002ba 	.word	0x080002ba
 8000038:	080002ba 	.word	0x080002ba
 800003c:	080002ba 	.word	0x080002ba
 8000040:	080002ba 	.word	0x080002ba
 8000044:	080002ba 	.word	0x080002ba
 8000048:	080002ba 	.word	0x080002ba
 800004c:	080002ba 	.word	0x080002ba
 8000050:	080002ba 	.word	0x080002ba
 8000054:	080002ba 	.word	0x080002ba
 8000058:	080002ba 	.word	0x080002ba
 800005c:	080002ba 	.word	0x080002ba
 8000060:	080002ba 	.word	0x080002ba
 8000064:	080002ba 	.word	0x080002ba
 8000068:	080002ba 	.word	0x080002ba
 800006c:	080057c1 	.word	0x080057c1
 8000070:	08005771 	.word	0x08005771
 8000074:	08005721 	.word	0x08005721
 8000078:	080056d1 	.word	0x080056d1
 800007c:	08005691 	.word	0x08005691
 8000080:	08005641 	.word	0x08005641
 8000084:	080055f1 	.word	0x080055f1
 8000088:	08005801 	.word	0x08005801
 800008c:	080002ba 	.word	0x080002ba
 8000090:	080002ba 	.word	0x080002ba
 8000094:	080002ba 	.word	0x080002ba
 8000098:	080002ba 	.word	0x080002ba
 800009c:	080002ba 	.word	0x080002ba
 80000a0:	080002ba 	.word	0x080002ba
 80000a4:	080002ba 	.word	0x080002ba
 80000a8:	080002ba 	.word	0x080002ba
 80000ac:	080002ba 	.word	0x080002ba
 80000b0:	080051f1 	.word	0x080051f1
 80000b4:	080051c1 	.word	0x080051c1
 80000b8:	08005191 	.word	0x08005191
 80000bc:	080002ba 	.word	0x080002ba
 80000c0:	080002ba 	.word	0x080002ba
 80000c4:	080002ba 	.word	0x080002ba
 80000c8:	080002ba 	.word	0x080002ba
 80000cc:	080002ba 	.word	0x080002ba
 80000d0:	080002ba 	.word	0x080002ba
 80000d4:	080002ba 	.word	0x080002ba
 80000d8:	080002ba 	.word	0x080002ba
 80000dc:	080002ba 	.word	0x080002ba
 80000e0:	080002ba 	.word	0x080002ba
 80000e4:	080002ba 	.word	0x080002ba
 80000e8:	080002ba 	.word	0x080002ba
 80000ec:	080002ba 	.word	0x080002ba
 80000f0:	080002ba 	.word	0x080002ba
 80000f4:	080002ba 	.word	0x080002ba
 80000f8:	080002ba 	.word	0x080002ba
 80000fc:	080055a1 	.word	0x080055a1
 8000100:	080002ba 	.word	0x080002ba
 8000104:	080002ba 	.word	0x080002ba
 8000108:	080002ba 	.word	0x080002ba
 800010c:	080002ba 	.word	0x080002ba
 8000110:	080002ba 	.word	0x080002ba
 8000114:	080002ba 	.word	0x080002ba
 8000118:	080002ba 	.word	0x080002ba
 800011c:	080002ba 	.word	0x080002ba
 8000120:	08005561 	.word	0x08005561
 8000124:	08005511 	.word	0x08005511
 8000128:	080054c1 	.word	0x080054c1
 800012c:	08005471 	.word	0x08005471
 8000130:	08005431 	.word	0x08005431
 8000134:	080002ba 	.word	0x080002ba
 8000138:	080002ba 	.word	0x080002ba
 800013c:	080002ba 	.word	0x080002ba
 8000140:	080002ba 	.word	0x080002ba
 8000144:	080002ba 	.word	0x080002ba
 8000148:	080002ba 	.word	0x080002ba
 800014c:	08005311 	.word	0x08005311
 8000150:	080053e1 	.word	0x080053e1
 8000154:	08005391 	.word	0x08005391
 8000158:	08005341 	.word	0x08005341
 800015c:	080002ba 	.word	0x080002ba
 8000160:	080002ba 	.word	0x080002ba
 8000164:	080002ba 	.word	0x080002ba
 8000168:	080002ba 	.word	0x080002ba
 800016c:	080002ba 	.word	0x080002ba
 8000170:	080002ba 	.word	0x080002ba
 8000174:	080052e1 	.word	0x080052e1
 8000178:	080002ba 	.word	0x080002ba
 800017c:	080002ba 	.word	0x080002ba
 8000180:	080002ba 	.word	0x080002ba
 8000184:	080002ba 	.word	0x080002ba
 8000188:	080002ba 	.word	0x080002ba
 800018c:	080002ba 	.word	0x080002ba
 8000190:	080002ba 	.word	0x080002ba
 8000194:	080002ba 	.word	0x080002ba
 8000198:	080002ba 	.word	0x080002ba
 800019c:	080002ba 	.word	0x080002ba
 80001a0:	080002ba 	.word	0x080002ba
 80001a4:	080002ba 	.word	0x080002ba
 80001a8:	080002ba 	.word	0x080002ba
 80001ac:	080002ba 	.word	0x080002ba
 80001b0:	080002ba 	.word	0x080002ba
 80001b4:	080002ba 	.word	0x080002ba
 80001b8:	080002ba 	.word	0x080002ba
 80001bc:	080002ba 	.word	0x080002ba
 80001c0:	080002ba 	.word	0x080002ba
 80001c4:	080002ba 	.word	0x080002ba
 80001c8:	080002ba 	.word	0x080002ba
 80001cc:	080002ba 	.word	0x080002ba
 80001d0:	080002ba 	.word	0x080002ba
 80001d4:	080002ba 	.word	0x080002ba
 80001d8:	080002ba 	.word	0x080002ba
 80001dc:	080002ba 	.word	0x080002ba

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f005 fb94 	bl	8005930 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f004 fe82 	bl	8004f10 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f005 fb26 	bl	80058a0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f005 fb64 	bl	8005920 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f003 fd32 	bl	8003cd0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f005 bb48 	b.w	8005910 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	0800a624 	.word	0x0800a624
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	200011e4 	.word	0x200011e4
                ldr     r1, =_bss_start
 80002a0:	200011e8 	.word	0x200011e8
                ldr     r2, =_bss_end
 80002a4:	20002ed8 	.word	0x20002ed8
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002d0:	f002 ffee 	bl	80032b0 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002da:	4628      	mov	r0, r5
                blx     r4
 80002dc:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002de:	2000      	movs	r0, #0
                bl      chThdExit
 80002e0:	f003 fc8e 	bl	8003c00 <chThdExit>

080002e4 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002e4:	f003 f824 	bl	8003330 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002e8:	f002 ffa2 	bl	8003230 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002ec:	f002 ffe0 	bl	80032b0 <_dbg_check_unlock>

080002f0 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002f0:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002f2:	e7fe      	b.n	80002f2 <_port_exit_from_isr+0x2>

080002f4 <memcpy>:
 80002f4:	4684      	mov	ip, r0
 80002f6:	ea41 0300 	orr.w	r3, r1, r0
 80002fa:	f013 0303 	ands.w	r3, r3, #3
 80002fe:	d16d      	bne.n	80003dc <memcpy+0xe8>
 8000300:	3a40      	subs	r2, #64	; 0x40
 8000302:	d341      	bcc.n	8000388 <memcpy+0x94>
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	3a40      	subs	r2, #64	; 0x40
 8000386:	d2bd      	bcs.n	8000304 <memcpy+0x10>
 8000388:	3230      	adds	r2, #48	; 0x30
 800038a:	d311      	bcc.n	80003b0 <memcpy+0xbc>
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	3a10      	subs	r2, #16
 80003ae:	d2ed      	bcs.n	800038c <memcpy+0x98>
 80003b0:	320c      	adds	r2, #12
 80003b2:	d305      	bcc.n	80003c0 <memcpy+0xcc>
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	3a04      	subs	r2, #4
 80003be:	d2f9      	bcs.n	80003b4 <memcpy+0xc0>
 80003c0:	3204      	adds	r2, #4
 80003c2:	d008      	beq.n	80003d6 <memcpy+0xe2>
 80003c4:	07d2      	lsls	r2, r2, #31
 80003c6:	bf1c      	itt	ne
 80003c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80003d0:	d301      	bcc.n	80003d6 <memcpy+0xe2>
 80003d2:	880b      	ldrh	r3, [r1, #0]
 80003d4:	8003      	strh	r3, [r0, #0]
 80003d6:	4660      	mov	r0, ip
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	2a08      	cmp	r2, #8
 80003de:	d313      	bcc.n	8000408 <memcpy+0x114>
 80003e0:	078b      	lsls	r3, r1, #30
 80003e2:	d08d      	beq.n	8000300 <memcpy+0xc>
 80003e4:	f010 0303 	ands.w	r3, r0, #3
 80003e8:	d08a      	beq.n	8000300 <memcpy+0xc>
 80003ea:	f1c3 0304 	rsb	r3, r3, #4
 80003ee:	1ad2      	subs	r2, r2, r3
 80003f0:	07db      	lsls	r3, r3, #31
 80003f2:	bf1c      	itt	ne
 80003f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003fc:	d380      	bcc.n	8000300 <memcpy+0xc>
 80003fe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000402:	f820 3b02 	strh.w	r3, [r0], #2
 8000406:	e77b      	b.n	8000300 <memcpy+0xc>
 8000408:	3a04      	subs	r2, #4
 800040a:	d3d9      	bcc.n	80003c0 <memcpy+0xcc>
 800040c:	3a01      	subs	r2, #1
 800040e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000412:	f800 3b01 	strb.w	r3, [r0], #1
 8000416:	d2f9      	bcs.n	800040c <memcpy+0x118>
 8000418:	780b      	ldrb	r3, [r1, #0]
 800041a:	7003      	strb	r3, [r0, #0]
 800041c:	784b      	ldrb	r3, [r1, #1]
 800041e:	7043      	strb	r3, [r0, #1]
 8000420:	788b      	ldrb	r3, [r1, #2]
 8000422:	7083      	strb	r3, [r0, #2]
 8000424:	4660      	mov	r0, ip
 8000426:	4770      	bx	lr
	...

08000430 <memchr>:
 8000430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000434:	2a10      	cmp	r2, #16
 8000436:	db2b      	blt.n	8000490 <memchr+0x60>
 8000438:	f010 0f07 	tst.w	r0, #7
 800043c:	d008      	beq.n	8000450 <memchr+0x20>
 800043e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000442:	3a01      	subs	r2, #1
 8000444:	428b      	cmp	r3, r1
 8000446:	d02d      	beq.n	80004a4 <memchr+0x74>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	b342      	cbz	r2, 80004a0 <memchr+0x70>
 800044e:	d1f6      	bne.n	800043e <memchr+0xe>
 8000450:	b4f0      	push	{r4, r5, r6, r7}
 8000452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800045a:	f022 0407 	bic.w	r4, r2, #7
 800045e:	f07f 0700 	mvns.w	r7, #0
 8000462:	2300      	movs	r3, #0
 8000464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000468:	3c08      	subs	r4, #8
 800046a:	ea85 0501 	eor.w	r5, r5, r1
 800046e:	ea86 0601 	eor.w	r6, r6, r1
 8000472:	fa85 f547 	uadd8	r5, r5, r7
 8000476:	faa3 f587 	sel	r5, r3, r7
 800047a:	fa86 f647 	uadd8	r6, r6, r7
 800047e:	faa5 f687 	sel	r6, r5, r7
 8000482:	b98e      	cbnz	r6, 80004a8 <memchr+0x78>
 8000484:	d1ee      	bne.n	8000464 <memchr+0x34>
 8000486:	bcf0      	pop	{r4, r5, r6, r7}
 8000488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800048c:	f002 0207 	and.w	r2, r2, #7
 8000490:	b132      	cbz	r2, 80004a0 <memchr+0x70>
 8000492:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000496:	3a01      	subs	r2, #1
 8000498:	ea83 0301 	eor.w	r3, r3, r1
 800049c:	b113      	cbz	r3, 80004a4 <memchr+0x74>
 800049e:	d1f8      	bne.n	8000492 <memchr+0x62>
 80004a0:	2000      	movs	r0, #0
 80004a2:	4770      	bx	lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4770      	bx	lr
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	bf06      	itte	eq
 80004ac:	4635      	moveq	r5, r6
 80004ae:	3803      	subeq	r0, #3
 80004b0:	3807      	subne	r0, #7
 80004b2:	f015 0f01 	tst.w	r5, #1
 80004b6:	d107      	bne.n	80004c8 <memchr+0x98>
 80004b8:	3001      	adds	r0, #1
 80004ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004be:	bf02      	ittt	eq
 80004c0:	3001      	addeq	r0, #1
 80004c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004c6:	3001      	addeq	r0, #1
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	3801      	subs	r0, #1
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
	...

08000500 <strlen>:
 8000500:	f890 f000 	pld	[r0]
 8000504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000508:	f020 0107 	bic.w	r1, r0, #7
 800050c:	f06f 0c00 	mvn.w	ip, #0
 8000510:	f010 0407 	ands.w	r4, r0, #7
 8000514:	f891 f020 	pld	[r1, #32]
 8000518:	f040 8049 	bne.w	80005ae <strlen+0xae>
 800051c:	f04f 0400 	mov.w	r4, #0
 8000520:	f06f 0007 	mvn.w	r0, #7
 8000524:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000528:	f891 f040 	pld	[r1, #64]	; 0x40
 800052c:	f100 0008 	add.w	r0, r0, #8
 8000530:	fa82 f24c 	uadd8	r2, r2, ip
 8000534:	faa4 f28c 	sel	r2, r4, ip
 8000538:	fa83 f34c 	uadd8	r3, r3, ip
 800053c:	faa2 f38c 	sel	r3, r2, ip
 8000540:	bb4b      	cbnz	r3, 8000596 <strlen+0x96>
 8000542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000546:	fa82 f24c 	uadd8	r2, r2, ip
 800054a:	f100 0008 	add.w	r0, r0, #8
 800054e:	faa4 f28c 	sel	r2, r4, ip
 8000552:	fa83 f34c 	uadd8	r3, r3, ip
 8000556:	faa2 f38c 	sel	r3, r2, ip
 800055a:	b9e3      	cbnz	r3, 8000596 <strlen+0x96>
 800055c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000560:	fa82 f24c 	uadd8	r2, r2, ip
 8000564:	f100 0008 	add.w	r0, r0, #8
 8000568:	faa4 f28c 	sel	r2, r4, ip
 800056c:	fa83 f34c 	uadd8	r3, r3, ip
 8000570:	faa2 f38c 	sel	r3, r2, ip
 8000574:	b97b      	cbnz	r3, 8000596 <strlen+0x96>
 8000576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800057a:	f101 0120 	add.w	r1, r1, #32
 800057e:	fa82 f24c 	uadd8	r2, r2, ip
 8000582:	f100 0008 	add.w	r0, r0, #8
 8000586:	faa4 f28c 	sel	r2, r4, ip
 800058a:	fa83 f34c 	uadd8	r3, r3, ip
 800058e:	faa2 f38c 	sel	r3, r2, ip
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0c6      	beq.n	8000524 <strlen+0x24>
 8000596:	2a00      	cmp	r2, #0
 8000598:	bf04      	itt	eq
 800059a:	3004      	addeq	r0, #4
 800059c:	461a      	moveq	r2, r3
 800059e:	ba12      	rev	r2, r2
 80005a0:	fab2 f282 	clz	r2, r2
 80005a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80005a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80005ac:	4770      	bx	lr
 80005ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80005b2:	f004 0503 	and.w	r5, r4, #3
 80005b6:	f1c4 0000 	rsb	r0, r4, #0
 80005ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80005be:	f014 0f04 	tst.w	r4, #4
 80005c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80005c6:	fa0c f505 	lsl.w	r5, ip, r5
 80005ca:	ea62 0205 	orn	r2, r2, r5
 80005ce:	bf1c      	itt	ne
 80005d0:	ea63 0305 	ornne	r3, r3, r5
 80005d4:	4662      	movne	r2, ip
 80005d6:	f04f 0400 	mov.w	r4, #0
 80005da:	e7a9      	b.n	8000530 <strlen+0x30>

080005dc <__aeabi_drsub>:
 80005dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e002      	b.n	80005e8 <__adddf3>
 80005e2:	bf00      	nop

080005e4 <__aeabi_dsub>:
 80005e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005e8 <__adddf3>:
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005f2:	ea94 0f05 	teq	r4, r5
 80005f6:	bf08      	it	eq
 80005f8:	ea90 0f02 	teqeq	r0, r2
 80005fc:	bf1f      	itttt	ne
 80005fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000602:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000606:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800060a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800060e:	f000 80e2 	beq.w	80007d6 <__adddf3+0x1ee>
 8000612:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000616:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800061a:	bfb8      	it	lt
 800061c:	426d      	neglt	r5, r5
 800061e:	dd0c      	ble.n	800063a <__adddf3+0x52>
 8000620:	442c      	add	r4, r5
 8000622:	ea80 0202 	eor.w	r2, r0, r2
 8000626:	ea81 0303 	eor.w	r3, r1, r3
 800062a:	ea82 0000 	eor.w	r0, r2, r0
 800062e:	ea83 0101 	eor.w	r1, r3, r1
 8000632:	ea80 0202 	eor.w	r2, r0, r2
 8000636:	ea81 0303 	eor.w	r3, r1, r3
 800063a:	2d36      	cmp	r5, #54	; 0x36
 800063c:	bf88      	it	hi
 800063e:	bd30      	pophi	{r4, r5, pc}
 8000640:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000644:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000648:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800064c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000650:	d002      	beq.n	8000658 <__adddf3+0x70>
 8000652:	4240      	negs	r0, r0
 8000654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000658:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800065c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000660:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000664:	d002      	beq.n	800066c <__adddf3+0x84>
 8000666:	4252      	negs	r2, r2
 8000668:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800066c:	ea94 0f05 	teq	r4, r5
 8000670:	f000 80a7 	beq.w	80007c2 <__adddf3+0x1da>
 8000674:	f1a4 0401 	sub.w	r4, r4, #1
 8000678:	f1d5 0e20 	rsbs	lr, r5, #32
 800067c:	db0d      	blt.n	800069a <__adddf3+0xb2>
 800067e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000682:	fa22 f205 	lsr.w	r2, r2, r5
 8000686:	1880      	adds	r0, r0, r2
 8000688:	f141 0100 	adc.w	r1, r1, #0
 800068c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000690:	1880      	adds	r0, r0, r2
 8000692:	fa43 f305 	asr.w	r3, r3, r5
 8000696:	4159      	adcs	r1, r3
 8000698:	e00e      	b.n	80006b8 <__adddf3+0xd0>
 800069a:	f1a5 0520 	sub.w	r5, r5, #32
 800069e:	f10e 0e20 	add.w	lr, lr, #32
 80006a2:	2a01      	cmp	r2, #1
 80006a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006a8:	bf28      	it	cs
 80006aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006ae:	fa43 f305 	asr.w	r3, r3, r5
 80006b2:	18c0      	adds	r0, r0, r3
 80006b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	d507      	bpl.n	80006ce <__adddf3+0xe6>
 80006be:	f04f 0e00 	mov.w	lr, #0
 80006c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80006c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80006ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006d2:	d31b      	bcc.n	800070c <__adddf3+0x124>
 80006d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006d8:	d30c      	bcc.n	80006f4 <__adddf3+0x10c>
 80006da:	0849      	lsrs	r1, r1, #1
 80006dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80006e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006e4:	f104 0401 	add.w	r4, r4, #1
 80006e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006f0:	f080 809a 	bcs.w	8000828 <__adddf3+0x240>
 80006f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	ea41 0105 	orr.w	r1, r1, r5
 800070a:	bd30      	pop	{r4, r5, pc}
 800070c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000710:	4140      	adcs	r0, r0
 8000712:	eb41 0101 	adc.w	r1, r1, r1
 8000716:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071a:	f1a4 0401 	sub.w	r4, r4, #1
 800071e:	d1e9      	bne.n	80006f4 <__adddf3+0x10c>
 8000720:	f091 0f00 	teq	r1, #0
 8000724:	bf04      	itt	eq
 8000726:	4601      	moveq	r1, r0
 8000728:	2000      	moveq	r0, #0
 800072a:	fab1 f381 	clz	r3, r1
 800072e:	bf08      	it	eq
 8000730:	3320      	addeq	r3, #32
 8000732:	f1a3 030b 	sub.w	r3, r3, #11
 8000736:	f1b3 0220 	subs.w	r2, r3, #32
 800073a:	da0c      	bge.n	8000756 <__adddf3+0x16e>
 800073c:	320c      	adds	r2, #12
 800073e:	dd08      	ble.n	8000752 <__adddf3+0x16a>
 8000740:	f102 0c14 	add.w	ip, r2, #20
 8000744:	f1c2 020c 	rsb	r2, r2, #12
 8000748:	fa01 f00c 	lsl.w	r0, r1, ip
 800074c:	fa21 f102 	lsr.w	r1, r1, r2
 8000750:	e00c      	b.n	800076c <__adddf3+0x184>
 8000752:	f102 0214 	add.w	r2, r2, #20
 8000756:	bfd8      	it	le
 8000758:	f1c2 0c20 	rsble	ip, r2, #32
 800075c:	fa01 f102 	lsl.w	r1, r1, r2
 8000760:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000764:	bfdc      	itt	le
 8000766:	ea41 010c 	orrle.w	r1, r1, ip
 800076a:	4090      	lslle	r0, r2
 800076c:	1ae4      	subs	r4, r4, r3
 800076e:	bfa2      	ittt	ge
 8000770:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000774:	4329      	orrge	r1, r5
 8000776:	bd30      	popge	{r4, r5, pc}
 8000778:	ea6f 0404 	mvn.w	r4, r4
 800077c:	3c1f      	subs	r4, #31
 800077e:	da1c      	bge.n	80007ba <__adddf3+0x1d2>
 8000780:	340c      	adds	r4, #12
 8000782:	dc0e      	bgt.n	80007a2 <__adddf3+0x1ba>
 8000784:	f104 0414 	add.w	r4, r4, #20
 8000788:	f1c4 0220 	rsb	r2, r4, #32
 800078c:	fa20 f004 	lsr.w	r0, r0, r4
 8000790:	fa01 f302 	lsl.w	r3, r1, r2
 8000794:	ea40 0003 	orr.w	r0, r0, r3
 8000798:	fa21 f304 	lsr.w	r3, r1, r4
 800079c:	ea45 0103 	orr.w	r1, r5, r3
 80007a0:	bd30      	pop	{r4, r5, pc}
 80007a2:	f1c4 040c 	rsb	r4, r4, #12
 80007a6:	f1c4 0220 	rsb	r2, r4, #32
 80007aa:	fa20 f002 	lsr.w	r0, r0, r2
 80007ae:	fa01 f304 	lsl.w	r3, r1, r4
 80007b2:	ea40 0003 	orr.w	r0, r0, r3
 80007b6:	4629      	mov	r1, r5
 80007b8:	bd30      	pop	{r4, r5, pc}
 80007ba:	fa21 f004 	lsr.w	r0, r1, r4
 80007be:	4629      	mov	r1, r5
 80007c0:	bd30      	pop	{r4, r5, pc}
 80007c2:	f094 0f00 	teq	r4, #0
 80007c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007ca:	bf06      	itte	eq
 80007cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007d0:	3401      	addeq	r4, #1
 80007d2:	3d01      	subne	r5, #1
 80007d4:	e74e      	b.n	8000674 <__adddf3+0x8c>
 80007d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007da:	bf18      	it	ne
 80007dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007e0:	d029      	beq.n	8000836 <__adddf3+0x24e>
 80007e2:	ea94 0f05 	teq	r4, r5
 80007e6:	bf08      	it	eq
 80007e8:	ea90 0f02 	teqeq	r0, r2
 80007ec:	d005      	beq.n	80007fa <__adddf3+0x212>
 80007ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80007f2:	bf04      	itt	eq
 80007f4:	4619      	moveq	r1, r3
 80007f6:	4610      	moveq	r0, r2
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	ea91 0f03 	teq	r1, r3
 80007fe:	bf1e      	ittt	ne
 8000800:	2100      	movne	r1, #0
 8000802:	2000      	movne	r0, #0
 8000804:	bd30      	popne	{r4, r5, pc}
 8000806:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800080a:	d105      	bne.n	8000818 <__adddf3+0x230>
 800080c:	0040      	lsls	r0, r0, #1
 800080e:	4149      	adcs	r1, r1
 8000810:	bf28      	it	cs
 8000812:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000816:	bd30      	pop	{r4, r5, pc}
 8000818:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800081c:	bf3c      	itt	cc
 800081e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000822:	bd30      	popcc	{r4, r5, pc}
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd30      	pop	{r4, r5, pc}
 8000836:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800083a:	bf1a      	itte	ne
 800083c:	4619      	movne	r1, r3
 800083e:	4610      	movne	r0, r2
 8000840:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000844:	bf1c      	itt	ne
 8000846:	460b      	movne	r3, r1
 8000848:	4602      	movne	r2, r0
 800084a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800084e:	bf06      	itte	eq
 8000850:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000854:	ea91 0f03 	teqeq	r1, r3
 8000858:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800085c:	bd30      	pop	{r4, r5, pc}
 800085e:	bf00      	nop

08000860 <__aeabi_ui2d>:
 8000860:	f090 0f00 	teq	r0, #0
 8000864:	bf04      	itt	eq
 8000866:	2100      	moveq	r1, #0
 8000868:	4770      	bxeq	lr
 800086a:	b530      	push	{r4, r5, lr}
 800086c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000870:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000874:	f04f 0500 	mov.w	r5, #0
 8000878:	f04f 0100 	mov.w	r1, #0
 800087c:	e750      	b.n	8000720 <__adddf3+0x138>
 800087e:	bf00      	nop

08000880 <__aeabi_i2d>:
 8000880:	f090 0f00 	teq	r0, #0
 8000884:	bf04      	itt	eq
 8000886:	2100      	moveq	r1, #0
 8000888:	4770      	bxeq	lr
 800088a:	b530      	push	{r4, r5, lr}
 800088c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000890:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000894:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000898:	bf48      	it	mi
 800089a:	4240      	negmi	r0, r0
 800089c:	f04f 0100 	mov.w	r1, #0
 80008a0:	e73e      	b.n	8000720 <__adddf3+0x138>
 80008a2:	bf00      	nop

080008a4 <__aeabi_f2d>:
 80008a4:	0042      	lsls	r2, r0, #1
 80008a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008b2:	bf1f      	itttt	ne
 80008b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008c0:	4770      	bxne	lr
 80008c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008c6:	bf08      	it	eq
 80008c8:	4770      	bxeq	lr
 80008ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008ce:	bf04      	itt	eq
 80008d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008d4:	4770      	bxeq	lr
 80008d6:	b530      	push	{r4, r5, lr}
 80008d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	e71c      	b.n	8000720 <__adddf3+0x138>
 80008e6:	bf00      	nop

080008e8 <__aeabi_ul2d>:
 80008e8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	b530      	push	{r4, r5, lr}
 80008f2:	f04f 0500 	mov.w	r5, #0
 80008f6:	e00a      	b.n	800090e <__aeabi_l2d+0x16>

080008f8 <__aeabi_l2d>:
 80008f8:	ea50 0201 	orrs.w	r2, r0, r1
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	b530      	push	{r4, r5, lr}
 8000902:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000906:	d502      	bpl.n	800090e <__aeabi_l2d+0x16>
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000912:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000916:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800091a:	f43f aed8 	beq.w	80006ce <__adddf3+0xe6>
 800091e:	f04f 0203 	mov.w	r2, #3
 8000922:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000926:	bf18      	it	ne
 8000928:	3203      	addne	r2, #3
 800092a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800092e:	bf18      	it	ne
 8000930:	3203      	addne	r2, #3
 8000932:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	fa00 fc03 	lsl.w	ip, r0, r3
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	fa01 fe03 	lsl.w	lr, r1, r3
 8000946:	ea40 000e 	orr.w	r0, r0, lr
 800094a:	fa21 f102 	lsr.w	r1, r1, r2
 800094e:	4414      	add	r4, r2
 8000950:	e6bd      	b.n	80006ce <__adddf3+0xe6>
 8000952:	bf00      	nop

08000954 <__aeabi_dmul>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800095a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800095e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000962:	bf1d      	ittte	ne
 8000964:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000968:	ea94 0f0c 	teqne	r4, ip
 800096c:	ea95 0f0c 	teqne	r5, ip
 8000970:	f000 f8de 	bleq	8000b30 <__aeabi_dmul+0x1dc>
 8000974:	442c      	add	r4, r5
 8000976:	ea81 0603 	eor.w	r6, r1, r3
 800097a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800097e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000982:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000986:	bf18      	it	ne
 8000988:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000994:	d038      	beq.n	8000a08 <__aeabi_dmul+0xb4>
 8000996:	fba0 ce02 	umull	ip, lr, r0, r2
 800099a:	f04f 0500 	mov.w	r5, #0
 800099e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80009a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80009a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80009aa:	f04f 0600 	mov.w	r6, #0
 80009ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009b2:	f09c 0f00 	teq	ip, #0
 80009b6:	bf18      	it	ne
 80009b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80009bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80009c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80009c8:	d204      	bcs.n	80009d4 <__aeabi_dmul+0x80>
 80009ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80009ce:	416d      	adcs	r5, r5
 80009d0:	eb46 0606 	adc.w	r6, r6, r6
 80009d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80009d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ec:	bf88      	it	hi
 80009ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f2:	d81e      	bhi.n	8000a32 <__aeabi_dmul+0xde>
 80009f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009f8:	bf08      	it	eq
 80009fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a0c:	ea46 0101 	orr.w	r1, r6, r1
 8000a10:	ea40 0002 	orr.w	r0, r0, r2
 8000a14:	ea81 0103 	eor.w	r1, r1, r3
 8000a18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	f300 80ab 	bgt.w	8000b8c <__aeabi_dmul+0x238>
 8000a36:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a3a:	bfde      	ittt	le
 8000a3c:	2000      	movle	r0, #0
 8000a3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a42:	bd70      	pople	{r4, r5, r6, pc}
 8000a44:	f1c4 0400 	rsb	r4, r4, #0
 8000a48:	3c20      	subs	r4, #32
 8000a4a:	da35      	bge.n	8000ab8 <__aeabi_dmul+0x164>
 8000a4c:	340c      	adds	r4, #12
 8000a4e:	dc1b      	bgt.n	8000a88 <__aeabi_dmul+0x134>
 8000a50:	f104 0414 	add.w	r4, r4, #20
 8000a54:	f1c4 0520 	rsb	r5, r4, #32
 8000a58:	fa00 f305 	lsl.w	r3, r0, r5
 8000a5c:	fa20 f004 	lsr.w	r0, r0, r4
 8000a60:	fa01 f205 	lsl.w	r2, r1, r5
 8000a64:	ea40 0002 	orr.w	r0, r0, r2
 8000a68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a74:	fa21 f604 	lsr.w	r6, r1, r4
 8000a78:	eb42 0106 	adc.w	r1, r2, r6
 8000a7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a80:	bf08      	it	eq
 8000a82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f1c4 040c 	rsb	r4, r4, #12
 8000a8c:	f1c4 0520 	rsb	r5, r4, #32
 8000a90:	fa00 f304 	lsl.w	r3, r0, r4
 8000a94:	fa20 f005 	lsr.w	r0, r0, r5
 8000a98:	fa01 f204 	lsl.w	r2, r1, r4
 8000a9c:	ea40 0002 	orr.w	r0, r0, r2
 8000aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000aa4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000aa8:	f141 0100 	adc.w	r1, r1, #0
 8000aac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ab0:	bf08      	it	eq
 8000ab2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f1c4 0520 	rsb	r5, r4, #32
 8000abc:	fa00 f205 	lsl.w	r2, r0, r5
 8000ac0:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ac4:	fa20 f304 	lsr.w	r3, r0, r4
 8000ac8:	fa01 f205 	lsl.w	r2, r1, r5
 8000acc:	ea43 0302 	orr.w	r3, r3, r2
 8000ad0:	fa21 f004 	lsr.w	r0, r1, r4
 8000ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ad8:	fa21 f204 	lsr.w	r2, r1, r4
 8000adc:	ea20 0002 	bic.w	r0, r0, r2
 8000ae0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ae4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ae8:	bf08      	it	eq
 8000aea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f094 0f00 	teq	r4, #0
 8000af4:	d10f      	bne.n	8000b16 <__aeabi_dmul+0x1c2>
 8000af6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000afa:	0040      	lsls	r0, r0, #1
 8000afc:	eb41 0101 	adc.w	r1, r1, r1
 8000b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b04:	bf08      	it	eq
 8000b06:	3c01      	subeq	r4, #1
 8000b08:	d0f7      	beq.n	8000afa <__aeabi_dmul+0x1a6>
 8000b0a:	ea41 0106 	orr.w	r1, r1, r6
 8000b0e:	f095 0f00 	teq	r5, #0
 8000b12:	bf18      	it	ne
 8000b14:	4770      	bxne	lr
 8000b16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b1a:	0052      	lsls	r2, r2, #1
 8000b1c:	eb43 0303 	adc.w	r3, r3, r3
 8000b20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b24:	bf08      	it	eq
 8000b26:	3d01      	subeq	r5, #1
 8000b28:	d0f7      	beq.n	8000b1a <__aeabi_dmul+0x1c6>
 8000b2a:	ea43 0306 	orr.w	r3, r3, r6
 8000b2e:	4770      	bx	lr
 8000b30:	ea94 0f0c 	teq	r4, ip
 8000b34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b38:	bf18      	it	ne
 8000b3a:	ea95 0f0c 	teqne	r5, ip
 8000b3e:	d00c      	beq.n	8000b5a <__aeabi_dmul+0x206>
 8000b40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b44:	bf18      	it	ne
 8000b46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b4a:	d1d1      	bne.n	8000af0 <__aeabi_dmul+0x19c>
 8000b4c:	ea81 0103 	eor.w	r1, r1, r3
 8000b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b5e:	bf06      	itte	eq
 8000b60:	4610      	moveq	r0, r2
 8000b62:	4619      	moveq	r1, r3
 8000b64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b68:	d019      	beq.n	8000b9e <__aeabi_dmul+0x24a>
 8000b6a:	ea94 0f0c 	teq	r4, ip
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_dmul+0x222>
 8000b70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b74:	d113      	bne.n	8000b9e <__aeabi_dmul+0x24a>
 8000b76:	ea95 0f0c 	teq	r5, ip
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_dmul+0x234>
 8000b7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b80:	bf1c      	itt	ne
 8000b82:	4610      	movne	r0, r2
 8000b84:	4619      	movne	r1, r3
 8000b86:	d10a      	bne.n	8000b9e <__aeabi_dmul+0x24a>
 8000b88:	ea81 0103 	eor.w	r1, r1, r3
 8000b8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ba2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}

08000ba8 <__aeabi_ddiv>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000bb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000bb6:	bf1d      	ittte	ne
 8000bb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bbc:	ea94 0f0c 	teqne	r4, ip
 8000bc0:	ea95 0f0c 	teqne	r5, ip
 8000bc4:	f000 f8a7 	bleq	8000d16 <__aeabi_ddiv+0x16e>
 8000bc8:	eba4 0405 	sub.w	r4, r4, r5
 8000bcc:	ea81 0e03 	eor.w	lr, r1, r3
 8000bd0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000bd8:	f000 8088 	beq.w	8000cec <__aeabi_ddiv+0x144>
 8000bdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000be0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000be4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000be8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000bec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000bf0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000bf4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bf8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bfc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000c00:	429d      	cmp	r5, r3
 8000c02:	bf08      	it	eq
 8000c04:	4296      	cmpeq	r6, r2
 8000c06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000c0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c0e:	d202      	bcs.n	8000c16 <__aeabi_ddiv+0x6e>
 8000c10:	085b      	lsrs	r3, r3, #1
 8000c12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c16:	1ab6      	subs	r6, r6, r2
 8000c18:	eb65 0503 	sbc.w	r5, r5, r3
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c2a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c32:	bf22      	ittt	cs
 8000c34:	1ab6      	subcs	r6, r6, r2
 8000c36:	4675      	movcs	r5, lr
 8000c38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c3c:	085b      	lsrs	r3, r3, #1
 8000c3e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c42:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c46:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c4a:	bf22      	ittt	cs
 8000c4c:	1ab6      	subcs	r6, r6, r2
 8000c4e:	4675      	movcs	r5, lr
 8000c50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c5a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c62:	bf22      	ittt	cs
 8000c64:	1ab6      	subcs	r6, r6, r2
 8000c66:	4675      	movcs	r5, lr
 8000c68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c6c:	085b      	lsrs	r3, r3, #1
 8000c6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c72:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c76:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c7a:	bf22      	ittt	cs
 8000c7c:	1ab6      	subcs	r6, r6, r2
 8000c7e:	4675      	movcs	r5, lr
 8000c80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c84:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c88:	d018      	beq.n	8000cbc <__aeabi_ddiv+0x114>
 8000c8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c92:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ca2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ca6:	d1c0      	bne.n	8000c2a <__aeabi_ddiv+0x82>
 8000ca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cac:	d10b      	bne.n	8000cc6 <__aeabi_ddiv+0x11e>
 8000cae:	ea41 0100 	orr.w	r1, r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cba:	e7b6      	b.n	8000c2a <__aeabi_ddiv+0x82>
 8000cbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cc0:	bf04      	itt	eq
 8000cc2:	4301      	orreq	r1, r0
 8000cc4:	2000      	moveq	r0, #0
 8000cc6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000cca:	bf88      	it	hi
 8000ccc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000cd0:	f63f aeaf 	bhi.w	8000a32 <__aeabi_dmul+0xde>
 8000cd4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000cd8:	bf04      	itt	eq
 8000cda:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000cde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ce2:	f150 0000 	adcs.w	r0, r0, #0
 8000ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000cf0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000cf4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cf8:	bfc2      	ittt	gt
 8000cfa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d02:	bd70      	popgt	{r4, r5, r6, pc}
 8000d04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d08:	f04f 0e00 	mov.w	lr, #0
 8000d0c:	3c01      	subs	r4, #1
 8000d0e:	e690      	b.n	8000a32 <__aeabi_dmul+0xde>
 8000d10:	ea45 0e06 	orr.w	lr, r5, r6
 8000d14:	e68d      	b.n	8000a32 <__aeabi_dmul+0xde>
 8000d16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d1a:	ea94 0f0c 	teq	r4, ip
 8000d1e:	bf08      	it	eq
 8000d20:	ea95 0f0c 	teqeq	r5, ip
 8000d24:	f43f af3b 	beq.w	8000b9e <__aeabi_dmul+0x24a>
 8000d28:	ea94 0f0c 	teq	r4, ip
 8000d2c:	d10a      	bne.n	8000d44 <__aeabi_ddiv+0x19c>
 8000d2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d32:	f47f af34 	bne.w	8000b9e <__aeabi_dmul+0x24a>
 8000d36:	ea95 0f0c 	teq	r5, ip
 8000d3a:	f47f af25 	bne.w	8000b88 <__aeabi_dmul+0x234>
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	e72c      	b.n	8000b9e <__aeabi_dmul+0x24a>
 8000d44:	ea95 0f0c 	teq	r5, ip
 8000d48:	d106      	bne.n	8000d58 <__aeabi_ddiv+0x1b0>
 8000d4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d4e:	f43f aefd 	beq.w	8000b4c <__aeabi_dmul+0x1f8>
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	e722      	b.n	8000b9e <__aeabi_dmul+0x24a>
 8000d58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d5c:	bf18      	it	ne
 8000d5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d62:	f47f aec5 	bne.w	8000af0 <__aeabi_dmul+0x19c>
 8000d66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d6a:	f47f af0d 	bne.w	8000b88 <__aeabi_dmul+0x234>
 8000d6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d72:	f47f aeeb 	bne.w	8000b4c <__aeabi_dmul+0x1f8>
 8000d76:	e712      	b.n	8000b9e <__aeabi_dmul+0x24a>

08000d78 <__gedf2>:
 8000d78:	f04f 3cff 	mov.w	ip, #4294967295
 8000d7c:	e006      	b.n	8000d8c <__cmpdf2+0x4>
 8000d7e:	bf00      	nop

08000d80 <__ledf2>:
 8000d80:	f04f 0c01 	mov.w	ip, #1
 8000d84:	e002      	b.n	8000d8c <__cmpdf2+0x4>
 8000d86:	bf00      	nop

08000d88 <__cmpdf2>:
 8000d88:	f04f 0c01 	mov.w	ip, #1
 8000d8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d9c:	bf18      	it	ne
 8000d9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000da2:	d01b      	beq.n	8000ddc <__cmpdf2+0x54>
 8000da4:	b001      	add	sp, #4
 8000da6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000daa:	bf0c      	ite	eq
 8000dac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000db0:	ea91 0f03 	teqne	r1, r3
 8000db4:	bf02      	ittt	eq
 8000db6:	ea90 0f02 	teqeq	r0, r2
 8000dba:	2000      	moveq	r0, #0
 8000dbc:	4770      	bxeq	lr
 8000dbe:	f110 0f00 	cmn.w	r0, #0
 8000dc2:	ea91 0f03 	teq	r1, r3
 8000dc6:	bf58      	it	pl
 8000dc8:	4299      	cmppl	r1, r3
 8000dca:	bf08      	it	eq
 8000dcc:	4290      	cmpeq	r0, r2
 8000dce:	bf2c      	ite	cs
 8000dd0:	17d8      	asrcs	r0, r3, #31
 8000dd2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000dd6:	f040 0001 	orr.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000de0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000de4:	d102      	bne.n	8000dec <__cmpdf2+0x64>
 8000de6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dea:	d107      	bne.n	8000dfc <__cmpdf2+0x74>
 8000dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df4:	d1d6      	bne.n	8000da4 <__cmpdf2+0x1c>
 8000df6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dfa:	d0d3      	beq.n	8000da4 <__cmpdf2+0x1c>
 8000dfc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <__aeabi_cdrcmple>:
 8000e04:	4684      	mov	ip, r0
 8000e06:	4610      	mov	r0, r2
 8000e08:	4662      	mov	r2, ip
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4663      	mov	r3, ip
 8000e10:	e000      	b.n	8000e14 <__aeabi_cdcmpeq>
 8000e12:	bf00      	nop

08000e14 <__aeabi_cdcmpeq>:
 8000e14:	b501      	push	{r0, lr}
 8000e16:	f7ff ffb7 	bl	8000d88 <__cmpdf2>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	bf48      	it	mi
 8000e1e:	f110 0f00 	cmnmi.w	r0, #0
 8000e22:	bd01      	pop	{r0, pc}

08000e24 <__aeabi_dcmpeq>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff fff4 	bl	8000e14 <__aeabi_cdcmpeq>
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2001      	moveq	r0, #1
 8000e30:	2000      	movne	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_dcmplt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffea 	bl	8000e14 <__aeabi_cdcmpeq>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_dcmple>:
 8000e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e50:	f7ff ffe0 	bl	8000e14 <__aeabi_cdcmpeq>
 8000e54:	bf94      	ite	ls
 8000e56:	2001      	movls	r0, #1
 8000e58:	2000      	movhi	r0, #0
 8000e5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5e:	bf00      	nop

08000e60 <__aeabi_dcmpge>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff ffce 	bl	8000e04 <__aeabi_cdrcmple>
 8000e68:	bf94      	ite	ls
 8000e6a:	2001      	movls	r0, #1
 8000e6c:	2000      	movhi	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_dcmpgt>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff ffc4 	bl	8000e04 <__aeabi_cdrcmple>
 8000e7c:	bf34      	ite	cc
 8000e7e:	2001      	movcc	r0, #1
 8000e80:	2000      	movcs	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_dcmpun>:
 8000e88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e90:	d102      	bne.n	8000e98 <__aeabi_dcmpun+0x10>
 8000e92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e96:	d10a      	bne.n	8000eae <__aeabi_dcmpun+0x26>
 8000e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ea0:	d102      	bne.n	8000ea8 <__aeabi_dcmpun+0x20>
 8000ea2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea6:	d102      	bne.n	8000eae <__aeabi_dcmpun+0x26>
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	4770      	bx	lr
 8000eae:	f04f 0001 	mov.w	r0, #1
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_d2iz>:
 8000eb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000eb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ebc:	d215      	bcs.n	8000eea <__aeabi_d2iz+0x36>
 8000ebe:	d511      	bpl.n	8000ee4 <__aeabi_d2iz+0x30>
 8000ec0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ec4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec8:	d912      	bls.n	8000ef0 <__aeabi_d2iz+0x3c>
 8000eca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000eda:	fa23 f002 	lsr.w	r0, r3, r2
 8000ede:	bf18      	it	ne
 8000ee0:	4240      	negne	r0, r0
 8000ee2:	4770      	bx	lr
 8000ee4:	f04f 0000 	mov.w	r0, #0
 8000ee8:	4770      	bx	lr
 8000eea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eee:	d105      	bne.n	8000efc <__aeabi_d2iz+0x48>
 8000ef0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ef4:	bf08      	it	eq
 8000ef6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000efa:	4770      	bx	lr
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b972 	b.w	8001200 <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4688      	mov	r8, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14b      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	4615      	mov	r5, r2
 8000f46:	d967      	bls.n	8001018 <__udivmoddi4+0xe4>
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b14a      	cbz	r2, 8000f62 <__udivmoddi4+0x2e>
 8000f4e:	f1c2 0720 	rsb	r7, r2, #32
 8000f52:	fa01 f302 	lsl.w	r3, r1, r2
 8000f56:	fa20 f707 	lsr.w	r7, r0, r7
 8000f5a:	4095      	lsls	r5, r2
 8000f5c:	ea47 0803 	orr.w	r8, r7, r3
 8000f60:	4094      	lsls	r4, r2
 8000f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f66:	0c23      	lsrs	r3, r4, #16
 8000f68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f6c:	fa1f fc85 	uxth.w	ip, r5
 8000f70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f78:	fb07 f10c 	mul.w	r1, r7, ip
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x60>
 8000f80:	18eb      	adds	r3, r5, r3
 8000f82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f86:	f080 811b 	bcs.w	80011c0 <__udivmoddi4+0x28c>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 8118 	bls.w	80011c0 <__udivmoddi4+0x28c>
 8000f90:	3f02      	subs	r7, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x8c>
 8000fac:	192c      	adds	r4, r5, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	442c      	add	r4, r5
 8000fc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fc4:	eba4 040c 	sub.w	r4, r4, ip
 8000fc8:	2700      	movs	r7, #0
 8000fca:	b11e      	cbz	r6, 8000fd4 <__udivmoddi4+0xa0>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xbe>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80eb 	beq.w	80011ba <__udivmoddi4+0x286>
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fea:	4638      	mov	r0, r7
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f783 	clz	r7, r3
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d147      	bne.n	800108a <__udivmoddi4+0x156>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd0>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80fa 	bhi.w	80011f8 <__udivmoddi4+0x2c4>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	4698      	mov	r8, r3
 800100e:	2e00      	cmp	r6, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa0>
 8001012:	e9c6 4800 	strd	r4, r8, [r6]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xe8>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 808f 	bne.w	8001144 <__udivmoddi4+0x210>
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102c:	fa1f f885 	uxth.w	r8, r5
 8001030:	2701      	movs	r7, #1
 8001032:	fbb1 fcfe 	udiv	ip, r1, lr
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fb0e 111c 	mls	r1, lr, ip, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb08 f10c 	mul.w	r1, r8, ip
 8001044:	4299      	cmp	r1, r3
 8001046:	d907      	bls.n	8001058 <__udivmoddi4+0x124>
 8001048:	18eb      	adds	r3, r5, r3
 800104a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4299      	cmp	r1, r3
 8001052:	f200 80cd 	bhi.w	80011f0 <__udivmoddi4+0x2bc>
 8001056:	4684      	mov	ip, r0
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	b2a3      	uxth	r3, r4
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fb0e 1410 	mls	r4, lr, r0, r1
 8001064:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001068:	fb08 f800 	mul.w	r8, r8, r0
 800106c:	45a0      	cmp	r8, r4
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x14c>
 8001070:	192c      	adds	r4, r5, r4
 8001072:	f100 33ff 	add.w	r3, r0, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x14a>
 8001078:	45a0      	cmp	r8, r4
 800107a:	f200 80b6 	bhi.w	80011ea <__udivmoddi4+0x2b6>
 800107e:	4618      	mov	r0, r3
 8001080:	eba4 0408 	sub.w	r4, r4, r8
 8001084:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001088:	e79f      	b.n	8000fca <__udivmoddi4+0x96>
 800108a:	f1c7 0c20 	rsb	ip, r7, #32
 800108e:	40bb      	lsls	r3, r7
 8001090:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001094:	ea4e 0e03 	orr.w	lr, lr, r3
 8001098:	fa01 f407 	lsl.w	r4, r1, r7
 800109c:	fa20 f50c 	lsr.w	r5, r0, ip
 80010a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010a8:	4325      	orrs	r5, r4
 80010aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010ae:	0c2c      	lsrs	r4, r5, #16
 80010b0:	fb08 3319 	mls	r3, r8, r9, r3
 80010b4:	fa1f fa8e 	uxth.w	sl, lr
 80010b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010bc:	fb09 f40a 	mul.w	r4, r9, sl
 80010c0:	429c      	cmp	r4, r3
 80010c2:	fa02 f207 	lsl.w	r2, r2, r7
 80010c6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1e 0303 	adds.w	r3, lr, r3
 80010d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d4:	f080 8087 	bcs.w	80011e6 <__udivmoddi4+0x2b2>
 80010d8:	429c      	cmp	r4, r3
 80010da:	f240 8084 	bls.w	80011e6 <__udivmoddi4+0x2b2>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4473      	add	r3, lr
 80010e4:	1b1b      	subs	r3, r3, r4
 80010e6:	b2ad      	uxth	r5, r5
 80010e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ec:	fb08 3310 	mls	r3, r8, r0, r3
 80010f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	d26b      	bcs.n	80011de <__udivmoddi4+0x2aa>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d969      	bls.n	80011de <__udivmoddi4+0x2aa>
 800110a:	3802      	subs	r0, #2
 800110c:	4474      	add	r4, lr
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c2      	mov	sl, r8
 800111e:	464b      	mov	r3, r9
 8001120:	d354      	bcc.n	80011cc <__udivmoddi4+0x298>
 8001122:	d051      	beq.n	80011c8 <__udivmoddi4+0x294>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d069      	beq.n	80011fc <__udivmoddi4+0x2c8>
 8001128:	ebb1 050a 	subs.w	r5, r1, sl
 800112c:	eb64 0403 	sbc.w	r4, r4, r3
 8001130:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001134:	40fd      	lsrs	r5, r7
 8001136:	40fc      	lsrs	r4, r7
 8001138:	ea4c 0505 	orr.w	r5, ip, r5
 800113c:	e9c6 5400 	strd	r5, r4, [r6]
 8001140:	2700      	movs	r7, #0
 8001142:	e747      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f703 	lsr.w	r7, r0, r3
 800114c:	4095      	lsls	r5, r2
 800114e:	fa01 f002 	lsl.w	r0, r1, r2
 8001152:	fa21 f303 	lsr.w	r3, r1, r3
 8001156:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800115a:	4338      	orrs	r0, r7
 800115c:	0c01      	lsrs	r1, r0, #16
 800115e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001162:	fa1f f885 	uxth.w	r8, r5
 8001166:	fb0e 3317 	mls	r3, lr, r7, r3
 800116a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116e:	fb07 f308 	mul.w	r3, r7, r8
 8001172:	428b      	cmp	r3, r1
 8001174:	fa04 f402 	lsl.w	r4, r4, r2
 8001178:	d907      	bls.n	800118a <__udivmoddi4+0x256>
 800117a:	1869      	adds	r1, r5, r1
 800117c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001180:	d22f      	bcs.n	80011e2 <__udivmoddi4+0x2ae>
 8001182:	428b      	cmp	r3, r1
 8001184:	d92d      	bls.n	80011e2 <__udivmoddi4+0x2ae>
 8001186:	3f02      	subs	r7, #2
 8001188:	4429      	add	r1, r5
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	b281      	uxth	r1, r0
 800118e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001192:	fb0e 3310 	mls	r3, lr, r0, r3
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb00 f308 	mul.w	r3, r0, r8
 800119e:	428b      	cmp	r3, r1
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x27e>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011a8:	d217      	bcs.n	80011da <__udivmoddi4+0x2a6>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d915      	bls.n	80011da <__udivmoddi4+0x2a6>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011b8:	e73b      	b.n	8001032 <__udivmoddi4+0xfe>
 80011ba:	4637      	mov	r7, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e709      	b.n	8000fd4 <__udivmoddi4+0xa0>
 80011c0:	4607      	mov	r7, r0
 80011c2:	e6e7      	b.n	8000f94 <__udivmoddi4+0x60>
 80011c4:	4618      	mov	r0, r3
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x8c>
 80011c8:	4541      	cmp	r1, r8
 80011ca:	d2ab      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011d0:	eb69 020e 	sbc.w	r2, r9, lr
 80011d4:	3801      	subs	r0, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	e7a4      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011da:	4660      	mov	r0, ip
 80011dc:	e7e9      	b.n	80011b2 <__udivmoddi4+0x27e>
 80011de:	4618      	mov	r0, r3
 80011e0:	e795      	b.n	800110e <__udivmoddi4+0x1da>
 80011e2:	4667      	mov	r7, ip
 80011e4:	e7d1      	b.n	800118a <__udivmoddi4+0x256>
 80011e6:	4681      	mov	r9, r0
 80011e8:	e77c      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ea:	3802      	subs	r0, #2
 80011ec:	442c      	add	r4, r5
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0x14c>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	442b      	add	r3, r5
 80011f6:	e72f      	b.n	8001058 <__udivmoddi4+0x124>
 80011f8:	4638      	mov	r0, r7
 80011fa:	e708      	b.n	800100e <__udivmoddi4+0xda>
 80011fc:	4637      	mov	r7, r6
 80011fe:	e6e9      	b.n	8000fd4 <__udivmoddi4+0xa0>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
	...

08001210 <chTMStartMeasurementX.constprop.3>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <chTMStartMeasurementX.constprop.3+0x8>)
 8001212:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001214:	6083      	str	r3, [r0, #8]
}
 8001216:	4770      	bx	lr
 8001218:	e0001000 	.word	0xe0001000
 800121c:	00000000 	.word	0x00000000

08001220 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8001220:	2902      	cmp	r1, #2
 8001222:	d006      	beq.n	8001232 <get_descriptor+0x12>
 8001224:	2903      	cmp	r1, #3
 8001226:	d006      	beq.n	8001236 <get_descriptor+0x16>
 8001228:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <get_descriptor+0x24>)
 800122c:	bf18      	it	ne
 800122e:	2000      	movne	r0, #0
 8001230:	4770      	bx	lr
    return &vcom_configuration_descriptor;
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <get_descriptor+0x28>)
 8001234:	4770      	bx	lr
    if (dindex < 4)
 8001236:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8001238:	bf9a      	itte	ls
 800123a:	4804      	ldrls	r0, [pc, #16]	; (800124c <get_descriptor+0x2c>)
 800123c:	eb00 00c2 	addls.w	r0, r0, r2, lsl #3
  return NULL;
 8001240:	2000      	movhi	r0, #0
}
 8001242:	4770      	bx	lr
 8001244:	0800a1dc 	.word	0x0800a1dc
 8001248:	0800a190 	.word	0x0800a190
 800124c:	0800a264 	.word	0x0800a264

08001250 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001250:	2320      	movs	r3, #32
 8001252:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_port_irq_epilogue+0x44>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800125e:	d102      	bne.n	8001266 <_port_irq_epilogue+0x16>
 8001260:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001264:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001266:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800126a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800126e:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8001272:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001276:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <_port_irq_epilogue+0x48>)
 800127c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800127e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8001280:	6889      	ldr	r1, [r1, #8]
 8001282:	6892      	ldr	r2, [r2, #8]
 8001284:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001286:	bf8c      	ite	hi
 8001288:	4a04      	ldrhi	r2, [pc, #16]	; (800129c <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800128a:	4a05      	ldrls	r2, [pc, #20]	; (80012a0 <_port_irq_epilogue+0x50>)
 800128c:	f843 2c08 	str.w	r2, [r3, #-8]
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	200018e0 	.word	0x200018e0
 800129c:	080002e5 	.word	0x080002e5
 80012a0:	080002f0 	.word	0x080002f0
	...

080012b0 <chTMStopMeasurementX>:
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <chTMStopMeasurementX+0x40>)
 80012b4:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 80012b6:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80012b8:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 80012ba:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80012bc:	f8d2 6884 	ldr.w	r6, [r2, #2180]	; 0x884
  if (tmp->last > tmp->worst) {
 80012c0:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80012c2:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 80012c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80012c8:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 80012ca:	18e6      	adds	r6, r4, r3
 80012cc:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 80012d0:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80012d2:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80012d4:	bf88      	it	hi
 80012d6:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80012d8:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80012da:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80012dc:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80012e0:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80012e4:	bf38      	it	cc
 80012e6:	6003      	strcc	r3, [r0, #0]
}
 80012e8:	bcf0      	pop	{r4, r5, r6, r7}
 80012ea:	4770      	bx	lr
 80012ec:	e0001000 	.word	0xe0001000
 80012f0:	200018e0 	.word	0x200018e0
	...

08001300 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
 8001300:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <trace_next+0x30>)
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <trace_next+0x34>)
 8001306:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001308:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	6a64      	ldr	r4, [r4, #36]	; 0x24
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8001310:	605c      	str	r4, [r3, #4]
 8001312:	6840      	ldr	r0, [r0, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8001314:	f360 211f 	bfi	r1, r0, #8, #24
 8001318:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800131c:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 8001320:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8001322:	bf28      	it	cs
 8001324:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 8001328:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800132a:	bc10      	pop	{r4}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200018e0 	.word	0x200018e0
 8001334:	e0001000 	.word	0xe0001000
	...

08001340 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8001340:	4909      	ldr	r1, [pc, #36]	; (8001368 <_trace_switch.part.0+0x28>)
 8001342:	6bca      	ldr	r2, [r1, #60]	; 0x3c
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8001344:	b410      	push	{r4}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8001346:	7813      	ldrb	r3, [r2, #0]
 8001348:	2401      	movs	r4, #1
 800134a:	f364 0302 	bfi	r3, r4, #0, #3
 800134e:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8001350:	f890 4020 	ldrb.w	r4, [r0, #32]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8001354:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8001356:	f364 03c7 	bfi	r3, r4, #3, #5
 800135a:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800135c:	698b      	ldr	r3, [r1, #24]
    trace_next();
  }
}
 800135e:	bc10      	pop	{r4}
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8001360:	e9c2 3002 	strd	r3, r0, [r2, #8]
    trace_next();
 8001364:	f7ff bfcc 	b.w	8001300 <trace_next>
 8001368:	200018e0 	.word	0x200018e0
 800136c:	00000000 	.word	0x00000000

08001370 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <_trace_isr_leave+0x28>)
 8001372:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_leave(const char *isr) {
 8001374:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8001376:	f013 0402 	ands.w	r4, r3, #2
 800137a:	d000      	beq.n	800137e <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 800137c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800137e:	2320      	movs	r3, #32
 8001380:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8001384:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001386:	2203      	movs	r2, #3
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8001388:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800138a:	701a      	strb	r2, [r3, #0]
    trace_next();
 800138c:	f7ff ffb8 	bl	8001300 <trace_next>
 8001390:	f384 8811 	msr	BASEPRI, r4
}
 8001394:	bd10      	pop	{r4, pc}
 8001396:	bf00      	nop
 8001398:	200018e0 	.word	0x200018e0
 800139c:	00000000 	.word	0x00000000

080013a0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <_trace_isr_enter+0x28>)
 80013a2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
void _trace_isr_enter(const char *isr) {
 80013a4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80013a6:	f013 0402 	ands.w	r4, r3, #2
 80013aa:	d000      	beq.n	80013ae <_trace_isr_enter+0xe>
}
 80013ac:	bd10      	pop	{r4, pc}
 80013ae:	2320      	movs	r3, #32
 80013b0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80013b4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013b6:	2202      	movs	r2, #2
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80013b8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80013ba:	701a      	strb	r2, [r3, #0]
    trace_next();
 80013bc:	f7ff ffa0 	bl	8001300 <trace_next>
 80013c0:	f384 8811 	msr	BASEPRI, r4
}
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	bf00      	nop
 80013c8:	200018e0 	.word	0x200018e0
 80013cc:	00000000 	.word	0x00000000

080013d0 <chSysPolledDelayX>:
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <chSysPolledDelayX+0x10>)
 80013d2:	6851      	ldr	r1, [r2, #4]
 80013d4:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 80013d6:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 80013d8:	4298      	cmp	r0, r3
 80013da:	d8fb      	bhi.n	80013d4 <chSysPolledDelayX+0x4>
  }
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e0001000 	.word	0xe0001000
	...

080013f0 <chSysHalt>:
void chSysHalt(const char *reason) {
 80013f0:	b508      	push	{r3, lr}
 80013f2:	4605      	mov	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 80013f6:	4c06      	ldr	r4, [pc, #24]	; (8001410 <chSysHalt+0x20>)
 80013f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80013fa:	075b      	lsls	r3, r3, #29
 80013fc:	d501      	bpl.n	8001402 <chSysHalt+0x12>
  ch.dbg.panic_msg = reason;
 80013fe:	62e5      	str	r5, [r4, #44]	; 0x2c
 8001400:	e7fe      	b.n	8001400 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8001402:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001404:	2204      	movs	r2, #4
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8001406:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8001408:	701a      	strb	r2, [r3, #0]
    trace_next();
 800140a:	f7ff ff79 	bl	8001300 <trace_next>
 800140e:	e7f6      	b.n	80013fe <chSysHalt+0xe>
 8001410:	200018e0 	.word	0x200018e0
	...

08001420 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8001420:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <chDbgCheckClassS+0x18>)
 8001424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001426:	b91a      	cbnz	r2, 8001430 <chDbgCheckClassS+0x10>
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	2b00      	cmp	r3, #0
 800142c:	dd00      	ble.n	8001430 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 800142e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <chDbgCheckClassS+0x1c>)
 8001432:	f7ff ffdd 	bl	80013f0 <chSysHalt>
 8001436:	bf00      	nop
 8001438:	200018e0 	.word	0x200018e0
 800143c:	08009f6c 	.word	0x08009f6c

08001440 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8001440:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <chDbgCheckClassI+0x18>)
 8001444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001446:	2a00      	cmp	r2, #0
 8001448:	db03      	blt.n	8001452 <chDbgCheckClassI+0x12>
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd00      	ble.n	8001452 <chDbgCheckClassI+0x12>
}
 8001450:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <chDbgCheckClassI+0x1c>)
 8001454:	f7ff ffcc 	bl	80013f0 <chSysHalt>
 8001458:	200018e0 	.word	0x200018e0
 800145c:	08009f64 	.word	0x08009f64

08001460 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	460e      	mov	r6, r1
 8001464:	4604      	mov	r4, r0
 8001466:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 8001468:	f7ff ffea 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800146c:	b1b6      	cbz	r6, 800149c <chCoreAllocAlignedWithOffsetI+0x3c>
 800146e:	f106 3cff 	add.w	ip, r6, #4294967295
 8001472:	ea1c 0c06 	ands.w	ip, ip, r6
 8001476:	d111      	bne.n	800149c <chCoreAllocAlignedWithOffsetI+0x3c>

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001478:	4f0b      	ldr	r7, [pc, #44]	; (80014a8 <chCoreAllocAlignedWithOffsetI+0x48>)
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800147a:	e9d7 2300 	ldrd	r2, r3, [r7]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800147e:	1950      	adds	r0, r2, r5
  size = MEM_ALIGN_NEXT(size, align);
 8001480:	3c01      	subs	r4, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001482:	4430      	add	r0, r6
  size = MEM_ALIGN_NEXT(size, align);
 8001484:	4271      	negs	r1, r6
 8001486:	4434      	add	r4, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8001488:	3801      	subs	r0, #1
 800148a:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 800148c:	4021      	ands	r1, r4
  next = p + size;
 800148e:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8001490:	428b      	cmp	r3, r1
 8001492:	d306      	bcc.n	80014a2 <chCoreAllocAlignedWithOffsetI+0x42>
 8001494:	428a      	cmp	r2, r1
 8001496:	d804      	bhi.n	80014a2 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8001498:	6039      	str	r1, [r7, #0]

  return p;
}
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <chCoreAllocAlignedWithOffsetI+0x4c>)
 800149e:	f7ff ffa7 	bl	80013f0 <chSysHalt>
    return NULL;
 80014a2:	4660      	mov	r0, ip
}
 80014a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20002288 	.word	0x20002288
 80014ac:	08009a44 	.word	0x08009a44

080014b0 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f7ff bfd5 	b.w	8001460 <chCoreAllocAlignedWithOffsetI>
 80014b6:	bf00      	nop
	...

080014c0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 80014c0:	b510      	push	{r4, lr}
 80014c2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 80014c4:	f7ff ffbc 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80014c8:	b1a4      	cbz	r4, 80014f4 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 80014ca:	f894 3020 	ldrb.w	r3, [r4, #32]
 80014ce:	b18b      	cbz	r3, 80014f4 <chSchReadyI+0x34>
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d00f      	beq.n	80014f4 <chSchReadyI+0x34>
  tp->state = CH_STATE_READY;
 80014d4:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80014d6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <chSchReadyI+0x3c>)
  tp->state = CH_STATE_READY;
 80014da:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80014de:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	428a      	cmp	r2, r1
 80014e4:	d2fb      	bcs.n	80014de <chSchReadyI+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80014e6:	685a      	ldr	r2, [r3, #4]
}
 80014e8:	4620      	mov	r0, r4
  tp->queue.prev             = cp->queue.prev;
 80014ea:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80014ee:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80014f0:	605c      	str	r4, [r3, #4]
}
 80014f2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <chSchReadyI+0x40>)
 80014f6:	f7ff ff7b 	bl	80013f0 <chSysHalt>
 80014fa:	bf00      	nop
 80014fc:	200018e0 	.word	0x200018e0
 8001500:	08009a0c 	.word	0x08009a0c
	...

08001510 <chThdDequeueAllI.constprop.34>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001510:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001512:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001514:	4298      	cmp	r0, r3
 8001516:	d00a      	beq.n	800152e <chThdDequeueAllI.constprop.34+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800151c:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 800151e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001522:	2a04      	cmp	r2, #4
 8001524:	4604      	mov	r4, r0
 8001526:	d003      	beq.n	8001530 <chThdDequeueAllI.constprop.34+0x20>
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <chThdDequeueAllI.constprop.34+0x48>)
 800152a:	f7ff ff61 	bl	80013f0 <chSysHalt>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800152e:	bd38      	pop	{r3, r4, r5, pc}

  tp->u.rdymsg = msg;
 8001530:	f06f 0501 	mvn.w	r5, #1
 8001534:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ffc2 	bl	80014c0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800153c:	6823      	ldr	r3, [r4, #0]
  while (queue_notempty(tqp)) {
 800153e:	429c      	cmp	r4, r3
 8001540:	d0f5      	beq.n	800152e <chThdDequeueAllI.constprop.34+0x1e>
  tqp->next             = tp->queue.next;
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001546:	6054      	str	r4, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8001548:	f893 2020 	ldrb.w	r2, [r3, #32]
 800154c:	2a04      	cmp	r2, #4
 800154e:	d0f1      	beq.n	8001534 <chThdDequeueAllI.constprop.34+0x24>
 8001550:	4801      	ldr	r0, [pc, #4]	; (8001558 <chThdDequeueAllI.constprop.34+0x48>)
 8001552:	f7ff ff4d 	bl	80013f0 <chSysHalt>
 8001556:	bf00      	nop
 8001558:	080099d4 	.word	0x080099d4
 800155c:	00000000 	.word	0x00000000

08001560 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001564:	4606      	mov	r6, r0
 8001566:	460f      	mov	r7, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8001568:	f7ff ff6a 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800156c:	b3a6      	cbz	r6, 80015d8 <chEvtBroadcastFlagsI+0x78>

  elp = esp->next;
 800156e:	6834      	ldr	r4, [r6, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001570:	42a6      	cmp	r6, r4
 8001572:	d019      	beq.n	80015a8 <chEvtBroadcastFlagsI+0x48>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8001574:	f04f 0800 	mov.w	r8, #0
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8001578:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    elp->flags |= flags;
 800157c:	433b      	orrs	r3, r7
    if ((flags == (eventflags_t)0) ||
 800157e:	4213      	tst	r3, r2
    elp->flags |= flags;
 8001580:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001582:	d00e      	beq.n	80015a2 <chEvtBroadcastFlagsI+0x42>
      chEvtSignalI(elp->listener, elp->events);
 8001584:	e9d4 5901 	ldrd	r5, r9, [r4, #4]
  chDbgCheckClassI();
 8001588:	f7ff ff5a 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800158c:	b30d      	cbz	r5, 80015d2 <chEvtBroadcastFlagsI+0x72>
  tp->epending |= events;
 800158e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001590:	f895 2020 	ldrb.w	r2, [r5, #32]
  tp->epending |= events;
 8001594:	ea49 0303 	orr.w	r3, r9, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001598:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 800159a:	636b      	str	r3, [r5, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800159c:	d006      	beq.n	80015ac <chEvtBroadcastFlagsI+0x4c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800159e:	2a0b      	cmp	r2, #11
 80015a0:	d00d      	beq.n	80015be <chEvtBroadcastFlagsI+0x5e>
    elp = elp->next;
 80015a2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80015a4:	42a6      	cmp	r6, r4
 80015a6:	d1e7      	bne.n	8001578 <chEvtBroadcastFlagsI+0x18>
}
 80015a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80015ac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80015ae:	4213      	tst	r3, r2
 80015b0:	d0f7      	beq.n	80015a2 <chEvtBroadcastFlagsI+0x42>
    tp->u.rdymsg = MSG_OK;
 80015b2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80015b6:	4628      	mov	r0, r5
 80015b8:	f7ff ff82 	bl	80014c0 <chSchReadyI>
 80015bc:	e7f1      	b.n	80015a2 <chEvtBroadcastFlagsI+0x42>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80015be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80015c0:	ea32 0303 	bics.w	r3, r2, r3
 80015c4:	d1ed      	bne.n	80015a2 <chEvtBroadcastFlagsI+0x42>
    tp->u.rdymsg = MSG_OK;
 80015c6:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80015ca:	4628      	mov	r0, r5
 80015cc:	f7ff ff78 	bl	80014c0 <chSchReadyI>
 80015d0:	e7e7      	b.n	80015a2 <chEvtBroadcastFlagsI+0x42>
  chDbgCheck(tp != NULL);
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <chEvtBroadcastFlagsI+0x80>)
 80015d4:	f7ff ff0c 	bl	80013f0 <chSysHalt>
  chDbgCheck(esp != NULL);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <chEvtBroadcastFlagsI+0x84>)
 80015da:	f7ff ff09 	bl	80013f0 <chSysHalt>
 80015de:	bf00      	nop
 80015e0:	08009ad0 	.word	0x08009ad0
 80015e4:	08009a7c 	.word	0x08009a7c
	...

080015f0 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 80015f0:	b508      	push	{r3, lr}
  if (*trp != NULL) {
 80015f2:	6803      	ldr	r3, [r0, #0]
 80015f4:	b173      	cbz	r3, 8001614 <chThdResumeI+0x24>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 80015f6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80015fa:	2a03      	cmp	r2, #3
 80015fc:	d107      	bne.n	800160e <chThdResumeI+0x1e>
    *trp = NULL;
 80015fe:	2200      	movs	r2, #0
 8001600:	6002      	str	r2, [r0, #0]
    (void) chSchReadyI(tp);
 8001602:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
 8001604:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void) chSchReadyI(tp);
 800160a:	f7ff bf59 	b.w	80014c0 <chSchReadyI>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800160e:	4802      	ldr	r0, [pc, #8]	; (8001618 <chThdResumeI+0x28>)
 8001610:	f7ff feee 	bl	80013f0 <chSysHalt>
}
 8001614:	bd08      	pop	{r3, pc}
 8001616:	bf00      	nop
 8001618:	08009afc 	.word	0x08009afc
 800161c:	00000000 	.word	0x00000000

08001620 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8001620:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001622:	2320      	movs	r3, #32
 8001624:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <_dbg_check_leave_isr+0x24>)
 800162a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd01      	ble.n	8001634 <_dbg_check_leave_isr+0x14>
 8001630:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001632:	b111      	cbz	r1, 800163a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <_dbg_check_leave_isr+0x28>)
 8001636:	f7ff fedb 	bl	80013f0 <chSysHalt>
  ch.dbg.isr_cnt--;
 800163a:	3b01      	subs	r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	f381 8811 	msr	BASEPRI, r1
}
 8001642:	bd08      	pop	{r3, pc}
 8001644:	200018e0 	.word	0x200018e0
 8001648:	08009e44 	.word	0x08009e44
 800164c:	00000000 	.word	0x00000000

08001650 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8001650:	b508      	push	{r3, lr}
 8001652:	2320      	movs	r3, #32
 8001654:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <_dbg_check_enter_isr+0x24>)
 800165a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800165c:	2b00      	cmp	r3, #0
 800165e:	db01      	blt.n	8001664 <_dbg_check_enter_isr+0x14>
 8001660:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001662:	b111      	cbz	r1, 800166a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <_dbg_check_enter_isr+0x28>)
 8001666:	f7ff fec3 	bl	80013f0 <chSysHalt>
  ch.dbg.isr_cnt++;
 800166a:	3301      	adds	r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	f381 8811 	msr	BASEPRI, r1
}
 8001672:	bd08      	pop	{r3, pc}
 8001674:	200018e0 	.word	0x200018e0
 8001678:	08009e3c 	.word	0x08009e3c
 800167c:	00000000 	.word	0x00000000

08001680 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 8001680:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <_dbg_check_unlock_from_isr+0x1c>)
 8001684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001686:	2a00      	cmp	r2, #0
 8001688:	dd05      	ble.n	8001696 <_dbg_check_unlock_from_isr+0x16>
 800168a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168c:	2a00      	cmp	r2, #0
 800168e:	dd02      	ble.n	8001696 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 8001690:	2200      	movs	r2, #0
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001694:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <_dbg_check_unlock_from_isr+0x20>)
 8001698:	f7ff feaa 	bl	80013f0 <chSysHalt>
 800169c:	200018e0 	.word	0x200018e0
 80016a0:	08009e64 	.word	0x08009e64
	...

080016b0 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 80016b0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <_dbg_check_lock_from_isr+0x1c>)
 80016b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	dd01      	ble.n	80016be <_dbg_check_lock_from_isr+0xe>
 80016ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016bc:	b112      	cbz	r2, 80016c4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <_dbg_check_lock_from_isr+0x20>)
 80016c0:	f7ff fe96 	bl	80013f0 <chSysHalt>
  _dbg_enter_lock();
 80016c4:	2201      	movs	r2, #1
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016c8:	bd08      	pop	{r3, pc}
 80016ca:	bf00      	nop
 80016cc:	200018e0 	.word	0x200018e0
 80016d0:	08009e54 	.word	0x08009e54
	...

080016e0 <wakeup>:
static void wakeup(void *p) {
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4604      	mov	r4, r0
 80016e4:	2320      	movs	r3, #32
 80016e6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80016ea:	f7ff ffe1 	bl	80016b0 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 80016ee:	f894 3020 	ldrb.w	r3, [r4, #32]
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	d810      	bhi.n	8001718 <wakeup+0x38>
 80016f6:	e8df f003 	tbb	[pc, r3]
 80016fa:	0f15      	.short	0x0f15
 80016fc:	040a1b0f 	.word	0x040a1b0f
 8001700:	0a0f      	.short	0x0a0f
    chSemFastSignalI(tp->u.wtsemp);
 8001702:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8001704:	f7ff fe9c 	bl	8001440 <chDbgCheckClassI>

  sp->cnt++;
 8001708:	68ab      	ldr	r3, [r5, #8]
 800170a:	3301      	adds	r3, #1
 800170c:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800170e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001712:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff fece 	bl	80014c0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001724:	f7ff ffac 	bl	8001680 <_dbg_check_unlock_from_isr>
 8001728:	2300      	movs	r3, #0
 800172a:	f383 8811 	msr	BASEPRI, r3
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}
    *tp->u.wttrp = NULL;
 8001730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = MSG_TIMEOUT;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff febf 	bl	80014c0 <chSchReadyI>
 8001742:	e7ef      	b.n	8001724 <wakeup+0x44>
	...

08001750 <_idle_thread>:
static void _idle_thread(void *p) {
 8001750:	e7fe      	b.n	8001750 <_idle_thread>
 8001752:	bf00      	nop
	...

08001760 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8001760:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001762:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 8001764:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001766:	68dc      	ldr	r4, [r3, #12]
 8001768:	4014      	ands	r4, r2
 800176a:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800176c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800176e:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8001770:	4605      	mov	r5, r0
  pwmp->tim->SR = ~sr;
 8001772:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8001774:	d503      	bpl.n	800177e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8001776:	6843      	ldr	r3, [r0, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800177a:	b103      	cbz	r3, 800177e <pwm_lld_serve_interrupt+0x1e>
    pwmp->config->channels[0].callback(pwmp);
 800177c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800177e:	0760      	lsls	r0, r4, #29
 8001780:	d504      	bpl.n	800178c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8001782:	686b      	ldr	r3, [r5, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8001786:	b10b      	cbz	r3, 800178c <pwm_lld_serve_interrupt+0x2c>
    pwmp->config->channels[1].callback(pwmp);
 8001788:	4628      	mov	r0, r5
 800178a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800178c:	0721      	lsls	r1, r4, #28
 800178e:	d504      	bpl.n	800179a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8001790:	686b      	ldr	r3, [r5, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8001794:	b10b      	cbz	r3, 800179a <pwm_lld_serve_interrupt+0x3a>
    pwmp->config->channels[2].callback(pwmp);
 8001796:	4628      	mov	r0, r5
 8001798:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800179a:	06e2      	lsls	r2, r4, #27
 800179c:	d504      	bpl.n	80017a8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 800179e:	686b      	ldr	r3, [r5, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80017a2:	b10b      	cbz	r3, 80017a8 <pwm_lld_serve_interrupt+0x48>
    pwmp->config->channels[3].callback(pwmp);
 80017a4:	4628      	mov	r0, r5
 80017a6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80017a8:	07e3      	lsls	r3, r4, #31
 80017aa:	d506      	bpl.n	80017ba <pwm_lld_serve_interrupt+0x5a>
 80017ac:	686b      	ldr	r3, [r5, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	b11b      	cbz	r3, 80017ba <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 80017b2:	4628      	mov	r0, r5
}
 80017b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
 80017b8:	4718      	bx	r3
}
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
 80017c0:	b570      	push	{r4, r5, r6, lr}
  if (pwmp->state == PWM_STOP) {
 80017c2:	7802      	ldrb	r2, [r0, #0]
 80017c4:	6983      	ldr	r3, [r0, #24]
 80017c6:	2a01      	cmp	r2, #1
 80017c8:	d052      	beq.n	8001870 <pwm_lld_start+0xb0>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 80017d8:	6842      	ldr	r2, [r0, #4]
 80017da:	6941      	ldr	r1, [r0, #20]
 80017dc:	6814      	ldr	r4, [r2, #0]
 80017de:	fbb1 f3f4 	udiv	r3, r1, r4
 80017e2:	1e5d      	subs	r5, r3, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 80017e4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80017e8:	d203      	bcs.n	80017f2 <pwm_lld_start+0x32>
 80017ea:	fb03 f304 	mul.w	r3, r3, r4
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d002      	beq.n	80017f8 <pwm_lld_start+0x38>
 80017f2:	4842      	ldr	r0, [pc, #264]	; (80018fc <pwm_lld_start+0x13c>)
 80017f4:	f7ff fdfc 	bl	80013f0 <chSysHalt>
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 80017f8:	68d3      	ldr	r3, [r2, #12]
  pwmp->tim->ARR  = pwmp->period - 1;
 80017fa:	6884      	ldr	r4, [r0, #8]
  pwmp->tim->PSC  = psc;
 80017fc:	6981      	ldr	r1, [r0, #24]
  pwmp->tim->CR2  = pwmp->config->cr2;
 80017fe:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  pwmp->tim->PSC  = psc;
 8001800:	628d      	str	r5, [r1, #40]	; 0x28
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001802:	f003 030f 	and.w	r3, r3, #15
  pwmp->tim->ARR  = pwmp->period - 1;
 8001806:	3c01      	subs	r4, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001808:	2b01      	cmp	r3, #1
  pwmp->tim->ARR  = pwmp->period - 1;
 800180a:	62cc      	str	r4, [r1, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 800180c:	604e      	str	r6, [r1, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800180e:	d03a      	beq.n	8001886 <pwm_lld_start+0xc6>
 8001810:	2b02      	cmp	r3, #2
 8001812:	d039      	beq.n	8001888 <pwm_lld_start+0xc8>
  ccer = 0;
 8001814:	2300      	movs	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001816:	6950      	ldr	r0, [r2, #20]
 8001818:	f000 000f 	and.w	r0, r0, #15
 800181c:	2801      	cmp	r0, #1
 800181e:	d003      	beq.n	8001828 <pwm_lld_start+0x68>
 8001820:	2802      	cmp	r0, #2
 8001822:	d103      	bne.n	800182c <pwm_lld_start+0x6c>
    ccer |= STM32_TIM_CCER_CC2P;
 8001824:	f043 0320 	orr.w	r3, r3, #32
    ccer |= STM32_TIM_CCER_CC2E;
 8001828:	f043 0310 	orr.w	r3, r3, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 800182c:	69d0      	ldr	r0, [r2, #28]
 800182e:	f000 000f 	and.w	r0, r0, #15
 8001832:	2801      	cmp	r0, #1
 8001834:	d003      	beq.n	800183e <pwm_lld_start+0x7e>
 8001836:	2802      	cmp	r0, #2
 8001838:	d103      	bne.n	8001842 <pwm_lld_start+0x82>
    ccer |= STM32_TIM_CCER_CC3P;
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001842:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8001844:	f000 000f 	and.w	r0, r0, #15
 8001848:	2801      	cmp	r0, #1
 800184a:	d003      	beq.n	8001854 <pwm_lld_start+0x94>
 800184c:	2802      	cmp	r0, #2
 800184e:	d103      	bne.n	8001858 <pwm_lld_start+0x98>
    ccer |= STM32_TIM_CCER_CC4P;
 8001850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
 8001854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8001858:	6b12      	ldr	r2, [r2, #48]	; 0x30
  pwmp->tim->CCER  = ccer;
 800185a:	620b      	str	r3, [r1, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 800185c:	2401      	movs	r4, #1
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800185e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001862:	2000      	movs	r0, #0
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8001864:	2285      	movs	r2, #133	; 0x85
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8001866:	614c      	str	r4, [r1, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8001868:	6108      	str	r0, [r1, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 800186a:	60cb      	str	r3, [r1, #12]
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 800186c:	600a      	str	r2, [r1, #0]
}
 800186e:	bd70      	pop	{r4, r5, r6, pc}
    if (&PWMD3 == pwmp) {
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <pwm_lld_start+0x140>)
 8001872:	4290      	cmp	r0, r2
 8001874:	d026      	beq.n	80018c4 <pwm_lld_start+0x104>
    if (&PWMD4 == pwmp) {
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <pwm_lld_start+0x144>)
 8001878:	4290      	cmp	r0, r2
 800187a:	d008      	beq.n	800188e <pwm_lld_start+0xce>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800187c:	f646 0268 	movw	r2, #26728	; 0x6868
 8001880:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	e7a8      	b.n	80017d8 <pwm_lld_start+0x18>
  ccer = 0;
 8001886:	2300      	movs	r3, #0
    ccer |= STM32_TIM_CCER_CC1E;
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	e7c3      	b.n	8001816 <pwm_lld_start+0x56>
      rccEnableTIM4(true);
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <pwm_lld_start+0x148>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001890:	491e      	ldr	r1, [pc, #120]	; (800190c <pwm_lld_start+0x14c>)
 8001892:	6c14      	ldr	r4, [r2, #64]	; 0x40
      pwmp->clock = STM32_TIMCLK1;
 8001894:	4d1e      	ldr	r5, [pc, #120]	; (8001910 <pwm_lld_start+0x150>)
      rccEnableTIM4(true);
 8001896:	f044 0404 	orr.w	r4, r4, #4
 800189a:	6414      	str	r4, [r2, #64]	; 0x40
 800189c:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800189e:	f044 0404 	orr.w	r4, r4, #4
 80018a2:	6614      	str	r4, [r2, #96]	; 0x60
      rccResetTIM4();
 80018a4:	6a14      	ldr	r4, [r2, #32]
 80018a6:	f044 0404 	orr.w	r4, r4, #4
 80018aa:	6214      	str	r4, [r2, #32]
 80018ac:	2400      	movs	r4, #0
 80018ae:	6214      	str	r4, [r2, #32]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018b4:	2470      	movs	r4, #112	; 0x70
 80018b6:	f881 431e 	strb.w	r4, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018ba:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018be:	600a      	str	r2, [r1, #0]
      pwmp->clock = STM32_TIMCLK1;
 80018c0:	6145      	str	r5, [r0, #20]
 80018c2:	e7db      	b.n	800187c <pwm_lld_start+0xbc>
      rccEnableTIM3(true);
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <pwm_lld_start+0x148>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018c6:	4911      	ldr	r1, [pc, #68]	; (800190c <pwm_lld_start+0x14c>)
 80018c8:	6c14      	ldr	r4, [r2, #64]	; 0x40
      pwmp->clock = STM32_TIMCLK1;
 80018ca:	4d11      	ldr	r5, [pc, #68]	; (8001910 <pwm_lld_start+0x150>)
      rccEnableTIM3(true);
 80018cc:	f044 0402 	orr.w	r4, r4, #2
 80018d0:	6414      	str	r4, [r2, #64]	; 0x40
 80018d2:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80018d4:	f044 0402 	orr.w	r4, r4, #2
 80018d8:	6614      	str	r4, [r2, #96]	; 0x60
      rccResetTIM3();
 80018da:	6a14      	ldr	r4, [r2, #32]
 80018dc:	f044 0402 	orr.w	r4, r4, #2
 80018e0:	6214      	str	r4, [r2, #32]
 80018e2:	2400      	movs	r4, #0
 80018e4:	6214      	str	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018ea:	2470      	movs	r4, #112	; 0x70
 80018ec:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018f0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018f4:	600a      	str	r2, [r1, #0]
      pwmp->clock = STM32_TIMCLK1;
 80018f6:	6145      	str	r5, [r0, #20]
 80018f8:	e7c0      	b.n	800187c <pwm_lld_start+0xbc>
 80018fa:	bf00      	nop
 80018fc:	08009ba0 	.word	0x08009ba0
 8001900:	2000121c 	.word	0x2000121c
 8001904:	20001238 	.word	0x20001238
 8001908:	40023800 	.word	0x40023800
 800190c:	e000e100 	.word	0xe000e100
 8001910:	0501bd00 	.word	0x0501bd00
	...

08001920 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001920:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001924:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001926:	68d8      	ldr	r0, [r3, #12]
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8001928:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800192a:	6944      	ldr	r4, [r0, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	60e3      	str	r3, [r4, #12]
  if (isp->txsize == 0) {
 8001930:	b9eb      	cbnz	r3, 800196e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8001932:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8001936:	f44f 2400 	mov.w	r4, #524288	; 0x80000
 800193a:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800193e:	6803      	ldr	r3, [r0, #0]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d025      	beq.n	8001994 <usb_lld_start_in+0x74>
 8001948:	b208      	sxth	r0, r1
 800194a:	eb02 1040 	add.w	r0, r2, r0, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800194e:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8001950:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8001954:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001958:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800195c:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8001960:	fa03 f101 	lsl.w	r1, r3, r1
 8001964:	4301      	orrs	r1, r0
 8001966:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 800196a:	bcf0      	pop	{r4, r5, r6, r7}
 800196c:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800196e:	b311      	cbz	r1, 80019b6 <usb_lld_start_in+0x96>
 8001970:	f043 5600 	orr.w	r6, r3, #536870912	; 0x20000000
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8001974:	8a07      	ldrh	r7, [r0, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001976:	eb02 1541 	add.w	r5, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800197a:	1e7c      	subs	r4, r7, #1
 800197c:	4423      	add	r3, r4
 800197e:	fbb3 f3f7 	udiv	r3, r3, r7
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001982:	ea46 43c3 	orr.w	r3, r6, r3, lsl #19
 8001986:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d1d9      	bne.n	8001948 <usb_lld_start_in+0x28>
 8001994:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8001996:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 800199a:	eb02 1440 	add.w	r4, r2, r0, lsl #5
 800199e:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80019a2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80019a6:	bf14      	ite	ne
 80019a8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80019ac:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80019b0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80019b4:	e7c9      	b.n	800194a <usb_lld_start_in+0x2a>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d9da      	bls.n	8001970 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 80019ba:	2340      	movs	r3, #64	; 0x40
 80019bc:	4e01      	ldr	r6, [pc, #4]	; (80019c4 <usb_lld_start_in+0xa4>)
 80019be:	6023      	str	r3, [r4, #0]
 80019c0:	e7d8      	b.n	8001974 <usb_lld_start_in+0x54>
 80019c2:	bf00      	nop
 80019c4:	20000040 	.word	0x20000040
	...

080019d0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80019d0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80019d4:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80019d6:	68dd      	ldr	r5, [r3, #12]
 80019d8:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 80019de:	b919      	cbnz	r1, 80019e8 <usb_lld_start_out+0x18>
 80019e0:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 80019e2:	bf84      	itt	hi
 80019e4:	2440      	movhi	r4, #64	; 0x40
 80019e6:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80019e8:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80019ea:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80019ec:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	4422      	add	r2, r4
 80019f2:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	3303      	adds	r3, #3
 80019fc:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001a00:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8001a04:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001a08:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001a0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001a10:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001a12:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001a16:	d00a      	beq.n	8001a2e <usb_lld_start_out+0x5e>
 8001a18:	b209      	sxth	r1, r1
 8001a1a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001a1e:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001a20:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001a24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001a28:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8001a2c:	4770      	bx	lr
 8001a2e:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8001a30:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001a34:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001a38:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8001a3c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001a40:	bf14      	ite	ne
 8001a42:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001a46:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001a4a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001a4e:	e7e4      	b.n	8001a1a <usb_lld_start_out+0x4a>

08001a50 <otg_epout_handler>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001a54:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001a56:	eb07 1341 	add.w	r3, r7, r1, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001a5a:	4606      	mov	r6, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001a5c:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001a60:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001a64:	0722      	lsls	r2, r4, #28
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001a66:	460d      	mov	r5, r1
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001a68:	d508      	bpl.n	8001a7c <otg_epout_handler+0x2c>
 8001a6a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001a6e:	071b      	lsls	r3, r3, #28
 8001a70:	d504      	bpl.n	8001a7c <otg_epout_handler+0x2c>
    _usb_isr_invoke_setup_cb(usbp, ep);
 8001a72:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001a7c:	07e2      	lsls	r2, r4, #31
 8001a7e:	d531      	bpl.n	8001ae4 <otg_epout_handler+0x94>
 8001a80:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001a84:	07db      	lsls	r3, r3, #31
 8001a86:	d52d      	bpl.n	8001ae4 <otg_epout_handler+0x94>
    osp = usbp->epc[ep]->out_state;
 8001a88:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8001a8c:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001a8e:	b95d      	cbnz	r5, 8001aa8 <otg_epout_handler+0x58>
    osp = usbp->epc[ep]->out_state;
 8001a90:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001a92:	8a48      	ldrh	r0, [r1, #18]
 8001a94:	6854      	ldr	r4, [r2, #4]
 8001a96:	fbb4 f3f0 	udiv	r3, r4, r0
 8001a9a:	fb00 4313 	mls	r3, r0, r3, r4
 8001a9e:	b91b      	cbnz	r3, 8001aa8 <otg_epout_handler+0x58>
          (osp->rxsize < osp->totsize)) {
 8001aa0:	6810      	ldr	r0, [r2, #0]
 8001aa2:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d30d      	bcc.n	8001ac4 <otg_epout_handler+0x74>
    _usb_isr_invoke_out_cb(usbp, ep);
 8001aa8:	8973      	ldrh	r3, [r6, #10]
 8001aaa:	68cc      	ldr	r4, [r1, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	40aa      	lsls	r2, r5
 8001ab0:	ea23 0302 	bic.w	r3, r3, r2
 8001ab4:	8173      	strh	r3, [r6, #10]
 8001ab6:	b1ac      	cbz	r4, 8001ae4 <otg_epout_handler+0x94>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4630      	mov	r0, r6
 8001abc:	4623      	mov	r3, r4
}
 8001abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8001ac2:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 8001ac4:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 8001ac6:	e9c2 3500 	strd	r3, r5, [r2]
 8001aca:	2320      	movs	r3, #32
 8001acc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001ad0:	f7ff fdee 	bl	80016b0 <_dbg_check_lock_from_isr>
        usb_lld_start_out(usbp, ep);
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f7ff ff7a 	bl	80019d0 <usb_lld_start_out>
  _dbg_check_unlock_from_isr();
 8001adc:	f7ff fdd0 	bl	8001680 <_dbg_check_unlock_from_isr>
 8001ae0:	f385 8811 	msr	BASEPRI, r5
}
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001af0 <otg_txfifo_handler>:
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001af0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 8001af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f8d0 e06c 	ldr.w	lr, [r0, #108]	; 0x6c
 8001afe:	695e      	ldr	r6, [r3, #20]
 8001b00:	e9d6 2000 	ldrd	r2, r0, [r6]
 8001b04:	4282      	cmp	r2, r0
 8001b06:	d932      	bls.n	8001b6e <otg_txfifo_handler+0x7e>
 8001b08:	1c4d      	adds	r5, r1, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8001b0a:	8a1f      	ldrh	r7, [r3, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8001b0c:	eb0e 3505 	add.w	r5, lr, r5, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8001b10:	eb0e 1c41 	add.w	ip, lr, r1, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8001b14:	1a10      	subs	r0, r2, r0
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8001b16:	f8dc 3918 	ldr.w	r3, [ip, #2328]	; 0x918
    if (n > usbp->epc[ep]->in_maxsize)
 8001b1a:	4287      	cmp	r7, r0
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8001b1c:	b29b      	uxth	r3, r3
    if (n > usbp->epc[ep]->in_maxsize)
 8001b1e:	d208      	bcs.n	8001b32 <otg_txfifo_handler+0x42>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8001b20:	ebb7 0f83 	cmp.w	r7, r3, lsl #2
 8001b24:	d830      	bhi.n	8001b88 <otg_txfifo_handler+0x98>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8001b26:	f8d6 8008 	ldr.w	r8, [r6, #8]
  osalDbgAssert(n > 0, "is zero");
 8001b2a:	bb5f      	cbnz	r7, 8001b84 <otg_txfifo_handler+0x94>
 8001b2c:	4818      	ldr	r0, [pc, #96]	; (8001b90 <otg_txfifo_handler+0xa0>)
 8001b2e:	f7ff fc5f 	bl	80013f0 <chSysHalt>
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8001b32:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8001b36:	d827      	bhi.n	8001b88 <otg_txfifo_handler+0x98>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8001b38:	f8d6 8008 	ldr.w	r8, [r6, #8]
    *fifop = *((uint32_t *)buf);
 8001b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001b40:	602b      	str	r3, [r5, #0]
    if (n <= 4) {
 8001b42:	2804      	cmp	r0, #4
 8001b44:	d90a      	bls.n	8001b5c <otg_txfifo_handler+0x6c>
 8001b46:	1f44      	subs	r4, r0, #5
 8001b48:	f024 0403 	bic.w	r4, r4, #3
 8001b4c:	3404      	adds	r4, #4
 8001b4e:	4444      	add	r4, r8
 8001b50:	4643      	mov	r3, r8
    *fifop = *((uint32_t *)buf);
 8001b52:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001b56:	602a      	str	r2, [r5, #0]
    if (n <= 4) {
 8001b58:	429c      	cmp	r4, r3
 8001b5a:	d1fa      	bne.n	8001b52 <otg_txfifo_handler+0x62>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001b5c:	e9d6 2300 	ldrd	r2, r3, [r6]
    usbp->epc[ep]->in_state->txbuf += n;
 8001b60:	eb08 0400 	add.w	r4, r8, r0
    usbp->epc[ep]->in_state->txcnt += n;
 8001b64:	4418      	add	r0, r3
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001b66:	4282      	cmp	r2, r0
    usbp->epc[ep]->in_state->txcnt += n;
 8001b68:	e9c6 0401 	strd	r0, r4, [r6, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001b6c:	d8d2      	bhi.n	8001b14 <otg_txfifo_handler+0x24>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 8001b6e:	f8de 3834 	ldr.w	r3, [lr, #2100]	; 0x834
 8001b72:	2001      	movs	r0, #1
 8001b74:	fa00 f101 	lsl.w	r1, r0, r1
 8001b78:	ea23 0301 	bic.w	r3, r3, r1
 8001b7c:	f8ce 3834 	str.w	r3, [lr, #2100]	; 0x834
}
 8001b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8001b84:	4638      	mov	r0, r7
 8001b86:	e7d9      	b.n	8001b3c <otg_txfifo_handler+0x4c>
      return false;
 8001b88:	2000      	movs	r0, #0
}
 8001b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b8e:	bf00      	nop
 8001b90:	08009d44 	.word	0x08009d44
	...

08001ba0 <otg_epin_handler>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001ba4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001ba6:	eb06 1341 	add.w	r3, r6, r1, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001baa:	4607      	mov	r7, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001bac:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001bb0:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001bb4:	07e3      	lsls	r3, r4, #31
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001bb6:	460d      	mov	r5, r1
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001bb8:	d503      	bpl.n	8001bc2 <otg_epin_handler+0x22>
 8001bba:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8001bbe:	07da      	lsls	r2, r3, #31
 8001bc0:	d409      	bmi.n	8001bd6 <otg_epin_handler+0x36>
  if ((epint & DIEPINT_TXFE) &&
 8001bc2:	0623      	lsls	r3, r4, #24
 8001bc4:	d505      	bpl.n	8001bd2 <otg_epin_handler+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001bc6:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001bca:	2301      	movs	r3, #1
 8001bcc:	40ab      	lsls	r3, r5
  if ((epint & DIEPINT_TXFE) &&
 8001bce:	4213      	tst	r3, r2
 8001bd0:	d119      	bne.n	8001c06 <otg_epin_handler+0x66>
}
 8001bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001bd6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001bda:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001bde:	f8dc 3014 	ldr.w	r3, [ip, #20]
    if (isp->txsize < isp->totsize) {
 8001be2:	f8d3 e000 	ldr.w	lr, [r3]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4596      	cmp	lr, r2
 8001bea:	d312      	bcc.n	8001c12 <otg_epin_handler+0x72>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001bec:	8903      	ldrh	r3, [r0, #8]
 8001bee:	f8dc 8008 	ldr.w	r8, [ip, #8]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	408a      	lsls	r2, r1
 8001bf6:	ea23 0302 	bic.w	r3, r3, r2
 8001bfa:	8103      	strh	r3, [r0, #8]
 8001bfc:	f1b8 0f00 	cmp.w	r8, #0
 8001c00:	d0df      	beq.n	8001bc2 <otg_epin_handler+0x22>
 8001c02:	47c0      	blx	r8
 8001c04:	e7dd      	b.n	8001bc2 <otg_epin_handler+0x22>
    otg_txfifo_handler(usbp, ep);
 8001c06:	4629      	mov	r1, r5
 8001c08:	4638      	mov	r0, r7
}
 8001c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    otg_txfifo_handler(usbp, ep);
 8001c0e:	f7ff bf6f 	b.w	8001af0 <otg_txfifo_handler>
      isp->txsize = isp->totsize - isp->txsize;
 8001c12:	eba2 020e 	sub.w	r2, r2, lr
      isp->txcnt  = 0;
 8001c16:	f04f 0800 	mov.w	r8, #0
 8001c1a:	e9c3 2800 	strd	r2, r8, [r3]
 8001c1e:	2320      	movs	r3, #32
 8001c20:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8001c24:	f7ff fd44 	bl	80016b0 <_dbg_check_lock_from_isr>
      usb_lld_start_in(usbp, ep);
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	f7ff fe78 	bl	8001920 <usb_lld_start_in>
  _dbg_check_unlock_from_isr();
 8001c30:	f7ff fd26 	bl	8001680 <_dbg_check_unlock_from_isr>
 8001c34:	f388 8811 	msr	BASEPRI, r8
 8001c38:	e7c3      	b.n	8001bc2 <otg_epin_handler+0x22>
 8001c3a:	bf00      	nop
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <usb_lld_serve_interrupt>:
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 8001c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001c44:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  sts  = otgp->GINTSTS;
 8001c46:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 8001c48:	69b3      	ldr	r3, [r6, #24]
 8001c4a:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 8001c4c:	f415 5980 	ands.w	r9, r5, #4096	; 0x1000
static void usb_lld_serve_interrupt(USBDriver *usbp) {
 8001c50:	4604      	mov	r4, r0
  otgp->GINTSTS = sts;
 8001c52:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8001c54:	f040 810d 	bne.w	8001e72 <usb_lld_serve_interrupt+0x232>
  if (sts & GINTSTS_WKUPINT) {
 8001c58:	2d00      	cmp	r5, #0
 8001c5a:	db4b      	blt.n	8001cf4 <usb_lld_serve_interrupt+0xb4>
  if (sts & GINTSTS_USBSUSP) {
 8001c5c:	052a      	lsls	r2, r5, #20
 8001c5e:	f100 80cb 	bmi.w	8001df8 <usb_lld_serve_interrupt+0x1b8>
  if (sts & GINTSTS_ENUMDNE) {
 8001c62:	04ab      	lsls	r3, r5, #18
 8001c64:	d50c      	bpl.n	8001c80 <usb_lld_serve_interrupt+0x40>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8001c66:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001c6a:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8001c6e:	68f3      	ldr	r3, [r6, #12]
 8001c70:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001c74:	bf0c      	ite	eq
 8001c76:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8001c7a:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8001c7e:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8001c80:	072f      	lsls	r7, r5, #28
 8001c82:	d504      	bpl.n	8001c8e <usb_lld_serve_interrupt+0x4e>
    _usb_isr_invoke_sof_cb(usbp);
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	b10b      	cbz	r3, 8001c8e <usb_lld_serve_interrupt+0x4e>
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8001c8e:	02e8      	lsls	r0, r5, #11
 8001c90:	d46c      	bmi.n	8001d6c <usb_lld_serve_interrupt+0x12c>
  if (sts & GINTSTS_IISOOXFR) {
 8001c92:	02aa      	lsls	r2, r5, #10
 8001c94:	f100 80c1 	bmi.w	8001e1a <usb_lld_serve_interrupt+0x1da>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8001c98:	06eb      	lsls	r3, r5, #27
 8001c9a:	d443      	bmi.n	8001d24 <usb_lld_serve_interrupt+0xe4>
  if (sts & GINTSTS_OEPINT) {
 8001c9c:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 8001c9e:	f8d6 6818 	ldr.w	r6, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8001ca2:	d511      	bpl.n	8001cc8 <usb_lld_serve_interrupt+0x88>
    if (src & (1 << 16))
 8001ca4:	03f2      	lsls	r2, r6, #15
 8001ca6:	f100 81c9 	bmi.w	800203c <usb_lld_serve_interrupt+0x3fc>
    if (src & (1 << 17))
 8001caa:	03b3      	lsls	r3, r6, #14
 8001cac:	f100 81b3 	bmi.w	8002016 <usb_lld_serve_interrupt+0x3d6>
    if (src & (1 << 18))
 8001cb0:	0377      	lsls	r7, r6, #13
 8001cb2:	f100 81b7 	bmi.w	8002024 <usb_lld_serve_interrupt+0x3e4>
    if (src & (1 << 19))
 8001cb6:	0330      	lsls	r0, r6, #12
 8001cb8:	f100 81bb 	bmi.w	8002032 <usb_lld_serve_interrupt+0x3f2>
    if (src & (1 << 20))
 8001cbc:	02f1      	lsls	r1, r6, #11
 8001cbe:	f100 81a5 	bmi.w	800200c <usb_lld_serve_interrupt+0x3cc>
    if (src & (1 << 21))
 8001cc2:	02b2      	lsls	r2, r6, #10
 8001cc4:	f100 8153 	bmi.w	8001f6e <usb_lld_serve_interrupt+0x32e>
  if (sts & GINTSTS_IEPINT) {
 8001cc8:	036b      	lsls	r3, r5, #13
 8001cca:	d511      	bpl.n	8001cf0 <usb_lld_serve_interrupt+0xb0>
    if (src & (1 << 0))
 8001ccc:	07f7      	lsls	r7, r6, #31
 8001cce:	f100 8198 	bmi.w	8002002 <usb_lld_serve_interrupt+0x3c2>
    if (src & (1 << 1))
 8001cd2:	07b5      	lsls	r5, r6, #30
 8001cd4:	f100 8190 	bmi.w	8001ff8 <usb_lld_serve_interrupt+0x3b8>
    if (src & (1 << 2))
 8001cd8:	0770      	lsls	r0, r6, #29
 8001cda:	f100 8188 	bmi.w	8001fee <usb_lld_serve_interrupt+0x3ae>
    if (src & (1 << 3))
 8001cde:	0731      	lsls	r1, r6, #28
 8001ce0:	f100 8180 	bmi.w	8001fe4 <usb_lld_serve_interrupt+0x3a4>
    if (src & (1 << 4))
 8001ce4:	06f2      	lsls	r2, r6, #27
 8001ce6:	f100 8178 	bmi.w	8001fda <usb_lld_serve_interrupt+0x39a>
    if (src & (1 << 5))
 8001cea:	06b3      	lsls	r3, r6, #26
 8001cec:	f100 8132 	bmi.w	8001f54 <usb_lld_serve_interrupt+0x314>
}
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8001cf4:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8001cf8:	0799      	lsls	r1, r3, #30
 8001cfa:	f040 8131 	bne.w	8001f60 <usb_lld_serve_interrupt+0x320>
    otgp->DCTL &= ~DCTL_RWUSIG;
 8001cfe:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001d02:	6862      	ldr	r2, [r4, #4]
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
  usbp->state = usbp->saved_state;
 8001d0c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8001d10:	7023      	strb	r3, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0a1      	beq.n	8001c5c <usb_lld_serve_interrupt+0x1c>
 8001d18:	2105      	movs	r1, #5
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4798      	blx	r3
  if (sts & GINTSTS_USBSUSP) {
 8001d1e:	052a      	lsls	r2, r5, #20
 8001d20:	d59f      	bpl.n	8001c62 <usb_lld_serve_interrupt+0x22>
 8001d22:	e069      	b.n	8001df8 <usb_lld_serve_interrupt+0x1b8>
  sts = usbp->otg->GRXSTSP;
 8001d24:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001d26:	6a02      	ldr	r2, [r0, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8001d28:	f402 13f0 	and.w	r3, r2, #1966080	; 0x1e0000
 8001d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8001d30:	f3c2 110a 	ubfx	r1, r2, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8001d34:	f002 020f 	and.w	r2, r2, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8001d38:	f000 8124 	beq.w	8001f84 <usb_lld_serve_interrupt+0x344>
 8001d3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d40:	d1ac      	bne.n	8001c9c <usb_lld_serve_interrupt+0x5c>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8001d42:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d46:	68d3      	ldr	r3, [r2, #12]
 8001d48:	6a1f      	ldr	r7, [r3, #32]
  while (i < n) {
 8001d4a:	2900      	cmp	r1, #0
 8001d4c:	d0a6      	beq.n	8001c9c <usb_lld_serve_interrupt+0x5c>
  uint32_t w = 0;
 8001d4e:	2200      	movs	r2, #0
      w = *fifop;
 8001d50:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  size_t i = 0;
 8001d54:	4613      	mov	r3, r2
    if ((i & 3) == 0){
 8001d56:	f013 0f03 	tst.w	r3, #3
      w = *fifop;
 8001d5a:	bf08      	it	eq
 8001d5c:	6802      	ldreq	r2, [r0, #0]
    if (i < max) {
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	f240 8171 	bls.w	8002046 <usb_lld_serve_interrupt+0x406>
    i++;
 8001d64:	3301      	adds	r3, #1
  while (i < n) {
 8001d66:	4299      	cmp	r1, r3
 8001d68:	d1f5      	bne.n	8001d56 <usb_lld_serve_interrupt+0x116>
 8001d6a:	e797      	b.n	8001c9c <usb_lld_serve_interrupt+0x5c>
  stm32_otg_t *otgp = usbp->otg;
 8001d6c:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8001d70:	2700      	movs	r7, #0
      _usb_isr_invoke_in_cb(usbp, ep);
 8001d72:	f04f 0801 	mov.w	r8, #1
 8001d76:	e006      	b.n	8001d86 <usb_lld_serve_interrupt+0x146>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8001d78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001d7a:	3701      	adds	r7, #1
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	b2ff      	uxtb	r7, r7
 8001d80:	429f      	cmp	r7, r3
 8001d82:	46b9      	mov	r9, r7
 8001d84:	d885      	bhi.n	8001c92 <usb_lld_serve_interrupt+0x52>
 8001d86:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8001d8a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001d8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001d92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d96:	d1ef      	bne.n	8001d78 <usb_lld_serve_interrupt+0x138>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8001d98:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	daeb      	bge.n	8001d78 <usb_lld_serve_interrupt+0x138>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8001da0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001da4:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8001da8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8001dac:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dbfb      	blt.n	8001dac <usb_lld_serve_interrupt+0x16c>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001db4:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8001db8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001dba:	f049 0320 	orr.w	r3, r9, #32
 8001dbe:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001dc0:	6913      	ldr	r3, [r2, #16]
 8001dc2:	0699      	lsls	r1, r3, #26
 8001dc4:	d4fc      	bmi.n	8001dc0 <usb_lld_serve_interrupt+0x180>
 * @xclass
 */
#if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8001dc6:	2012      	movs	r0, #18
 8001dc8:	f7ff fb02 	bl	80013d0 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001dcc:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8001dd0:	8922      	ldrh	r2, [r4, #8]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	fa08 f307 	lsl.w	r3, r8, r7
 8001dd8:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8001ddc:	ea22 0303 	bic.w	r3, r2, r3
 8001de0:	8123      	strh	r3, [r4, #8]
 8001de2:	f1b9 0f00 	cmp.w	r9, #0
 8001de6:	d002      	beq.n	8001dee <usb_lld_serve_interrupt+0x1ae>
 8001de8:	4639      	mov	r1, r7
 8001dea:	4620      	mov	r0, r4
 8001dec:	47c8      	blx	r9
    otg_txfifo_handler(usbp, ep);
 8001dee:	4639      	mov	r1, r7
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff fe7d 	bl	8001af0 <otg_txfifo_handler>
 8001df6:	e7bf      	b.n	8001d78 <usb_lld_serve_interrupt+0x138>
  usbp->saved_state = usbp->state;
 8001df8:	7822      	ldrb	r2, [r4, #0]
 8001dfa:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001dfe:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 8001e00:	2205      	movs	r2, #5
 8001e02:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f43f af2b 	beq.w	8001c62 <usb_lld_serve_interrupt+0x22>
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4798      	blx	r3
  if (sts & GINTSTS_ENUMDNE) {
 8001e12:	04ab      	lsls	r3, r5, #18
 8001e14:	f57f af34 	bpl.w	8001c80 <usb_lld_serve_interrupt+0x40>
 8001e18:	e725      	b.n	8001c66 <usb_lld_serve_interrupt+0x26>
  stm32_otg_t *otgp = usbp->otg;
 8001e1a:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8001e1e:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8001e20:	f04f 0901 	mov.w	r9, #1
 8001e24:	e006      	b.n	8001e34 <usb_lld_serve_interrupt+0x1f4>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8001e26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001e28:	3701      	adds	r7, #1
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	b2ff      	uxtb	r7, r7
 8001e2e:	429f      	cmp	r7, r3
 8001e30:	f63f af32 	bhi.w	8001c98 <usb_lld_serve_interrupt+0x58>
 8001e34:	eb08 1247 	add.w	r2, r8, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8001e38:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001e3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e44:	d1ef      	bne.n	8001e26 <usb_lld_serve_interrupt+0x1e6>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8001e46:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	daeb      	bge.n	8001e26 <usb_lld_serve_interrupt+0x1e6>
      _usb_isr_invoke_out_cb(usbp, ep);
 8001e4e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8001e52:	8962      	ldrh	r2, [r4, #10]
 8001e54:	68d9      	ldr	r1, [r3, #12]
 8001e56:	fa09 f307 	lsl.w	r3, r9, r7
 8001e5a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8001e5e:	ea22 0303 	bic.w	r3, r2, r3
 8001e62:	8163      	strh	r3, [r4, #10]
 8001e64:	f1ba 0f00 	cmp.w	sl, #0
 8001e68:	d0dd      	beq.n	8001e26 <usb_lld_serve_interrupt+0x1e6>
 8001e6a:	4639      	mov	r1, r7
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	47d0      	blx	sl
 8001e70:	e7d9      	b.n	8001e26 <usb_lld_serve_interrupt+0x1e6>
  usbp->status        = 0;
 8001e72:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 8001e74:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001e76:	2220      	movs	r2, #32
 8001e78:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 8001e7a:	6643      	str	r3, [r0, #100]	; 0x64
  usbp->receiving     = 0;
 8001e7c:	e9c0 3302 	strd	r3, r3, [r0, #8]
    usbp->epc[i] = NULL;
 8001e80:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e84:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001e88:	6203      	str	r3, [r0, #32]
  usbp->ep0state = USB_EP0_STP_WAITING;
 8001e8a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8001e8e:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001e90:	6935      	ldr	r5, [r6, #16]
 8001e92:	f015 0520 	ands.w	r5, r5, #32
 8001e96:	d1fb      	bne.n	8001e90 <usb_lld_serve_interrupt+0x250>
 8001e98:	2012      	movs	r0, #18
 8001e9a:	f7ff fa99 	bl	80013d0 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001e9e:	6f27      	ldr	r7, [r4, #112]	; 0x70
  otgp->DIEPEMPMSK = 0;
 8001ea0:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
 8001ea4:	68b8      	ldr	r0, [r7, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001ea6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001eaa:	3001      	adds	r0, #1
 8001eac:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8001eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001ebc:	3501      	adds	r5, #1
 8001ebe:	42a8      	cmp	r0, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8001ec0:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8001ec4:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001ec8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8001ecc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001ed0:	d1f2      	bne.n	8001eb8 <usb_lld_serve_interrupt+0x278>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6763      	str	r3, [r4, #116]	; 0x74
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001eda:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8001edc:	2210      	movs	r2, #16
 8001ede:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8001ee0:	691d      	ldr	r5, [r3, #16]
 8001ee2:	f015 0510 	ands.w	r5, r5, #16
 8001ee6:	d1fb      	bne.n	8001ee0 <usb_lld_serve_interrupt+0x2a0>
 8001ee8:	2012      	movs	r0, #18
 8001eea:	f7ff fa71 	bl	80013d0 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8001eee:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 8001ef2:	6f21      	ldr	r1, [r4, #112]	; 0x70
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8001ef4:	4a56      	ldr	r2, [pc, #344]	; (8002050 <usb_lld_serve_interrupt+0x410>)
  usbp->epc[0] = &ep0config;
 8001ef6:	4857      	ldr	r0, [pc, #348]	; (8002054 <usb_lld_serve_interrupt+0x414>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8001ef8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001efc:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8001f00:	69b3      	ldr	r3, [r6, #24]
 8001f02:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8001f12:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8001f16:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  usbp->epc[0] = &ep0config;
 8001f1a:	60e0      	str	r0, [r4, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8001f1c:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8001f20:	f8c6 2b00 	str.w	r2, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8001f24:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8001f28:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
  next = usbp->pmnext;
 8001f2c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  usbp->pmnext += size;
 8001f2e:	f103 0210 	add.w	r2, r3, #16
 8001f32:	6762      	str	r2, [r4, #116]	; 0x74
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8001f34:	6849      	ldr	r1, [r1, #4]
 8001f36:	428a      	cmp	r2, r1
 8001f38:	d821      	bhi.n	8001f7e <usb_lld_serve_interrupt+0x33e>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8001f3a:	6862      	ldr	r2, [r4, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8001f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	f43f aed3 	beq.w	8001cf0 <usb_lld_serve_interrupt+0xb0>
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	4620      	mov	r0, r4
}
 8001f4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f52:	4710      	bx	r2
      otg_epin_handler(usbp, 5);
 8001f54:	4620      	mov	r0, r4
 8001f56:	2105      	movs	r1, #5
}
 8001f58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      otg_epin_handler(usbp, 5);
 8001f5c:	f7ff be20 	b.w	8001ba0 <otg_epin_handler>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8001f60:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8001f64:	f023 0303 	bic.w	r3, r3, #3
 8001f68:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8001f6c:	e6c7      	b.n	8001cfe <usb_lld_serve_interrupt+0xbe>
      otg_epout_handler(usbp, 5);
 8001f6e:	2105      	movs	r1, #5
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff fd6d 	bl	8001a50 <otg_epout_handler>
  if (sts & GINTSTS_IEPINT) {
 8001f76:	036b      	lsls	r3, r5, #13
 8001f78:	f57f aeba 	bpl.w	8001cf0 <usb_lld_serve_interrupt+0xb0>
 8001f7c:	e6a6      	b.n	8001ccc <usb_lld_serve_interrupt+0x8c>
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8001f7e:	4836      	ldr	r0, [pc, #216]	; (8002058 <usb_lld_serve_interrupt+0x418>)
 8001f80:	f7ff fa36 	bl	80013f0 <chSysHalt>
 8001f84:	eb04 0882 	add.w	r8, r4, r2, lsl #2
                            usbp->epc[ep]->out_state->rxbuf,
 8001f88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001f8c:	f8d3 c018 	ldr.w	ip, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8001f90:	e9dc 3701 	ldrd	r3, r7, [ip, #4]
 8001f94:	f8dc 2000 	ldr.w	r2, [ip]
 8001f98:	eba2 0e03 	sub.w	lr, r2, r3
  while (i < n) {
 8001f9c:	b1c1      	cbz	r1, 8001fd0 <usb_lld_serve_interrupt+0x390>
  uint32_t w = 0;
 8001f9e:	f04f 0c00 	mov.w	ip, #0
      w = *fifop;
 8001fa2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  size_t i = 0;
 8001fa6:	4663      	mov	r3, ip
    if ((i & 3) == 0){
 8001fa8:	079a      	lsls	r2, r3, #30
      w = *fifop;
 8001faa:	bf08      	it	eq
 8001fac:	f8d0 c000 	ldreq.w	ip, [r0]
    if (i < max) {
 8001fb0:	459e      	cmp	lr, r3
 8001fb2:	d904      	bls.n	8001fbe <usb_lld_serve_interrupt+0x37e>
      *buf++ = (uint8_t)w;
 8001fb4:	f887 c000 	strb.w	ip, [r7]
      w >>= 8;
 8001fb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
      *buf++ = (uint8_t)w;
 8001fbc:	3701      	adds	r7, #1
    i++;
 8001fbe:	3301      	adds	r3, #1
  while (i < n) {
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	d1f1      	bne.n	8001fa8 <usb_lld_serve_interrupt+0x368>
 8001fc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001fc8:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8001fcc:	e9dc 3701 	ldrd	r3, r7, [ip, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8001fd0:	440f      	add	r7, r1
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8001fd2:	440b      	add	r3, r1
 8001fd4:	e9cc 3701 	strd	r3, r7, [ip, #4]
 8001fd8:	e660      	b.n	8001c9c <usb_lld_serve_interrupt+0x5c>
      otg_epin_handler(usbp, 4);
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff fddf 	bl	8001ba0 <otg_epin_handler>
 8001fe2:	e682      	b.n	8001cea <usb_lld_serve_interrupt+0xaa>
      otg_epin_handler(usbp, 3);
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fdda 	bl	8001ba0 <otg_epin_handler>
 8001fec:	e67a      	b.n	8001ce4 <usb_lld_serve_interrupt+0xa4>
      otg_epin_handler(usbp, 2);
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff fdd5 	bl	8001ba0 <otg_epin_handler>
 8001ff6:	e672      	b.n	8001cde <usb_lld_serve_interrupt+0x9e>
      otg_epin_handler(usbp, 1);
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff fdd0 	bl	8001ba0 <otg_epin_handler>
 8002000:	e66a      	b.n	8001cd8 <usb_lld_serve_interrupt+0x98>
      otg_epin_handler(usbp, 0);
 8002002:	2100      	movs	r1, #0
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff fdcb 	bl	8001ba0 <otg_epin_handler>
 800200a:	e662      	b.n	8001cd2 <usb_lld_serve_interrupt+0x92>
      otg_epout_handler(usbp, 4);
 800200c:	2104      	movs	r1, #4
 800200e:	4620      	mov	r0, r4
 8002010:	f7ff fd1e 	bl	8001a50 <otg_epout_handler>
 8002014:	e655      	b.n	8001cc2 <usb_lld_serve_interrupt+0x82>
      otg_epout_handler(usbp, 1);
 8002016:	2101      	movs	r1, #1
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fd19 	bl	8001a50 <otg_epout_handler>
    if (src & (1 << 18))
 800201e:	0377      	lsls	r7, r6, #13
 8002020:	f57f ae49 	bpl.w	8001cb6 <usb_lld_serve_interrupt+0x76>
      otg_epout_handler(usbp, 2);
 8002024:	4620      	mov	r0, r4
 8002026:	2102      	movs	r1, #2
 8002028:	f7ff fd12 	bl	8001a50 <otg_epout_handler>
    if (src & (1 << 19))
 800202c:	0330      	lsls	r0, r6, #12
 800202e:	f57f ae45 	bpl.w	8001cbc <usb_lld_serve_interrupt+0x7c>
      otg_epout_handler(usbp, 3);
 8002032:	2103      	movs	r1, #3
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fd0b 	bl	8001a50 <otg_epout_handler>
 800203a:	e63f      	b.n	8001cbc <usb_lld_serve_interrupt+0x7c>
      otg_epout_handler(usbp, 0);
 800203c:	2100      	movs	r1, #0
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff fd06 	bl	8001a50 <otg_epout_handler>
 8002044:	e631      	b.n	8001caa <usb_lld_serve_interrupt+0x6a>
      *buf++ = (uint8_t)w;
 8002046:	703a      	strb	r2, [r7, #0]
      w >>= 8;
 8002048:	0a12      	lsrs	r2, r2, #8
      *buf++ = (uint8_t)w;
 800204a:	3701      	adds	r7, #1
 800204c:	e68a      	b.n	8001d64 <usb_lld_serve_interrupt+0x124>
 800204e:	bf00      	nop
 8002050:	10008040 	.word	0x10008040
 8002054:	08009fa4 	.word	0x08009fa4
 8002058:	08009d18 	.word	0x08009d18
 800205c:	00000000 	.word	0x00000000

08002060 <_pal_lld_setgroupmode>:
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002060:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8002064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8002068:	09d2      	lsrs	r2, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800206a:	4667      	mov	r7, ip
  uint32_t bit     = 0;
 800206c:	2400      	movs	r4, #0
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 800206e:	f04f 0901 	mov.w	r9, #1
      m2 = 3 << (bit * 2);
 8002072:	f04f 0803 	mov.w	r8, #3
      m4 = 15 << ((bit & 7) * 4);
 8002076:	f04f 0e0f 	mov.w	lr, #15
 800207a:	e00f      	b.n	800209c <_pal_lld_setgroupmode+0x3c>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800207c:	f8d0 a000 	ldr.w	sl, [r0]
 8002080:	ea03 030a 	and.w	r3, r3, sl
 8002084:	433b      	orrs	r3, r7
        if (bit < 8)
 8002086:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8002088:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 800208a:	d835      	bhi.n	80020f8 <_pal_lld_setgroupmode+0x98>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800208c:	6a03      	ldr	r3, [r0, #32]
 800208e:	401e      	ands	r6, r3
 8002090:	4335      	orrs	r5, r6
 8002092:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8002094:	0849      	lsrs	r1, r1, #1
 8002096:	d02d      	beq.n	80020f4 <_pal_lld_setgroupmode+0x94>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8002098:	00bf      	lsls	r7, r7, #2
    bit++;
 800209a:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 800209c:	07cb      	lsls	r3, r1, #31
 800209e:	d5f9      	bpl.n	8002094 <_pal_lld_setgroupmode+0x34>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80020a0:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80020a2:	fa09 f504 	lsl.w	r5, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80020a6:	ea23 0305 	bic.w	r3, r3, r5
 80020aa:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80020ac:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80020ae:	6885      	ldr	r5, [r0, #8]
      m2 = 3 << (bit * 2);
 80020b0:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401d      	ands	r5, r3
 80020b8:	6085      	str	r5, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80020ba:	68c6      	ldr	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80020bc:	f004 0507 	and.w	r5, r4, #7
 80020c0:	00ad      	lsls	r5, r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80020c2:	401e      	ands	r6, r3
      m4 = 15 << ((bit & 7) * 4);
 80020c4:	fa0e fa05 	lsl.w	sl, lr, r5
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80020c8:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80020cc:	60c6      	str	r6, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 80020ce:	fa02 f505 	lsl.w	r5, r2, r5
 80020d2:	ea6f 060a 	mvn.w	r6, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80020d6:	d1d1      	bne.n	800207c <_pal_lld_setgroupmode+0x1c>
        if (bit < 8)
 80020d8:	2c07      	cmp	r4, #7
 80020da:	d812      	bhi.n	8002102 <_pal_lld_setgroupmode+0xa2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80020dc:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80020e0:	ea06 060a 	and.w	r6, r6, sl
 80020e4:	4335      	orrs	r5, r6
 80020e6:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 80020e8:	6805      	ldr	r5, [r0, #0]
 80020ea:	402b      	ands	r3, r5
 80020ec:	433b      	orrs	r3, r7
    if (!mask)
 80020ee:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 80020f0:	6003      	str	r3, [r0, #0]
    if (!mask)
 80020f2:	d1d1      	bne.n	8002098 <_pal_lld_setgroupmode+0x38>
  }
}
 80020f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80020f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020fa:	401e      	ands	r6, r3
 80020fc:	4335      	orrs	r5, r6
 80020fe:	6245      	str	r5, [r0, #36]	; 0x24
 8002100:	e7c8      	b.n	8002094 <_pal_lld_setgroupmode+0x34>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002102:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8002106:	ea06 060a 	and.w	r6, r6, sl
 800210a:	4335      	orrs	r5, r6
 800210c:	6245      	str	r5, [r0, #36]	; 0x24
 800210e:	e7eb      	b.n	80020e8 <_pal_lld_setgroupmode+0x88>

08002110 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8002110:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8002112:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	f023 031f 	bic.w	r3, r3, #31
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f013 0301 	ands.w	r3, r3, #1
 8002124:	d1fb      	bne.n	800211e <adc_lld_stop_conversion+0xe>
 8002126:	7a25      	ldrb	r5, [r4, #8]
  adcp->adc->CR1 = 0;
 8002128:	6a82      	ldr	r2, [r0, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800212a:	6860      	ldr	r0, [r4, #4]
 800212c:	213d      	movs	r1, #61	; 0x3d
 800212e:	40a9      	lsls	r1, r5
 8002130:	6001      	str	r1, [r0, #0]
  adcp->adc->CR1 = 0;
 8002132:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8002134:	6893      	ldr	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002136:	2101      	movs	r1, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8002138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800213c:	6093      	str	r3, [r2, #8]
}
 800213e:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 = ADC_CR2_ADON;
 8002140:	6091      	str	r1, [r2, #8]
}
 8002142:	4770      	bx	lr
	...

08002150 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002150:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002158:	d116      	bne.n	8002188 <adc_lld_serve_rx_interrupt+0x38>
    if (adcp->grpp != NULL) {
 800215a:	6903      	ldr	r3, [r0, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d035      	beq.n	80021cc <adc_lld_serve_rx_interrupt+0x7c>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8002160:	068d      	lsls	r5, r1, #26
 8002162:	d534      	bpl.n	80021ce <adc_lld_serve_rx_interrupt+0x7e>
        _adc_isr_full_code(adcp);
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	2a00      	cmp	r2, #0
 8002168:	d03c      	beq.n	80021e4 <adc_lld_serve_rx_interrupt+0x94>
 800216a:	685d      	ldr	r5, [r3, #4]
 800216c:	b375      	cbz	r5, 80021cc <adc_lld_serve_rx_interrupt+0x7c>
 800216e:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002172:	2a01      	cmp	r2, #1
 8002174:	d959      	bls.n	800222a <adc_lld_serve_rx_interrupt+0xda>
 8002176:	885b      	ldrh	r3, [r3, #2]
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	0054      	lsls	r4, r2, #1
 800217c:	fb04 1103 	mla	r1, r4, r3, r1
 8002180:	462b      	mov	r3, r5
}
 8002182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 8002186:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002188:	f7ff ffc2 	bl	8002110 <adc_lld_stop_conversion>
 800218c:	6923      	ldr	r3, [r4, #16]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d04e      	beq.n	8002232 <adc_lld_serve_rx_interrupt+0xe2>
 8002194:	2205      	movs	r2, #5
 8002196:	7022      	strb	r2, [r4, #0]
 8002198:	2100      	movs	r1, #0
 800219a:	4620      	mov	r0, r4
 800219c:	4798      	blx	r3
 800219e:	7823      	ldrb	r3, [r4, #0]
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	bf04      	itt	eq
 80021a4:	2302      	moveq	r3, #2
 80021a6:	7023      	strbeq	r3, [r4, #0]
 80021a8:	2300      	movs	r3, #0
 80021aa:	6123      	str	r3, [r4, #16]
 80021ac:	2320      	movs	r3, #32
 80021ae:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80021b2:	f7ff fa7d 	bl	80016b0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80021b6:	f104 0014 	add.w	r0, r4, #20
 80021ba:	f04f 31ff 	mov.w	r1, #4294967295
 80021be:	f7ff fa17 	bl	80015f0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80021c2:	f7ff fa5d 	bl	8001680 <_dbg_check_unlock_from_isr>
 80021c6:	2300      	movs	r3, #0
 80021c8:	f383 8811 	msr	BASEPRI, r3
}
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80021ce:	06ca      	lsls	r2, r1, #27
 80021d0:	d5fc      	bpl.n	80021cc <adc_lld_serve_rx_interrupt+0x7c>
        _adc_isr_half_code(adcp);
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f9      	beq.n	80021cc <adc_lld_serve_rx_interrupt+0x7c>
 80021d8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
}
 80021dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
 80021e0:	0852      	lsrs	r2, r2, #1
 80021e2:	4718      	bx	r3
        _adc_isr_full_code(adcp);
 80021e4:	f7ff ff94 	bl	8002110 <adc_lld_stop_conversion>
 80021e8:	6923      	ldr	r3, [r4, #16]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	b1c3      	cbz	r3, 8002220 <adc_lld_serve_rx_interrupt+0xd0>
 80021ee:	2204      	movs	r2, #4
 80021f0:	7022      	strb	r2, [r4, #0]
 80021f2:	4620      	mov	r0, r4
 80021f4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80021f8:	4798      	blx	r3
 80021fa:	7823      	ldrb	r3, [r4, #0]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00f      	beq.n	8002220 <adc_lld_serve_rx_interrupt+0xd0>
 8002200:	2320      	movs	r3, #32
 8002202:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002206:	f7ff fa53 	bl	80016b0 <_dbg_check_lock_from_isr>
 800220a:	f104 0014 	add.w	r0, r4, #20
 800220e:	2100      	movs	r1, #0
 8002210:	f7ff f9ee 	bl	80015f0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8002214:	f7ff fa34 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002218:	2300      	movs	r3, #0
 800221a:	f383 8811 	msr	BASEPRI, r3
}
 800221e:	bd70      	pop	{r4, r5, r6, pc}
        _adc_isr_full_code(adcp);
 8002220:	2202      	movs	r2, #2
 8002222:	2300      	movs	r3, #0
 8002224:	7022      	strb	r2, [r4, #0]
 8002226:	6123      	str	r3, [r4, #16]
 8002228:	e7ea      	b.n	8002200 <adc_lld_serve_rx_interrupt+0xb0>
 800222a:	462b      	mov	r3, r5
}
 800222c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
 8002230:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002232:	2202      	movs	r2, #2
 8002234:	6123      	str	r3, [r4, #16]
 8002236:	7022      	strb	r2, [r4, #0]
 8002238:	e7b8      	b.n	80021ac <adc_lld_serve_rx_interrupt+0x5c>
 800223a:	bf00      	nop
 800223c:	0000      	movs	r0, r0
	...

08002240 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	4605      	mov	r5, r0
 8002246:	460e      	mov	r6, r1
 8002248:	4690      	mov	r8, r2
 800224a:	4699      	mov	r9, r3
  osalDbgCheckClassI();
 800224c:	f7ff f8f8 	bl	8001440 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8002250:	b1c5      	cbz	r5, 8002284 <usbStartTransmitI+0x44>
 8002252:	2e05      	cmp	r6, #5
 8002254:	d816      	bhi.n	8002284 <usbStartTransmitI+0x44>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 8002256:	2401      	movs	r4, #1
 8002258:	40b4      	lsls	r4, r6
 800225a:	8928      	ldrh	r0, [r5, #8]
 800225c:	b2a4      	uxth	r4, r4
 800225e:	ea10 0704 	ands.w	r7, r0, r4
 8002262:	d10f      	bne.n	8002284 <usbStartTransmitI+0x44>
  isp = usbp->epc[ep]->in_state;
 8002264:	eb05 0386 	add.w	r3, r5, r6, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002268:	4304      	orrs	r4, r0
  isp = usbp->epc[ep]->in_state;
 800226a:	68db      	ldr	r3, [r3, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800226c:	812c      	strh	r4, [r5, #8]
  isp = usbp->epc[ep]->in_state;
 800226e:	6958      	ldr	r0, [r3, #20]
  usb_lld_start_in(usbp, ep);
 8002270:	4631      	mov	r1, r6
  isp->txbuf  = buf;
 8002272:	f8c0 8008 	str.w	r8, [r0, #8]
  isp->txcnt  = 0;
 8002276:	e9c0 9700 	strd	r9, r7, [r0]
  usb_lld_start_in(usbp, ep);
 800227a:	4628      	mov	r0, r5
}
 800227c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  usb_lld_start_in(usbp, ep);
 8002280:	f7ff bb4e 	b.w	8001920 <usb_lld_start_in>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8002284:	4801      	ldr	r0, [pc, #4]	; (800228c <usbStartTransmitI+0x4c>)
 8002286:	f7ff f8b3 	bl	80013f0 <chSysHalt>
 800228a:	bf00      	nop
 800228c:	08009dd4 	.word	0x08009dd4

08002290 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002290:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8002292:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8002296:	2914      	cmp	r1, #20
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002298:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800229a:	d02f      	beq.n	80022fc <_usb_ep0out+0x6c>
 800229c:	2915      	cmp	r1, #21
 800229e:	d019      	beq.n	80022d4 <_usb_ep0out+0x44>
 80022a0:	2906      	cmp	r1, #6
 80022a2:	d002      	beq.n	80022aa <_usb_ep0out+0x1a>
  case USB_EP0_STP_WAITING:
  case USB_EP0_IN_TX:
  case USB_EP0_IN_WAITING_TX0:
  case USB_EP0_IN_SENDING_STS:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 80022a4:	481b      	ldr	r0, [pc, #108]	; (8002314 <_usb_ep0out+0x84>)
 80022a6:	f7ff f8a3 	bl	80013f0 <chSysHalt>
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80022aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80022ac:	6845      	ldr	r5, [r0, #4]
 80022ae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80022b2:	682d      	ldr	r5, [r5, #0]
 80022b4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80022b8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80022bc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80022c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80022c4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80022c8:	b105      	cbz	r5, 80022cc <_usb_ep0out+0x3c>
 80022ca:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80022cc:	2306      	movs	r3, #6
 80022ce:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 80022d4:	230b      	movs	r3, #11
 80022d6:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80022da:	2320      	movs	r3, #32
 80022dc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80022e0:	f7ff f9e6 	bl	80016b0 <_dbg_check_lock_from_isr>
    usbStartTransmitI(usbp, 0, NULL, 0);
 80022e4:	2300      	movs	r3, #0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ffa8 	bl	8002240 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 80022f0:	f7ff f9c6 	bl	8001680 <_dbg_check_unlock_from_isr>
 80022f4:	2300      	movs	r3, #0
 80022f6:	f383 8811 	msr	BASEPRI, r3
}
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80022fc:	68c3      	ldr	r3, [r0, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <_usb_ep0out+0x42>
    if (usbp->ep0endcb != NULL) {
 8002306:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002308:	b103      	cbz	r3, 800230c <_usb_ep0out+0x7c>
      usbp->ep0endcb(usbp);
 800230a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 800230c:	2300      	movs	r3, #0
 800230e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	08009e30 	.word	0x08009e30
	...

08002320 <usbStartReceiveI>:
                      uint8_t *buf, size_t n) {
 8002320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002324:	4605      	mov	r5, r0
 8002326:	460e      	mov	r6, r1
 8002328:	4690      	mov	r8, r2
 800232a:	4699      	mov	r9, r3
  osalDbgCheckClassI();
 800232c:	f7ff f888 	bl	8001440 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8002330:	b1c5      	cbz	r5, 8002364 <usbStartReceiveI+0x44>
 8002332:	2e05      	cmp	r6, #5
 8002334:	d816      	bhi.n	8002364 <usbStartReceiveI+0x44>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 8002336:	2401      	movs	r4, #1
 8002338:	40b4      	lsls	r4, r6
 800233a:	8968      	ldrh	r0, [r5, #10]
 800233c:	b2a4      	uxth	r4, r4
 800233e:	ea10 0704 	ands.w	r7, r0, r4
 8002342:	d10f      	bne.n	8002364 <usbStartReceiveI+0x44>
  osp = usbp->epc[ep]->out_state;
 8002344:	eb05 0386 	add.w	r3, r5, r6, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002348:	4304      	orrs	r4, r0
  osp = usbp->epc[ep]->out_state;
 800234a:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800234c:	816c      	strh	r4, [r5, #10]
  osp = usbp->epc[ep]->out_state;
 800234e:	6998      	ldr	r0, [r3, #24]
  usb_lld_start_out(usbp, ep);
 8002350:	4631      	mov	r1, r6
  osp->rxbuf  = buf;
 8002352:	f8c0 8008 	str.w	r8, [r0, #8]
  osp->rxcnt  = 0;
 8002356:	e9c0 9700 	strd	r9, r7, [r0]
  usb_lld_start_out(usbp, ep);
 800235a:	4628      	mov	r0, r5
}
 800235c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  usb_lld_start_out(usbp, ep);
 8002360:	f7ff bb36 	b.w	80019d0 <usb_lld_start_out>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8002364:	4801      	ldr	r0, [pc, #4]	; (800236c <usbStartReceiveI+0x4c>)
 8002366:	f7ff f843 	bl	80013f0 <chSysHalt>
 800236a:	bf00      	nop
 800236c:	08009da4 	.word	0x08009da4

08002370 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002370:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8002372:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002376:	3b06      	subs	r3, #6
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002378:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800237a:	2b05      	cmp	r3, #5
 800237c:	d804      	bhi.n	8002388 <_usb_ep0in+0x18>
 800237e:	e8df f003 	tbb	[pc, r3]
 8002382:	032a      	.short	0x032a
 8002384:	40160603 	.word	0x40160603
    osalDbgAssert(false, "EP0 state machine error");
 8002388:	482b      	ldr	r0, [pc, #172]	; (8002438 <_usb_ep0in+0xc8>)
 800238a:	f7ff f831 	bl	80013f0 <chSysHalt>
  hw |= (uint16_t)*p << 8U;
 800238e:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
 8002392:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    if ((usbp->ep0n < max) &&
 8002396:	6d42      	ldr	r2, [r0, #84]	; 0x54
    max = (size_t)get_hword(&usbp->setup[6]);
 8002398:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 800239c:	429a      	cmp	r2, r3
 800239e:	d206      	bcs.n	80023ae <_usb_ep0in+0x3e>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80023a0:	68c3      	ldr	r3, [r0, #12]
 80023a2:	8a1b      	ldrh	r3, [r3, #16]
 80023a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80023a8:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 80023ac:	b385      	cbz	r5, 8002410 <_usb_ep0in+0xa0>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 80023ae:	2314      	movs	r3, #20
 80023b0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80023b4:	2320      	movs	r3, #32
 80023b6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80023ba:	f7ff f979 	bl	80016b0 <_dbg_check_lock_from_isr>
    usbStartReceiveI(usbp, 0, NULL, 0);
 80023be:	2300      	movs	r3, #0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff ffab 	bl	8002320 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 80023ca:	f7ff f959 	bl	8001680 <_dbg_check_unlock_from_isr>
 80023ce:	2300      	movs	r3, #0
 80023d0:	f383 8811 	msr	BASEPRI, r3
}
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80023d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80023d8:	6841      	ldr	r1, [r0, #4]
 80023da:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80023de:	680d      	ldr	r5, [r1, #0]
 80023e0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80023e4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80023e8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80023ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80023f0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80023f4:	b10d      	cbz	r5, 80023fa <_usb_ep0in+0x8a>
 80023f6:	2106      	movs	r1, #6
 80023f8:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80023fa:	2306      	movs	r3, #6
 80023fc:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002400:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8002402:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002404:	b103      	cbz	r3, 8002408 <_usb_ep0in+0x98>
      usbp->ep0endcb(usbp);
 8002406:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8002408:	2300      	movs	r3, #0
 800240a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 800240e:	bd38      	pop	{r3, r4, r5, pc}
 8002410:	2320      	movs	r3, #32
 8002412:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002416:	f7ff f94b 	bl	80016b0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 800241a:	462b      	mov	r3, r5
 800241c:	462a      	mov	r2, r5
 800241e:	4629      	mov	r1, r5
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff ff0d 	bl	8002240 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8002426:	f7ff f92b 	bl	8001680 <_dbg_check_unlock_from_isr>
 800242a:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 800242e:	230a      	movs	r3, #10
 8002430:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002434:	bd38      	pop	{r3, r4, r5, pc}
 8002436:	bf00      	nop
 8002438:	08009e24 	.word	0x08009e24
 800243c:	00000000 	.word	0x00000000

08002440 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
	...

08002450 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8002450:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002458:	2b20      	cmp	r3, #32
 800245a:	d001      	beq.n	8002460 <sduRequestsHook+0x10>
      return false;
 800245c:	2000      	movs	r0, #0
}
 800245e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8002460:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002464:	2b20      	cmp	r3, #32
 8002466:	d3f9      	bcc.n	800245c <sduRequestsHook+0xc>
 8002468:	2b21      	cmp	r3, #33	; 0x21
 800246a:	d807      	bhi.n	800247c <sduRequestsHook+0x2c>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <sduRequestsHook+0x3c>)
 800246e:	6503      	str	r3, [r0, #80]	; 0x50
 8002470:	2207      	movs	r2, #7
 8002472:	2300      	movs	r3, #0
 8002474:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
      return true;
 8002478:	2001      	movs	r0, #1
 800247a:	4770      	bx	lr
    switch (usbp->setup[1]) {
 800247c:	2b22      	cmp	r3, #34	; 0x22
 800247e:	d1ed      	bne.n	800245c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002480:	2300      	movs	r3, #0
 8002482:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8002486:	6583      	str	r3, [r0, #88]	; 0x58
      return true;
 8002488:	2001      	movs	r0, #1
 800248a:	4770      	bx	lr
 800248c:	20000800 	.word	0x20000800

08002490 <_ctl>:
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8002490:	b508      	push	{r3, lr}
  osalDbgCheck(sdup != NULL);
 8002492:	b118      	cbz	r0, 800249c <_ctl+0xc>
  switch (operation) {
 8002494:	b111      	cbz	r1, 800249c <_ctl+0xc>
 8002496:	2901      	cmp	r1, #1
 8002498:	d103      	bne.n	80024a2 <_ctl+0x12>
    osalDbgCheck(arg == NULL);
 800249a:	b112      	cbz	r2, 80024a2 <_ctl+0x12>
    osalDbgAssert(false, "invalid CTL operation");
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <_ctl+0x18>)
 800249e:	f7fe ffa7 	bl	80013f0 <chSysHalt>
}
 80024a2:	2000      	movs	r0, #0
 80024a4:	bd08      	pop	{r3, pc}
 80024a6:	bf00      	nop
 80024a8:	08009c3c 	.word	0x08009c3c
 80024ac:	00000000 	.word	0x00000000

080024b0 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80024b2:	f8d0 648c 	ldr.w	r6, [r0, #1164]	; 0x48c
 80024b6:	6837      	ldr	r7, [r6, #0]
 80024b8:	783b      	ldrb	r3, [r7, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d001      	beq.n	80024c2 <sdu_start_receive+0x12>
    return true;
 80024be:	2001      	movs	r0, #1
}
 80024c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80024c2:	7a03      	ldrb	r3, [r0, #8]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d1fa      	bne.n	80024be <sdu_start_receive+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80024c8:	7933      	ldrb	r3, [r6, #4]
 80024ca:	897a      	ldrh	r2, [r7, #10]
 80024cc:	2501      	movs	r5, #1
 80024ce:	fa05 f303 	lsl.w	r3, r5, r3
 80024d2:	4213      	tst	r3, r2
 80024d4:	d1f3      	bne.n	80024be <sdu_start_receive+0xe>
 80024d6:	4604      	mov	r4, r0
 *
 * @iclass
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();
 80024d8:	f7fe ffb2 	bl	8001440 <chDbgCheckClassI>

  if (ibqIsFullI(ibqp)) {
 80024dc:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d009      	beq.n	80024f8 <sdu_start_receive+0x48>
  if (buf == NULL) {
 80024e4:	3204      	adds	r2, #4
 80024e6:	d0ea      	beq.n	80024be <sdu_start_receive+0xe>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80024e8:	4638      	mov	r0, r7
 80024ea:	7971      	ldrb	r1, [r6, #5]
 80024ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f0:	f7ff ff16 	bl	8002320 <usbStartReceiveI>
  return false;
 80024f4:	2000      	movs	r0, #0
}
 80024f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f8:	69a3      	ldr	r3, [r4, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1df      	bne.n	80024be <sdu_start_receive+0xe>
 80024fe:	e7f1      	b.n	80024e4 <sdu_start_receive+0x34>

08002500 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8002500:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002502:	f7ff bfd5 	b.w	80024b0 <sdu_start_receive>
 8002506:	bf00      	nop
	...

08002510 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002510:	310d      	adds	r1, #13
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8002512:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002514:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8002518:	b1b4      	cbz	r4, 8002548 <sduDataReceived+0x38>
 800251a:	2320      	movs	r3, #32
 800251c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002520:	f7ff f8c6 	bl	80016b0 <_dbg_check_lock_from_isr>
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8002524:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8002528:	6813      	ldr	r3, [r2, #0]
 800252a:	7952      	ldrb	r2, [r2, #5]
 800252c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8002536:	b945      	cbnz	r5, 800254a <sduDataReceived+0x3a>
  (void) sdu_start_receive(sdup);
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff ffb9 	bl	80024b0 <sdu_start_receive>
  _dbg_check_unlock_from_isr();
 800253e:	f7ff f89f 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002542:	2300      	movs	r3, #0
 8002544:	f383 8811 	msr	BASEPRI, r3
}
 8002548:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800254a:	2104      	movs	r1, #4
 800254c:	1860      	adds	r0, r4, r1
 800254e:	f7ff f807 	bl	8001560 <chEvtBroadcastFlagsI>
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();
 8002552:	f7fe ff75 	bl	8001440 <chDbgCheckClassI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8002556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002558:	3b04      	subs	r3, #4
 800255a:	429d      	cmp	r5, r3
 800255c:	d821      	bhi.n	80025a2 <sduDataReceived+0x92>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800255e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002562:	4293      	cmp	r3, r2
 8002564:	d01a      	beq.n	800259c <sduDataReceived+0x8c>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8002566:	601d      	str	r5, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8002568:	e9d4 1009 	ldrd	r1, r0, [r4, #36]	; 0x24
  ibqp->bcounter++;
 800256c:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 800256e:	4403      	add	r3, r0
  ibqp->bcounter++;
 8002570:	3201      	adds	r2, #1
  if (ibqp->bwrptr >= ibqp->btop) {
 8002572:	428b      	cmp	r3, r1
  ibqp->bcounter++;
 8002574:	61a2      	str	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8002576:	61e3      	str	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8002578:	d301      	bcc.n	800257e <sduDataReceived+0x6e>
    ibqp->bwrptr = ibqp->buffers;
 800257a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800257c:	61e3      	str	r3, [r4, #28]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800257e:	68e0      	ldr	r0, [r4, #12]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8002580:	f104 030c 	add.w	r3, r4, #12
  if (queue_notempty(tqp)) {
 8002584:	4283      	cmp	r3, r0
 8002586:	d0d7      	beq.n	8002538 <sduDataReceived+0x28>
  tqp->next             = tp->queue.next;
 8002588:	6802      	ldr	r2, [r0, #0]
 800258a:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800258c:	6053      	str	r3, [r2, #4]
 800258e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d008      	beq.n	80025a8 <sduDataReceived+0x98>
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <sduDataReceived+0xa4>)
 8002598:	f7fe ff2a 	bl	80013f0 <chSysHalt>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800259c:	69a2      	ldr	r2, [r4, #24]
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d0e1      	beq.n	8002566 <sduDataReceived+0x56>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <sduDataReceived+0xa8>)
 80025a4:	f7fe ff24 	bl	80013f0 <chSysHalt>
  tp->u.rdymsg = msg;
 80025a8:	2300      	movs	r3, #0
 80025aa:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80025ac:	f7fe ff88 	bl	80014c0 <chSchReadyI>
 80025b0:	e7c2      	b.n	8002538 <sduDataReceived+0x28>
 80025b2:	bf00      	nop
 80025b4:	080099d4 	.word	0x080099d4
 80025b8:	08009cd0 	.word	0x08009cd0
 80025bc:	00000000 	.word	0x00000000

080025c0 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	460d      	mov	r5, r1
 80025c4:	4604      	mov	r4, r0

  osalDbgCheckClassS();
 80025c6:	f7fe ff2b 	bl	8001420 <chDbgCheckClassS>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 80025ca:	b1d5      	cbz	r5, 8002602 <obqPostFullBufferS+0x42>
 80025cc:	69e3      	ldr	r3, [r4, #28]
 80025ce:	3b04      	subs	r3, #4
 80025d0:	42ab      	cmp	r3, r5
 80025d2:	d316      	bcc.n	8002602 <obqPostFullBufferS+0x42>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 80025d4:	68e3      	ldr	r3, [r4, #12]
 80025d6:	b1a3      	cbz	r3, 8002602 <obqPostFullBufferS+0x42>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 80025d8:	6923      	ldr	r3, [r4, #16]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 80025da:	69a1      	ldr	r1, [r4, #24]
  *((size_t *)obqp->bwrptr) = size;
 80025dc:	601d      	str	r5, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80025de:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 80025e0:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 80025e2:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 80025e4:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 80025e6:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 80025e8:	bf24      	itt	cs
 80025ea:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 80025ec:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 80025ee:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 80025f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 80025f2:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 80025f4:	2200      	movs	r2, #0
 80025f6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 80025f8:	b133      	cbz	r3, 8002608 <obqPostFullBufferS+0x48>
    obqp->notify(obqp);
 80025fa:	4620      	mov	r0, r4
  }
}
 80025fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    obqp->notify(obqp);
 8002600:	4718      	bx	r3
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 8002602:	4802      	ldr	r0, [pc, #8]	; (800260c <obqPostFullBufferS+0x4c>)
 8002604:	f7fe fef4 	bl	80013f0 <chSysHalt>
}
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	bf00      	nop
 800260c:	08009de8 	.word	0x08009de8

08002610 <obqGetFullBufferI>:
                           size_t *sizep) {
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
  osalDbgCheckClassI();
 8002616:	f7fe ff13 	bl	8001440 <chDbgCheckClassI>
  if (obqIsEmptyI(obqp)) {
 800261a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 800261e:	4282      	cmp	r2, r0
 8002620:	d003      	beq.n	800262a <obqGetFullBufferI+0x1a>
  *sizep = *((size_t *)obqp->brdptr);
 8002622:	f850 3b04 	ldr.w	r3, [r0], #4
 8002626:	602b      	str	r3, [r5, #0]
}
 8002628:	bd38      	pop	{r3, r4, r5, pc}
  if (obqIsEmptyI(obqp)) {
 800262a:	68e2      	ldr	r2, [r4, #12]
 800262c:	2a00      	cmp	r2, #0
 800262e:	d0f8      	beq.n	8002622 <obqGetFullBufferI+0x12>
    return NULL;
 8002630:	2000      	movs	r0, #0
}
 8002632:	bd38      	pop	{r3, r4, r5, pc}
	...

08002640 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8002640:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8002642:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002644:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8002648:	6813      	ldr	r3, [r2, #0]
 800264a:	7819      	ldrb	r1, [r3, #0]
 800264c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 800264e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002650:	d001      	beq.n	8002656 <obnotify+0x16>
}
 8002652:	b002      	add	sp, #8
 8002654:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002656:	7a21      	ldrb	r1, [r4, #8]
 8002658:	2902      	cmp	r1, #2
 800265a:	d1fa      	bne.n	8002652 <obnotify+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800265c:	7911      	ldrb	r1, [r2, #4]
 800265e:	891a      	ldrh	r2, [r3, #8]
 8002660:	2301      	movs	r3, #1
 8002662:	408b      	lsls	r3, r1
 8002664:	4213      	tst	r3, r2
 8002666:	d1f4      	bne.n	8002652 <obnotify+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002668:	a901      	add	r1, sp, #4
 800266a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800266e:	f7ff ffcf 	bl	8002610 <obqGetFullBufferI>
    if (buf != NULL) {
 8002672:	4602      	mov	r2, r0
 8002674:	2800      	cmp	r0, #0
 8002676:	d0ec      	beq.n	8002652 <obnotify+0x12>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002678:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 800267c:	9b01      	ldr	r3, [sp, #4]
 800267e:	7901      	ldrb	r1, [r0, #4]
 8002680:	6800      	ldr	r0, [r0, #0]
 8002682:	f7ff fddd 	bl	8002240 <usbStartTransmitI>
 8002686:	e7e4      	b.n	8002652 <obnotify+0x12>
	...

08002690 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8002690:	b510      	push	{r4, lr}
 8002692:	2320      	movs	r3, #32
 8002694:	b082      	sub	sp, #8
 8002696:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800269a:	4c23      	ldr	r4, [pc, #140]	; (8002728 <sof_handler+0x98>)
  _dbg_check_lock_from_isr();
 800269c:	f7ff f808 	bl	80016b0 <_dbg_check_lock_from_isr>
 80026a0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	7819      	ldrb	r1, [r3, #0]
 80026a8:	2904      	cmp	r1, #4
 80026aa:	d006      	beq.n	80026ba <sof_handler+0x2a>
  _dbg_check_unlock_from_isr();
 80026ac:	f7fe ffe8 	bl	8001680 <_dbg_check_unlock_from_isr>
 80026b0:	2300      	movs	r3, #0
 80026b2:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&PORTAB_SDU1);
  osalSysUnlockFromISR();
}
 80026b6:	b002      	add	sp, #8
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	7a21      	ldrb	r1, [r4, #8]
 80026bc:	2902      	cmp	r1, #2
 80026be:	d1f5      	bne.n	80026ac <sof_handler+0x1c>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80026c0:	7911      	ldrb	r1, [r2, #4]
 80026c2:	891a      	ldrh	r2, [r3, #8]
 80026c4:	2301      	movs	r3, #1
 80026c6:	408b      	lsls	r3, r1
 80026c8:	4213      	tst	r3, r2
 80026ca:	d1ef      	bne.n	80026ac <sof_handler+0x1c>
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 80026cc:	f7fe feb8 	bl	8001440 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80026d0:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d1e9      	bne.n	80026ac <sof_handler+0x1c>
 80026d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d0e6      	beq.n	80026ac <sof_handler+0x1c>
 80026de:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026e0:	2a00      	cmp	r2, #0
 80026e2:	d0e3      	beq.n	80026ac <sof_handler+0x1c>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80026e4:	3a04      	subs	r2, #4

    if (size > 0U) {
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	d0e0      	beq.n	80026ac <sof_handler+0x1c>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80026ea:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 80026ec:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 80026f0:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80026f2:	428b      	cmp	r3, r1
      obqp->bcounter--;
 80026f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 80026f6:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 80026f8:	bf24      	itt	cs
 80026fa:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 80026fc:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80026fe:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8002700:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002702:	a901      	add	r1, sp, #4
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <sof_handler+0x9c>)
      obqp->bcounter--;
 8002706:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 8002708:	66e3      	str	r3, [r4, #108]	; 0x6c
 800270a:	f7ff ff81 	bl	8002610 <obqGetFullBufferI>
    osalDbgAssert(buf != NULL, "queue is empty");
 800270e:	4602      	mov	r2, r0
 8002710:	b138      	cbz	r0, 8002722 <sof_handler+0x92>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002712:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8002716:	9b01      	ldr	r3, [sp, #4]
 8002718:	7901      	ldrb	r1, [r0, #4]
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff fd90 	bl	8002240 <usbStartTransmitI>
 8002720:	e7c4      	b.n	80026ac <sof_handler+0x1c>
    osalDbgAssert(buf != NULL, "queue is empty");
 8002722:	4803      	ldr	r0, [pc, #12]	; (8002730 <sof_handler+0xa0>)
 8002724:	f7fe fe64 	bl	80013f0 <chSysHalt>
 8002728:	20001254 	.word	0x20001254
 800272c:	20001298 	.word	0x20001298
 8002730:	08009cc4 	.word	0x08009cc4
	...

08002740 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002744:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002748:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800274a:	6a1c      	ldr	r4, [r3, #32]
  if (sdup == NULL) {
 800274c:	b314      	cbz	r4, 8002794 <sduDataTransmitted+0x54>
 800274e:	460e      	mov	r6, r1
 8002750:	4605      	mov	r5, r0
 8002752:	2320      	movs	r3, #32
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	eb00 0781 	add.w	r7, r0, r1, lsl #2
  _dbg_check_lock_from_isr();
 800275c:	f7fe ffa8 	bl	80016b0 <_dbg_check_lock_from_isr>
 8002760:	1d20      	adds	r0, r4, #4
 8002762:	2108      	movs	r1, #8
 8002764:	f7fe fefc 	bl	8001560 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f104 0844 	add.w	r8, r4, #68	; 0x44
 8002772:	bb13      	cbnz	r3, 80027ba <sduDataTransmitted+0x7a>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002774:	4640      	mov	r0, r8
 8002776:	a901      	add	r1, sp, #4
 8002778:	f7ff ff4a 	bl	8002610 <obqGetFullBufferI>
  if (buf != NULL) {
 800277c:	b168      	cbz	r0, 800279a <sduDataTransmitted+0x5a>
    usbStartTransmitI(usbp, ep, buf, n);
 800277e:	4602      	mov	r2, r0
 8002780:	4631      	mov	r1, r6
 8002782:	4628      	mov	r0, r5
 8002784:	9b01      	ldr	r3, [sp, #4]
 8002786:	f7ff fd5b 	bl	8002240 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 800278a:	f7fe ff79 	bl	8001680 <_dbg_check_unlock_from_isr>
 800278e:	2300      	movs	r3, #0
 8002790:	f383 8811 	msr	BASEPRI, r3
}
 8002794:	b002      	add	sp, #8
 8002796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	d0f2      	beq.n	800278a <sduDataTransmitted+0x4a>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80027a4:	8a1b      	ldrh	r3, [r3, #16]
 80027a6:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80027a8:	4013      	ands	r3, r2
 80027aa:	d1ee      	bne.n	800278a <sduDataTransmitted+0x4a>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80027ac:	4631      	mov	r1, r6
 80027ae:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7ff fd44 	bl	8002240 <usbStartTransmitI>
 80027b8:	e7e7      	b.n	800278a <sduDataTransmitted+0x4a>
  osalDbgCheckClassI();
 80027ba:	f7fe fe41 	bl	8001440 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 80027be:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d018      	beq.n	80027f8 <sduDataTransmitted+0xb8>
  if (obqp->brdptr >= obqp->btop) {
 80027c6:	e9d4 2117 	ldrd	r2, r1, [r4, #92]	; 0x5c
  obqp->bcounter++;
 80027ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 80027cc:	440b      	add	r3, r1
  obqp->bcounter++;
 80027ce:	3001      	adds	r0, #1
  if (obqp->brdptr >= obqp->btop) {
 80027d0:	4293      	cmp	r3, r2
  obqp->bcounter++;
 80027d2:	6520      	str	r0, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 80027d4:	65a3      	str	r3, [r4, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 80027d6:	d301      	bcc.n	80027dc <sduDataTransmitted+0x9c>
    obqp->brdptr = obqp->buffers;
 80027d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80027da:	65a3      	str	r3, [r4, #88]	; 0x58
  return (bool)(tqp->next != (const thread_t *)tqp);
 80027dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80027de:	4540      	cmp	r0, r8
 80027e0:	d0c8      	beq.n	8002774 <sduDataTransmitted+0x34>
  tqp->next             = tp->queue.next;
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	6463      	str	r3, [r4, #68]	; 0x44
  tqp->next->queue.prev = (thread_t *)tqp;
 80027e6:	f8c3 8004 	str.w	r8, [r3, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 80027ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d008      	beq.n	8002804 <sduDataTransmitted+0xc4>
 80027f2:	4807      	ldr	r0, [pc, #28]	; (8002810 <sduDataTransmitted+0xd0>)
 80027f4:	f7fe fdfc 	bl	80013f0 <chSysHalt>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 80027f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d0e3      	beq.n	80027c6 <sduDataTransmitted+0x86>
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <sduDataTransmitted+0xd4>)
 8002800:	f7fe fdf6 	bl	80013f0 <chSysHalt>
  tp->u.rdymsg = msg;
 8002804:	2300      	movs	r3, #0
 8002806:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002808:	f7fe fe5a 	bl	80014c0 <chSchReadyI>
 800280c:	e7b2      	b.n	8002774 <sduDataTransmitted+0x34>
 800280e:	bf00      	nop
 8002810:	080099d4 	.word	0x080099d4
 8002814:	08009d8c 	.word	0x08009d8c
	...

08002820 <ibqReleaseEmptyBufferS>:
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8002820:	b510      	push	{r4, lr}
 8002822:	4604      	mov	r4, r0
  osalDbgCheckClassS();
 8002824:	f7fe fdfc 	bl	8001420 <chDbgCheckClassS>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8002828:	68e3      	ldr	r3, [r4, #12]
 800282a:	b19b      	cbz	r3, 8002854 <ibqReleaseEmptyBufferS+0x34>
  if (ibqp->brdptr >= ibqp->btop) {
 800282c:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8002830:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8002832:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8002834:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8002836:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8002838:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 800283a:	bf24      	itt	cs
 800283c:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 800283e:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8002840:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8002842:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8002844:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8002846:	2200      	movs	r2, #0
 8002848:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 800284a:	b133      	cbz	r3, 800285a <ibqReleaseEmptyBufferS+0x3a>
    ibqp->notify(ibqp);
 800284c:	4620      	mov	r0, r4
}
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ibqp->notify(ibqp);
 8002852:	4718      	bx	r3
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <ibqReleaseEmptyBufferS+0x3c>)
 8002856:	f7fe fdcb 	bl	80013f0 <chSysHalt>
}
 800285a:	bd10      	pop	{r4, pc}
 800285c:	08009d00 	.word	0x08009d00

08002860 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8002860:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002866:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002868:	0792      	lsls	r2, r2, #30
 800286a:	d501      	bpl.n	8002870 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800286c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 800286e:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002870:	4801      	ldr	r0, [pc, #4]	; (8002878 <stSetAlarm+0x18>)
 8002872:	f7fe fdbd 	bl	80013f0 <chSysHalt>
 8002876:	bf00      	nop
 8002878:	08009b88 	.word	0x08009b88
 800287c:	00000000 	.word	0x00000000

08002880 <chSchWakeupS.constprop.8>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002880:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8002882:	4c1a      	ldr	r4, [pc, #104]	; (80028ec <chSchWakeupS.constprop.8+0x6c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002884:	4605      	mov	r5, r0
  chDbgCheckClassS();
 8002886:	f7fe fdcb 	bl	8001420 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800288a:	6823      	ldr	r3, [r4, #0]
  thread_t *otp = currp;
 800288c:	69a6      	ldr	r6, [r4, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800288e:	42a3      	cmp	r3, r4
 8002890:	68b2      	ldr	r2, [r6, #8]
 8002892:	d002      	beq.n	800289a <chSchWakeupS.constprop.8+0x1a>
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4293      	cmp	r3, r2
 8002898:	d822      	bhi.n	80028e0 <chSchWakeupS.constprop.8+0x60>
  if (ntp->prio <= otp->prio) {
 800289a:	68ab      	ldr	r3, [r5, #8]
  ntp->u.rdymsg = msg;
 800289c:	2100      	movs	r1, #0
  if (ntp->prio <= otp->prio) {
 800289e:	4293      	cmp	r3, r2
  ntp->u.rdymsg = msg;
 80028a0:	6269      	str	r1, [r5, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80028a2:	d918      	bls.n	80028d6 <chSchWakeupS.constprop.8+0x56>
    otp = chSchReadyI(otp);
 80028a4:	4630      	mov	r0, r6
 80028a6:	f7fe fe0b 	bl	80014c0 <chSchReadyI>
    ntp->state = CH_STATE_CURRENT;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f885 3020 	strb.w	r3, [r5, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80028b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    currp = ntp;
 80028b2:	61a5      	str	r5, [r4, #24]
 80028b4:	07db      	lsls	r3, r3, #31
    otp = chSchReadyI(otp);
 80028b6:	4606      	mov	r6, r0
 80028b8:	d401      	bmi.n	80028be <chSchWakeupS.constprop.8+0x3e>
 80028ba:	f7fe fd41 	bl	8001340 <_trace_switch.part.0>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80028be:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 80028c2:	69f2      	ldr	r2, [r6, #28]
 80028c4:	3b24      	subs	r3, #36	; 0x24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d80d      	bhi.n	80028e6 <chSchWakeupS.constprop.8+0x66>
 80028ca:	4631      	mov	r1, r6
 80028cc:	4628      	mov	r0, r5
}
 80028ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chSysSwitch(ntp, otp);
 80028d2:	f7fd bcf5 	b.w	80002c0 <_port_switch>
    (void) chSchReadyI(ntp);
 80028d6:	4628      	mov	r0, r5
}
 80028d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void) chSchReadyI(ntp);
 80028dc:	f7fe bdf0 	b.w	80014c0 <chSchReadyI>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <chSchWakeupS.constprop.8+0x70>)
 80028e2:	f7fe fd85 	bl	80013f0 <chSysHalt>
    chSysSwitch(ntp, otp);
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <chSchWakeupS.constprop.8+0x74>)
 80028e8:	f7fe fd82 	bl	80013f0 <chSysHalt>
 80028ec:	200018e0 	.word	0x200018e0
 80028f0:	08009ac0 	.word	0x08009ac0
 80028f4:	08009f74 	.word	0x08009f74
	...

08002900 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8002900:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8002902:	4c12      	ldr	r4, [pc, #72]	; (800294c <chSchGoSleepS+0x4c>)
 8002904:	69a5      	ldr	r5, [r4, #24]
void chSchGoSleepS(tstate_t newstate) {
 8002906:	4606      	mov	r6, r0
  chDbgCheckClassS();
 8002908:	f7fe fd8a 	bl	8001420 <chDbgCheckClassS>
  thread_t *tp = tqp->next;
 800290c:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 800290e:	f885 6020 	strb.w	r6, [r5, #32]
  tqp->next             = tp->queue.next;
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8002916:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002918:	6054      	str	r4, [r2, #4]
 800291a:	f883 1020 	strb.w	r1, [r3, #32]
 800291e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002920:	61a3      	str	r3, [r4, #24]
 8002922:	07d3      	lsls	r3, r2, #31
 8002924:	d402      	bmi.n	800292c <chSchGoSleepS+0x2c>
 8002926:	4628      	mov	r0, r5
 8002928:	f7fe fd0a 	bl	8001340 <_trace_switch.part.0>
 800292c:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 8002930:	69ea      	ldr	r2, [r5, #28]
 8002932:	3b24      	subs	r3, #36	; 0x24
 8002934:	429a      	cmp	r2, r3
 8002936:	d805      	bhi.n	8002944 <chSchGoSleepS+0x44>
 8002938:	4629      	mov	r1, r5
 800293a:	69a0      	ldr	r0, [r4, #24]
}
 800293c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8002940:	f7fd bcbe 	b.w	80002c0 <_port_switch>
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <chSchGoSleepS+0x50>)
 8002946:	f7fe fd53 	bl	80013f0 <chSysHalt>
 800294a:	bf00      	nop
 800294c:	200018e0 	.word	0x200018e0
 8002950:	08009f74 	.word	0x08009f74
	...

08002960 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002964:	460c      	mov	r4, r1
 8002966:	b087      	sub	sp, #28
 8002968:	4607      	mov	r7, r0
  chDbgCheckClassS();
 800296a:	f7fe fd59 	bl	8001420 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 800296e:	1c63      	adds	r3, r4, #1
 8002970:	d050      	beq.n	8002a14 <chSchGoSleepTimeoutS+0xb4>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8002972:	f7fe fd65 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8002976:	2c00      	cmp	r4, #0
 8002978:	d049      	beq.n	8002a0e <chSchGoSleepTimeoutS+0xae>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800297a:	4e49      	ldr	r6, [pc, #292]	; (8002aa0 <chSchGoSleepTimeoutS+0x140>)

  vtp->par = par;
  vtp->func = vtfunc;
 800297c:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <chSchGoSleepTimeoutS+0x144>)
  vtp->par = par;
 800297e:	69b3      	ldr	r3, [r6, #24]
 8002980:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002982:	46b0      	mov	r8, r6
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002984:	2c01      	cmp	r4, #1
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002986:	f858 5f1c 	ldr.w	r5, [r8, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
 800298a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800298e:	bf08      	it	eq
 8002990:	2402      	moveq	r4, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002992:	4545      	cmp	r5, r8
 8002994:	6a59      	ldr	r1, [r3, #36]	; 0x24
  vtp->func = vtfunc;
 8002996:	9204      	str	r2, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002998:	d049      	beq.n	8002a2e <chSchGoSleepTimeoutS+0xce>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800299a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800299c:	68ab      	ldr	r3, [r5, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800299e:	1a09      	subs	r1, r1, r0
 80029a0:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80029a2:	d240      	bcs.n	8002a26 <chSchGoSleepTimeoutS+0xc6>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d357      	bcc.n	8002a58 <chSchGoSleepTimeoutS+0xf8>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80029a8:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 80029aa:	f10d 0904 	add.w	r9, sp, #4
  while (p->delta < delta) {
 80029ae:	d906      	bls.n	80029be <chSchGoSleepTimeoutS+0x5e>
    chDbgAssert(p != vtp, "timer already armed");
 80029b0:	454d      	cmp	r5, r9
 80029b2:	d02c      	beq.n	8002a0e <chSchGoSleepTimeoutS+0xae>

    delta -= p->delta;
    p = p->next;
 80029b4:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 80029b6:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 80029b8:	68ab      	ldr	r3, [r5, #8]
 80029ba:	429c      	cmp	r4, r3
 80029bc:	d8f8      	bhi.n	80029b0 <chSchGoSleepTimeoutS+0x50>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80029be:	686b      	ldr	r3, [r5, #4]
 80029c0:	e9cd 5301 	strd	r5, r3, [sp, #4]
  vtp->prev->next = vtp;
 80029c4:	f8c3 9000 	str.w	r9, [r3]
  p->prev = vtp;
 80029c8:	f8c5 9004 	str.w	r9, [r5, #4]
  vtp->delta = delta;
 80029cc:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80029ce:	68ab      	ldr	r3, [r5, #8]
 80029d0:	1b1c      	subs	r4, r3, r4

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 80029d6:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80029d8:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 80029da:	4638      	mov	r0, r7
 80029dc:	f7ff ff90 	bl	8002900 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80029e0:	f7fe fd2e 	bl	8001440 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80029e4:	9b04      	ldr	r3, [sp, #16]
 80029e6:	b1cb      	cbz	r3, 8002a1c <chSchGoSleepTimeoutS+0xbc>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80029e8:	f7fe fd2a 	bl	8001440 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80029ec:	69f2      	ldr	r2, [r6, #28]
 80029ee:	9b01      	ldr	r3, [sp, #4]
 80029f0:	454a      	cmp	r2, r9
 80029f2:	d036      	beq.n	8002a62 <chSchGoSleepTimeoutS+0x102>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80029f4:	9a02      	ldr	r2, [sp, #8]
 80029f6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80029f8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 80029fa:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80029fc:	4543      	cmp	r3, r8
    vtp->next->prev = vtp->prev;
 80029fe:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8002a00:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8002a02:	d00b      	beq.n	8002a1c <chSchGoSleepTimeoutS+0xbc>
      vtp->next->delta += vtp->delta;
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	9903      	ldr	r1, [sp, #12]
 8002a08:	440a      	add	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e006      	b.n	8002a1c <chSchGoSleepTimeoutS+0xbc>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8002a0e:	4826      	ldr	r0, [pc, #152]	; (8002aa8 <chSchGoSleepTimeoutS+0x148>)
 8002a10:	f7fe fcee 	bl	80013f0 <chSysHalt>
    chSchGoSleepS(newstate);
 8002a14:	4638      	mov	r0, r7
 8002a16:	f7ff ff73 	bl	8002900 <chSchGoSleepS>
 8002a1a:	4e21      	ldr	r6, [pc, #132]	; (8002aa0 <chSchGoSleepTimeoutS+0x140>)
  return currp->u.rdymsg;
 8002a1c:	69b3      	ldr	r3, [r6, #24]
}
 8002a1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a20:	b007      	add	sp, #28
 8002a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = p->next;
 8002a26:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 8002a28:	1ae4      	subs	r4, r4, r3
 8002a2a:	68ab      	ldr	r3, [r5, #8]
 8002a2c:	e7bc      	b.n	80029a8 <chSchGoSleepTimeoutS+0x48>
      ch.vtlist.lasttime = now;
 8002a2e:	62b1      	str	r1, [r6, #40]	; 0x28
      vtp->delta = delay;
 8002a30:	9403      	str	r4, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002a32:	68da      	ldr	r2, [r3, #12]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8002a34:	9501      	str	r5, [sp, #4]
      ch.vtlist.next = vtp;
 8002a36:	f10d 0904 	add.w	r9, sp, #4
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8002a3a:	f012 0202 	ands.w	r2, r2, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8002a3e:	9502      	str	r5, [sp, #8]
      ch.vtlist.prev = vtp;
 8002a40:	e9c6 9907 	strd	r9, r9, [r6, #28]
 8002a44:	d105      	bne.n	8002a52 <chSchGoSleepTimeoutS+0xf2>
  return systime + (systime_t)interval;
 8002a46:	4421      	add	r1, r4
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002a48:	2002      	movs	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002a4a:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002a4c:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002a4e:	60d8      	str	r0, [r3, #12]
 8002a50:	e7c3      	b.n	80029da <chSchGoSleepTimeoutS+0x7a>
 8002a52:	4816      	ldr	r0, [pc, #88]	; (8002aac <chSchGoSleepTimeoutS+0x14c>)
 8002a54:	f7fe fccc 	bl	80013f0 <chSysHalt>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8002a58:	4420      	add	r0, r4
 8002a5a:	f7ff ff01 	bl	8002860 <stSetAlarm>
 8002a5e:	68ab      	ldr	r3, [r5, #8]
 8002a60:	e7a2      	b.n	80029a8 <chSchGoSleepTimeoutS+0x48>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8002a62:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002a64:	4543      	cmp	r3, r8
  ch.vtlist.next = vtp->next;
 8002a66:	61f3      	str	r3, [r6, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002a68:	f8c3 8004 	str.w	r8, [r3, #4]
  vtp->func = NULL;
 8002a6c:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002a6e:	d012      	beq.n	8002a96 <chSchGoSleepTimeoutS+0x136>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	9903      	ldr	r1, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8002a74:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8002a76:	440a      	add	r2, r1
  return (systime_t)STM32_ST_TIM->CNT;
 8002a78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002a80:	1a1b      	subs	r3, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d9ca      	bls.n	8002a1c <chSchGoSleepTimeoutS+0xbc>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8002a86:	1ad1      	subs	r1, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002a88:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002a8a:	bf98      	it	ls
 8002a8c:	1c9a      	addls	r2, r3, #2
 8002a8e:	4410      	add	r0, r2
 8002a90:	f7ff fee6 	bl	8002860 <stSetAlarm>
 8002a94:	e7c2      	b.n	8002a1c <chSchGoSleepTimeoutS+0xbc>
  STM32_ST_TIM->DIER = 0;
 8002a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	e7be      	b.n	8002a1c <chSchGoSleepTimeoutS+0xbc>
 8002a9e:	bf00      	nop
 8002aa0:	200018e0 	.word	0x200018e0
 8002aa4:	080016e1 	.word	0x080016e1
 8002aa8:	08009a18 	.word	0x08009a18
 8002aac:	08009b3c 	.word	0x08009b3c

08002ab0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	460d      	mov	r5, r1
  queue_insert(currp, tqp);
 8002ab6:	4e14      	ldr	r6, [pc, #80]	; (8002b08 <ibqGetFullBufferTimeoutS+0x58>)
  osalDbgCheckClassS();
 8002ab8:	f7fe fcb2 	bl	8001420 <chDbgCheckClassS>
 8002abc:	e00e      	b.n	8002adc <ibqGetFullBufferTimeoutS+0x2c>
    if (ibqp->suspended) {
 8002abe:	7a23      	ldrb	r3, [r4, #8]
 8002ac0:	b9cb      	cbnz	r3, 8002af6 <ibqGetFullBufferTimeoutS+0x46>
  if (TIME_IMMEDIATE == timeout) {
 8002ac2:	b1dd      	cbz	r5, 8002afc <ibqGetFullBufferTimeoutS+0x4c>
  queue_insert(currp, tqp);
 8002ac4:	69b3      	ldr	r3, [r6, #24]
  tp->queue.prev             = tqp->prev;
 8002ac6:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002ac8:	4629      	mov	r1, r5
 8002aca:	e9c3 4200 	strd	r4, r2, [r3]
 8002ace:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002ad0:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8002ad2:	6063      	str	r3, [r4, #4]
 8002ad4:	f7ff ff44 	bl	8002960 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	db0b      	blt.n	8002af4 <ibqGetFullBufferTimeoutS+0x44>
  while (ibqIsEmptyI(ibqp)) {
 8002adc:	68e3      	ldr	r3, [r4, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ed      	beq.n	8002abe <ibqGetFullBufferTimeoutS+0xe>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8002ae2:	68e3      	ldr	r3, [r4, #12]
 8002ae4:	b16b      	cbz	r3, 8002b02 <ibqGetFullBufferTimeoutS+0x52>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002ae6:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002ae8:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002aea:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002aec:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002aee:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002af2:	2000      	movs	r0, #0
}
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
 8002af6:	f06f 0001 	mvn.w	r0, #1
}
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8002b02:	4802      	ldr	r0, [pc, #8]	; (8002b0c <ibqGetFullBufferTimeoutS+0x5c>)
 8002b04:	f7fe fc74 	bl	80013f0 <chSysHalt>
 8002b08:	200018e0 	.word	0x200018e0
 8002b0c:	08009ce4 	.word	0x08009ce4

08002b10 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
  queue_insert(currp, tqp);
 8002b16:	4e14      	ldr	r6, [pc, #80]	; (8002b68 <obqGetEmptyBufferTimeoutS+0x58>)
  osalDbgCheckClassS();
 8002b18:	f7fe fc82 	bl	8001420 <chDbgCheckClassS>
 8002b1c:	e00e      	b.n	8002b3c <obqGetEmptyBufferTimeoutS+0x2c>
    if (obqp->suspended) {
 8002b1e:	7a23      	ldrb	r3, [r4, #8]
 8002b20:	b9cb      	cbnz	r3, 8002b56 <obqGetEmptyBufferTimeoutS+0x46>
  if (TIME_IMMEDIATE == timeout) {
 8002b22:	b1dd      	cbz	r5, 8002b5c <obqGetEmptyBufferTimeoutS+0x4c>
  queue_insert(currp, tqp);
 8002b24:	69b3      	ldr	r3, [r6, #24]
  tp->queue.prev             = tqp->prev;
 8002b26:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002b28:	4629      	mov	r1, r5
 8002b2a:	e9c3 4200 	strd	r4, r2, [r3]
 8002b2e:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002b30:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8002b32:	6063      	str	r3, [r4, #4]
 8002b34:	f7ff ff14 	bl	8002960 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	db0b      	blt.n	8002b54 <obqGetEmptyBufferTimeoutS+0x44>
  while (obqIsFullI(obqp)) {
 8002b3c:	68e3      	ldr	r3, [r4, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ed      	beq.n	8002b1e <obqGetEmptyBufferTimeoutS+0xe>
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8002b42:	68e3      	ldr	r3, [r4, #12]
 8002b44:	b16b      	cbz	r3, 8002b62 <obqGetEmptyBufferTimeoutS+0x52>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002b46:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002b48:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002b4a:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002b4c:	440b      	add	r3, r1
 8002b4e:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8002b52:	2000      	movs	r0, #0
}
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
 8002b56:	f06f 0001 	mvn.w	r0, #1
}
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <obqGetEmptyBufferTimeoutS+0x5c>)
 8002b64:	f7fe fc44 	bl	80013f0 <chSysHalt>
 8002b68:	200018e0 	.word	0x200018e0
 8002b6c:	08009db8 	.word	0x08009db8

08002b70 <writeAnalog>:


extern adcsample_t samples[];

void writeAnalog(char* payloadBuffer, int payloadLength)
{
 8002b70:	b510      	push	{r4, lr}
 8002b72:	b090      	sub	sp, #64	; 0x40
  char writeBuffer[64];
  int bytesToWrite = sprintf(writeBuffer, "%d:%s;", payloadLength, payloadBuffer);
 8002b74:	4603      	mov	r3, r0
 8002b76:	460a      	mov	r2, r1
 8002b78:	4668      	mov	r0, sp
 8002b7a:	4906      	ldr	r1, [pc, #24]	; (8002b94 <writeAnalog+0x24>)
 8002b7c:	f003 f836 	bl	8005bec <sprintf>
  chnWriteTimeout(&PORTAB_SDU1, writeBuffer, bytesToWrite, 10);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <writeAnalog+0x28>)
 8002b82:	681c      	ldr	r4, [r3, #0]
 8002b84:	4602      	mov	r2, r0
 8002b86:	4669      	mov	r1, sp
 8002b88:	69e4      	ldr	r4, [r4, #28]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	47a0      	blx	r4
}
 8002b90:	b010      	add	sp, #64	; 0x40
 8002b92:	bd10      	pop	{r4, pc}
 8002b94:	0800a2ac 	.word	0x0800a2ac
 8002b98:	20001254 	.word	0x20001254
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8002ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	4616      	mov	r6, r2
  osalDbgCheckClassI();
 8002baa:	f7fe fc49 	bl	8001440 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8002bae:	b144      	cbz	r4, 8002bc2 <usbInitEndpointI+0x22>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 8002bb0:	7823      	ldrb	r3, [r4, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d105      	bne.n	8002bc2 <usbInitEndpointI+0x22>
 8002bb6:	fa0f f885 	sxth.w	r8, r5
 8002bba:	eb04 0788 	add.w	r7, r4, r8, lsl #2
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	b113      	cbz	r3, 8002bc8 <usbInitEndpointI+0x28>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8002bc2:	485a      	ldr	r0, [pc, #360]	; (8002d2c <usbInitEndpointI+0x18c>)
 8002bc4:	f7fe fc14 	bl	80013f0 <chSysHalt>
  if (epcp->in_state != NULL) {
 8002bc8:	6972      	ldr	r2, [r6, #20]
  usbp->epc[ep] = epcp;
 8002bca:	60fe      	str	r6, [r7, #12]
  if (epcp->in_state != NULL) {
 8002bcc:	b11a      	cbz	r2, 8002bd6 <usbInitEndpointI+0x36>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	6053      	str	r3, [r2, #4]
 8002bd2:	6093      	str	r3, [r2, #8]
 8002bd4:	60d3      	str	r3, [r2, #12]
  if (epcp->out_state != NULL) {
 8002bd6:	69b3      	ldr	r3, [r6, #24]
 8002bd8:	b123      	cbz	r3, 8002be4 <usbInitEndpointI+0x44>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f002 0203 	and.w	r2, r2, #3
 8002bec:	2a02      	cmp	r2, #2
 8002bee:	f000 8097 	beq.w	8002d20 <usbInitEndpointI+0x180>
 8002bf2:	2a03      	cmp	r2, #3
 8002bf4:	f000 8091 	beq.w	8002d1a <usbInitEndpointI+0x17a>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 8002bf8:	484d      	ldr	r0, [pc, #308]	; (8002d30 <usbInitEndpointI+0x190>)
 8002bfa:	494e      	ldr	r1, [pc, #312]	; (8002d34 <usbInitEndpointI+0x194>)
 8002bfc:	2a01      	cmp	r2, #1
 8002bfe:	bf0c      	ite	eq
 8002c00:	4681      	moveq	r9, r0
 8002c02:	4689      	movne	r9, r1
  stm32_otg_t *otgp = usbp->otg;
 8002c04:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (usbp->epc[ep]->out_state != NULL) {
 8002c06:	6998      	ldr	r0, [r3, #24]
  otgp->oe[ep].DOEPTSIZ = 0;
 8002c08:	0169      	lsls	r1, r5, #5
 8002c0a:	1872      	adds	r2, r6, r1
 8002c0c:	f04f 0c00 	mov.w	ip, #0
 8002c10:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 8002c14:	f105 0210 	add.w	r2, r5, #16
 8002c18:	f04f 0c01 	mov.w	ip, #1
 8002c1c:	fa0c f202 	lsl.w	r2, ip, r2
  if (usbp->epc[ep]->out_state != NULL) {
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d048      	beq.n	8002cb6 <usbInitEndpointI+0x116>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8002c24:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8002c28:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8002c2c:	0140      	lsls	r0, r0, #5
 8002c2e:	ea4c 0c09 	orr.w	ip, ip, r9
 8002c32:	f846 c000 	str.w	ip, [r6, r0]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8002c36:	f8d6 081c 	ldr.w	r0, [r6, #2076]	; 0x81c
 8002c3a:	4302      	orrs	r2, r0
 8002c3c:	f8c6 281c 	str.w	r2, [r6, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8002c40:	4431      	add	r1, r6
  if (usbp->epc[ep]->in_state != NULL) {
 8002c42:	695a      	ldr	r2, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8002c44:	2000      	movs	r0, #0
 8002c46:	f8c1 0910 	str.w	r0, [r1, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d042      	beq.n	8002cd4 <usbInitEndpointI+0x134>
    if (usbp->epc[ep]->in_multiplier > 1)
 8002c4e:	8b9a      	ldrh	r2, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8002c50:	8a19      	ldrh	r1, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8002c52:	2a01      	cmp	r2, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8002c54:	ea4f 0391 	mov.w	r3, r1, lsr #2
      fsize *= usbp->epc[ep]->in_multiplier;
 8002c58:	bf88      	it	hi
 8002c5a:	4353      	mulhi	r3, r2
 8002c5c:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
  usbp->pmnext += size;
 8002c60:	1858      	adds	r0, r3, r1
 8002c62:	6760      	str	r0, [r4, #116]	; 0x74
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	4290      	cmp	r0, r2
 8002c68:	d85d      	bhi.n	8002d26 <usbInitEndpointI+0x186>
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002c6a:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8002c6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002c70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002c74:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002c78:	01a9      	lsls	r1, r5, #6
 8002c7a:	f041 0120 	orr.w	r1, r1, #32
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002c7e:	6043      	str	r3, [r0, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002c80:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8002c82:	6913      	ldr	r3, [r2, #16]
 8002c84:	0699      	lsls	r1, r3, #26
 8002c86:	d4fc      	bmi.n	8002c82 <usbInitEndpointI+0xe2>
  chSysPolledDelayX(cycles);
 8002c88:	2012      	movs	r0, #18
 8002c8a:	f7fe fba1 	bl	80013d0 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8a1a      	ldrh	r2, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 8002c92:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 8002c96:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8002c9a:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 8002c9c:	ea42 0209 	orr.w	r2, r2, r9
    otgp->ie[ep].DIEPCTL = ctl |
 8002ca0:	50f2      	str	r2, [r6, r3]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	f8d6 381c 	ldr.w	r3, [r6, #2076]	; 0x81c
 8002ca8:	fa01 f505 	lsl.w	r5, r1, r5
 8002cac:	431d      	orrs	r5, r3
 8002cae:	f8c6 581c 	str.w	r5, [r6, #2076]	; 0x81c
}
 8002cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cb6:	eb06 1c48 	add.w	ip, r6, r8, lsl #5
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8002cba:	f8dc 0b00 	ldr.w	r0, [ip, #2816]	; 0xb00
 8002cbe:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8002cc2:	f8cc 0b00 	str.w	r0, [ip, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8002cc6:	f8d6 081c 	ldr.w	r0, [r6, #2076]	; 0x81c
 8002cca:	ea20 0202 	bic.w	r2, r0, r2
 8002cce:	f8c6 281c 	str.w	r2, [r6, #2076]	; 0x81c
 8002cd2:	e7b5      	b.n	8002c40 <usbInitEndpointI+0xa0>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8002cd4:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8002cd8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002cda:	4817      	ldr	r0, [pc, #92]	; (8002d38 <usbInitEndpointI+0x198>)
 8002cdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002ce0:	01a9      	lsls	r1, r5, #6
 8002ce2:	f041 0120 	orr.w	r1, r1, #32
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8002ce6:	6058      	str	r0, [r3, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002ce8:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8002cea:	6913      	ldr	r3, [r2, #16]
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	d4fc      	bmi.n	8002cea <usbInitEndpointI+0x14a>
 8002cf0:	eb06 1848 	add.w	r8, r6, r8, lsl #5
 8002cf4:	2012      	movs	r0, #18
 8002cf6:	f7fe fb6b 	bl	80013d0 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8002cfa:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 8002cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d02:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 8002d06:	f8d6 381c 	ldr.w	r3, [r6, #2076]	; 0x81c
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f505 	lsl.w	r5, r1, r5
 8002d10:	ea23 0505 	bic.w	r5, r3, r5
 8002d14:	f8c6 581c 	str.w	r5, [r6, #2076]	; 0x81c
 8002d18:	e7cb      	b.n	8002cb2 <usbInitEndpointI+0x112>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 8002d1a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 8002d40 <usbInitEndpointI+0x1a0>
 8002d1e:	e771      	b.n	8002c04 <usbInitEndpointI+0x64>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8002d20:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8002d44 <usbInitEndpointI+0x1a4>
 8002d24:	e76e      	b.n	8002c04 <usbInitEndpointI+0x64>
  osalDbgAssert(usbp->pmnext <= usbp->otgparams->otg_ram_size,
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <usbInitEndpointI+0x19c>)
 8002d28:	f7fe fb62 	bl	80013f0 <chSysHalt>
 8002d2c:	08009d60 	.word	0x08009d60
 8002d30:	10048000 	.word	0x10048000
 8002d34:	10008000 	.word	0x10008000
 8002d38:	02000400 	.word	0x02000400
 8002d3c:	08009d18 	.word	0x08009d18
 8002d40:	100c8000 	.word	0x100c8000
 8002d44:	10088000 	.word	0x10088000
	...

08002d50 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002d50:	b538      	push	{r3, r4, r5, lr}
  switch (event) {
 8002d52:	2905      	cmp	r1, #5
 8002d54:	d816      	bhi.n	8002d84 <usb_event+0x34>
 8002d56:	e8df f001 	tbb	[pc, r1]
 8002d5a:	1550      	.short	0x1550
 8002d5c:	03505016 	.word	0x03505016
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d60:	2320      	movs	r3, #32
 8002d62:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8002d66:	4d33      	ldr	r5, [pc, #204]	; (8002e34 <usb_event+0xe4>)
  _dbg_check_lock_from_isr();
 8002d68:	f7fe fca2 	bl	80016b0 <_dbg_check_lock_from_isr>
  bqResumeX(&sdup->ibqueue);
 8002d6c:	2400      	movs	r4, #0
 8002d6e:	1d28      	adds	r0, r5, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	f7fe fbf5 	bl	8001560 <chEvtBroadcastFlagsI>
 8002d76:	752c      	strb	r4, [r5, #20]
  bqResumeX(&sdup->obqueue);
 8002d78:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
  _dbg_check_unlock_from_isr();
 8002d7c:	f7fe fc80 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002d80:	f384 8811 	msr	BASEPRI, r4
}
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
 8002d86:	4605      	mov	r5, r0
 8002d88:	2320      	movs	r3, #32
 8002d8a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002d8e:	f7fe fc8f 	bl	80016b0 <_dbg_check_lock_from_isr>
  ibqp->bcounter  = 0;
 8002d92:	4c28      	ldr	r4, [pc, #160]	; (8002e34 <usb_event+0xe4>)
    usbInitEndpointI(usbp, USB1_DATA_REQUEST_EP, &ep1config);
 8002d94:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <usb_event+0xe8>)
 8002d96:	4628      	mov	r0, r5
 8002d98:	2101      	movs	r1, #1
 8002d9a:	f7ff ff01 	bl	8002ba0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USB1_INTERRUPT_REQUEST_EP, &ep2config);
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <usb_event+0xec>)
 8002da2:	4628      	mov	r0, r5
 8002da4:	f7ff fefc 	bl	8002ba0 <usbInitEndpointI>
 8002da8:	2500      	movs	r5, #0
  osalDbgCheckClassI();
 8002daa:	f7fe fb49 	bl	8001440 <chDbgCheckClassI>
  ibqp->brdptr    = ibqp->buffers;
 8002dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002db0:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 8002db2:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 8002db6:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter  = 0;
 8002db8:	61a5      	str	r5, [r4, #24]
  ibqp->top       = NULL;
 8002dba:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002dbe:	f7fe fba7 	bl	8001510 <chThdDequeueAllI.constprop.34>
  bqResumeX(&sdup->ibqueue);
 8002dc2:	7525      	strb	r5, [r4, #20]
  osalDbgCheckClassI();
 8002dc4:	f7fe fb3c 	bl	8001440 <chDbgCheckClassI>
  obqp->brdptr    = obqp->buffers;
 8002dc8:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8002dcc:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bcounter  = bqSizeX(obqp);
 8002dd0:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->bwrptr    = obqp->buffers;
 8002dd2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->ptr       = NULL;
 8002dd6:	66e5      	str	r5, [r4, #108]	; 0x6c
  obqp->top       = NULL;
 8002dd8:	6725      	str	r5, [r4, #112]	; 0x70
 8002dda:	f7fe fb99 	bl	8001510 <chThdDequeueAllI.constprop.34>
  chEvtBroadcastFlagsI(esp, flags);
 8002dde:	2101      	movs	r1, #1
 8002de0:	1d20      	adds	r0, r4, #4
  bqResumeX(&sdup->obqueue);
 8002de2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002de6:	f7fe fbbb 	bl	8001560 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff fb60 	bl	80024b0 <sdu_start_receive>
  _dbg_check_unlock_from_isr();
 8002df0:	f7fe fc46 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002df4:	f385 8811 	msr	BASEPRI, r5
}
 8002df8:	bd38      	pop	{r3, r4, r5, pc}
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	4c0c      	ldr	r4, [pc, #48]	; (8002e34 <usb_event+0xe4>)
  _dbg_check_lock_from_isr();
 8002e02:	f7fe fc55 	bl	80016b0 <_dbg_check_lock_from_isr>
 8002e06:	2102      	movs	r1, #2
 8002e08:	1d20      	adds	r0, r4, #4
 8002e0a:	f7fe fba9 	bl	8001560 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8002e0e:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 8002e10:	f104 000c 	add.w	r0, r4, #12
 8002e14:	7525      	strb	r5, [r4, #20]
 8002e16:	f7fe fb7b 	bl	8001510 <chThdDequeueAllI.constprop.34>
 8002e1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
  bqSuspendI(&sdup->obqueue);
 8002e1e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8002e22:	f7fe fb75 	bl	8001510 <chThdDequeueAllI.constprop.34>
  _dbg_check_unlock_from_isr();
 8002e26:	f7fe fc2b 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	bd38      	pop	{r3, r4, r5, pc}
 8002e32:	bf00      	nop
 8002e34:	20001254 	.word	0x20001254
 8002e38:	08009fc8 	.word	0x08009fc8
 8002e3c:	08009fec 	.word	0x08009fec

08002e40 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002e40:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8002e42:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002e46:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8002e48:	b113      	cbz	r3, 8002e50 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8002e50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8002e54:	6862      	ldr	r2, [r4, #4]
 8002e56:	68cb      	ldr	r3, [r1, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	6623      	str	r3, [r4, #96]	; 0x60
 8002e60:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002e62:	6893      	ldr	r3, [r2, #8]
 8002e64:	b343      	cbz	r3, 8002eb8 <_usb_ep0setup+0x78>
      !(usbp->config->requests_hook_cb(usbp))) {
 8002e66:	4620      	mov	r0, r4
 8002e68:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8002e6a:	b328      	cbz	r0, 8002eb8 <_usb_ep0setup+0x78>
 8002e6c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002e6e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  hw |= (uint16_t)*p << 8U;
 8002e72:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 8002e76:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
  max = (size_t)get_hword(&usbp->setup[6]);
 8002e7a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  if (usbp->ep0n > max) {
 8002e7e:	428a      	cmp	r2, r1
 8002e80:	bf2c      	ite	cs
 8002e82:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 8002e84:	6562      	strcc	r2, [r4, #84]	; 0x54
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002e86:	0619      	lsls	r1, r3, #24
 8002e88:	f100 8086 	bmi.w	8002f98 <_usb_ep0setup+0x158>
    if (usbp->ep0n != 0U) {
 8002e8c:	2a00      	cmp	r2, #0
 8002e8e:	d05a      	beq.n	8002f46 <_usb_ep0setup+0x106>
      usbp->ep0state = USB_EP0_OUT_RX;
 8002e90:	2315      	movs	r3, #21
 8002e92:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002e96:	2320      	movs	r3, #32
 8002e98:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002e9c:	f7fe fc08 	bl	80016b0 <_dbg_check_lock_from_isr>
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8002ea0:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f7ff fa3a 	bl	8002320 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 8002eac:	f7fe fbe8 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f383 8811 	msr	BASEPRI, r3
}
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8002eb8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002ebc:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	d016      	beq.n	8002ef2 <_usb_ep0setup+0xb2>
 8002ec4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8002ec6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002eca:	6861      	ldr	r1, [r4, #4]
 8002ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8002ed4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8002ed8:	680d      	ldr	r5, [r1, #0]
 8002eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ede:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8002ee2:	b115      	cbz	r5, 8002eea <_usb_ep0setup+0xaa>
 8002ee4:	2106      	movs	r1, #6
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8002eea:	2306      	movs	r3, #6
 8002eec:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 8002ef2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8002efa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002efe:	f240 3002 	movw	r0, #770	; 0x302
 8002f02:	4282      	cmp	r2, r0
 8002f04:	f000 80d3 	beq.w	80030ae <_usb_ep0setup+0x26e>
 8002f08:	d831      	bhi.n	8002f6e <_usb_ep0setup+0x12e>
 8002f0a:	2a02      	cmp	r2, #2
 8002f0c:	f000 80be 	beq.w	800308c <_usb_ep0setup+0x24c>
 8002f10:	f240 8093 	bls.w	800303a <_usb_ep0setup+0x1fa>
 8002f14:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002f18:	f000 8097 	beq.w	800304a <_usb_ep0setup+0x20a>
 8002f1c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002f20:	d06b      	beq.n	8002ffa <_usb_ep0setup+0x1ba>
 8002f22:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002f26:	d1cd      	bne.n	8002ec4 <_usb_ep0setup+0x84>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002f28:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d1c9      	bne.n	8002ec4 <_usb_ep0setup+0x84>
      usbp->status &= ~2U;
 8002f30:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002f34:	6525      	str	r5, [r4, #80]	; 0x50
 8002f36:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
      usbp->status &= ~2U;
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002f42:	060b      	lsls	r3, r1, #24
 8002f44:	d435      	bmi.n	8002fb2 <_usb_ep0setup+0x172>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8002f46:	230b      	movs	r3, #11
 8002f48:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002f52:	f7fe fbad 	bl	80016b0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8002f56:	2300      	movs	r3, #0
 8002f58:	4620      	mov	r0, r4
 8002f5a:	461a      	mov	r2, r3
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	f7ff f96f 	bl	8002240 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8002f62:	f7fe fb8d 	bl	8001680 <_dbg_check_unlock_from_isr>
 8002f66:	2300      	movs	r3, #0
 8002f68:	f383 8811 	msr	BASEPRI, r3
}
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002f6e:	f240 6001 	movw	r0, #1537	; 0x601
 8002f72:	4282      	cmp	r2, r0
 8002f74:	d950      	bls.n	8003018 <_usb_ep0setup+0x1d8>
 8002f76:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8002f7a:	d026      	beq.n	8002fca <_usb_ep0setup+0x18a>
 8002f7c:	f640 4102 	movw	r1, #3074	; 0xc02
 8002f80:	428a      	cmp	r2, r1
 8002f82:	d07c      	beq.n	800307e <_usb_ep0setup+0x23e>
 8002f84:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002f88:	d19c      	bne.n	8002ec4 <_usb_ep0setup+0x84>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002f8a:	f104 0267 	add.w	r2, r4, #103	; 0x67
 8002f8e:	2101      	movs	r1, #1
 8002f90:	65a5      	str	r5, [r4, #88]	; 0x58
 8002f92:	e9c4 2114 	strd	r2, r1, [r4, #80]	; 0x50
 8002f96:	e76c      	b.n	8002e72 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8002f98:	b15a      	cbz	r2, 8002fb2 <_usb_ep0setup+0x172>
      usbp->ep0state = USB_EP0_IN_TX;
 8002f9a:	2309      	movs	r3, #9
 8002f9c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002fa6:	f7fe fb83 	bl	80016b0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002faa:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002fae:	4620      	mov	r0, r4
 8002fb0:	e7d4      	b.n	8002f5c <_usb_ep0setup+0x11c>
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8002fb2:	2314      	movs	r3, #20
 8002fb4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8002fb8:	2320      	movs	r3, #32
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f7fe fb77 	bl	80016b0 <_dbg_check_lock_from_isr>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	e76d      	b.n	8002ea6 <_usb_ep0setup+0x66>
      if (usbp->state == USB_ACTIVE) {
 8002fca:	7823      	ldrb	r3, [r4, #0]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	f000 80be 	beq.w	800314e <_usb_ep0setup+0x30e>
      if (usbp->setup[2] != 0U) {
 8002fd2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8002fd6:	b14b      	cbz	r3, 8002fec <_usb_ep0setup+0x1ac>
        usbp->state = USB_ACTIVE;
 8002fd8:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8002fda:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8002fdc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        usbp->state = USB_ACTIVE;
 8002fe0:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	b113      	cbz	r3, 8002fec <_usb_ep0setup+0x1ac>
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002fec:	2300      	movs	r3, #0
 8002fee:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8002ff2:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ff4:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 8002ff8:	e7a3      	b.n	8002f42 <_usb_ep0setup+0x102>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002ffa:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f47f af60 	bne.w	8002ec4 <_usb_ep0setup+0x84>
      usbp->status |= 2U;
 8003004:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003008:	6525      	str	r5, [r4, #80]	; 0x50
      usbp->status |= 2U;
 800300a:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800300e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
      usbp->status |= 2U;
 8003012:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8003016:	e794      	b.n	8002f42 <_usb_ep0setup+0x102>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003018:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800301c:	d25d      	bcs.n	80030da <_usb_ep0setup+0x29a>
 800301e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003022:	f47f af4f 	bne.w	8002ec4 <_usb_ep0setup+0x84>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8003026:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800302a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800302e:	d076      	beq.n	800311e <_usb_ep0setup+0x2de>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003030:	2300      	movs	r3, #0
 8003032:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 8003036:	65a3      	str	r3, [r4, #88]	; 0x58
 8003038:	e783      	b.n	8002f42 <_usb_ep0setup+0x102>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800303a:	b9ea      	cbnz	r2, 8003078 <_usb_ep0setup+0x238>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800303c:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8003040:	2102      	movs	r1, #2
 8003042:	65a2      	str	r2, [r4, #88]	; 0x58
 8003044:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
 8003048:	e713      	b.n	8002e72 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800304a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800304e:	2b00      	cmp	r3, #0
 8003050:	f47f af38 	bne.w	8002ec4 <_usb_ep0setup+0x84>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8003054:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8003058:	f013 000f 	ands.w	r0, r3, #15
 800305c:	d0e8      	beq.n	8003030 <_usb_ep0setup+0x1f0>
 800305e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8003060:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003064:	eb02 1340 	add.w	r3, r2, r0, lsl #5
 8003068:	d17e      	bne.n	8003168 <_usb_ep0setup+0x328>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800306a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800306e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003072:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003076:	e7db      	b.n	8003030 <_usb_ep0setup+0x1f0>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003078:	2a01      	cmp	r2, #1
 800307a:	f47f af23 	bne.w	8002ec4 <_usb_ep0setup+0x84>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <_usb_ep0setup+0x3bc>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003080:	6522      	str	r2, [r4, #80]	; 0x50
 8003082:	2102      	movs	r1, #2
 8003084:	2200      	movs	r2, #0
 8003086:	e9c4 1215 	strd	r1, r2, [r4, #84]	; 0x54
 800308a:	e6f2      	b.n	8002e72 <_usb_ep0setup+0x32>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800308c:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
 8003090:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003092:	0605      	lsls	r5, r0, #24
 8003094:	f000 010f 	and.w	r1, r0, #15
 8003098:	d438      	bmi.n	800310c <_usb_ep0setup+0x2cc>
  ctl = usbp->otg->oe[ep].DOEPCTL;
 800309a:	3158      	adds	r1, #88	; 0x58
 800309c:	0149      	lsls	r1, r1, #5
 800309e:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 80030a0:	040d      	lsls	r5, r1, #16
 80030a2:	f57f af10 	bpl.w	8002ec6 <_usb_ep0setup+0x86>
  if (ctl & DIEPCTL_STALL)
 80030a6:	028e      	lsls	r6, r1, #10
 80030a8:	d537      	bpl.n	800311a <_usb_ep0setup+0x2da>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80030aa:	4a55      	ldr	r2, [pc, #340]	; (8003200 <_usb_ep0setup+0x3c0>)
 80030ac:	e7e8      	b.n	8003080 <_usb_ep0setup+0x240>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80030ae:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f47f af06 	bne.w	8002ec4 <_usb_ep0setup+0x84>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80030b8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80030bc:	f013 000f 	ands.w	r0, r3, #15
 80030c0:	d0b6      	beq.n	8003030 <_usb_ep0setup+0x1f0>
 80030c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80030c4:	eb02 1240 	add.w	r2, r2, r0, lsl #5
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80030c8:	0618      	lsls	r0, r3, #24
 80030ca:	d454      	bmi.n	8003176 <_usb_ep0setup+0x336>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80030cc:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80030d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030d4:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80030d8:	e7aa      	b.n	8003030 <_usb_ep0setup+0x1f0>
  hw |= (uint16_t)*p << 8U;
 80030da:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80030de:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 80030e0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80030e4:	684e      	ldr	r6, [r1, #4]
 80030e6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80030ea:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
 80030ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80030f2:	4620      	mov	r0, r4
 80030f4:	47b0      	blx	r6
    if (dp == NULL) {
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f43f aee4 	beq.w	8002ec4 <_usb_ep0setup+0x84>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80030fc:	e9d0 1300 	ldrd	r1, r3, [r0]
 8003100:	65a5      	str	r5, [r4, #88]	; 0x58
 8003102:	e9c4 3114 	strd	r3, r1, [r4, #80]	; 0x50
 8003106:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800310a:	e6b2      	b.n	8002e72 <_usb_ep0setup+0x32>
  ctl = usbp->otg->ie[ep].DIEPCTL;
 800310c:	3148      	adds	r1, #72	; 0x48
 800310e:	0149      	lsls	r1, r1, #5
 8003110:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8003112:	0408      	lsls	r0, r1, #16
 8003114:	f57f aed7 	bpl.w	8002ec6 <_usb_ep0setup+0x86>
 8003118:	e7c5      	b.n	80030a6 <_usb_ep0setup+0x266>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800311a:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <_usb_ep0setup+0x3c4>)
 800311c:	e7b0      	b.n	8003080 <_usb_ep0setup+0x240>
  usbp->address = usbp->setup[2];
 800311e:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  stm32_otg_t *otgp = usbp->otg;
 8003122:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003124:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8003128:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800312c:	6860      	ldr	r0, [r4, #4]
 800312e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003132:	6805      	ldr	r5, [r0, #0]
 8003134:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003138:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 800313c:	b115      	cbz	r5, 8003144 <_usb_ep0setup+0x304>
 800313e:	2101      	movs	r1, #1
 8003140:	4620      	mov	r0, r4
 8003142:	47a8      	blx	r5
  usbp->state = USB_SELECTED;
 8003144:	2303      	movs	r3, #3
 8003146:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 800314a:	7023      	strb	r3, [r4, #0]
 800314c:	e770      	b.n	8003030 <_usb_ep0setup+0x1f0>
 800314e:	2320      	movs	r3, #32
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f7fe faac 	bl	80016b0 <_dbg_check_lock_from_isr>
  osalDbgCheckClassI();
 8003158:	f7fe f972 	bl	8001440 <chDbgCheckClassI>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 800315c:	7823      	ldrb	r3, [r4, #0]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d010      	beq.n	8003184 <_usb_ep0setup+0x344>
 8003162:	4829      	ldr	r0, [pc, #164]	; (8003208 <_usb_ep0setup+0x3c8>)
 8003164:	f7fe f944 	bl	80013f0 <chSysHalt>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8003168:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800316c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003170:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003174:	e75c      	b.n	8003030 <_usb_ep0setup+0x1f0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8003176:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800317a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800317e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
 8003182:	e755      	b.n	8003030 <_usb_ep0setup+0x1f0>
 8003184:	6f22      	ldr	r2, [r4, #112]	; 0x70
  usbp->transmitting &= 1U;
 8003186:	8921      	ldrh	r1, [r4, #8]
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	6763      	str	r3, [r4, #116]	; 0x74
  usbp->receiving    &= 1U;
 800318c:	8963      	ldrh	r3, [r4, #10]
 800318e:	6890      	ldr	r0, [r2, #8]
 8003190:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    usbp->epc[i] = NULL;
 8003192:	6125      	str	r5, [r4, #16]
 8003194:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003198:	e9c4 5507 	strd	r5, r5, [r4, #28]
  usbp->transmitting &= 1U;
 800319c:	f001 0101 	and.w	r1, r1, #1
  usbp->receiving    &= 1U;
 80031a0:	f003 0301 	and.w	r3, r3, #1
  usbp->transmitting &= 1U;
 80031a4:	8121      	strh	r1, [r4, #8]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80031a6:	462a      	mov	r2, r5
 80031a8:	3001      	adds	r0, #1
  usbp->receiving    &= 1U;
 80031aa:	8163      	strh	r3, [r4, #10]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	eb06 1342 	add.w	r3, r6, r2, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80031b4:	3201      	adds	r2, #1
 80031b6:	4282      	cmp	r2, r0
    otgp->ie[i].DIEPCTL = 0;
 80031b8:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 80031bc:	f8c3 5910 	str.w	r5, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80031c0:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 80031c4:	f8c3 5b00 	str.w	r5, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 80031c8:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80031cc:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80031d0:	d1ee      	bne.n	80031b0 <_usb_ep0setup+0x370>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80031d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80031d6:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
  _dbg_check_unlock_from_isr();
 80031da:	f7fe fa51 	bl	8001680 <_dbg_check_unlock_from_isr>
 80031de:	f385 8811 	msr	BASEPRI, r5
        usbp->state = USB_SELECTED;
 80031e2:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80031e4:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 80031e6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
        usbp->state = USB_SELECTED;
 80031ea:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f43f aeef 	beq.w	8002fd2 <_usb_ep0setup+0x192>
 80031f4:	4620      	mov	r0, r4
 80031f6:	4798      	blx	r3
 80031f8:	e6eb      	b.n	8002fd2 <_usb_ep0setup+0x192>
 80031fa:	bf00      	nop
 80031fc:	0800a394 	.word	0x0800a394
 8003200:	0800a01c 	.word	0x0800a01c
 8003204:	08009f2c 	.word	0x08009f2c
 8003208:	08009d74 	.word	0x08009d74
 800320c:	00000000 	.word	0x00000000

08003210 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003210:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8003214:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003216:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800321a:	2300      	movs	r3, #0
 800321c:	f383 8811 	msr	BASEPRI, r3
}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
	...

08003230 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8003230:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8003232:	4d1c      	ldr	r5, [pc, #112]	; (80032a4 <chSchDoReschedule+0x74>)
  thread_t *tp = tqp->next;
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	69ae      	ldr	r6, [r5, #24]
  tqp->next             = tp->queue.next;
 8003238:	681c      	ldr	r4, [r3, #0]
 800323a:	602c      	str	r4, [r5, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800323c:	2201      	movs	r2, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800323e:	6065      	str	r5, [r4, #4]
 8003240:	f883 2020 	strb.w	r2, [r3, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003244:	61ab      	str	r3, [r5, #24]
  chDbgCheckClassI();
 8003246:	f7fe f8fb 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800324a:	b326      	cbz	r6, 8003296 <chSchDoReschedule+0x66>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800324c:	f896 3020 	ldrb.w	r3, [r6, #32]
 8003250:	b30b      	cbz	r3, 8003296 <chSchDoReschedule+0x66>
 8003252:	2b0f      	cmp	r3, #15
 8003254:	d01f      	beq.n	8003296 <chSchDoReschedule+0x66>
  tp->state = CH_STATE_READY;
 8003256:	2300      	movs	r3, #0
  } while (cp->prio > tp->prio);
 8003258:	68b2      	ldr	r2, [r6, #8]
  tp->state = CH_STATE_READY;
 800325a:	f886 3020 	strb.w	r3, [r6, #32]
 800325e:	e000      	b.n	8003262 <chSchDoReschedule+0x32>
 8003260:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio > tp->prio);
 8003262:	68a3      	ldr	r3, [r4, #8]
 8003264:	4293      	cmp	r3, r2
 8003266:	d8fb      	bhi.n	8003260 <chSchDoReschedule+0x30>
  tp->queue.prev             = cp->queue.prev;
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800326c:	e9c6 4300 	strd	r4, r3, [r6]
  tp->queue.prev->queue.next = tp;
 8003270:	601e      	str	r6, [r3, #0]
 8003272:	07d3      	lsls	r3, r2, #31
  cp->queue.prev             = tp;
 8003274:	6066      	str	r6, [r4, #4]
 8003276:	d402      	bmi.n	800327e <chSchDoReschedule+0x4e>
 8003278:	4630      	mov	r0, r6
 800327a:	f7fe f861 	bl	8001340 <_trace_switch.part.0>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800327e:	f3ef 8309 	mrs	r3, PSP

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003282:	69f2      	ldr	r2, [r6, #28]
 8003284:	3b24      	subs	r3, #36	; 0x24
 8003286:	429a      	cmp	r2, r3
 8003288:	d808      	bhi.n	800329c <chSchDoReschedule+0x6c>
 800328a:	4631      	mov	r1, r6
 800328c:	69a8      	ldr	r0, [r5, #24]
}
 800328e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8003292:	f7fd b815 	b.w	80002c0 <_port_switch>
  chDbgCheck(tp != NULL);
 8003296:	4804      	ldr	r0, [pc, #16]	; (80032a8 <chSchDoReschedule+0x78>)
 8003298:	f7fe f8aa 	bl	80013f0 <chSysHalt>
  chSysSwitch(currp, otp);
 800329c:	4803      	ldr	r0, [pc, #12]	; (80032ac <chSchDoReschedule+0x7c>)
 800329e:	f7fe f8a7 	bl	80013f0 <chSysHalt>
 80032a2:	bf00      	nop
 80032a4:	200018e0 	.word	0x200018e0
 80032a8:	08009a30 	.word	0x08009a30
 80032ac:	08009f74 	.word	0x08009f74

080032b0 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 80032b0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <_dbg_check_unlock+0x18>)
 80032b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b6:	b922      	cbnz	r2, 80032c2 <_dbg_check_unlock+0x12>
 80032b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ba:	2900      	cmp	r1, #0
 80032bc:	dd01      	ble.n	80032c2 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032c0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 80032c2:	4802      	ldr	r0, [pc, #8]	; (80032cc <_dbg_check_unlock+0x1c>)
 80032c4:	f7fe f894 	bl	80013f0 <chSysHalt>
 80032c8:	200018e0 	.word	0x200018e0
 80032cc:	08009e5c 	.word	0x08009e5c

080032d0 <chSysUnlock.lto_priv.44>:
static inline void chSysUnlock(void) {
 80032d0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 80032d2:	f7ff ffed 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <chSysUnlock.lto_priv.44+0x28>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d004      	beq.n	80032e8 <chSysUnlock.lto_priv.44+0x18>
 80032de:	6999      	ldr	r1, [r3, #24]
 80032e0:	6893      	ldr	r3, [r2, #8]
 80032e2:	688a      	ldr	r2, [r1, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d303      	bcc.n	80032f0 <chSysUnlock.lto_priv.44+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80032e8:	2300      	movs	r3, #0
 80032ea:	f383 8811 	msr	BASEPRI, r3
}
 80032ee:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <chSysUnlock.lto_priv.44+0x2c>)
 80032f2:	f7fe f87d 	bl	80013f0 <chSysHalt>
 80032f6:	bf00      	nop
 80032f8:	200018e0 	.word	0x200018e0
 80032fc:	0800998c 	.word	0x0800998c

08003300 <chSysUnlock.lto_priv.41>:
static inline void chSysUnlock(void) {
 8003300:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 8003302:	f7ff ffd5 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <chSysUnlock.lto_priv.41+0x28>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d004      	beq.n	8003318 <chSysUnlock.lto_priv.41+0x18>
 800330e:	6999      	ldr	r1, [r3, #24]
 8003310:	6893      	ldr	r3, [r2, #8]
 8003312:	688a      	ldr	r2, [r1, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d303      	bcc.n	8003320 <chSysUnlock.lto_priv.41+0x20>
 8003318:	2300      	movs	r3, #0
 800331a:	f383 8811 	msr	BASEPRI, r3
}
 800331e:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <chSysUnlock.lto_priv.41+0x2c>)
 8003322:	f7fe f865 	bl	80013f0 <chSysHalt>
 8003326:	bf00      	nop
 8003328:	200018e0 	.word	0x200018e0
 800332c:	08009974 	.word	0x08009974

08003330 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8003330:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <_dbg_check_lock+0x18>)
 8003334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003336:	b90a      	cbnz	r2, 800333c <_dbg_check_lock+0xc>
 8003338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333a:	b112      	cbz	r2, 8003342 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <_dbg_check_lock+0x1c>)
 800333e:	f7fe f857 	bl	80013f0 <chSysHalt>
  _dbg_enter_lock();
 8003342:	2201      	movs	r2, #1
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003346:	bd08      	pop	{r3, pc}
 8003348:	200018e0 	.word	0x200018e0
 800334c:	08009e4c 	.word	0x08009e4c

08003350 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2320      	movs	r3, #32
 8003354:	4604      	mov	r4, r0
 8003356:	460d      	mov	r5, r1
 8003358:	4616      	mov	r6, r2
 800335a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800335e:	f7ff ffe7 	bl	8003330 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8003362:	4632      	mov	r2, r6
 8003364:	4629      	mov	r1, r5
 8003366:	4620      	mov	r0, r4
 8003368:	f7fe f87a 	bl	8001460 <chCoreAllocAlignedWithOffsetI>
 800336c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800336e:	f7ff ff9f 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <chCoreAllocAlignedWithOffset+0x44>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d004      	beq.n	8003384 <chCoreAllocAlignedWithOffset+0x34>
 800337a:	6999      	ldr	r1, [r3, #24]
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	688a      	ldr	r2, [r1, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d304      	bcc.n	800338e <chCoreAllocAlignedWithOffset+0x3e>
 8003384:	2300      	movs	r3, #0
 8003386:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800338a:	4620      	mov	r0, r4
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	4802      	ldr	r0, [pc, #8]	; (8003398 <chCoreAllocAlignedWithOffset+0x48>)
 8003390:	f7fe f82e 	bl	80013f0 <chSysHalt>
 8003394:	200018e0 	.word	0x200018e0
 8003398:	080099b0 	.word	0x080099b0
 800339c:	00000000 	.word	0x00000000

080033a0 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 80033a4:	1e08      	subs	r0, r1, #0
 80033a6:	db0a      	blt.n	80033be <_sbrk_r+0x1e>
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 80033a8:	2200      	movs	r2, #0
 80033aa:	2104      	movs	r1, #4
 80033ac:	f7ff ffd0 	bl	8003350 <chCoreAllocAlignedWithOffset>

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
 80033b0:	b100      	cbz	r0, 80033b4 <_sbrk_r+0x14>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 80033b2:	bd10      	pop	{r4, pc}
    __errno_r(r) = ENOMEM;
 80033b4:	230c      	movs	r3, #12
 80033b6:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80033bc:	bd10      	pop	{r4, pc}
  chDbgCheck(incr >= 0);
 80033be:	4801      	ldr	r0, [pc, #4]	; (80033c4 <_sbrk_r+0x24>)
 80033c0:	f7fe f816 	bl	80013f0 <chSysHalt>
 80033c4:	08009b1c 	.word	0x08009b1c
	...

080033d0 <adcSampleThread>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80033d0:	4d30      	ldr	r5, [pc, #192]	; (8003494 <adcSampleThread+0xc4>)
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <adcSampleThread+0xc8>)
 80033d4:	69ab      	ldr	r3, [r5, #24]
 80033d6:	4c31      	ldr	r4, [pc, #196]	; (800349c <adcSampleThread+0xcc>)
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 80033d8:	4e31      	ldr	r6, [pc, #196]	; (80034a0 <adcSampleThread+0xd0>)
  adcp->adc->SQR3  = grpp->sqr3;
 80033da:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80034bc <adcSampleThread+0xec>
  0, // ADC SQR2 Conversion group sequence 7-12
  ADC_SQR3_SQ1_N(ADC_CHANNEL_IN10) | ADC_SQR3_SQ2_N(ADC_CHANNEL_IN11) | ADC_SQR3_SQ3_N(ADC_CHANNEL_IN12) | ADC_SQR3_SQ4_N(ADC_CHANNEL_IN13) | ADC_SQR3_SQ5_N(ADC_CHANNEL_IN14) | ADC_SQR3_SQ6_N(ADC_CHANNEL_IN15) // ADC SQR3 Conversion group sequence 1-6
};

THD_FUNCTION(adcSampleThread, arg)
{
 80033de:	b580      	push	{r7, lr}
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 80033e0:	4f30      	ldr	r7, [pc, #192]	; (80034a4 <adcSampleThread+0xd4>)
 80033e2:	619a      	str	r2, [r3, #24]
 80033e4:	2320      	movs	r3, #32
 80033e6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80033ea:	f7ff ffa1 	bl	8003330 <_dbg_check_lock>
                 adcsample_t *samples,
                 size_t depth) {
  msg_t msg;

  osalSysLock();
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 80033ee:	6963      	ldr	r3, [r4, #20]
 80033f0:	b113      	cbz	r3, 80033f8 <adcSampleThread+0x28>
 80033f2:	482d      	ldr	r0, [pc, #180]	; (80034a8 <adcSampleThread+0xd8>)
 80033f4:	f7fd fffc 	bl	80013f0 <chSysHalt>
  osalDbgCheckClassI();
 80033f8:	f7fe f822 	bl	8001440 <chDbgCheckClassI>
  osalDbgAssert((adcp->state == ADC_READY) ||
 80033fc:	7823      	ldrb	r3, [r4, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d005      	beq.n	800340e <adcSampleThread+0x3e>
 8003402:	3b04      	subs	r3, #4
 8003404:	2b01      	cmp	r3, #1
 8003406:	d902      	bls.n	800340e <adcSampleThread+0x3e>
 8003408:	4828      	ldr	r0, [pc, #160]	; (80034ac <adcSampleThread+0xdc>)
 800340a:	f7fd fff1 	bl	80013f0 <chSysHalt>
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800340e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003410:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80034c0 <adcSampleThread+0xf0>
  adcp->state    = ADC_ACTIVE;
 8003414:	2003      	movs	r0, #3
 8003416:	7020      	strb	r0, [r4, #0]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003418:	681a      	ldr	r2, [r3, #0]
  mode = adcp->dmamode;
 800341a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  adcp->grpp     = grpp;
 800341c:	6127      	str	r7, [r4, #16]
  adcp->depth    = depth;
 800341e:	f04f 0c04 	mov.w	ip, #4
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8003422:	2118      	movs	r1, #24
 8003424:	e9c4 6c02 	strd	r6, ip, [r4, #8]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8003428:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 800342a:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 800342c:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 800342e:	6811      	ldr	r1, [r2, #0]
  adcp->adc->SR    = 0;
 8003430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return ch.rlist.current;
 8003432:	f8d5 c018 	ldr.w	ip, [r5, #24]
  dmaStreamEnable(adcp->dmastp);
 8003436:	f041 0101 	orr.w	r1, r1, #1
 800343a:	6011      	str	r1, [r2, #0]
  adcp->adc->SR    = 0;
 800343c:	2200      	movs	r2, #0
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 800343e:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
  adcp->adc->SR    = 0;
 8003442:	601a      	str	r2, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
 8003444:	60da      	str	r2, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8003446:	611a      	str	r2, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8003448:	62d9      	str	r1, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800344c:	f240 3203 	movw	r2, #771	; 0x303
  adcp->adc->SQR3  = grpp->sqr3;
 8003450:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <adcSampleThread+0xe0>)
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8003456:	f8c3 e004 	str.w	lr, [r3, #4]
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 800345a:	609a      	str	r2, [r3, #8]
  tp->u.wttrp = trp;
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <adcSampleThread+0xe4>)
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 800345e:	6099      	str	r1, [r3, #8]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
  tp->u.wttrp = trp;
 8003464:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
  *trp = tp;
 8003468:	f8c4 c014 	str.w	ip, [r4, #20]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800346c:	f7ff fa78 	bl	8002960 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8003470:	f7ff ff1e 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	42ab      	cmp	r3, r5
 8003478:	d004      	beq.n	8003484 <adcSampleThread+0xb4>
 800347a:	69aa      	ldr	r2, [r5, #24]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d303      	bcc.n	800348c <adcSampleThread+0xbc>
 8003484:	2300      	movs	r3, #0
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	e7ab      	b.n	80033e4 <adcSampleThread+0x14>
 800348c:	480a      	ldr	r0, [pc, #40]	; (80034b8 <adcSampleThread+0xe8>)
 800348e:	f7fd ffaf 	bl	80013f0 <chSysHalt>
 8003492:	bf00      	nop
 8003494:	200018e0 	.word	0x200018e0
 8003498:	08009f30 	.word	0x08009f30
 800349c:	200011e8 	.word	0x200011e8
 80034a0:	20002840 	.word	0x20002840
 80034a4:	08009f3c 	.word	0x08009f3c
 80034a8:	08009c24 	.word	0x08009c24
 80034ac:	08009bec 	.word	0x08009bec
 80034b0:	40000303 	.word	0x40000303
 80034b4:	200011fc 	.word	0x200011fc
 80034b8:	08009968 	.word	0x08009968
 80034bc:	1ee6b16a 	.word	0x1ee6b16a
 80034c0:	04000100 	.word	0x04000100
	...

080034d0 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	2320      	movs	r3, #32
 80034d6:	b085      	sub	sp, #20
 80034d8:	4680      	mov	r8, r0
 80034da:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 80034de:	4cbd      	ldr	r4, [pc, #756]	; (80037d4 <chRegFindThreadByWorkingArea+0x304>)
  _dbg_check_lock();
 80034e0:	f7ff ff26 	bl	8003330 <_dbg_check_lock>
 80034e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
  tp->refs++;
 80034e8:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 80034ec:	3301      	adds	r3, #1
 80034ee:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
  _dbg_check_unlock();
 80034f2:	f7ff fedd 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d004      	beq.n	8003506 <chRegFindThreadByWorkingArea+0x36>
 80034fc:	69a2      	ldr	r2, [r4, #24]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	6892      	ldr	r2, [r2, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d347      	bcc.n	8003596 <chRegFindThreadByWorkingArea+0xc6>
 8003506:	2600      	movs	r6, #0
 8003508:	f386 8811 	msr	BASEPRI, r6
 800350c:	2720      	movs	r7, #32
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 800350e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003512:	4598      	cmp	r8, r3
 8003514:	f000 8090 	beq.w	8003638 <chRegFindThreadByWorkingArea+0x168>
 8003518:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 800351c:	f7ff ff08 	bl	8003330 <_dbg_check_lock>
  ntp = tp->newer;
 8003520:	f8d9 5010 	ldr.w	r5, [r9, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8003524:	42a5      	cmp	r5, r4
 8003526:	f000 8089 	beq.w	800363c <chRegFindThreadByWorkingArea+0x16c>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 800352a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d037      	beq.n	80035a2 <chRegFindThreadByWorkingArea+0xd2>
    ntp->refs++;
 8003532:	3301      	adds	r3, #1
 8003534:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  _dbg_check_unlock();
 8003538:	f7ff feba 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	42a3      	cmp	r3, r4
 8003540:	d004      	beq.n	800354c <chRegFindThreadByWorkingArea+0x7c>
 8003542:	69a2      	ldr	r2, [r4, #24]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d324      	bcc.n	8003596 <chRegFindThreadByWorkingArea+0xc6>
 800354c:	f386 8811 	msr	BASEPRI, r6
 8003550:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8003554:	f7ff feec 	bl	8003330 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8003558:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 800355c:	b1f3      	cbz	r3, 800359c <chRegFindThreadByWorkingArea+0xcc>
  tp->refs--;
 800355e:	3b01      	subs	r3, #1
 8003560:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8003564:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8003568:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d01b      	beq.n	80035a8 <chRegFindThreadByWorkingArea+0xd8>
  _dbg_check_unlock();
 8003570:	f7ff fe9e 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	42a3      	cmp	r3, r4
 8003578:	d004      	beq.n	8003584 <chRegFindThreadByWorkingArea+0xb4>
 800357a:	69a2      	ldr	r2, [r4, #24]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	6892      	ldr	r2, [r2, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d356      	bcc.n	8003632 <chRegFindThreadByWorkingArea+0x162>
 8003584:	f386 8811 	msr	BASEPRI, r6
 8003588:	46a9      	mov	r9, r5
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 800358a:	2d00      	cmp	r5, #0
 800358c:	d1bf      	bne.n	800350e <chRegFindThreadByWorkingArea+0x3e>

  return NULL;
}
 800358e:	4628      	mov	r0, r5
 8003590:	b005      	add	sp, #20
 8003592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003596:	4890      	ldr	r0, [pc, #576]	; (80037d8 <chRegFindThreadByWorkingArea+0x308>)
 8003598:	f7fd ff2a 	bl	80013f0 <chSysHalt>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 800359c:	488f      	ldr	r0, [pc, #572]	; (80037dc <chRegFindThreadByWorkingArea+0x30c>)
 800359e:	f7fd ff27 	bl	80013f0 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80035a2:	488f      	ldr	r0, [pc, #572]	; (80037e0 <chRegFindThreadByWorkingArea+0x310>)
 80035a4:	f7fd ff24 	bl	80013f0 <chSysHalt>
    REG_REMOVE(tp);
 80035a8:	e9d9 2304 	ldrd	r2, r3, [r9, #16]
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80035b2:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 80035b4:	f7ff fe7c 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	42a3      	cmp	r3, r4
 80035bc:	d004      	beq.n	80035c8 <chRegFindThreadByWorkingArea+0xf8>
 80035be:	69a2      	ldr	r2, [r4, #24]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d334      	bcc.n	8003632 <chRegFindThreadByWorkingArea+0x162>
 80035c8:	f386 8811 	msr	BASEPRI, r6
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80035cc:	f899 3021 	ldrb.w	r3, [r9, #33]	; 0x21
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d033      	beq.n	8003640 <chRegFindThreadByWorkingArea+0x170>
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d1d5      	bne.n	8003588 <chRegFindThreadByWorkingArea+0xb8>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 80035dc:	f8d9 a040 	ldr.w	sl, [r9, #64]	; 0x40
 80035e0:	f8d9 901c 	ldr.w	r9, [r9, #28]
 80035e4:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 80035e8:	f7ff fea2 	bl	8003330 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 80035ec:	f7fd ff28 	bl	8001440 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	f000 8086 	beq.w	8003704 <chRegFindThreadByWorkingArea+0x234>
 80035f8:	f1b9 0f00 	cmp.w	r9, #0
 80035fc:	f000 8082 	beq.w	8003704 <chRegFindThreadByWorkingArea+0x234>

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8003600:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003604:	3b01      	subs	r3, #1
 8003606:	ea19 0f03 	tst.w	r9, r3
 800360a:	d17b      	bne.n	8003704 <chRegFindThreadByWorkingArea+0x234>
              "unaligned object");

  php->next = mp->next;
 800360c:	f8da 3000 	ldr.w	r3, [sl]
 8003610:	f8c9 3000 	str.w	r3, [r9]
  mp->next = php;
 8003614:	f8ca 9000 	str.w	r9, [sl]
  _dbg_check_unlock();
 8003618:	f7ff fe4a 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	42a3      	cmp	r3, r4
 8003620:	d0b0      	beq.n	8003584 <chRegFindThreadByWorkingArea+0xb4>
 8003622:	69a2      	ldr	r2, [r4, #24]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d2ab      	bcs.n	8003584 <chRegFindThreadByWorkingArea+0xb4>
 800362c:	486d      	ldr	r0, [pc, #436]	; (80037e4 <chRegFindThreadByWorkingArea+0x314>)
 800362e:	f7fd fedf 	bl	80013f0 <chSysHalt>
 8003632:	486d      	ldr	r0, [pc, #436]	; (80037e8 <chRegFindThreadByWorkingArea+0x318>)
 8003634:	f7fd fedc 	bl	80013f0 <chSysHalt>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8003638:	464d      	mov	r5, r9
 800363a:	e7a8      	b.n	800358e <chRegFindThreadByWorkingArea+0xbe>
    ntp = NULL;
 800363c:	2500      	movs	r5, #0
 800363e:	e77b      	b.n	8003538 <chRegFindThreadByWorkingArea+0x68>
 8003640:	f8d9 901c 	ldr.w	r9, [r9, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8003644:	f1b9 0f00 	cmp.w	r9, #0
 8003648:	d059      	beq.n	80036fe <chRegFindThreadByWorkingArea+0x22e>
 800364a:	f019 0f07 	tst.w	r9, #7
 800364e:	d156      	bne.n	80036fe <chRegFindThreadByWorkingArea+0x22e>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8003650:	e959 1302 	ldrd	r1, r3, [r9, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003654:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8003656:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003658:	f849 3c04 	str.w	r3, [r9, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800365c:	f101 0b0c 	add.w	fp, r1, #12
 8003660:	9101      	str	r1, [sp, #4]
 8003662:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8003666:	f7ff fe63 	bl	8003330 <_dbg_check_lock>
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
 800366a:	f7fd fed9 	bl	8001420 <chDbgCheckClassS>
  thread_t *ctp = currp;
 800366e:	f8d4 a018 	ldr.w	sl, [r4, #24]
  chDbgCheck(mp != NULL);
 8003672:	9901      	ldr	r1, [sp, #4]
 8003674:	f1bb 0f00 	cmp.w	fp, #0
 8003678:	d030      	beq.n	80036dc <chRegFindThreadByWorkingArea+0x20c>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 800367a:	6948      	ldr	r0, [r1, #20]
 800367c:	2800      	cmp	r0, #0
 800367e:	f000 8097 	beq.w	80037b0 <chRegFindThreadByWorkingArea+0x2e0>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8003682:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003686:	6883      	ldr	r3, [r0, #8]
 8003688:	9201      	str	r2, [sp, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d90a      	bls.n	80036a4 <chRegFindThreadByWorkingArea+0x1d4>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 800368e:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 8003692:	9a01      	ldr	r2, [sp, #4]
 8003694:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8003696:	2b06      	cmp	r3, #6
 8003698:	f000 80c1 	beq.w	800381e <chRegFindThreadByWorkingArea+0x34e>
 800369c:	2b07      	cmp	r3, #7
 800369e:	f000 808e 	beq.w	80037be <chRegFindThreadByWorkingArea+0x2ee>
 80036a2:	b1f3      	cbz	r3, 80036e2 <chRegFindThreadByWorkingArea+0x212>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80036a4:	465a      	mov	r2, fp
 80036a6:	e004      	b.n	80036b2 <chRegFindThreadByWorkingArea+0x1e2>
 80036a8:	6890      	ldr	r0, [r2, #8]
 80036aa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80036ae:	4298      	cmp	r0, r3
 80036b0:	d303      	bcc.n	80036ba <chRegFindThreadByWorkingArea+0x1ea>
    cp = cp->queue.next;
 80036b2:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80036b4:	4593      	cmp	fp, r2
 80036b6:	d1f7      	bne.n	80036a8 <chRegFindThreadByWorkingArea+0x1d8>
 80036b8:	465a      	mov	r2, fp
  tp->queue.prev             = cp->queue.prev;
 80036ba:	6853      	ldr	r3, [r2, #4]
 80036bc:	9101      	str	r1, [sp, #4]
 80036be:	e9ca 2300 	strd	r2, r3, [sl]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80036c2:	2006      	movs	r0, #6
  tp->queue.prev->queue.next = tp;
 80036c4:	f8c3 a000 	str.w	sl, [r3]
  cp->queue.prev             = tp;
 80036c8:	f8c2 a004 	str.w	sl, [r2, #4]
      ctp->u.wtmtxp = mp;
 80036cc:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80036d0:	f7ff f916 	bl	8002900 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 80036d4:	9901      	ldr	r1, [sp, #4]
 80036d6:	694b      	ldr	r3, [r1, #20]
 80036d8:	459a      	cmp	sl, r3
 80036da:	d016      	beq.n	800370a <chRegFindThreadByWorkingArea+0x23a>
  chDbgCheck(mp != NULL);
 80036dc:	4843      	ldr	r0, [pc, #268]	; (80037ec <chRegFindThreadByWorkingArea+0x31c>)
 80036de:	f7fd fe87 	bl	80013f0 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 80036e2:	e9d0 3200 	ldrd	r3, r2, [r0]
          tp->state = CH_STATE_CURRENT;
 80036e6:	f04f 0c01 	mov.w	ip, #1
 80036ea:	f880 c020 	strb.w	ip, [r0, #32]
 80036ee:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80036f0:	6803      	ldr	r3, [r0, #0]
 80036f2:	9101      	str	r1, [sp, #4]
 80036f4:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 80036f6:	f7fd fee3 	bl	80014c0 <chSchReadyI>
 80036fa:	9901      	ldr	r1, [sp, #4]
 80036fc:	e7d2      	b.n	80036a4 <chRegFindThreadByWorkingArea+0x1d4>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80036fe:	483c      	ldr	r0, [pc, #240]	; (80037f0 <chRegFindThreadByWorkingArea+0x320>)
 8003700:	f7fd fe76 	bl	80013f0 <chSysHalt>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8003704:	483b      	ldr	r0, [pc, #236]	; (80037f4 <chRegFindThreadByWorkingArea+0x324>)
 8003706:	f7fd fe73 	bl	80013f0 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 800370a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 800370e:	459b      	cmp	fp, r3
 8003710:	d1e4      	bne.n	80036dc <chRegFindThreadByWorkingArea+0x20c>
 8003712:	9101      	str	r1, [sp, #4]
  _dbg_check_unlock();
 8003714:	f7ff fdcc 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	9901      	ldr	r1, [sp, #4]
 800371c:	42a2      	cmp	r2, r4
 800371e:	d005      	beq.n	800372c <chRegFindThreadByWorkingArea+0x25c>
 8003720:	69a3      	ldr	r3, [r4, #24]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4293      	cmp	r3, r2
 8003728:	f0c0 80ba 	bcc.w	80038a0 <chRegFindThreadByWorkingArea+0x3d0>
  hp = (heap_header_t *)p - 1U;
 800372c:	f1a9 0008 	sub.w	r0, r9, #8
  qp = &heapp->header;
 8003730:	f101 0c04 	add.w	ip, r1, #4
 8003734:	f386 8811 	msr	BASEPRI, r6
 8003738:	4662      	mov	r2, ip

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800373a:	4290      	cmp	r0, r2
 800373c:	d305      	bcc.n	800374a <chRegFindThreadByWorkingArea+0x27a>
 800373e:	6853      	ldr	r3, [r2, #4]
 8003740:	3301      	adds	r3, #1
 8003742:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003746:	4298      	cmp	r0, r3
 8003748:	d3d9      	bcc.n	80036fe <chRegFindThreadByWorkingArea+0x22e>

    if (((qp == &heapp->header) || (hp > qp)) &&
 800374a:	4594      	cmp	ip, r2
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 800374c:	6813      	ldr	r3, [r2, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 800374e:	d001      	beq.n	8003754 <chRegFindThreadByWorkingArea+0x284>
 8003750:	4290      	cmp	r0, r2
 8003752:	d92b      	bls.n	80037ac <chRegFindThreadByWorkingArea+0x2dc>
 8003754:	b10b      	cbz	r3, 800375a <chRegFindThreadByWorkingArea+0x28a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8003756:	4298      	cmp	r0, r3
 8003758:	d228      	bcs.n	80037ac <chRegFindThreadByWorkingArea+0x2dc>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800375a:	f859 cc04 	ldr.w	ip, [r9, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 800375e:	f849 3c08 	str.w	r3, [r9, #-8]
      H_NEXT(qp) = hp;
 8003762:	6010      	str	r0, [r2, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8003764:	f10c 0c01 	add.w	ip, ip, #1
 8003768:	f859 3c08 	ldr.w	r3, [r9, #-8]
 800376c:	eb00 0ecc 	add.w	lr, r0, ip, lsl #3
 8003770:	459e      	cmp	lr, r3
 8003772:	f000 809f 	beq.w	80038b4 <chRegFindThreadByWorkingArea+0x3e4>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8003776:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800377a:	f10c 0301 	add.w	r3, ip, #1
 800377e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003782:	4298      	cmp	r0, r3
 8003784:	f000 808f 	beq.w	80038a6 <chRegFindThreadByWorkingArea+0x3d6>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8003788:	69a2      	ldr	r2, [r4, #24]
 800378a:	9102      	str	r1, [sp, #8]
 800378c:	9201      	str	r2, [sp, #4]
 800378e:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8003792:	f7ff fdcd 	bl	8003330 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8003796:	9a01      	ldr	r2, [sp, #4]
 8003798:	9902      	ldr	r1, [sp, #8]
 800379a:	6b90      	ldr	r0, [r2, #56]	; 0x38
 800379c:	b118      	cbz	r0, 80037a6 <chRegFindThreadByWorkingArea+0x2d6>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800379e:	6883      	ldr	r3, [r0, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	f000 8092 	beq.w	80038ca <chRegFindThreadByWorkingArea+0x3fa>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80037a6:	4814      	ldr	r0, [pc, #80]	; (80037f8 <chRegFindThreadByWorkingArea+0x328>)
 80037a8:	f7fd fe22 	bl	80013f0 <chSysHalt>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 80037ac:	461a      	mov	r2, r3
 80037ae:	e7c4      	b.n	800373a <chRegFindThreadByWorkingArea+0x26a>
    mp->next = ctp->mtxlist;
 80037b0:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80037b4:	e9c1 a305 	strd	sl, r3, [r1, #20]
    ctp->mtxlist = mp;
 80037b8:	f8ca b038 	str.w	fp, [sl, #56]	; 0x38
 80037bc:	e7a9      	b.n	8003712 <chRegFindThreadByWorkingArea+0x242>
  tp->queue.prev->queue.next = tp->queue.next;
 80037be:	e9d0 3e00 	ldrd	r3, lr, [r0]
 80037c2:	f8ce 3000 	str.w	r3, [lr]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80037c6:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 80037ca:	6803      	ldr	r3, [r0, #0]
 80037cc:	f8c3 e004 	str.w	lr, [r3, #4]
 80037d0:	46e6      	mov	lr, ip
 80037d2:	e018      	b.n	8003806 <chRegFindThreadByWorkingArea+0x336>
 80037d4:	200018e0 	.word	0x200018e0
 80037d8:	08009a00 	.word	0x08009a00
 80037dc:	08009ae0 	.word	0x08009ae0
 80037e0:	08009b0c 	.word	0x08009b0c
 80037e4:	080099bc 	.word	0x080099bc
 80037e8:	0800998c 	.word	0x0800998c
 80037ec:	08009a24 	.word	0x08009a24
 80037f0:	08009a94 	.word	0x08009a94
 80037f4:	08009a70 	.word	0x08009a70
 80037f8:	08009aa0 	.word	0x08009aa0
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80037fc:	f8de 3008 	ldr.w	r3, [lr, #8]
 8003800:	9a01      	ldr	r2, [sp, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d803      	bhi.n	800380e <chRegFindThreadByWorkingArea+0x33e>
    cp = cp->queue.next;
 8003806:	f8de e000 	ldr.w	lr, [lr]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800380a:	45f4      	cmp	ip, lr
 800380c:	d1f6      	bne.n	80037fc <chRegFindThreadByWorkingArea+0x32c>
  tp->queue.prev             = cp->queue.prev;
 800380e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8003812:	e9c0 e300 	strd	lr, r3, [r0]
  tp->queue.prev->queue.next = tp;
 8003816:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8003818:	f8ce 0004 	str.w	r0, [lr, #4]
 800381c:	e742      	b.n	80036a4 <chRegFindThreadByWorkingArea+0x1d4>
  tp->queue.prev->queue.next = tp->queue.next;
 800381e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8003822:	601a      	str	r2, [r3, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003824:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8003828:	6802      	ldr	r2, [r0, #0]
 800382a:	46e6      	mov	lr, ip
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	e004      	b.n	800383a <chRegFindThreadByWorkingArea+0x36a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003830:	f8de 3008 	ldr.w	r3, [lr, #8]
 8003834:	9a01      	ldr	r2, [sp, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d803      	bhi.n	8003842 <chRegFindThreadByWorkingArea+0x372>
    cp = cp->queue.next;
 800383a:	f8de e000 	ldr.w	lr, [lr]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800383e:	45f4      	cmp	ip, lr
 8003840:	d1f6      	bne.n	8003830 <chRegFindThreadByWorkingArea+0x360>
  tp->queue.prev             = cp->queue.prev;
 8003842:	f8de 3004 	ldr.w	r3, [lr, #4]
 8003846:	e9c0 e300 	strd	lr, r3, [r0]
  tp->queue.prev->queue.next = tp;
 800384a:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 800384c:	f8ce 0004 	str.w	r0, [lr, #4]
          tp = tp->u.wtmtxp->owner;
 8003850:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8003854:	e715      	b.n	8003682 <chRegFindThreadByWorkingArea+0x1b2>
  tqp->next             = tp->queue.next;
 8003856:	f8d9 0000 	ldr.w	r0, [r9]
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 800385a:	6093      	str	r3, [r2, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 800385c:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8003860:	60c8      	str	r0, [r1, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003862:	f8c0 b004 	str.w	fp, [r0, #4]
 8003866:	e9c1 9305 	strd	r9, r3, [r1, #20]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800386a:	4648      	mov	r0, r9
      tp->mtxlist = mp;
 800386c:	f8c9 b038 	str.w	fp, [r9, #56]	; 0x38
      (void) chSchReadyI(tp);
 8003870:	f7fd fe26 	bl	80014c0 <chSchReadyI>
  chDbgCheckClassS();
 8003874:	f7fd fdd4 	bl	8001420 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8003878:	f7fd fde2 	bl	8001440 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8003880:	6892      	ldr	r2, [r2, #8]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d84a      	bhi.n	800391e <chRegFindThreadByWorkingArea+0x44e>
  _dbg_check_unlock();
 8003888:	f7ff fd12 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	42a3      	cmp	r3, r4
 8003890:	f43f ae78 	beq.w	8003584 <chRegFindThreadByWorkingArea+0xb4>
 8003894:	69a2      	ldr	r2, [r4, #24]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	f4bf ae72 	bcs.w	8003584 <chRegFindThreadByWorkingArea+0xb4>
 80038a0:	4820      	ldr	r0, [pc, #128]	; (8003924 <chRegFindThreadByWorkingArea+0x454>)
 80038a2:	f7fd fda5 	bl	80013f0 <chSysHalt>
        H_NEXT(qp) = H_NEXT(hp);
 80038a6:	e959 0302 	ldrd	r0, r3, [r9, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80038aa:	3301      	adds	r3, #1
 80038ac:	4463      	add	r3, ip
        H_NEXT(qp) = H_NEXT(hp);
 80038ae:	6010      	str	r0, [r2, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	e769      	b.n	8003788 <chRegFindThreadByWorkingArea+0x2b8>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80038b4:	f8de e004 	ldr.w	lr, [lr, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80038b8:	f850 303c 	ldr.w	r3, [r0, ip, lsl #3]
 80038bc:	f849 3c08 	str.w	r3, [r9, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80038c0:	eb0e 030c 	add.w	r3, lr, ip
 80038c4:	f849 3c04 	str.w	r3, [r9, #-4]
 80038c8:	e755      	b.n	8003776 <chRegFindThreadByWorkingArea+0x2a6>
    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 80038ca:	4583      	cmp	fp, r0
 80038cc:	f47f af6b 	bne.w	80037a6 <chRegFindThreadByWorkingArea+0x2d6>
    ctp->mtxlist = mp->next;
 80038d0:	f8d1 a018 	ldr.w	sl, [r1, #24]
 80038d4:	f8c2 a038 	str.w	sl, [r2, #56]	; 0x38
 80038d8:	9102      	str	r1, [sp, #8]
 80038da:	9201      	str	r2, [sp, #4]
 *
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 80038dc:	f7fd fda0 	bl	8001420 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80038e0:	9902      	ldr	r1, [sp, #8]
 80038e2:	f8d1 900c 	ldr.w	r9, [r1, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 80038e6:	45cb      	cmp	fp, r9
 80038e8:	d017      	beq.n	800391a <chRegFindThreadByWorkingArea+0x44a>
      tprio_t newprio = ctp->realprio;
 80038ea:	9a01      	ldr	r2, [sp, #4]
 80038ec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
      while (lmp != NULL) {
 80038ee:	f1ba 0f00 	cmp.w	sl, #0
 80038f2:	d0b0      	beq.n	8003856 <chRegFindThreadByWorkingArea+0x386>
 80038f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038f8:	9101      	str	r1, [sp, #4]
 80038fa:	f7fd fd91 	bl	8001420 <chDbgCheckClassS>
 80038fe:	f8da 0000 	ldr.w	r0, [sl]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	4582      	cmp	sl, r0
 8003906:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800390a:	d003      	beq.n	8003914 <chRegFindThreadByWorkingArea+0x444>
 800390c:	6880      	ldr	r0, [r0, #8]
 800390e:	4283      	cmp	r3, r0
 8003910:	bf38      	it	cc
 8003912:	4603      	movcc	r3, r0
        lmp = lmp->next;
 8003914:	f8da a00c 	ldr.w	sl, [sl, #12]
 8003918:	e7e9      	b.n	80038ee <chRegFindThreadByWorkingArea+0x41e>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 800391a:	614e      	str	r6, [r1, #20]
 800391c:	e7b4      	b.n	8003888 <chRegFindThreadByWorkingArea+0x3b8>
    chSchDoRescheduleAhead();
 800391e:	f7ff fc87 	bl	8003230 <chSchDoReschedule>
 8003922:	e7b1      	b.n	8003888 <chRegFindThreadByWorkingArea+0x3b8>
 8003924:	08009998 	.word	0x08009998
	...

08003930 <chThdCreateStatic.constprop.2>:
  chDbgCheck((wsp != NULL) &&
 8003930:	0743      	lsls	r3, r0, #29
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8003932:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((wsp != NULL) &&
 8003934:	d105      	bne.n	8003942 <chThdCreateStatic.constprop.2+0x12>
 8003936:	4605      	mov	r5, r0
 8003938:	460c      	mov	r4, r1
 800393a:	4616      	mov	r6, r2
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 800393c:	f7ff fdc8 	bl	80034d0 <chRegFindThreadByWorkingArea>
 8003940:	b110      	cbz	r0, 8003948 <chThdCreateStatic.constprop.2+0x18>
  chDbgCheck((wsp != NULL) &&
 8003942:	481f      	ldr	r0, [pc, #124]	; (80039c0 <chThdCreateStatic.constprop.2+0x90>)
 8003944:	f7fd fd54 	bl	80013f0 <chSysHalt>
  _thread_memfill((uint8_t *)wsp,
 8003948:	192a      	adds	r2, r5, r4
  while (startp < endp) {
 800394a:	4295      	cmp	r5, r2
 800394c:	d205      	bcs.n	800395a <chThdCreateStatic.constprop.2+0x2a>
 800394e:	462b      	mov	r3, r5
    *startp++ = v;
 8003950:	2155      	movs	r1, #85	; 0x55
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
  while (startp < endp) {
 8003956:	429a      	cmp	r2, r3
 8003958:	d1fb      	bne.n	8003952 <chThdCreateStatic.constprop.2+0x22>
 800395a:	2320      	movs	r3, #32
 800395c:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 8003960:	3c48      	subs	r4, #72	; 0x48
 8003962:	442c      	add	r4, r5
  _dbg_check_lock();
 8003964:	f7ff fce4 	bl	8003330 <_dbg_check_lock>
  REG_INSERT(tp);
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <chThdCreateStatic.constprop.2+0x94>)
 800396a:	6123      	str	r3, [r4, #16]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800396c:	f1a4 0224 	sub.w	r2, r4, #36	; 0x24
  REG_INSERT(tp);
 8003970:	6959      	ldr	r1, [r3, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003972:	4815      	ldr	r0, [pc, #84]	; (80039c8 <chThdCreateStatic.constprop.2+0x98>)
 8003974:	60e2      	str	r2, [r4, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003976:	2201      	movs	r2, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003978:	f844 0c04 	str.w	r0, [r4, #-4]
  tp->wabase = (stkalign_t *)wsp;
 800397c:	61e5      	str	r5, [r4, #28]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800397e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  tp->state     = CH_STATE_WTSTART;
 8003982:	2502      	movs	r5, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003984:	2200      	movs	r2, #0
  tp->name      = name;
 8003986:	4811      	ldr	r0, [pc, #68]	; (80039cc <chThdCreateStatic.constprop.2+0x9c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003988:	f844 2c20 	str.w	r2, [r4, #-32]
  tp->state     = CH_STATE_WTSTART;
 800398c:	8425      	strh	r5, [r4, #32]
  tp->name      = name;
 800398e:	61a0      	str	r0, [r4, #24]
  tp->epending  = (eventmask_t)0;
 8003990:	e9c4 220d 	strd	r2, r2, [r4, #52]	; 0x34
  tp->prio      = prio;
 8003994:	2080      	movs	r0, #128	; 0x80
  queue_init(&tp->msgqueue);
 8003996:	f104 022c 	add.w	r2, r4, #44	; 0x2c
  list_init(&tp->waiting);
 800399a:	f104 0528 	add.w	r5, r4, #40	; 0x28
  REG_INSERT(tp);
 800399e:	6161      	str	r1, [r4, #20]
  tp->prio      = prio;
 80039a0:	60a0      	str	r0, [r4, #8]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80039a2:	f844 6c24 	str.w	r6, [r4, #-36]
  tp->realprio  = prio;
 80039a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  REG_INSERT(tp);
 80039a8:	610c      	str	r4, [r1, #16]
  chSchWakeupS(tp, MSG_OK);
 80039aa:	4620      	mov	r0, r4
  tqp->next = (thread_t *)tqp;
 80039ac:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80039b0:	6322      	str	r2, [r4, #48]	; 0x30
  REG_INSERT(tp);
 80039b2:	615c      	str	r4, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 80039b4:	f7fe ff64 	bl	8002880 <chSchWakeupS.constprop.8>
  chSysUnlock();
 80039b8:	f7ff fc8a 	bl	80032d0 <chSysUnlock.lto_priv.44>
}
 80039bc:	4620      	mov	r0, r4
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	08009aac 	.word	0x08009aac
 80039c4:	200018e0 	.word	0x200018e0
 80039c8:	080002d1 	.word	0x080002d1
 80039cc:	08009f84 	.word	0x08009f84

080039d0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80039d0:	b510      	push	{r4, lr}
 80039d2:	2320      	movs	r3, #32
 80039d4:	4604      	mov	r4, r0
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f7ff fca9 	bl	8003330 <_dbg_check_lock>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80039de:	4621      	mov	r1, r4
 80039e0:	2008      	movs	r0, #8
 80039e2:	f7fe ffbd 	bl	8002960 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 80039e6:	f7ff fc63 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <chThdSleep+0x3c>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d004      	beq.n	80039fc <chThdSleep+0x2c>
 80039f2:	6999      	ldr	r1, [r3, #24]
 80039f4:	6893      	ldr	r3, [r2, #8]
 80039f6:	688a      	ldr	r2, [r1, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d303      	bcc.n	8003a04 <chThdSleep+0x34>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f383 8811 	msr	BASEPRI, r3
}
 8003a02:	bd10      	pop	{r4, pc}
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <chThdSleep+0x40>)
 8003a06:	f7fd fcf3 	bl	80013f0 <chSysHalt>
 8003a0a:	bf00      	nop
 8003a0c:	200018e0 	.word	0x200018e0
 8003a10:	0800998c 	.word	0x0800998c
	...

08003a20 <writeThrFunction>:

THD_FUNCTION(writeThrFunction, arg)
{
 8003a20:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003a24:	4b52      	ldr	r3, [pc, #328]	; (8003b70 <writeThrFunction+0x150>)
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <writeThrFunction+0x154>)
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	4c53      	ldr	r4, [pc, #332]	; (8003b78 <writeThrFunction+0x158>)
 8003a2c:	619a      	str	r2, [r3, #24]
 8003a2e:	b093      	sub	sp, #76	; 0x4c
    //Analog input
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003a30:	8927      	ldrh	r7, [r4, #8]
 8003a32:	8aa6      	ldrh	r6, [r4, #20]
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a34:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a38:	f8b4 a006 	ldrh.w	sl, [r4, #6]
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a3c:	8822      	ldrh	r2, [r4, #0]
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a3e:	8a61      	ldrh	r1, [r4, #18]
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a40:	f8b4 e018 	ldrh.w	lr, [r4, #24]
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a44:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 8003a48:	8ae5      	ldrh	r5, [r4, #22]
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a4a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a4e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a52:	89e3      	ldrh	r3, [r4, #14]
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a54:	8a20      	ldrh	r0, [r4, #16]
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003a56:	443e      	add	r6, r7
 8003a58:	8c27      	ldrh	r7, [r4, #32]
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a5a:	4442      	add	r2, r8
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a5c:	4451      	add	r1, sl
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a5e:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a62:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
 8003a66:	4472      	add	r2, lr
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a68:	444d      	add	r5, r9
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a6a:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 8003a6e:	f8b4 9026 	ldrh.w	r9, [r4, #38]	; 0x26
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003a72:	443e      	add	r6, r7
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a74:	8de7      	ldrh	r7, [r4, #46]	; 0x2e
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a76:	445b      	add	r3, fp
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a78:	4460      	add	r0, ip
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a7a:	f8b4 b01e 	ldrh.w	fp, [r4, #30]
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a7e:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a82:	4455      	add	r5, sl
    raw0 = (uint32_t)(samples[0] + samples[6] + samples[12] + samples[18]) / 4; //PC0
 8003a84:	4442      	add	r2, r8
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a86:	4473      	add	r3, lr
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a88:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a8c:	f8b4 e02a 	ldrh.w	lr, [r4, #42]	; 0x2a
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003a90:	443d      	add	r5, r7
    //Digital input
    raw6 = palReadPad(GPIOC, 13); //PC13
 8003a92:	4f3a      	ldr	r7, [pc, #232]	; (8003b7c <writeThrFunction+0x15c>)
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003a94:	4460      	add	r0, ip
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a96:	4459      	add	r1, fp
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003a98:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003a9c:	444b      	add	r3, r9
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003a9e:	448e      	add	lr, r1
    raw7 = palReadPad(GPIOC, 14); //PC14
    raw8 = palReadPad(GPIOC, 15); //PC15

    payloadLength = sprintf(payloadBuffer, "status|ebs_line|%ld", raw0);
 8003aa0:	0892      	lsrs	r2, r2, #2
    raw1 = (uint32_t)(samples[1] + samples[7] + samples[13] + samples[19]) / 4; //PC1
 8003aa2:	ea4f 0993 	mov.w	r9, r3, lsr #2
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003aa6:	4480      	add	r8, r0
    raw6 = palReadPad(GPIOC, 13); //PC13
 8003aa8:	693b      	ldr	r3, [r7, #16]
    payloadLength = sprintf(payloadBuffer, "status|ebs_line|%ld", raw0);
 8003aaa:	4935      	ldr	r1, [pc, #212]	; (8003b80 <writeThrFunction+0x160>)
    raw6 = palReadPad(GPIOC, 13); //PC13
 8003aac:	9301      	str	r3, [sp, #4]
    payloadLength = sprintf(payloadBuffer, "status|ebs_line|%ld", raw0);
 8003aae:	a802      	add	r0, sp, #8
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003ab0:	4466      	add	r6, ip
    raw3 = (uint32_t)(samples[3] + samples[9] + samples[15] + samples[21]) / 4; //PC3
 8003ab2:	ea4f 0a9e 	mov.w	sl, lr, lsr #2
    raw7 = palReadPad(GPIOC, 14); //PC14
 8003ab6:	f8d7 b010 	ldr.w	fp, [r7, #16]
    raw8 = palReadPad(GPIOC, 15); //PC15
 8003aba:	693f      	ldr	r7, [r7, #16]
    payloadLength = sprintf(payloadBuffer, "status|ebs_line|%ld", raw0);
 8003abc:	f002 f896 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	a802      	add	r0, sp, #8
 8003ac4:	f7ff f854 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|ebs_actuator|%ld", raw1);
 8003ac8:	464a      	mov	r2, r9
 8003aca:	492e      	ldr	r1, [pc, #184]	; (8003b84 <writeThrFunction+0x164>)
 8003acc:	a802      	add	r0, sp, #8
 8003ace:	f002 f88d 	bl	8005bec <sprintf>
    raw2 = (uint32_t)(samples[2] + samples[8] + samples[14] + samples[20]) / 4; //PC2
 8003ad2:	ea4f 0898 	mov.w	r8, r8, lsr #2
    writeAnalog(payloadBuffer, payloadLength);
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	a802      	add	r0, sp, #8
 8003ada:	f7ff f849 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|pressure_rag|%ld", raw2);
 8003ade:	4642      	mov	r2, r8
 8003ae0:	4929      	ldr	r1, [pc, #164]	; (8003b88 <writeThrFunction+0x168>)
 8003ae2:	a802      	add	r0, sp, #8
 8003ae4:	f002 f882 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003ae8:	4601      	mov	r1, r0
 8003aea:	a802      	add	r0, sp, #8
 8003aec:	f7ff f840 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|service_tank|%ld", raw3);
 8003af0:	4652      	mov	r2, sl
 8003af2:	4926      	ldr	r1, [pc, #152]	; (8003b8c <writeThrFunction+0x16c>)
 8003af4:	a802      	add	r0, sp, #8
 8003af6:	f002 f879 	bl	8005bec <sprintf>
    raw4 = (uint32_t)(samples[4] + samples[10] + samples[16] + samples[22]) / 4; //PC4
 8003afa:	08b6      	lsrs	r6, r6, #2
    writeAnalog(payloadBuffer, payloadLength);
 8003afc:	4601      	mov	r1, r0
 8003afe:	a802      	add	r0, sp, #8
 8003b00:	f7ff f836 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|position_rack|%ld", raw4);
 8003b04:	4632      	mov	r2, r6
 8003b06:	4922      	ldr	r1, [pc, #136]	; (8003b90 <writeThrFunction+0x170>)
 8003b08:	a802      	add	r0, sp, #8
 8003b0a:	f002 f86f 	bl	8005bec <sprintf>
    raw5 = (uint32_t)(samples[5] + samples[11] + samples[17] + samples[23]) / 4; //PC5
 8003b0e:	08ad      	lsrs	r5, r5, #2
    writeAnalog(payloadBuffer, payloadLength);
 8003b10:	4601      	mov	r1, r0
 8003b12:	a802      	add	r0, sp, #8
 8003b14:	f7ff f82c 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|steer_pos|%ld", raw5);
 8003b18:	462a      	mov	r2, r5
 8003b1a:	491e      	ldr	r1, [pc, #120]	; (8003b94 <writeThrFunction+0x174>)
 8003b1c:	a802      	add	r0, sp, #8
 8003b1e:	f002 f865 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003b22:	4601      	mov	r1, r0
 8003b24:	a802      	add	r0, sp, #8
 8003b26:	f7ff f823 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|asms|%d", raw6);
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	491a      	ldr	r1, [pc, #104]	; (8003b98 <writeThrFunction+0x178>)
 8003b2e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003b32:	a802      	add	r0, sp, #8
 8003b34:	f002 f85a 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003b38:	4601      	mov	r1, r0
 8003b3a:	a802      	add	r0, sp, #8
 8003b3c:	f7ff f818 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|clamped_sensor|%d", raw7);
 8003b40:	f3cb 3280 	ubfx	r2, fp, #14, #1
 8003b44:	4915      	ldr	r1, [pc, #84]	; (8003b9c <writeThrFunction+0x17c>)
 8003b46:	a802      	add	r0, sp, #8
 8003b48:	f002 f850 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	a802      	add	r0, sp, #8
 8003b50:	f7ff f80e 	bl	8002b70 <writeAnalog>
    payloadLength = sprintf(payloadBuffer, "status|ebs_ok|%d", raw8);
 8003b54:	f3c7 32c0 	ubfx	r2, r7, #15, #1
 8003b58:	4911      	ldr	r1, [pc, #68]	; (8003ba0 <writeThrFunction+0x180>)
 8003b5a:	a802      	add	r0, sp, #8
 8003b5c:	f002 f846 	bl	8005bec <sprintf>
    writeAnalog(payloadBuffer, payloadLength);
 8003b60:	4601      	mov	r1, r0
 8003b62:	a802      	add	r0, sp, #8
 8003b64:	f7ff f804 	bl	8002b70 <writeAnalog>

    chThdSleepMilliseconds(10);
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	f7ff ff31 	bl	80039d0 <chThdSleep>
 8003b6e:	e75f      	b.n	8003a30 <writeThrFunction+0x10>
 8003b70:	200018e0 	.word	0x200018e0
 8003b74:	0800a2b4 	.word	0x0800a2b4
 8003b78:	20002840 	.word	0x20002840
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	0800a2c4 	.word	0x0800a2c4
 8003b84:	0800a2d8 	.word	0x0800a2d8
 8003b88:	0800a2f0 	.word	0x0800a2f0
 8003b8c:	0800a308 	.word	0x0800a308
 8003b90:	0800a320 	.word	0x0800a320
 8003b94:	0800a33c 	.word	0x0800a33c
 8003b98:	0800a354 	.word	0x0800a354
 8003b9c:	0800a364 	.word	0x0800a364
 8003ba0:	0800a380 	.word	0x0800a380
	...

08003bb0 <usbThreadFunction>:
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <usbThreadFunction+0x38>)
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <usbThreadFunction+0x3c>)
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8003bf4 <usbThreadFunction+0x44>
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time;
    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
    palClearLine(LINE_LED4);
 8003bba:	4d0d      	ldr	r5, [pc, #52]	; (8003bf0 <usbThreadFunction+0x40>)
 8003bbc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
static THD_FUNCTION(usbThreadFunction, arg) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	619a      	str	r2, [r3, #24]
    palClearLine(LINE_LED4);
 8003bc4:	4637      	mov	r7, r6
    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
 8003bc6:	f898 3000 	ldrb.w	r3, [r8]
    palClearLine(LINE_LED4);
 8003bca:	836f      	strh	r7, [r5, #26]
    time = serusbcfg.usbp->state == USB_ACTIVE ? 50 : 5000;
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	f24c 3450 	movw	r4, #50000	; 0xc350
 8003bd2:	bf08      	it	eq
 8003bd4:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
    chThdSleepMilliseconds(time);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f7ff fef9 	bl	80039d0 <chThdSleep>
    palSetLine(LINE_LED4);
    chThdSleepMilliseconds(time);
 8003bde:	4620      	mov	r0, r4
    palSetLine(LINE_LED4);
 8003be0:	832e      	strh	r6, [r5, #24]
    chThdSleepMilliseconds(time);
 8003be2:	f7ff fef5 	bl	80039d0 <chThdSleep>
 8003be6:	e7ee      	b.n	8003bc6 <usbThreadFunction+0x16>
 8003be8:	200018e0 	.word	0x200018e0
 8003bec:	0800a178 	.word	0x0800a178
 8003bf0:	40020c00 	.word	0x40020c00
 8003bf4:	200016e4 	.word	0x200016e4
	...

08003c00 <chThdExit>:
void chThdExit(msg_t msg) {
 8003c00:	b508      	push	{r3, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	2320      	movs	r3, #32
 8003c06:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003c0a:	f7ff fb91 	bl	8003330 <_dbg_check_lock>
  thread_t *tp = currp;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <chThdExit+0x50>)
 8003c10:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003c12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003c14:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003c16:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8003c1a:	42a8      	cmp	r0, r5
 8003c1c:	d006      	beq.n	8003c2c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8003c1e:	6803      	ldr	r3, [r0, #0]
 8003c20:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8003c22:	f7fd fc4d 	bl	80014c0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8003c26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8003c28:	42a8      	cmp	r0, r5
 8003c2a:	d1f8      	bne.n	8003c1e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8003c2c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003c30:	b943      	cbnz	r3, 8003c44 <chThdExit+0x44>
 8003c32:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003c36:	079b      	lsls	r3, r3, #30
 8003c38:	d104      	bne.n	8003c44 <chThdExit+0x44>
    REG_REMOVE(tp);
 8003c3a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003c3e:	611a      	str	r2, [r3, #16]
 8003c40:	6922      	ldr	r2, [r4, #16]
 8003c42:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8003c44:	200f      	movs	r0, #15
 8003c46:	f7fe fe5b 	bl	8002900 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8003c4a:	4802      	ldr	r0, [pc, #8]	; (8003c54 <chThdExit+0x54>)
 8003c4c:	f7fd fbd0 	bl	80013f0 <chSysHalt>
 8003c50:	200018e0 	.word	0x200018e0
 8003c54:	08009af0 	.word	0x08009af0
	...

08003c60 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8003c60:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8003c62:	7c03      	ldrb	r3, [r0, #16]
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d90a      	bls.n	8003c7e <pwmEnableChannel+0x1e>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	2320      	movs	r3, #32
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f7ff fb5c 	bl	8003330 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 8003c78:	7823      	ldrb	r3, [r4, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d002      	beq.n	8003c84 <pwmEnableChannel+0x24>
  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8003c7e:	480f      	ldr	r0, [pc, #60]	; (8003cbc <pwmEnableChannel+0x5c>)
 8003c80:	f7fd fbb6 	bl	80013f0 <chSysHalt>
  pwmp->tim->CCR[channel] = width;
 8003c84:	69a3      	ldr	r3, [r4, #24]

  pwmEnableChannelI(pwmp, channel, width);
 8003c86:	68e2      	ldr	r2, [r4, #12]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	40a9      	lsls	r1, r5
 8003c8c:	350c      	adds	r5, #12
 8003c8e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003c92:	430a      	orrs	r2, r1
 8003c94:	60e2      	str	r2, [r4, #12]
 8003c96:	606e      	str	r6, [r5, #4]
  _dbg_check_unlock();
 8003c98:	f7ff fb0a 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <pwmEnableChannel+0x60>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d004      	beq.n	8003cae <pwmEnableChannel+0x4e>
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	6893      	ldr	r3, [r2, #8]
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d303      	bcc.n	8003cb6 <pwmEnableChannel+0x56>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f383 8811 	msr	BASEPRI, r3

  osalSysUnlock();
}
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <pwmEnableChannel+0x64>)
 8003cb8:	f7fd fb9a 	bl	80013f0 <chSysHalt>
 8003cbc:	08009bcc 	.word	0x08009bcc
 8003cc0:	200018e0 	.word	0x200018e0
 8003cc4:	08009974 	.word	0x08009974
	...

08003cd0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <main+0x7c>)
  PWR->CR |= PWR_CR_DBP;
 8003cd2:	481f      	ldr	r0, [pc, #124]	; (8003d50 <main+0x80>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8003cda:	2100      	movs	r1, #0
 8003cdc:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
static THD_WORKING_AREA(adcSampleThreadWA, 64);

/*
 * Application entry point.
 */
int main(void) {
 8003ce0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8003ce4:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	6119      	str	r1, [r3, #16]
  rccResetAHB2(~0);
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	615c      	str	r4, [r3, #20]
 8003cf0:	6159      	str	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8003cf8:	621a      	str	r2, [r3, #32]
 8003cfa:	6219      	str	r1, [r3, #32]
  rccResetAPB2(~0);
 8003cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cfe:	625c      	str	r4, [r3, #36]	; 0x24
 8003d00:	6259      	str	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8003d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8003d12:	6802      	ldr	r2, [r0, #0]
 8003d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d18:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d20:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003d24:	b08b      	sub	sp, #44	; 0x2c
 8003d26:	d003      	beq.n	8003d30 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003d28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d2c:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003d2e:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <main+0x80>)
 8003d32:	4908      	ldr	r1, [pc, #32]	; (8003d54 <main+0x84>)
 8003d34:	6853      	ldr	r3, [r2, #4]
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8003d36:	4808      	ldr	r0, [pc, #32]	; (8003d58 <main+0x88>)
 8003d38:	4e08      	ldr	r6, [pc, #32]	; (8003d5c <main+0x8c>)
 8003d3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3e:	6053      	str	r3, [r2, #4]
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <main+0x90>)
 8003d42:	2400      	movs	r4, #0
 8003d44:	601c      	str	r4, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003d46:	4622      	mov	r2, r4
    _stm32_dma_streams[i].stream->CR = 0U;
 8003d48:	4623      	mov	r3, r4
 8003d4a:	e00d      	b.n	8003d68 <main+0x98>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000
 8003d54:	08009e78 	.word	0x08009e78
 8003d58:	40026010 	.word	0x40026010
 8003d5c:	200022ac 	.word	0x200022ac
 8003d60:	2000232c 	.word	0x2000232c
 8003d64:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8003d68:	6003      	str	r3, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8003d6a:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003d6e:	3201      	adds	r2, #1
 8003d70:	2a10      	cmp	r2, #16
 8003d72:	f101 010c 	add.w	r1, r1, #12
 8003d76:	d1f5      	bne.n	8003d64 <main+0x94>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003d78:	4ad2      	ldr	r2, [pc, #840]	; (80040c4 <main+0x3f4>)
  adcp->state    = ADC_STOP;
 8003d7a:	4fd3      	ldr	r7, [pc, #844]	; (80040c8 <main+0x3f8>)
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003d7c:	48d3      	ldr	r0, [pc, #844]	; (80040cc <main+0x3fc>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003d7e:	f8df e390 	ldr.w	lr, [pc, #912]	; 8004110 <main+0x440>
  adcp->config   = NULL;
 8003d82:	607b      	str	r3, [r7, #4]
 8003d84:	2560      	movs	r5, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003d86:	f04f 31ff 	mov.w	r1, #4294967295
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003d8a:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8003d8e:	6081      	str	r1, [r0, #8]
  adcp->samples  = NULL;
 8003d90:	60bb      	str	r3, [r7, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003d92:	60c1      	str	r1, [r0, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003d94:	f8ce 1008 	str.w	r1, [lr, #8]
 8003d98:	2080      	movs	r0, #128	; 0x80
  adcp->depth    = 0;
 8003d9a:	60fb      	str	r3, [r7, #12]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003d9c:	f8ce 100c 	str.w	r1, [lr, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003da0:	f882 5306 	strb.w	r5, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003da4:	f44f 7e80 	mov.w	lr, #256	; 0x100
  adcp->grpp     = NULL;
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	f8c2 b180 	str.w	fp, [r2, #384]	; 0x180
  adcp->thread   = NULL;
 8003dae:	617b      	str	r3, [r7, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003db0:	f8c2 b000 	str.w	fp, [r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003db4:	f44f 7b00 	mov.w	fp, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003db8:	f882 5307 	strb.w	r5, [r2, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dbc:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003dc0:	6010      	str	r0, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003dc2:	f882 5308 	strb.w	r5, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dc6:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003dca:	f8c2 e000 	str.w	lr, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003dce:	f882 5309 	strb.w	r5, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dd2:	f8c2 b180 	str.w	fp, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003dd6:	f8c2 b000 	str.w	fp, [r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dda:	f44f 6b80 	mov.w	fp, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003dde:	f882 530a 	strb.w	r5, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003de2:	f8c2 b180 	str.w	fp, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003de6:	f8c2 b000 	str.w	fp, [r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dea:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003dee:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003df2:	f8c2 b180 	str.w	fp, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003df6:	f8c2 b000 	str.w	fp, [r2]
  tqp->next = (thread_t *)tqp;
 8003dfa:	f107 0b18 	add.w	fp, r7, #24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003dfe:	f882 5328 	strb.w	r5, [r2, #808]	; 0x328
 8003e02:	f8c7 b018 	str.w	fp, [r7, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003e06:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003e0a:	f8c2 e004 	str.w	lr, [r2, #4]
  adcp->state    = ADC_STOP;
 8003e0e:	f04f 0e01 	mov.w	lr, #1
 8003e12:	f887 e000 	strb.w	lr, [r7]
  tqp->prev = (thread_t *)tqp;
 8003e16:	f8c7 b01c 	str.w	fp, [r7, #28]
  ADCD1.adc = ADC1;
 8003e1a:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 8004114 <main+0x444>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003e1e:	f882 5312 	strb.w	r5, [r2, #786]	; 0x312
 8003e22:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8003e26:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 8004118 <main+0x448>
  pwmp->state    = PWM_STOP;
 8003e2a:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 800411c <main+0x44c>
 8003e2e:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8003e32:	4da7      	ldr	r5, [pc, #668]	; (80040d0 <main+0x400>)
  PWMD3.tim = STM32_TIM3;
 8003e34:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8004120 <main+0x450>
 8003e38:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8004124 <main+0x454>
 8003e3c:	62fd      	str	r5, [r7, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003e3e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  mp->owner = NULL;
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  pwmp->config   = NULL;
 8003e48:	f8c8 3004 	str.w	r3, [r8, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003e4c:	6015      	str	r5, [r2, #0]
 8003e4e:	f8c8 b018 	str.w	fp, [r8, #24]
  PWMD4.tim = STM32_TIM4;
 8003e52:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
  usbp->state        = USB_STOP;
 8003e56:	4c9f      	ldr	r4, [pc, #636]	; (80040d4 <main+0x404>)
 8003e58:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8004128 <main+0x458>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003e5c:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 800412c <main+0x45c>
 8003e60:	f8c9 b018 	str.w	fp, [r9, #24]
  PWMD3.channels = STM32_TIM3_CHANNELS;
 8003e64:	2504      	movs	r5, #4
  USBD1.otgparams = &fsparams;
 8003e66:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8004130 <main+0x460>
 8003e6a:	f888 5010 	strb.w	r5, [r8, #16]
  PWMD4.channels = STM32_TIM4_CHANNELS;
 8003e6e:	f889 5010 	strb.w	r5, [r9, #16]
  USBD1.otg       = OTG_FS;
 8003e72:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 8003e76:	e9ca 5b1b 	strd	r5, fp, [sl, #108]	; 0x6c
  pwmp->state    = PWM_STOP;
 8003e7a:	f888 e000 	strb.w	lr, [r8]
 8003e7e:	f889 e000 	strb.w	lr, [r9]
 8003e82:	f88a e000 	strb.w	lr, [sl]
  pwmp->enabled  = 0;
 8003e86:	f8c8 300c 	str.w	r3, [r8, #12]
  pwmp->config   = NULL;
 8003e8a:	f8c9 3004 	str.w	r3, [r9, #4]
  pwmp->enabled  = 0;
 8003e8e:	f8c9 300c 	str.w	r3, [r9, #12]
    usbp->in_params[i]  = NULL;
 8003e92:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8003e96:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
    usbp->in_params[i]  = NULL;
 8003e9a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    usbp->out_params[i] = NULL;
 8003e9e:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c
    usbp->in_params[i]  = NULL;
 8003ea2:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 8003ea6:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    usbp->in_params[i]  = NULL;
 8003eaa:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
    usbp->out_params[i] = NULL;
 8003eae:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
    usbp->in_params[i]  = NULL;
 8003eb2:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
    usbp->out_params[i] = NULL;
 8003eb6:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
  usbp->config       = NULL;
 8003eba:	e9ca 3301 	strd	r3, r3, [sl, #4]
  usbp->state        = USB_STOP;
 8003ebe:	f884 e000 	strb.w	lr, [r4]
 8003ec2:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    usbp->in_params[i]  = NULL;
 8003ec6:	6263      	str	r3, [r4, #36]	; 0x24
 8003ec8:	ea45 050e 	orr.w	r5, r5, lr
 8003ecc:	f8cc 5040 	str.w	r5, [ip, #64]	; 0x40
 8003ed0:	f8dc 5060 	ldr.w	r5, [ip, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003ed4:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8004134 <main+0x464>
    usbp->out_params[i] = NULL;
 8003ed8:	63a3      	str	r3, [r4, #56]	; 0x38
  ST_ENABLE_CLOCK();
 8003eda:	ea45 050e 	orr.w	r5, r5, lr
 8003ede:	f8cc 5060 	str.w	r5, [ip, #96]	; 0x60
  ST_ENABLE_STOP();
 8003ee2:	f8db c008 	ldr.w	ip, [fp, #8]
    usbp->in_params[i]  = NULL;
 8003ee6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ee8:	ea4c 0c0e 	orr.w	ip, ip, lr
    usbp->out_params[i] = NULL;
 8003eec:	63e3      	str	r3, [r4, #60]	; 0x3c
    usbp->in_params[i]  = NULL;
 8003eee:	62e3      	str	r3, [r4, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 8003ef0:	6423      	str	r3, [r4, #64]	; 0x40
    usbp->in_params[i]  = NULL;
 8003ef2:	6323      	str	r3, [r4, #48]	; 0x30
    usbp->out_params[i] = NULL;
 8003ef4:	6463      	str	r3, [r4, #68]	; 0x44
    usbp->in_params[i]  = NULL;
 8003ef6:	6363      	str	r3, [r4, #52]	; 0x34
    usbp->out_params[i] = NULL;
 8003ef8:	64a3      	str	r3, [r4, #72]	; 0x48
  usbp->config       = NULL;
 8003efa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8003efe:	f8cb c008 	str.w	ip, [fp, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003f02:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8003f06:	f242 0bcf 	movw	fp, #8399	; 0x20cf
 8003f0a:	f8cc b028 	str.w	fp, [ip, #40]	; 0x28
  USBD2.otg       = OTG_HS;
 8003f0e:	f8df b228 	ldr.w	fp, [pc, #552]	; 8004138 <main+0x468>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003f12:	f8cc 102c 	str.w	r1, [ip, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8003f16:	4d70      	ldr	r5, [pc, #448]	; (80040d8 <main+0x408>)
 8003f18:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
  USBD2.otgparams = &hsparams;
 8003f1c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 800413c <main+0x46c>
  STM32_ST_TIM->CCMR1  = 0;
 8003f20:	f8cc 3018 	str.w	r3, [ip, #24]
 8003f24:	f8c4 b070 	str.w	fp, [r4, #112]	; 0x70
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8003f28:	f8df b214 	ldr.w	fp, [pc, #532]	; 8004140 <main+0x470>
  STM32_ST_TIM->CCR[0] = 0;
 8003f2c:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003f30:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  STM32_ST_TIM->DIER   = 0;
 8003f34:	f8cc 300c 	str.w	r3, [ip, #12]
  STM32_ST_TIM->CR2    = 0;
 8003f38:	f8cc 3004 	str.w	r3, [ip, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003f3c:	f8cc e014 	str.w	lr, [ip, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003f40:	f8cc e000 	str.w	lr, [ip]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8003f44:	f105 0e40 	add.w	lr, r5, #64	; 0x40
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003f48:	f105 0c1c 	add.w	ip, r5, #28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003f4c:	f882 031c 	strb.w	r0, [r2, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003f50:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003f54:	6014      	str	r4, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8003f56:	e9c5 5500 	strd	r5, r5, [r5]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003f5a:	e9c5 5504 	strd	r5, r5, [r5, #16]
 8003f5e:	e9c5 be0e 	strd	fp, lr, [r5, #56]	; 0x38
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8003f62:	e9c5 cc07 	strd	ip, ip, [r5, #28]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8003f66:	2400      	movs	r4, #0
  ch.vtlist.delta = (sysinterval_t)-1;
 8003f68:	6269      	str	r1, [r5, #36]	; 0x24
  ch.rlist.prio = NOPRIO;
 8003f6a:	60ab      	str	r3, [r5, #8]
  ch.vtlist.lasttime = (systime_t)0;
 8003f6c:	62ab      	str	r3, [r5, #40]	; 0x28
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8003f6e:	3401      	adds	r4, #1
 8003f70:	eb05 1304 	add.w	r3, r5, r4, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8003f74:	2c80      	cmp	r4, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8003f76:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8003f7a:	f36f 0202 	bfc	r2, #0, #3
 8003f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8003f82:	d1f4      	bne.n	8003f6e <main+0x29e>
  ch.dbg.isr_cnt  = (cnt_t)0;
 8003f84:	2100      	movs	r1, #0
  tmp->best       = (rtcnt_t)-1;
 8003f86:	f04f 3cff 	mov.w	ip, #4294967295
  tmp->cumulative = (rttime_t)0;
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 8003f8e:	a804      	add	r0, sp, #16
  tmp->cumulative = (rttime_t)0;
 8003f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ch.dbg.lock_cnt = (cnt_t)0;
 8003f94:	e9c5 110c 	strd	r1, r1, [r5, #48]	; 0x30
  ch.tm.offset = (rtcnt_t)0;
 8003f98:	f8c5 1884 	str.w	r1, [r5, #2180]	; 0x884
  tmp->last       = (rtcnt_t)0;
 8003f9c:	e9cd 1105 	strd	r1, r1, [sp, #20]
  tmp->n          = (ucnt_t)0;
 8003fa0:	9107      	str	r1, [sp, #28]
 8003fa2:	9101      	str	r1, [sp, #4]
  tmp->best       = (rtcnt_t)-1;
 8003fa4:	f8cd c010 	str.w	ip, [sp, #16]
  chTMStartMeasurementX(&tm);
 8003fa8:	f7fd f932 	bl	8001210 <chTMStartMeasurementX.constprop.3>
  chTMStopMeasurementX(&tm);
 8003fac:	a804      	add	r0, sp, #16
 8003fae:	f7fd f97f 	bl	80012b0 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003fb2:	4a4a      	ldr	r2, [pc, #296]	; (80040dc <main+0x40c>)
  tqp->next = (thread_t *)tqp;
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <main+0x410>)
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003fb6:	9901      	ldr	r1, [sp, #4]
  tp->prio      = prio;
 8003fb8:	f8c5 4848 	str.w	r4, [r5, #2120]	; 0x848
  tp->realprio  = prio;
 8003fbc:	f8c5 487c 	str.w	r4, [r5, #2172]	; 0x87c
 8003fc0:	f102 040c 	add.w	r4, r2, #12
  tqp->prev = (thread_t *)tqp;
 8003fc4:	e9c2 4403 	strd	r4, r4, [r2, #12]
 8003fc8:	f8df c178 	ldr.w	ip, [pc, #376]	; 8004144 <main+0x474>
 8003fcc:	6151      	str	r1, [r2, #20]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8003fce:	f103 0424 	add.w	r4, r3, #36	; 0x24
  H_PAGES(&default_heap.header) = 0;
 8003fd2:	e9c2 1101 	strd	r1, r1, [r2, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003fd6:	f8c2 c000 	str.w	ip, [r2]
 8003fda:	6099      	str	r1, [r3, #8]
 8003fdc:	f103 0c10 	add.w	ip, r3, #16
  mp->next = NULL;
 8003fe0:	6159      	str	r1, [r3, #20]
 8003fe2:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003fe4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003fe8:	625c      	str	r4, [r3, #36]	; 0x24
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003fea:	f885 1861 	strb.w	r1, [r5, #2145]	; 0x861
 8003fee:	f103 0440 	add.w	r4, r3, #64	; 0x40
  tp->mtxlist   = NULL;
 8003ff2:	f8c5 1878 	str.w	r1, [r5, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 8003ff6:	f8c5 1874 	str.w	r1, [r5, #2164]	; 0x874
 8003ffa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ffe:	4839      	ldr	r0, [pc, #228]	; (80040e4 <main+0x414>)
 8004000:	f8c3 c010 	str.w	ip, [r3, #16]
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
 8004006:	63d9      	str	r1, [r3, #60]	; 0x3c
  mp->provider = provider;
 8004008:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <main+0x418>)
 800400a:	641c      	str	r4, [r3, #64]	; 0x40
  ch_memcore.nextmem = __heap_base__;
 800400c:	f8df e138 	ldr.w	lr, [pc, #312]	; 8004148 <main+0x478>
 8004010:	4936      	ldr	r1, [pc, #216]	; (80040ec <main+0x41c>)
  ch_memcore.endmem  = __heap_end__;
 8004012:	4c37      	ldr	r4, [pc, #220]	; (80040f0 <main+0x420>)
 8004014:	621a      	str	r2, [r3, #32]
  mp->object_size = size;
 8004016:	f04f 0b14 	mov.w	fp, #20
 800401a:	f04f 0c1c 	mov.w	ip, #28
 800401e:	f8c3 b018 	str.w	fp, [r3, #24]
 8004022:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  mp->align = align;
 8004026:	f04f 0b04 	mov.w	fp, #4
  tp->refs      = (trefs_t)1;
 800402a:	f04f 0c01 	mov.w	ip, #1
  mp->provider = provider;
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
  ch.tm.offset = tm.last;
 8004030:	9a06      	ldr	r2, [sp, #24]
  mp->align = align;
 8004032:	f8c3 b01c 	str.w	fp, [r3, #28]
 8004036:	e9ce 1400 	strd	r1, r4, [lr]
 800403a:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 800403e:	e9c3 3300 	strd	r3, r3, [r3]
 8004042:	f8c5 2884 	str.w	r2, [r5, #2180]	; 0x884
 8004046:	f885 c862 	strb.w	ip, [r5, #2146]	; 0x862
 800404a:	68c1      	ldr	r1, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <main+0x424>)
  REG_INSERT(tp);
 800404e:	f8d5 e014 	ldr.w	lr, [r5, #20]
  tp->name      = name;
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <main+0x428>)
 8004054:	f8c5 3858 	str.w	r3, [r5, #2136]	; 0x858
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004058:	f64f 0bff 	movw	fp, #63743	; 0xf8ff
 800405c:	ea01 010b 	and.w	r1, r1, fp
  REG_INSERT(tp);
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <main+0x42c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004062:	4c27      	ldr	r4, [pc, #156]	; (8004100 <main+0x430>)
 8004064:	f8c5 5850 	str.w	r5, [r5, #2128]	; 0x850
  reg_value  =  (reg_value                                   |
 8004068:	430a      	orrs	r2, r1
 800406a:	f8c5 e854 	str.w	lr, [r5, #2132]	; 0x854
 800406e:	f8ce 3010 	str.w	r3, [lr, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8004072:	60c2      	str	r2, [r0, #12]
 8004074:	68e2      	ldr	r2, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004076:	4923      	ldr	r1, [pc, #140]	; (8004104 <main+0x434>)
  currp->state = CH_STATE_CURRENT;
 8004078:	f885 c860 	strb.w	ip, [r5, #2144]	; 0x860
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800407c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004080:	60e2      	str	r2, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004082:	680a      	ldr	r2, [r1, #0]
 8004084:	616b      	str	r3, [r5, #20]
 8004086:	ea42 020c 	orr.w	r2, r2, ip
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800408a:	61ab      	str	r3, [r5, #24]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408c:	f04f 0c10 	mov.w	ip, #16
 8004090:	600a      	str	r2, [r1, #0]
  tlp->next = (thread_t *)tlp;
 8004092:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004096:	2120      	movs	r1, #32
 8004098:	f880 c01f 	strb.w	ip, [r0, #31]
  tqp->next = (thread_t *)tqp;
 800409c:	332c      	adds	r3, #44	; 0x2c
  tlp->next = (thread_t *)tlp;
 800409e:	f8c5 2868 	str.w	r2, [r5, #2152]	; 0x868
 80040a2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
  tqp->next = (thread_t *)tqp;
 80040a6:	f8c5 386c 	str.w	r3, [r5, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 80040aa:	f8c5 3870 	str.w	r3, [r5, #2160]	; 0x870
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80040ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    currp->wabase = &__main_thread_stack_base__;
 80040b0:	4c15      	ldr	r4, [pc, #84]	; (8004108 <main+0x438>)
 80040b2:	f8c5 485c 	str.w	r4, [r5, #2140]	; 0x85c
 80040b6:	b913      	cbnz	r3, 80040be <main+0x3ee>
 80040b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d046      	beq.n	800414c <main+0x47c>
    chSysHalt("SV#3");
 80040be:	4813      	ldr	r0, [pc, #76]	; (800410c <main+0x43c>)
 80040c0:	f7fd f996 	bl	80013f0 <chSysHalt>
 80040c4:	e000e100 	.word	0xe000e100
 80040c8:	200011e8 	.word	0x200011e8
 80040cc:	40026000 	.word	0x40026000
 80040d0:	08009efc 	.word	0x08009efc
 80040d4:	2000175c 	.word	0x2000175c
 80040d8:	200018e0 	.word	0x200018e0
 80040dc:	20002290 	.word	0x20002290
 80040e0:	20002168 	.word	0x20002168
 80040e4:	e000ed00 	.word	0xe000ed00
 80040e8:	080014b1 	.word	0x080014b1
 80040ec:	20002ed8 	.word	0x20002ed8
 80040f0:	20020000 	.word	0x20020000
 80040f4:	05fa0300 	.word	0x05fa0300
 80040f8:	08009f8c 	.word	0x08009f8c
 80040fc:	20002120 	.word	0x20002120
 8004100:	e000edf0 	.word	0xe000edf0
 8004104:	e0001000 	.word	0xe0001000
 8004108:	20000400 	.word	0x20000400
 800410c:	0800a02c 	.word	0x0800a02c
 8004110:	40026400 	.word	0x40026400
 8004114:	40012000 	.word	0x40012000
 8004118:	00022c16 	.word	0x00022c16
 800411c:	2000121c 	.word	0x2000121c
 8004120:	40000400 	.word	0x40000400
 8004124:	20001238 	.word	0x20001238
 8004128:	200016e4 	.word	0x200016e4
 800412c:	40023800 	.word	0x40023800
 8004130:	0800a010 	.word	0x0800a010
 8004134:	e0042000 	.word	0xe0042000
 8004138:	40040000 	.word	0x40040000
 800413c:	0800a020 	.word	0x0800a020
 8004140:	0080fff0 	.word	0x0080fff0
 8004144:	08003351 	.word	0x08003351
 8004148:	20002288 	.word	0x20002288
 800414c:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8004150:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8004152:	48c2      	ldr	r0, [pc, #776]	; (800445c <main+0x78c>)
 8004154:	f7ff f9bc 	bl	80034d0 <chRegFindThreadByWorkingArea>
 8004158:	b110      	cbz	r0, 8004160 <main+0x490>
 800415a:	48c1      	ldr	r0, [pc, #772]	; (8004460 <main+0x790>)
 800415c:	f7fd f948 	bl	80013f0 <chSysHalt>
 8004160:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 800445c <main+0x78c>
 8004164:	4603      	mov	r3, r0
    *startp++ = v;
 8004166:	2255      	movs	r2, #85	; 0x55
 8004168:	f80b 2003 	strb.w	r2, [fp, r3]
 800416c:	3301      	adds	r3, #1
  while (startp < endp) {
 800416e:	2bd8      	cmp	r3, #216	; 0xd8
 8004170:	d1fa      	bne.n	8004168 <main+0x498>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004172:	2320      	movs	r3, #32
 8004174:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004178:	f7ff f8da 	bl	8003330 <_dbg_check_lock>
  chDbgCheckClassI();
 800417c:	f7fd f960 	bl	8001440 <chDbgCheckClassI>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8004180:	f8df c314 	ldr.w	ip, [pc, #788]	; 8004498 <main+0x7c8>
  tp->name      = name;
 8004184:	48b7      	ldr	r0, [pc, #732]	; (8004464 <main+0x794>)
 8004186:	f8cb 00a8 	str.w	r0, [fp, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800418a:	4ab7      	ldr	r2, [pc, #732]	; (8004468 <main+0x798>)
  REG_INSERT(tp);
 800418c:	6968      	ldr	r0, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800418e:	49b7      	ldr	r1, [pc, #732]	; (800446c <main+0x79c>)
 8004190:	f8cb 206c 	str.w	r2, [fp, #108]	; 0x6c
 8004194:	2300      	movs	r3, #0
  tp->prio      = prio;
 8004196:	2201      	movs	r2, #1
  REG_INSERT(tp);
 8004198:	f10c 0e24 	add.w	lr, ip, #36	; 0x24
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800419c:	f8cb 108c 	str.w	r1, [fp, #140]	; 0x8c
  tp->state     = CH_STATE_WTSTART;
 80041a0:	2102      	movs	r1, #2
  sdup->vmt = &vmt;
 80041a2:	4cb3      	ldr	r4, [pc, #716]	; (8004470 <main+0x7a0>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80041a4:	f8cb 3070 	str.w	r3, [fp, #112]	; 0x70
  tp->epending  = (eventmask_t)0;
 80041a8:	e9cb 3331 	strd	r3, r3, [fp, #196]	; 0xc4
  tp->prio      = prio;
 80041ac:	f8cb 2098 	str.w	r2, [fp, #152]	; 0x98
  tp->realprio  = prio;
 80041b0:	f8cb 20cc 	str.w	r2, [fp, #204]	; 0xcc
  tp->flags     = CH_FLAG_MODE_STATIC;
 80041b4:	f88b 20b2 	strb.w	r2, [fp, #178]	; 0xb2
  tp->state     = CH_STATE_WTSTART;
 80041b8:	f8ab 10b0 	strh.w	r1, [fp, #176]	; 0xb0
  REG_INSERT(tp);
 80041bc:	f8cb 50a0 	str.w	r5, [fp, #160]	; 0xa0
 80041c0:	f8cb 00a4 	str.w	r0, [fp, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80041c4:	f8cb c09c 	str.w	ip, [fp, #156]	; 0x9c
  tp->wabase = tdp->wbase;
 80041c8:	f8cb b0ac 	str.w	fp, [fp, #172]	; 0xac
  REG_INSERT(tp);
 80041cc:	f8c0 e010 	str.w	lr, [r0, #16]
  chSchWakeupS(tp, MSG_OK);
 80041d0:	4670      	mov	r0, lr
  REG_INSERT(tp);
 80041d2:	f8c5 e014 	str.w	lr, [r5, #20]
  tlp->next = (thread_t *)tlp;
 80041d6:	f10c 0e4c 	add.w	lr, ip, #76	; 0x4c
  tqp->next = (thread_t *)tqp;
 80041da:	f10c 0c50 	add.w	ip, ip, #80	; 0x50
 80041de:	e9cb ec2e 	strd	lr, ip, [fp, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80041e2:	f8cb c0c0 	str.w	ip, [fp, #192]	; 0xc0
  tp->epending  = (eventmask_t)0;
 80041e6:	9303      	str	r3, [sp, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80041e8:	9202      	str	r2, [sp, #8]
  tp->state     = CH_STATE_WTSTART;
 80041ea:	9101      	str	r1, [sp, #4]
  chSchWakeupS(tp, MSG_OK);
 80041ec:	f7fe fb48 	bl	8002880 <chSchWakeupS.constprop.8>
  chSysUnlock();
 80041f0:	f7ff f86e 	bl	80032d0 <chSysUnlock.lto_priv.44>
 80041f4:	4620      	mov	r0, r4
  ibqp->bcounter  = 0;
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 800449c <main+0x7cc>
  sdup->state = SDU_STOP;
 80041fc:	9a02      	ldr	r2, [sp, #8]
  ibqp->bn        = n;
 80041fe:	9901      	ldr	r1, [sp, #4]
  sdup->vmt = &vmt;
 8004200:	f840 cb04 	str.w	ip, [r0], #4
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004204:	f204 4e8c 	addw	lr, r4, #1164	; 0x48c
  ibqp->notify    = infy;
 8004208:	f8df c294 	ldr.w	ip, [pc, #660]	; 80044a0 <main+0x7d0>
  ibqp->bcounter  = 0;
 800420c:	61a3      	str	r3, [r4, #24]
  sdup->state = SDU_STOP;
 800420e:	7222      	strb	r2, [r4, #8]
  ibqp->suspended = suspended;
 8004210:	7522      	strb	r2, [r4, #20]
  ibqp->bn        = n;
 8004212:	62e1      	str	r1, [r4, #44]	; 0x2c
  ibqp->top       = NULL;
 8004214:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  obqp->suspended = suspended;
 8004218:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  obqp->bcounter  = n;
 800421c:	6521      	str	r1, [r4, #80]	; 0x50
  obqp->bn        = n;
 800421e:	6661      	str	r1, [r4, #100]	; 0x64
  obqp->top       = NULL;
 8004220:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  ibqp->brdptr    = bp;
 8004224:	f104 027c 	add.w	r2, r4, #124	; 0x7c
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004228:	f504 7321 	add.w	r3, r4, #644	; 0x284
  ibqp->notify    = infy;
 800422c:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004230:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
  ibqp->bsize     = size + sizeof (size_t);
 8004234:	f44f 7c82 	mov.w	ip, #260	; 0x104
  tqp->next = (thread_t *)tqp;
 8004238:	f104 0b0c 	add.w	fp, r4, #12
 800423c:	f104 0e44 	add.w	lr, r4, #68	; 0x44
  obqp->notify    = onfy;
 8004240:	498c      	ldr	r1, [pc, #560]	; (8004474 <main+0x7a4>)
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004242:	6263      	str	r3, [r4, #36]	; 0x24
  obqp->bwrptr    = bp;
 8004244:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->buffers   = bp;
 8004248:	66a3      	str	r3, [r4, #104]	; 0x68
  ibqp->link      = link;
 800424a:	6424      	str	r4, [r4, #64]	; 0x40
  obqp->link      = link;
 800424c:	67a4      	str	r4, [r4, #120]	; 0x78
  obqp->notify    = onfy;
 800424e:	6761      	str	r1, [r4, #116]	; 0x74
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8004250:	6060      	str	r0, [r4, #4]
  tqp->prev = (thread_t *)tqp;
 8004252:	e9c4 bb03 	strd	fp, fp, [r4, #12]
  ibqp->bwrptr    = bp;
 8004256:	e9c4 2207 	strd	r2, r2, [r4, #28]
  ibqp->buffers   = bp;
 800425a:	6322      	str	r2, [r4, #48]	; 0x30
 800425c:	e9c4 ee11 	strd	lr, lr, [r4, #68]	; 0x44
 8004260:	2320      	movs	r3, #32
  ibqp->bsize     = size + sizeof (size_t);
 8004262:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8004266:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f7ff f85f 	bl	8003330 <_dbg_check_lock>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 8004272:	7a23      	ldrb	r3, [r4, #8]
 8004274:	9901      	ldr	r1, [sp, #4]
 8004276:	3b01      	subs	r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	f200 8232 	bhi.w	80046e2 <main+0xa12>
  sdup->config = config;
 800427e:	4b7e      	ldr	r3, [pc, #504]	; (8004478 <main+0x7a8>)
 8004280:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8004284:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8004288:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
    usbp->in_params[config->int_in - 1U]  = sdup;
 800428c:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  sdup->state = SDU_READY;
 8004290:	7221      	strb	r1, [r4, #8]
  _dbg_check_unlock();
 8004292:	f7ff f80d 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	42ab      	cmp	r3, r5
 800429a:	d005      	beq.n	80042a8 <main+0x5d8>
 800429c:	69aa      	ldr	r2, [r5, #24]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	6892      	ldr	r2, [r2, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	f0c0 821a 	bcc.w	80046dc <main+0xa0c>
 80042a8:	f04f 0b00 	mov.w	fp, #0
 80042ac:	f38b 8811 	msr	BASEPRI, fp
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 80042b0:	f8da 206c 	ldr.w	r2, [sl, #108]	; 0x6c
 80042b4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80042b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80042ba:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 80042bc:	f643 2098 	movw	r0, #15000	; 0x3a98
 80042c0:	f7ff fb86 	bl	80039d0 <chThdSleep>
 80042c4:	2020      	movs	r0, #32
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	9001      	str	r0, [sp, #4]
  _dbg_check_lock();
 80042cc:	f7ff f830 	bl	8003330 <_dbg_check_lock>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 80042d0:	f89a 2000 	ldrb.w	r2, [sl]
 80042d4:	9801      	ldr	r0, [sp, #4]
 80042d6:	1e53      	subs	r3, r2, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f200 81fc 	bhi.w	80046d6 <main+0xa06>
  usbp->config = config;
 80042de:	4b67      	ldr	r3, [pc, #412]	; (800447c <main+0x7ac>)
 80042e0:	f8ca 3004 	str.w	r3, [sl, #4]
  if (usbp->state == USB_STOP) {
 80042e4:	2a01      	cmp	r2, #1
    usbp->epc[i] = NULL;
 80042e6:	e9ca bb03 	strd	fp, fp, [sl, #12]
 80042ea:	e9ca bb05 	strd	fp, fp, [sl, #20]
 80042ee:	e9ca bb07 	strd	fp, fp, [sl, #28]
  stm32_otg_t *otgp = usbp->otg;
 80042f2:	f8da 406c 	ldr.w	r4, [sl, #108]	; 0x6c
  if (usbp->state == USB_STOP) {
 80042f6:	d041      	beq.n	800437c <main+0x6ac>
  usbp->state = USB_READY;
 80042f8:	2302      	movs	r3, #2
 80042fa:	f88a 3000 	strb.w	r3, [sl]
  _dbg_check_unlock();
 80042fe:	f7fe ffd7 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	42ab      	cmp	r3, r5
 8004306:	d005      	beq.n	8004314 <main+0x644>
 8004308:	69aa      	ldr	r2, [r5, #24]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	6892      	ldr	r2, [r2, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	f0c0 81ea 	bcc.w	80046e8 <main+0xa18>
 8004314:	2400      	movs	r4, #0
 8004316:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800431a:	f8da 206c 	ldr.w	r2, [sl, #108]	; 0x6c
  palSetGroupMode(GPIOC, PAL_PORT_BIT(0), 0, PAL_MODE_INPUT_ANALOG); //Pin PC0
 800431e:	4858      	ldr	r0, [pc, #352]	; (8004480 <main+0x7b0>)
  usbConnectBus(serusbcfg.usbp);
 8004320:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004326:	6393      	str	r3, [r2, #56]	; 0x38
  palSetGroupMode(GPIOC, PAL_PORT_BIT(0), 0, PAL_MODE_INPUT_ANALOG); //Pin PC0
 8004328:	2101      	movs	r1, #1
 800432a:	2203      	movs	r2, #3
 800432c:	f7fd fe98 	bl	8002060 <_pal_lld_setgroupmode>
  palSetGroupMode(GPIOC, PAL_PORT_BIT(1), 0, PAL_MODE_INPUT_ANALOG); //Pin PC1
 8004330:	2203      	movs	r2, #3
 8004332:	2102      	movs	r1, #2
 8004334:	4852      	ldr	r0, [pc, #328]	; (8004480 <main+0x7b0>)
 8004336:	f7fd fe93 	bl	8002060 <_pal_lld_setgroupmode>
  palSetGroupMode(GPIOC, PAL_PORT_BIT(2), 0, PAL_MODE_INPUT_ANALOG); //Pin PC2
 800433a:	2203      	movs	r2, #3
 800433c:	2104      	movs	r1, #4
 800433e:	4850      	ldr	r0, [pc, #320]	; (8004480 <main+0x7b0>)
 8004340:	f7fd fe8e 	bl	8002060 <_pal_lld_setgroupmode>
  palSetGroupMode(GPIOC, PAL_PORT_BIT(3), 0, PAL_MODE_INPUT_ANALOG); //Pin PC3
 8004344:	2203      	movs	r2, #3
 8004346:	2108      	movs	r1, #8
 8004348:	484d      	ldr	r0, [pc, #308]	; (8004480 <main+0x7b0>)
 800434a:	f7fd fe89 	bl	8002060 <_pal_lld_setgroupmode>
  palSetGroupMode(GPIOC, PAL_PORT_BIT(4), 0, PAL_MODE_INPUT_ANALOG); //Pin PC4
 800434e:	2203      	movs	r2, #3
 8004350:	2110      	movs	r1, #16
 8004352:	484b      	ldr	r0, [pc, #300]	; (8004480 <main+0x7b0>)
 8004354:	f7fd fe84 	bl	8002060 <_pal_lld_setgroupmode>
  palSetGroupMode(GPIOC, PAL_PORT_BIT(5), 0, PAL_MODE_INPUT_ANALOG); //Pin PC5
 8004358:	2203      	movs	r2, #3
 800435a:	2120      	movs	r1, #32
 800435c:	4848      	ldr	r0, [pc, #288]	; (8004480 <main+0x7b0>)
 800435e:	f7fd fe7f 	bl	8002060 <_pal_lld_setgroupmode>
 8004362:	2320      	movs	r3, #32
 8004364:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004368:	f7fe ffe2 	bl	8003330 <_dbg_check_lock>
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 800436c:	783b      	ldrb	r3, [r7, #0]
 800436e:	1e5a      	subs	r2, r3, #1
 8004370:	2a01      	cmp	r2, #1
 8004372:	f240 8099 	bls.w	80044a8 <main+0x7d8>
 8004376:	4843      	ldr	r0, [pc, #268]	; (8004484 <main+0x7b4>)
 8004378:	f7fd f83a 	bl	80013f0 <chSysHalt>
      rccEnableOTG_FS(true);
 800437c:	4b42      	ldr	r3, [pc, #264]	; (8004488 <main+0x7b8>)
 800437e:	9201      	str	r2, [sp, #4]
 8004380:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8004384:	4941      	ldr	r1, [pc, #260]	; (800448c <main+0x7bc>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004386:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80044a4 <main+0x7d4>
      rccEnableOTG_FS(true);
 800438a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800438e:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
 8004392:	f8d3 c054 	ldr.w	ip, [r3, #84]	; 0x54
 8004396:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800439a:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
      rccResetOTG_FS();
 800439e:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80043a2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80043a6:	f8c3 c014 	str.w	ip, [r3, #20]
 80043aa:	f8c3 b014 	str.w	fp, [r3, #20]
 80043ae:	23e0      	movs	r3, #224	; 0xe0
 80043b0:	f881 3343 	strb.w	r3, [r1, #835]	; 0x343
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80043b4:	2308      	movs	r3, #8
 80043b6:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80043ba:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80043be:	608b      	str	r3, [r1, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80043c0:	4933      	ldr	r1, [pc, #204]	; (8004490 <main+0x7c0>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80043c2:	f8c4 e00c 	str.w	lr, [r4, #12]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80043c6:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80043ca:	f8c4 1800 	str.w	r1, [r4, #2048]	; 0x800
    otgp->PCGCCTL = 0;
 80043ce:	f8c4 be00 	str.w	fp, [r4, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80043d2:	f8c4 c000 	str.w	ip, [r4]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80043d6:	63a3      	str	r3, [r4, #56]	; 0x38
  chSysPolledDelayX(cycles);
 80043d8:	f7fc fffa 	bl	80013d0 <chSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80043dc:	9a01      	ldr	r2, [sp, #4]
 80043de:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80043e0:	6923      	ldr	r3, [r4, #16]
 80043e2:	f013 0b01 	ands.w	fp, r3, #1
 80043e6:	d1fb      	bne.n	80043e0 <main+0x710>
 80043e8:	2012      	movs	r0, #18
 80043ea:	f7fc fff1 	bl	80013d0 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dafc      	bge.n	80043ee <main+0x71e>
 80043f4:	e9da 131b 	ldrd	r1, r3, [sl, #108]	; 0x6c
    otgp->GAHBCFG = 0;
 80043f8:	2200      	movs	r2, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80043fa:	f8d3 c008 	ldr.w	ip, [r3, #8]
    otgp->GAHBCFG = 0;
 80043fe:	60a2      	str	r2, [r4, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	eb01 134b 	add.w	r3, r1, fp, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004408:	f10b 0b01 	add.w	fp, fp, #1
 800440c:	45e3      	cmp	fp, ip
    otgp->ie[i].DIEPCTL = 0;
 800440e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 8004412:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004416:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 800441a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800441e:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8004422:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004426:	d9ed      	bls.n	8004404 <main+0x734>
    if (usbp->config->sof_cb == NULL)
 8004428:	f8da 3004 	ldr.w	r3, [sl, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800442e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 8004432:	f8c1 081c 	str.w	r0, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8004436:	f8c4 2810 	str.w	r2, [r4, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 800443a:	f8c4 2814 	str.w	r2, [r4, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800443e:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8153 	beq.w	80046ee <main+0xa1e>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <main+0x7c4>)
 800444a:	61a3      	str	r3, [r4, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	6163      	str	r3, [r4, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	e74d      	b.n	80042f8 <main+0x628>
 800445c:	200021b0 	.word	0x200021b0
 8004460:	08009a64 	.word	0x08009a64
 8004464:	0800a034 	.word	0x0800a034
 8004468:	08001751 	.word	0x08001751
 800446c:	080002d1 	.word	0x080002d1
 8004470:	20001254 	.word	0x20001254
 8004474:	08002641 	.word	0x08002641
 8004478:	0800a170 	.word	0x0800a170
 800447c:	0800a180 	.word	0x0800a180
 8004480:	40020800 	.word	0x40020800
 8004484:	08009b58 	.word	0x08009b58
 8004488:	40023800 	.word	0x40023800
 800448c:	e000e100 	.word	0xe000e100
 8004490:	02200003 	.word	0x02200003
 8004494:	c0303c08 	.word	0xc0303c08
 8004498:	2000221c 	.word	0x2000221c
 800449c:	0800a284 	.word	0x0800a284
 80044a0:	08002501 	.word	0x08002501
 80044a4:	40001440 	.word	0x40001440
  if (adcp->state == ADC_STOP) {
 80044a8:	2b01      	cmp	r3, #1
  adcp->config = config;
 80044aa:	607c      	str	r4, [r7, #4]
 80044ac:	d01c      	beq.n	80044e8 <main+0x818>
  adcp->state = ADC_READY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	703b      	strb	r3, [r7, #0]
  _dbg_check_unlock();
 80044b2:	f7fe fefd 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	d005      	beq.n	80044c8 <main+0x7f8>
 80044bc:	69aa      	ldr	r2, [r5, #24]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	f0c0 8104 	bcc.w	80046d0 <main+0xa00>
 80044c8:	2400      	movs	r4, #0
 80044ca:	f384 8811 	msr	BASEPRI, r4
 80044ce:	2620      	movs	r6, #32
 80044d0:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 80044d4:	f7fe ff2c 	bl	8003330 <_dbg_check_lock>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 80044d8:	f899 3000 	ldrb.w	r3, [r9]
 80044dc:	3b01      	subs	r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d97b      	bls.n	80045da <main+0x90a>
 80044e2:	4884      	ldr	r0, [pc, #528]	; (80046f4 <main+0xa24>)
 80044e4:	f7fc ff84 	bl	80013f0 <chSysHalt>
      b = dmaStreamAllocate(adcp->dmastp,
 80044e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	d072      	beq.n	80045d4 <main+0x904>

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80044ee:	4882      	ldr	r0, [pc, #520]	; (80046f8 <main+0xa28>)
 80044f0:	7a51      	ldrb	r1, [r2, #9]
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	408b      	lsls	r3, r1
 80044f6:	4203      	tst	r3, r0
 80044f8:	d169      	bne.n	80045ce <main+0x8fe>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 80044fa:	4303      	orrs	r3, r0
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80044fc:	eb06 04c1 	add.w	r4, r6, r1, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
 8004500:	487d      	ldr	r0, [pc, #500]	; (80046f8 <main+0xa28>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004502:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004758 <main+0xa88>
  dma_streams_mask |= (1U << dmastp->selfindex);
 8004506:	6003      	str	r3, [r0, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8004508:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800450c:	6067      	str	r7, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800450e:	f846 c031 	str.w	ip, [r6, r1, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 8004512:	d008      	beq.n	8004526 <main+0x856>
    rccEnableDMA1(true);
 8004514:	4979      	ldr	r1, [pc, #484]	; (80046fc <main+0xa2c>)
 8004516:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8004518:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 800451c:	6308      	str	r0, [r1, #48]	; 0x30
 800451e:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8004520:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004524:	6508      	str	r0, [r1, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8004526:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 800452a:	d008      	beq.n	800453e <main+0x86e>
    rccEnableDMA2(true);
 800452c:	4b73      	ldr	r3, [pc, #460]	; (80046fc <main+0xa2c>)
 800452e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004530:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004534:	6319      	str	r1, [r3, #48]	; 0x30
 8004536:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004538:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800453c:	6519      	str	r1, [r3, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800453e:	6810      	ldr	r0, [r2, #0]
 8004540:	6803      	ldr	r3, [r0, #0]
 8004542:	f023 031f 	bic.w	r3, r3, #31
 8004546:	6003      	str	r3, [r0, #0]
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f011 0101 	ands.w	r1, r1, #1
 800454e:	d1fb      	bne.n	8004548 <main+0x878>
 8004550:	f892 c008 	ldrb.w	ip, [r2, #8]
 8004554:	6853      	ldr	r3, [r2, #4]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8004556:	4e6a      	ldr	r6, [pc, #424]	; (8004700 <main+0xa30>)
 8004558:	243d      	movs	r4, #61	; 0x3d
 800455a:	fa04 f40c 	lsl.w	r4, r4, ip
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800455e:	f04f 0c21 	mov.w	ip, #33	; 0x21
  dmaStreamDisable(dmastp);
 8004562:	601c      	str	r4, [r3, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8004564:	6001      	str	r1, [r0, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8004566:	f8c0 c014 	str.w	ip, [r0, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
 800456a:	7a93      	ldrb	r3, [r2, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800456c:	095a      	lsrs	r2, r3, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800456e:	f103 4460 	add.w	r4, r3, #3758096384	; 0xe0000000
 8004572:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	f04f 0c60 	mov.w	ip, #96	; 0x60
 800457c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8004580:	f884 c300 	strb.w	ip, [r4, #768]	; 0x300
 8004584:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004588:	2401      	movs	r4, #1
 800458a:	f003 031f 	and.w	r3, r3, #31
      rccEnableADC1(true);
 800458e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80046fc <main+0xa2c>
 8004592:	fa04 f303 	lsl.w	r3, r4, r3
 8004596:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800459a:	6013      	str	r3, [r2, #0]
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800459c:	6086      	str	r6, [r0, #8]
      rccEnableADC1(true);
 800459e:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
    adcp->adc->CR1 = 0;
 80045a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80045a4:	4857      	ldr	r0, [pc, #348]	; (8004704 <main+0xa34>)
      rccEnableADC1(true);
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
 80045ae:	f8dc 3064 	ldr.w	r3, [ip, #100]	; 0x64
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	f8cc 3064 	str.w	r3, [ip, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 80045ba:	6843      	ldr	r3, [r0, #4]
 80045bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6043      	str	r3, [r0, #4]
    adcp->adc->CR1 = 0;
 80045c6:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
 80045c8:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 80045ca:	6094      	str	r4, [r2, #8]
 80045cc:	e76f      	b.n	80044ae <main+0x7de>
      osalDbgAssert(!b, "stream already allocated");
 80045ce:	484e      	ldr	r0, [pc, #312]	; (8004708 <main+0xa38>)
 80045d0:	f7fc ff0e 	bl	80013f0 <chSysHalt>
  osalDbgCheck(dmastp != NULL);
 80045d4:	484d      	ldr	r0, [pc, #308]	; (800470c <main+0xa3c>)
 80045d6:	f7fc ff0b 	bl	80013f0 <chSysHalt>
  pwmp->config = config;
 80045da:	4d4d      	ldr	r5, [pc, #308]	; (8004710 <main+0xa40>)
  pwm_lld_start(pwmp);
 80045dc:	484d      	ldr	r0, [pc, #308]	; (8004714 <main+0xa44>)
  pwmp->period = config->period;
 80045de:	686b      	ldr	r3, [r5, #4]
  pwmp->state = PWM_READY;
 80045e0:	2702      	movs	r7, #2
  pwmp->period = config->period;
 80045e2:	e9c9 5301 	strd	r5, r3, [r9, #4]
  pwm_lld_start(pwmp);
 80045e6:	f7fd f8eb 	bl	80017c0 <pwm_lld_start>
  pwmp->enabled = 0;
 80045ea:	f8c9 400c 	str.w	r4, [r9, #12]
  pwmp->state = PWM_READY;
 80045ee:	f889 7000 	strb.w	r7, [r9]
  chSysUnlock();
 80045f2:	f7fe fe85 	bl	8003300 <chSysUnlock.lto_priv.41>
 80045f6:	f386 8811 	msr	BASEPRI, r6
 80045fa:	f7fe fe99 	bl	8003330 <_dbg_check_lock>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 80045fe:	f898 3000 	ldrb.w	r3, [r8]
 8004602:	3b01      	subs	r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	f63f af6c 	bhi.w	80044e2 <main+0x812>
  pwmp->period = config->period;
 800460a:	686b      	ldr	r3, [r5, #4]
  pwm_lld_start(pwmp);
 800460c:	4842      	ldr	r0, [pc, #264]	; (8004718 <main+0xa48>)
  pwmp->period = config->period;
 800460e:	f8c8 3008 	str.w	r3, [r8, #8]
  pwmp->config = config;
 8004612:	f8c8 5004 	str.w	r5, [r8, #4]
  pwm_lld_start(pwmp);
 8004616:	f7fd f8d3 	bl	80017c0 <pwm_lld_start>
  pwmp->enabled = 0;
 800461a:	f8c8 400c 	str.w	r4, [r8, #12]
  pwmp->state = PWM_READY;
 800461e:	f888 7000 	strb.w	r7, [r8]
 8004622:	f7fe fe6d 	bl	8003300 <chSysUnlock.lto_priv.41>
  palSetPadMode(GPIOB, 5, PAL_MODE_ALTERNATE(2)); //pb5, alternate function 2 (TIM3_CH2)
 8004626:	4631      	mov	r1, r6
 8004628:	f44f 7281 	mov.w	r2, #258	; 0x102
 800462c:	483b      	ldr	r0, [pc, #236]	; (800471c <main+0xa4c>)
 800462e:	f7fd fd17 	bl	8002060 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(2)); //pb5, alternate function 2 (TIM4_CH1)
 8004632:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	4838      	ldr	r0, [pc, #224]	; (800471c <main+0xa4c>)
 800463a:	f7fd fd11 	bl	8002060 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(2)); //pb5, alternate function 2 (TIM4_CH2)
 800463e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	4835      	ldr	r0, [pc, #212]	; (800471c <main+0xa4c>)
 8004646:	f7fd fd0b 	bl	8002060 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 8, PAL_MODE_ALTERNATE(2)); //pb5, alternate function 2 (TIM4_CH3)
 800464a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800464e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004652:	4832      	ldr	r0, [pc, #200]	; (800471c <main+0xa4c>)
 8004654:	f7fd fd04 	bl	8002060 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 9, PAL_MODE_ALTERNATE(2)); //pb5, alternate function 2 (TIM4_CH4)
 8004658:	f44f 7281 	mov.w	r2, #258	; 0x102
 800465c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004660:	482e      	ldr	r0, [pc, #184]	; (800471c <main+0xa4c>)
 8004662:	f7fd fcfd 	bl	8002060 <_pal_lld_setgroupmode>
  pwmEnableChannel(&PWMD3, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, 0));
 8004666:	4622      	mov	r2, r4
 8004668:	2101      	movs	r1, #1
 800466a:	482b      	ldr	r0, [pc, #172]	; (8004718 <main+0xa48>)
 800466c:	f7ff faf8 	bl	8003c60 <pwmEnableChannel>
  pwmEnableChannel(&PWMD4, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 0));
 8004670:	4622      	mov	r2, r4
 8004672:	4621      	mov	r1, r4
 8004674:	4827      	ldr	r0, [pc, #156]	; (8004714 <main+0xa44>)
 8004676:	f7ff faf3 	bl	8003c60 <pwmEnableChannel>
  pwmEnableChannel(&PWMD4, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 0));
 800467a:	4622      	mov	r2, r4
 800467c:	2101      	movs	r1, #1
 800467e:	4825      	ldr	r0, [pc, #148]	; (8004714 <main+0xa44>)
 8004680:	f7ff faee 	bl	8003c60 <pwmEnableChannel>
  pwmEnableChannel(&PWMD4, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 0));
 8004684:	4622      	mov	r2, r4
 8004686:	4639      	mov	r1, r7
 8004688:	4822      	ldr	r0, [pc, #136]	; (8004714 <main+0xa44>)
 800468a:	f7ff fae9 	bl	8003c60 <pwmEnableChannel>
  pwmEnableChannel(&PWMD4, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, 0));
 800468e:	4622      	mov	r2, r4
 8004690:	2103      	movs	r1, #3
 8004692:	4820      	ldr	r0, [pc, #128]	; (8004714 <main+0xa44>)
 8004694:	f7ff fae4 	bl	8003c60 <pwmEnableChannel>
//  shellInit();

  /*
   * Create threads.
   */
  chThdCreateStatic(readThrWA, sizeof(readThrWA), NORMALPRIO, readThrFunction, NULL);
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <main+0xa50>)
 800469a:	4822      	ldr	r0, [pc, #136]	; (8004724 <main+0xa54>)
 800469c:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 80046a0:	f7ff f946 	bl	8003930 <chThdCreateStatic.constprop.2>
  chThdCreateStatic(writeThrWA, sizeof(writeThrWA), NORMALPRIO, writeThrFunction, NULL);
 80046a4:	4a20      	ldr	r2, [pc, #128]	; (8004728 <main+0xa58>)
 80046a6:	4821      	ldr	r0, [pc, #132]	; (800472c <main+0xa5c>)
 80046a8:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 80046ac:	f7ff f940 	bl	8003930 <chThdCreateStatic.constprop.2>
  chThdCreateStatic(usbThreadWA, sizeof(usbThreadWA), NORMALPRIO, usbThreadFunction, NULL);
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <main+0xa60>)
 80046b2:	4820      	ldr	r0, [pc, #128]	; (8004734 <main+0xa64>)
 80046b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80046b8:	f7ff f93a 	bl	8003930 <chThdCreateStatic.constprop.2>
  chThdCreateStatic(adcSampleThreadWA, sizeof(adcSampleThreadWA), NORMALPRIO, adcSampleThread, NULL);
 80046bc:	4a1e      	ldr	r2, [pc, #120]	; (8004738 <main+0xa68>)
 80046be:	481f      	ldr	r0, [pc, #124]	; (800473c <main+0xa6c>)
 80046c0:	f44f 7184 	mov.w	r1, #264	; 0x108
 80046c4:	f7ff f934 	bl	8003930 <chThdCreateStatic.constprop.2>
//      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
//                                              "shell", NORMALPRIO + 1,
//                                              shellThread, (void *)&shell_cfg1);
//      chThdWait(shelltp);               /* Waiting termination.             */
//    }
    chThdSleepMilliseconds(10);
 80046c8:	2064      	movs	r0, #100	; 0x64
 80046ca:	f7ff f981 	bl	80039d0 <chThdSleep>
 80046ce:	e7fb      	b.n	80046c8 <main+0x9f8>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80046d0:	481b      	ldr	r0, [pc, #108]	; (8004740 <main+0xa70>)
 80046d2:	f7fc fe8d 	bl	80013f0 <chSysHalt>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 80046d6:	481b      	ldr	r0, [pc, #108]	; (8004744 <main+0xa74>)
 80046d8:	f7fc fe8a 	bl	80013f0 <chSysHalt>
 80046dc:	481a      	ldr	r0, [pc, #104]	; (8004748 <main+0xa78>)
 80046de:	f7fc fe87 	bl	80013f0 <chSysHalt>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 80046e2:	481a      	ldr	r0, [pc, #104]	; (800474c <main+0xa7c>)
 80046e4:	f7fc fe84 	bl	80013f0 <chSysHalt>
 80046e8:	4819      	ldr	r0, [pc, #100]	; (8004750 <main+0xa80>)
 80046ea:	f7fc fe81 	bl	80013f0 <chSysHalt>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <main+0xa84>)
 80046f0:	61a3      	str	r3, [r4, #24]
 80046f2:	e6ab      	b.n	800444c <main+0x77c>
 80046f4:	08009b64 	.word	0x08009b64
 80046f8:	2000232c 	.word	0x2000232c
 80046fc:	40023800 	.word	0x40023800
 8004700:	4001204c 	.word	0x4001204c
 8004704:	40012300 	.word	0x40012300
 8004708:	08009bb0 	.word	0x08009bb0
 800470c:	08009cb0 	.word	0x08009cb0
 8004710:	20000808 	.word	0x20000808
 8004714:	20001238 	.word	0x20001238
 8004718:	2000121c 	.word	0x2000121c
 800471c:	40020400 	.word	0x40020400
 8004720:	08004761 	.word	0x08004761
 8004724:	20002378 	.word	0x20002378
 8004728:	08003a21 	.word	0x08003a21
 800472c:	200029b8 	.word	0x200029b8
 8004730:	08003bb1 	.word	0x08003bb1
 8004734:	20002870 	.word	0x20002870
 8004738:	080033d1 	.word	0x080033d1
 800473c:	200017d8 	.word	0x200017d8
 8004740:	08009968 	.word	0x08009968
 8004744:	08009d38 	.word	0x08009d38
 8004748:	08009980 	.word	0x08009980
 800474c:	08009c80 	.word	0x08009c80
 8004750:	080099f4 	.word	0x080099f4
 8004754:	c0303c00 	.word	0xc0303c00
 8004758:	08002151 	.word	0x08002151
 800475c:	00000000 	.word	0x00000000

08004760 <readThrFunction>:

void decodeNextNetstring(char* buffer, int size);
void decodeRequest(char* msg);

THD_FUNCTION(readThrFunction, arg)
{
 8004760:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004764:	4cb3      	ldr	r4, [pc, #716]	; (8004a34 <readThrFunction+0x2d4>)
 8004766:	49b4      	ldr	r1, [pc, #720]	; (8004a38 <readThrFunction+0x2d8>)
 8004768:	69a2      	ldr	r2, [r4, #24]
 800476a:	b0b9      	sub	sp, #228	; 0xe4
 800476c:	2320      	movs	r3, #32
 800476e:	6191      	str	r1, [r2, #24]
 8004770:	f383 8811 	msr	BASEPRI, r3
  elp->next     = esp->next;
 8004774:	4fb1      	ldr	r7, [pc, #708]	; (8004a3c <readThrFunction+0x2dc>)
  _dbg_check_lock();
 8004776:	f7fe fddb 	bl	8003330 <_dbg_check_lock>
 800477a:	ab38      	add	r3, sp, #224	; 0xe0
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f843 2dd4 	str.w	r2, [r3, #-212]!
  elp->listener = currp;
 8004782:	69a2      	ldr	r2, [r4, #24]
 8004784:	9204      	str	r2, [sp, #16]
  elp->events   = events;
 8004786:	2002      	movs	r0, #2
  elp->flags    = (eventflags_t)0;
 8004788:	2100      	movs	r1, #0
  elp->wflags   = wflags;
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
  esp->next     = elp;
 800478e:	607b      	str	r3, [r7, #4]
  elp->flags    = (eventflags_t)0;
 8004790:	e9cd 0105 	strd	r0, r1, [sp, #20]
  elp->wflags   = wflags;
 8004794:	9207      	str	r2, [sp, #28]
  _dbg_check_unlock();
 8004796:	f7fe fd8b 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	42a3      	cmp	r3, r4
 800479e:	d005      	beq.n	80047ac <readThrFunction+0x4c>
 80047a0:	69a2      	ldr	r2, [r4, #24]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f0c0 80a5 	bcc.w	80048f6 <readThrFunction+0x196>
 80047ac:	2300      	movs	r3, #0
 80047ae:	f383 8811 	msr	BASEPRI, r3
    chEvtWaitAll(EVENT_MASK(1));

    flags = chEvtGetAndClearFlags(&usbData);
    if (flags & CHN_INPUT_AVAILABLE)
    {
      bytesRead = chnReadTimeout(&PORTAB_SDU1, readBuffer, 64, 10);
 80047b2:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8004a3c <readThrFunction+0x2dc>
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;

  chSysLock();
  if ((ctp->epending & events) != events) {
    ctp->u.ewmask = events;
 80047b6:	f04f 0802 	mov.w	r8, #2
 80047ba:	2620      	movs	r6, #32
  thread_t *ctp = currp;
 80047bc:	69a5      	ldr	r5, [r4, #24]
 80047be:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 80047c2:	f7fe fdb5 	bl	8003330 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 80047c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80047c8:	079a      	lsls	r2, r3, #30
 80047ca:	d405      	bmi.n	80047d8 <readThrFunction+0x78>
    ctp->u.ewmask = events;
 80047cc:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80047d0:	200b      	movs	r0, #11
 80047d2:	f7fe f895 	bl	8002900 <chSchGoSleepS>
 80047d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  }
  ctp->epending &= ~events;
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 80047de:	f7fe fd67 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d005      	beq.n	80047f4 <readThrFunction+0x94>
 80047e8:	69a2      	ldr	r2, [r4, #24]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	6892      	ldr	r2, [r2, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	f0c0 8081 	bcc.w	80048f6 <readThrFunction+0x196>
 80047f4:	2500      	movs	r5, #0
 80047f6:	f385 8811 	msr	BASEPRI, r5
 80047fa:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 80047fe:	f7fe fd97 	bl	8003330 <_dbg_check_lock>
  flags = elp->flags;
 8004802:	f8dd a018 	ldr.w	sl, [sp, #24]
  elp->flags = (eventflags_t)0;
 8004806:	9506      	str	r5, [sp, #24]
  _dbg_check_unlock();
 8004808:	f7fe fd52 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	42a3      	cmp	r3, r4
 8004810:	d004      	beq.n	800481c <readThrFunction+0xbc>
 8004812:	69a2      	ldr	r2, [r4, #24]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	d36c      	bcc.n	80048f6 <readThrFunction+0x196>
 800481c:	2500      	movs	r5, #0
 800481e:	f385 8811 	msr	BASEPRI, r5
    if (flags & CHN_INPUT_AVAILABLE)
 8004822:	f01a 0f04 	tst.w	sl, #4
 8004826:	d0c9      	beq.n	80047bc <readThrFunction+0x5c>
      bytesRead = chnReadTimeout(&PORTAB_SDU1, readBuffer, 64, 10);
 8004828:	683b      	ldr	r3, [r7, #0]
      palSetLine(LINE_LED5);
 800482a:	4e85      	ldr	r6, [pc, #532]	; (8004a40 <readThrFunction+0x2e0>)
      bytesRead = chnReadTimeout(&PORTAB_SDU1, readBuffer, 64, 10);
 800482c:	f8d3 a020 	ldr.w	sl, [r3, #32]
 8004830:	a918      	add	r1, sp, #96	; 0x60
 8004832:	230a      	movs	r3, #10
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	4648      	mov	r0, r9
 8004838:	47d0      	blx	sl
      palSetLine(LINE_LED5);
 800483a:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
      bytesRead = chnReadTimeout(&PORTAB_SDU1, readBuffer, 64, 10);
 800483e:	4683      	mov	fp, r0
      palSetLine(LINE_LED5);
 8004840:	f8a6 a018 	strh.w	sl, [r6, #24]
      chThdSleepMilliseconds(100);
 8004844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004848:	f7ff f8c2 	bl	80039d0 <chThdSleep>
      palClearLine(LINE_LED5);
      if (bytesRead > 3)
 800484c:	f1bb 0f03 	cmp.w	fp, #3
      palClearLine(LINE_LED5);
 8004850:	f8a6 a01a 	strh.w	sl, [r6, #26]
      if (bytesRead > 3)
 8004854:	ddb1      	ble.n	80047ba <readThrFunction+0x5a>
  // Netstrings have the following format:
  // ASCII Number representing the length of the payload + ':' + payload + MSG_END

  int msg_length = -1;
  const char lengthDelim = STATUS_DELIMITER;
  const char endDelim = MSG_END;
 8004856:	233b      	movs	r3, #59	; 0x3b
  const char lengthDelim = STATUS_DELIMITER;
 8004858:	223a      	movs	r2, #58	; 0x3a
  char netstring[64];
  char *temp = NULL;

  msg_length = atoi(strtok(buffer, &lengthDelim));
 800485a:	f10d 0105 	add.w	r1, sp, #5
 800485e:	a818      	add	r0, sp, #96	; 0x60
  const char endDelim = MSG_END;
 8004860:	f88d 3006 	strb.w	r3, [sp, #6]
  const char lengthDelim = STATUS_DELIMITER;
 8004864:	f88d 2005 	strb.w	r2, [sp, #5]
  msg_length = atoi(strtok(buffer, &lengthDelim));
 8004868:	f001 f868 	bl	800593c <strtok>
 800486c:	f001 f862 	bl	8005934 <atoi>
  if (msg_length != -1 && msg_length < size)
 8004870:	1c43      	adds	r3, r0, #1
  msg_length = atoi(strtok(buffer, &lengthDelim));
 8004872:	4606      	mov	r6, r0
  if (msg_length != -1 && msg_length < size)
 8004874:	d0a1      	beq.n	80047ba <readThrFunction+0x5a>
 8004876:	4583      	cmp	fp, r0
 8004878:	dd9f      	ble.n	80047ba <readThrFunction+0x5a>
  {
    temp = strtok(NULL, &endDelim);
 800487a:	f10d 0106 	add.w	r1, sp, #6
 800487e:	4628      	mov	r0, r5
 8004880:	f001 f85c 	bl	800593c <strtok>
    memcpy(netstring, temp, msg_length);
 8004884:	ab08      	add	r3, sp, #32
 8004886:	4601      	mov	r1, r0
 8004888:	4632      	mov	r2, r6
 800488a:	4618      	mov	r0, r3
 800488c:	f7fb fd32 	bl	80002f4 <memcpy>

void decodeRequest(char* msg){

  pinType type;
  unsigned int pinID = 0;
  const char delim = DELIMITER;
 8004890:	267c      	movs	r6, #124	; 0x7c
  char* command = strtok_r(msg, &delim, &msg);
 8004892:	aa02      	add	r2, sp, #8
 8004894:	f10d 0107 	add.w	r1, sp, #7
  const char delim = DELIMITER;
 8004898:	f88d 6007 	strb.w	r6, [sp, #7]
 800489c:	9002      	str	r0, [sp, #8]
  char* command = strtok_r(msg, &delim, &msg);
 800489e:	f001 f887 	bl	80059b0 <strtok_r>
  char* sensor = strtok_r(NULL, &delim, &msg);
 80048a2:	aa02      	add	r2, sp, #8
 80048a4:	f10d 0107 	add.w	r1, sp, #7
 80048a8:	4628      	mov	r0, r5
 80048aa:	f001 f881 	bl	80059b0 <strtok_r>
  char* value = strtok_r(NULL, &delim, &msg);
 80048ae:	f10d 0107 	add.w	r1, sp, #7
  char* sensor = strtok_r(NULL, &delim, &msg);
 80048b2:	4606      	mov	r6, r0
  char* value = strtok_r(NULL, &delim, &msg);
 80048b4:	aa02      	add	r2, sp, #8
 80048b6:	4628      	mov	r0, r5
 80048b8:	f001 f87a 	bl	80059b0 <strtok_r>
  }

  /*
   * Process sensor
   */
  if (strstr(sensor, HEART_BEAT))
 80048bc:	4961      	ldr	r1, [pc, #388]	; (8004a44 <readThrFunction+0x2e4>)
  char* value = strtok_r(NULL, &delim, &msg);
 80048be:	4682      	mov	sl, r0
  if (strstr(sensor, HEART_BEAT))
 80048c0:	4630      	mov	r0, r6
 80048c2:	f001 fb0b 	bl	8005edc <strstr>
 80048c6:	b1c8      	cbz	r0, 80048fc <readThrFunction+0x19c>
    pinID = 9;
  }
  /*
   * Process value to set for sensor
   */
  int intValue = atoi(value);
 80048c8:	4650      	mov	r0, sl
 80048ca:	f001 f833 	bl	8005934 <atoi>
  unsigned char pinValue = intValue == 0 ? PAL_LOW : PAL_HIGH;
 80048ce:	1c03      	adds	r3, r0, #0
 80048d0:	bf18      	it	ne
 80048d2:	2301      	movne	r3, #1
  if (intValue == 250)
 80048d4:	28fa      	cmp	r0, #250	; 0xfa
 80048d6:	d103      	bne.n	80048e0 <readThrFunction+0x180>
  {
    palSetLine(LINE_LED6);
 80048d8:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <readThrFunction+0x2e0>)
 80048da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048de:	8311      	strh	r1, [r2, #24]
   * Execute command
   */
  switch(type)
  {
    case GPIO:
      palWritePad(GPIOD, pinID, pinValue);
 80048e0:	fab0 f080 	clz	r0, r0
 80048e4:	f105 0210 	add.w	r2, r5, #16
 80048e8:	0940      	lsrs	r0, r0, #5
 80048ea:	4090      	lsls	r0, r2
 80048ec:	40ab      	lsls	r3, r5
 80048ee:	4a54      	ldr	r2, [pc, #336]	; (8004a40 <readThrFunction+0x2e0>)
 80048f0:	4303      	orrs	r3, r0
 80048f2:	6193      	str	r3, [r2, #24]
 80048f4:	e761      	b.n	80047ba <readThrFunction+0x5a>
 80048f6:	4854      	ldr	r0, [pc, #336]	; (8004a48 <readThrFunction+0x2e8>)
 80048f8:	f7fc fd7a 	bl	80013f0 <chSysHalt>
  else if (strstr(sensor, RACK_RIGHT))
 80048fc:	4953      	ldr	r1, [pc, #332]	; (8004a4c <readThrFunction+0x2ec>)
 80048fe:	4630      	mov	r0, r6
 8004900:	f001 faec 	bl	8005edc <strstr>
 8004904:	b108      	cbz	r0, 800490a <readThrFunction+0x1aa>
    pinID = 1;
 8004906:	2501      	movs	r5, #1
 8004908:	e7de      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, RACK_LEFT))
 800490a:	4951      	ldr	r1, [pc, #324]	; (8004a50 <readThrFunction+0x2f0>)
 800490c:	4630      	mov	r0, r6
 800490e:	f001 fae5 	bl	8005edc <strstr>
 8004912:	b108      	cbz	r0, 8004918 <readThrFunction+0x1b8>
    pinID = 2;
 8004914:	2502      	movs	r5, #2
 8004916:	e7d7      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, REDUNDENCY))
 8004918:	494e      	ldr	r1, [pc, #312]	; (8004a54 <readThrFunction+0x2f4>)
 800491a:	4630      	mov	r0, r6
 800491c:	f001 fade 	bl	8005edc <strstr>
 8004920:	b108      	cbz	r0, 8004926 <readThrFunction+0x1c6>
    pinID = 4;
 8004922:	2504      	movs	r5, #4
 8004924:	e7d0      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, SPARE))
 8004926:	494c      	ldr	r1, [pc, #304]	; (8004a58 <readThrFunction+0x2f8>)
 8004928:	4630      	mov	r0, r6
 800492a:	f001 fad7 	bl	8005edc <strstr>
 800492e:	b108      	cbz	r0, 8004934 <readThrFunction+0x1d4>
    pinID = 7;
 8004930:	2507      	movs	r5, #7
 8004932:	e7c9      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, CLAMP_SET))
 8004934:	4949      	ldr	r1, [pc, #292]	; (8004a5c <readThrFunction+0x2fc>)
 8004936:	4630      	mov	r0, r6
 8004938:	f001 fad0 	bl	8005edc <strstr>
 800493c:	b108      	cbz	r0, 8004942 <readThrFunction+0x1e2>
    pinID = 8;
 800493e:	2508      	movs	r5, #8
 8004940:	e7c2      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, EBS_RELIEF))
 8004942:	4947      	ldr	r1, [pc, #284]	; (8004a60 <readThrFunction+0x300>)
 8004944:	4630      	mov	r0, r6
 8004946:	f001 fac9 	bl	8005edc <strstr>
 800494a:	b108      	cbz	r0, 8004950 <readThrFunction+0x1f0>
    pinID = 10;
 800494c:	250a      	movs	r5, #10
 800494e:	e7bb      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, EBS_SPEAKER))
 8004950:	4944      	ldr	r1, [pc, #272]	; (8004a64 <readThrFunction+0x304>)
 8004952:	4630      	mov	r0, r6
 8004954:	f001 fac2 	bl	8005edc <strstr>
 8004958:	b108      	cbz	r0, 800495e <readThrFunction+0x1fe>
    pinID = 11;
 800495a:	250b      	movs	r5, #11
 800495c:	e7b4      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, FINISHED))
 800495e:	4942      	ldr	r1, [pc, #264]	; (8004a68 <readThrFunction+0x308>)
 8004960:	4630      	mov	r0, r6
 8004962:	f001 fabb 	bl	8005edc <strstr>
 8004966:	b108      	cbz	r0, 800496c <readThrFunction+0x20c>
    pinID = 12;
 8004968:	250c      	movs	r5, #12
 800496a:	e7ad      	b.n	80048c8 <readThrFunction+0x168>
  else if (strstr(sensor, STEER_SPEED))
 800496c:	493f      	ldr	r1, [pc, #252]	; (8004a6c <readThrFunction+0x30c>)
 800496e:	4630      	mov	r0, r6
 8004970:	f001 fab4 	bl	8005edc <strstr>
 8004974:	b1a8      	cbz	r0, 80049a2 <readThrFunction+0x242>
  int intValue = atoi(value);
 8004976:	4650      	mov	r0, sl
 8004978:	f000 ffdc 	bl	8005934 <atoi>
  if (intValue == 250)
 800497c:	28fa      	cmp	r0, #250	; 0xfa
  int intValue = atoi(value);
 800497e:	4602      	mov	r2, r0
  if (intValue == 250)
 8004980:	d103      	bne.n	800498a <readThrFunction+0x22a>
    palSetLine(LINE_LED6);
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <readThrFunction+0x2e0>)
 8004984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004988:	8319      	strh	r1, [r3, #24]
      break;
    case PWM:
      switch(pinID){
        case 5: // linear actuator steer speed
          pwmEnableChannel(&PWMD3, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD3, intValue)); break;
 800498a:	4839      	ldr	r0, [pc, #228]	; (8004a70 <readThrFunction+0x310>)
        case 6: // pressure regulator
          pwmEnableChannel(&PWMD4, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, intValue)); break;
        case 7: // ASSI blue
          pwmEnableChannel(&PWMD4, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, intValue)); break;
 800498c:	6883      	ldr	r3, [r0, #8]
 800498e:	2101      	movs	r1, #1
 8004990:	fb03 f302 	mul.w	r3, r3, r2
 8004994:	f242 7210 	movw	r2, #10000	; 0x2710
 8004998:	fbb3 f2f2 	udiv	r2, r3, r2
 800499c:	f7ff f960 	bl	8003c60 <pwmEnableChannel>
 80049a0:	e70b      	b.n	80047ba <readThrFunction+0x5a>
  else if (strstr(sensor, BRAKE_PRESSURE))
 80049a2:	4934      	ldr	r1, [pc, #208]	; (8004a74 <readThrFunction+0x314>)
 80049a4:	4630      	mov	r0, r6
 80049a6:	f001 fa99 	bl	8005edc <strstr>
 80049aa:	b1a8      	cbz	r0, 80049d8 <readThrFunction+0x278>
  int intValue = atoi(value);
 80049ac:	4650      	mov	r0, sl
 80049ae:	f000 ffc1 	bl	8005934 <atoi>
  if (intValue == 250)
 80049b2:	28fa      	cmp	r0, #250	; 0xfa
  int intValue = atoi(value);
 80049b4:	4602      	mov	r2, r0
  if (intValue == 250)
 80049b6:	d103      	bne.n	80049c0 <readThrFunction+0x260>
    palSetLine(LINE_LED6);
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <readThrFunction+0x2e0>)
 80049ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049be:	8319      	strh	r1, [r3, #24]
          pwmEnableChannel(&PWMD4, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, intValue)); break;
 80049c0:	482d      	ldr	r0, [pc, #180]	; (8004a78 <readThrFunction+0x318>)
 80049c2:	6883      	ldr	r3, [r0, #8]
 80049c4:	2100      	movs	r1, #0
 80049c6:	fb03 f302 	mul.w	r3, r3, r2
 80049ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80049ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80049d2:	f7ff f945 	bl	8003c60 <pwmEnableChannel>
 80049d6:	e6f0      	b.n	80047ba <readThrFunction+0x5a>
  else if (strstr(sensor, ASSI_BLUE))
 80049d8:	4928      	ldr	r1, [pc, #160]	; (8004a7c <readThrFunction+0x31c>)
 80049da:	4630      	mov	r0, r6
 80049dc:	f001 fa7e 	bl	8005edc <strstr>
 80049e0:	b158      	cbz	r0, 80049fa <readThrFunction+0x29a>
  int intValue = atoi(value);
 80049e2:	4650      	mov	r0, sl
 80049e4:	f000 ffa6 	bl	8005934 <atoi>
  if (intValue == 250)
 80049e8:	28fa      	cmp	r0, #250	; 0xfa
  int intValue = atoi(value);
 80049ea:	4602      	mov	r2, r0
  if (intValue == 250)
 80049ec:	d103      	bne.n	80049f6 <readThrFunction+0x296>
    palSetLine(LINE_LED6);
 80049ee:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <readThrFunction+0x2e0>)
 80049f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049f4:	8319      	strh	r1, [r3, #24]
          pwmEnableChannel(&PWMD4, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, intValue)); break;
 80049f6:	4820      	ldr	r0, [pc, #128]	; (8004a78 <readThrFunction+0x318>)
 80049f8:	e7c8      	b.n	800498c <readThrFunction+0x22c>
  else if (strstr(sensor, ASSI_RED))
 80049fa:	4921      	ldr	r1, [pc, #132]	; (8004a80 <readThrFunction+0x320>)
 80049fc:	4630      	mov	r0, r6
 80049fe:	f001 fa6d 	bl	8005edc <strstr>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d03e      	beq.n	8004a84 <readThrFunction+0x324>
  int intValue = atoi(value);
 8004a06:	4650      	mov	r0, sl
 8004a08:	f000 ff94 	bl	8005934 <atoi>
  if (intValue == 250)
 8004a0c:	28fa      	cmp	r0, #250	; 0xfa
  int intValue = atoi(value);
 8004a0e:	4602      	mov	r2, r0
  if (intValue == 250)
 8004a10:	d103      	bne.n	8004a1a <readThrFunction+0x2ba>
    palSetLine(LINE_LED6);
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <readThrFunction+0x2e0>)
 8004a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a18:	8319      	strh	r1, [r3, #24]
        case 8: // ASSI red
          pwmEnableChannel(&PWMD4, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, intValue)); break;
 8004a1a:	4817      	ldr	r0, [pc, #92]	; (8004a78 <readThrFunction+0x318>)
 8004a1c:	6883      	ldr	r3, [r0, #8]
 8004a1e:	2102      	movs	r1, #2
 8004a20:	fb03 f302 	mul.w	r3, r3, r2
 8004a24:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a28:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a2c:	f7ff f918 	bl	8003c60 <pwmEnableChannel>
 8004a30:	e6c3      	b.n	80047ba <readThrFunction+0x5a>
 8004a32:	bf00      	nop
 8004a34:	200018e0 	.word	0x200018e0
 8004a38:	0800a0bc 	.word	0x0800a0bc
 8004a3c:	20001254 	.word	0x20001254
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	0800a0c8 	.word	0x0800a0c8
 8004a48:	080099a4 	.word	0x080099a4
 8004a4c:	0800a0d4 	.word	0x0800a0d4
 8004a50:	0800a0e0 	.word	0x0800a0e0
 8004a54:	0800a0ec 	.word	0x0800a0ec
 8004a58:	0800a0f8 	.word	0x0800a0f8
 8004a5c:	0800a100 	.word	0x0800a100
 8004a60:	0800a10c 	.word	0x0800a10c
 8004a64:	0800a118 	.word	0x0800a118
 8004a68:	0800a124 	.word	0x0800a124
 8004a6c:	0800a130 	.word	0x0800a130
 8004a70:	2000121c 	.word	0x2000121c
 8004a74:	0800a13c 	.word	0x0800a13c
 8004a78:	20001238 	.word	0x20001238
 8004a7c:	0800a14c 	.word	0x0800a14c
 8004a80:	0800a158 	.word	0x0800a158
  else if (strstr(sensor, ASSI_GREEN))
 8004a84:	4630      	mov	r0, r6
 8004a86:	4914      	ldr	r1, [pc, #80]	; (8004ad8 <readThrFunction+0x378>)
 8004a88:	f001 fa28 	bl	8005edc <strstr>
 8004a8c:	b1b8      	cbz	r0, 8004abe <readThrFunction+0x35e>
  int intValue = atoi(value);
 8004a8e:	4650      	mov	r0, sl
 8004a90:	f000 ff50 	bl	8005934 <atoi>
  unsigned char pinValue = intValue == 0 ? PAL_LOW : PAL_HIGH;
 8004a94:	1c01      	adds	r1, r0, #0
 8004a96:	bf18      	it	ne
 8004a98:	2101      	movne	r1, #1
  if (intValue == 250)
 8004a9a:	28fa      	cmp	r0, #250	; 0xfa
 8004a9c:	d103      	bne.n	8004aa6 <readThrFunction+0x346>
    palSetLine(LINE_LED6);
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <readThrFunction+0x37c>)
 8004aa0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004aa4:	831a      	strh	r2, [r3, #24]
        case 9: // ASSI green
          pwmEnableChannel(&PWMD4, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD4, pinValue)); break;
 8004aa6:	480e      	ldr	r0, [pc, #56]	; (8004ae0 <readThrFunction+0x380>)
 8004aa8:	6883      	ldr	r3, [r0, #8]
 8004aaa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004aae:	fb03 f301 	mul.w	r3, r3, r1
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ab8:	f7ff f8d2 	bl	8003c60 <pwmEnableChannel>
 8004abc:	e67d      	b.n	80047ba <readThrFunction+0x5a>
  int intValue = atoi(value);
 8004abe:	4650      	mov	r0, sl
 8004ac0:	f000 ff38 	bl	8005934 <atoi>
  unsigned char pinValue = intValue == 0 ? PAL_LOW : PAL_HIGH;
 8004ac4:	1b43      	subs	r3, r0, r5
 8004ac6:	bf18      	it	ne
 8004ac8:	2301      	movne	r3, #1
  if (intValue == 250)
 8004aca:	28fa      	cmp	r0, #250	; 0xfa
  unsigned int pinID = 0;
 8004acc:	bf18      	it	ne
 8004ace:	2500      	movne	r5, #0
  if (intValue == 250)
 8004ad0:	f47f af06 	bne.w	80048e0 <readThrFunction+0x180>
 8004ad4:	e700      	b.n	80048d8 <readThrFunction+0x178>
 8004ad6:	bf00      	nop
 8004ad8:	0800a164 	.word	0x0800a164
 8004adc:	40020c00 	.word	0x40020c00
 8004ae0:	20001238 	.word	0x20001238
	...

08004af0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	f000 8090 	beq.w	8004c1c <obqWriteTimeout+0x12c>
 8004afc:	4698      	mov	r8, r3
 8004afe:	4604      	mov	r4, r0
 8004b00:	468b      	mov	fp, r1
 8004b02:	4617      	mov	r7, r2
 8004b04:	2320      	movs	r3, #32
 8004b06:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004b0a:	f7fe fc11 	bl	8003330 <_dbg_check_lock>
  return (systime_t)STM32_ST_TIM->CNT;
 8004b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (obqp->ptr == NULL) {
 8004b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b16:	4e43      	ldr	r6, [pc, #268]	; (8004c24 <obqWriteTimeout+0x134>)
  return systime + (systime_t)interval;
 8004b18:	4442      	add	r2, r8
  size_t w = 0;
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8004b20:	f108 33ff 	add.w	r3, r8, #4294967295
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	46a9      	mov	r9, r5
    if (obqp->ptr == NULL) {
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d04f      	beq.n	8004bcc <obqWriteTimeout+0xdc>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8004b2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - w)) {
 8004b2e:	eba7 0a05 	sub.w	sl, r7, r5
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8004b32:	1a1b      	subs	r3, r3, r0
 8004b34:	459a      	cmp	sl, r3
 8004b36:	bf28      	it	cs
 8004b38:	469a      	movcs	sl, r3
    if (size > 64U) {
 8004b3a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8004b3e:	d923      	bls.n	8004b88 <obqWriteTimeout+0x98>
      memcpy(obqp->ptr, bp, 64U);
 8004b40:	f10b 0340 	add.w	r3, fp, #64	; 0x40
 8004b44:	f8db c000 	ldr.w	ip, [fp]
 8004b48:	f8db 1004 	ldr.w	r1, [fp, #4]
 8004b4c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8004b50:	f8db e00c 	ldr.w	lr, [fp, #12]
 8004b54:	f8c0 e00c 	str.w	lr, [r0, #12]
 8004b58:	f10b 0b10 	add.w	fp, fp, #16
 8004b5c:	459b      	cmp	fp, r3
 8004b5e:	f8c0 c000 	str.w	ip, [r0]
 8004b62:	6041      	str	r1, [r0, #4]
 8004b64:	6082      	str	r2, [r0, #8]
 8004b66:	f100 0010 	add.w	r0, r0, #16
 8004b6a:	d1eb      	bne.n	8004b44 <obqWriteTimeout+0x54>
      obqp->ptr += 64U;
 8004b6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8004b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += 64U;
 8004b70:	3340      	adds	r3, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 8004b72:	429a      	cmp	r2, r3
      w         += 64U;
 8004b74:	f105 0540 	add.w	r5, r5, #64	; 0x40
      obqp->ptr += 64U;
 8004b78:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8004b7a:	d811      	bhi.n	8004ba0 <obqWriteTimeout+0xb0>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8004b7c:	69e1      	ldr	r1, [r4, #28]
 8004b7e:	4620      	mov	r0, r4
 8004b80:	3904      	subs	r1, #4
 8004b82:	f7fd fd1d 	bl	80025c0 <obqPostFullBufferS>
 8004b86:	e00b      	b.n	8004ba0 <obqWriteTimeout+0xb0>
      memcpy(obqp->ptr, bp, size);
 8004b88:	4652      	mov	r2, sl
 8004b8a:	4659      	mov	r1, fp
 8004b8c:	f7fb fbb2 	bl	80002f4 <memcpy>
      obqp->ptr += size;
 8004b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8004b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      obqp->ptr += size;
 8004b94:	4453      	add	r3, sl
    if (obqp->ptr >= obqp->top) {
 8004b96:	429a      	cmp	r2, r3
      w         += size;
 8004b98:	4455      	add	r5, sl
      bp        += size;
 8004b9a:	44d3      	add	fp, sl
      obqp->ptr += size;
 8004b9c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8004b9e:	d9ed      	bls.n	8004b7c <obqWriteTimeout+0x8c>
  _dbg_check_unlock();
 8004ba0:	f7fe fb86 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004ba4:	6833      	ldr	r3, [r6, #0]
 8004ba6:	42b3      	cmp	r3, r6
 8004ba8:	d004      	beq.n	8004bb4 <obqWriteTimeout+0xc4>
 8004baa:	69b2      	ldr	r2, [r6, #24]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d32b      	bcc.n	8004c0c <obqWriteTimeout+0x11c>
 8004bb4:	f389 8811 	msr	BASEPRI, r9
    if (w >= n) {
 8004bb8:	42bd      	cmp	r5, r7
 8004bba:	d223      	bcs.n	8004c04 <obqWriteTimeout+0x114>
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004bc2:	f7fe fbb5 	bl	8003330 <_dbg_check_lock>
    if (obqp->ptr == NULL) {
 8004bc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d1af      	bne.n	8004b2c <obqWriteTimeout+0x3c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8004bcc:	9b01      	ldr	r3, [sp, #4]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	d81f      	bhi.n	8004c12 <obqWriteTimeout+0x122>
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8004bd6:	9b02      	ldr	r3, [sp, #8]
 8004bd8:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8004bda:	4588      	cmp	r8, r1
 8004bdc:	d305      	bcc.n	8004bea <obqWriteTimeout+0xfa>
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7fd ff96 	bl	8002b10 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8004be4:	b908      	cbnz	r0, 8004bea <obqWriteTimeout+0xfa>
 8004be6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004be8:	e7a0      	b.n	8004b2c <obqWriteTimeout+0x3c>
  _dbg_check_unlock();
 8004bea:	f7fe fb61 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004bee:	6833      	ldr	r3, [r6, #0]
 8004bf0:	42b3      	cmp	r3, r6
 8004bf2:	d004      	beq.n	8004bfe <obqWriteTimeout+0x10e>
 8004bf4:	69b2      	ldr	r2, [r6, #24]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d306      	bcc.n	8004c0c <obqWriteTimeout+0x11c>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f383 8811 	msr	BASEPRI, r3
}
 8004c04:	4628      	mov	r0, r5
 8004c06:	b005      	add	sp, #20
 8004c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0c:	4806      	ldr	r0, [pc, #24]	; (8004c28 <obqWriteTimeout+0x138>)
 8004c0e:	f7fc fbef 	bl	80013f0 <chSysHalt>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8004c12:	4641      	mov	r1, r8
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7fd ff7b 	bl	8002b10 <obqGetEmptyBufferTimeoutS>
 8004c1a:	e7e3      	b.n	8004be4 <obqWriteTimeout+0xf4>
  osalDbgCheck(n > 0U);
 8004c1c:	4803      	ldr	r0, [pc, #12]	; (8004c2c <obqWriteTimeout+0x13c>)
 8004c1e:	f7fc fbe7 	bl	80013f0 <chSysHalt>
 8004c22:	bf00      	nop
 8004c24:	200018e0 	.word	0x200018e0
 8004c28:	080099e8 	.word	0x080099e8
 8004c2c:	08009dfc 	.word	0x08009dfc

08004c30 <_writet>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8004c30:	3044      	adds	r0, #68	; 0x44
 8004c32:	f7ff bf5d 	b.w	8004af0 <obqWriteTimeout>
 8004c36:	bf00      	nop
	...

08004c40 <_write>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8004c40:	3044      	adds	r0, #68	; 0x44
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	f7ff bf53 	b.w	8004af0 <obqWriteTimeout>
 8004c4a:	bf00      	nop
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	2320      	movs	r3, #32
 8004c54:	b082      	sub	sp, #8
 8004c56:	4604      	mov	r4, r0
 8004c58:	460d      	mov	r5, r1
 8004c5a:	4616      	mov	r6, r2
 8004c5c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004c60:	f7fe fb66 	bl	8003330 <_dbg_check_lock>
  if (obqp->ptr == NULL) {
 8004c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c66:	b1fb      	cbz	r3, 8004ca8 <obqPutTimeout+0x58>
  *obqp->ptr = b;
 8004c68:	701d      	strb	r5, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 8004c6a:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8004c6e:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8004c70:	4293      	cmp	r3, r2
  obqp->ptr++;
 8004c72:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8004c74:	d212      	bcs.n	8004c9c <obqPutTimeout+0x4c>
  _dbg_check_unlock();
 8004c76:	f7fe fb1b 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <obqPutTimeout+0x88>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d004      	beq.n	8004c8c <obqPutTimeout+0x3c>
 8004c82:	6999      	ldr	r1, [r3, #24]
 8004c84:	6893      	ldr	r3, [r2, #8]
 8004c86:	688a      	ldr	r2, [r1, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d304      	bcc.n	8004c96 <obqPutTimeout+0x46>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f380 8811 	msr	BASEPRI, r0
}
 8004c92:	b002      	add	sp, #8
 8004c94:	bd70      	pop	{r4, r5, r6, pc}
 8004c96:	4811      	ldr	r0, [pc, #68]	; (8004cdc <obqPutTimeout+0x8c>)
 8004c98:	f7fc fbaa 	bl	80013f0 <chSysHalt>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8004c9c:	69e1      	ldr	r1, [r4, #28]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	3904      	subs	r1, #4
 8004ca2:	f7fd fc8d 	bl	80025c0 <obqPostFullBufferS>
 8004ca6:	e7e6      	b.n	8004c76 <obqPutTimeout+0x26>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7fd ff30 	bl	8002b10 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8004cb0:	b908      	cbnz	r0, 8004cb6 <obqPutTimeout+0x66>
 8004cb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cb4:	e7d8      	b.n	8004c68 <obqPutTimeout+0x18>
 8004cb6:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 8004cb8:	f7fe fafa 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <obqPutTimeout+0x88>)
 8004cbe:	9801      	ldr	r0, [sp, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d004      	beq.n	8004cd0 <obqPutTimeout+0x80>
 8004cc6:	6999      	ldr	r1, [r3, #24]
 8004cc8:	6893      	ldr	r3, [r2, #8]
 8004cca:	688a      	ldr	r2, [r1, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d3e2      	bcc.n	8004c96 <obqPutTimeout+0x46>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	e7dc      	b.n	8004c92 <obqPutTimeout+0x42>
 8004cd8:	200018e0 	.word	0x200018e0
 8004cdc:	080099e8 	.word	0x080099e8

08004ce0 <_putt>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8004ce0:	3044      	adds	r0, #68	; 0x44
 8004ce2:	f7ff bfb5 	b.w	8004c50 <obqPutTimeout>
 8004ce6:	bf00      	nop
	...

08004cf0 <_put>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8004cf0:	3044      	adds	r0, #68	; 0x44
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	f7ff bfab 	b.w	8004c50 <obqPutTimeout>
 8004cfa:	bf00      	nop
 8004cfc:	0000      	movs	r0, r0
	...

08004d00 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	f000 8090 	beq.w	8004e2c <ibqReadTimeout+0x12c>
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460f      	mov	r7, r1
 8004d12:	4690      	mov	r8, r2
 8004d14:	2320      	movs	r3, #32
 8004d16:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004d1a:	f7fe fb09 	bl	8003330 <_dbg_check_lock>
 8004d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    if (ibqp->ptr == NULL) {
 8004d22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d26:	4e43      	ldr	r6, [pc, #268]	; (8004e34 <ibqReadTimeout+0x134>)
  return systime + (systime_t)interval;
 8004d28:	444a      	add	r2, r9
  size_t r = 0;
 8004d2a:	2500      	movs	r5, #0
 8004d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8004d30:	f109 33ff 	add.w	r3, r9, #4294967295
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	46aa      	mov	sl, r5
    if (ibqp->ptr == NULL) {
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	d04f      	beq.n	8004ddc <ibqReadTimeout+0xdc>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8004d3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 8004d3e:	eba8 0b05 	sub.w	fp, r8, r5
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8004d42:	1a5b      	subs	r3, r3, r1
 8004d44:	459b      	cmp	fp, r3
 8004d46:	bf28      	it	cs
 8004d48:	469b      	movcs	fp, r3
    if (size > 64U) {
 8004d4a:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8004d4e:	d923      	bls.n	8004d98 <ibqReadTimeout+0x98>
      memcpy(bp, ibqp->ptr, 64U);
 8004d50:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8004d54:	463b      	mov	r3, r7
 8004d56:	f8d1 e000 	ldr.w	lr, [r1]
 8004d5a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004d5e:	6888      	ldr	r0, [r1, #8]
 8004d60:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004d64:	f8c3 b00c 	str.w	fp, [r3, #12]
 8004d68:	3110      	adds	r1, #16
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	f8c3 e000 	str.w	lr, [r3]
 8004d70:	f8c3 c004 	str.w	ip, [r3, #4]
 8004d74:	6098      	str	r0, [r3, #8]
 8004d76:	f103 0310 	add.w	r3, r3, #16
 8004d7a:	d1ec      	bne.n	8004d56 <ibqReadTimeout+0x56>
      ibqp->ptr += 64U;
 8004d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8004d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      ibqp->ptr += 64U;
 8004d80:	3340      	adds	r3, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8004d82:	429a      	cmp	r2, r3
      bp        += 64U;
 8004d84:	f107 0740 	add.w	r7, r7, #64	; 0x40
      r         += 64U;
 8004d88:	f105 0540 	add.w	r5, r5, #64	; 0x40
      ibqp->ptr += 64U;
 8004d8c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8004d8e:	d80f      	bhi.n	8004db0 <ibqReadTimeout+0xb0>
      ibqReleaseEmptyBufferS(ibqp);
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7fd fd45 	bl	8002820 <ibqReleaseEmptyBufferS>
 8004d96:	e00b      	b.n	8004db0 <ibqReadTimeout+0xb0>
      memcpy(bp, ibqp->ptr, size);
 8004d98:	465a      	mov	r2, fp
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	f7fb faaa 	bl	80002f4 <memcpy>
      ibqp->ptr += size;
 8004da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8004da2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      ibqp->ptr += size;
 8004da4:	445b      	add	r3, fp
    if (ibqp->ptr >= ibqp->top) {
 8004da6:	429a      	cmp	r2, r3
      r         += size;
 8004da8:	445d      	add	r5, fp
      bp        += size;
 8004daa:	445f      	add	r7, fp
      ibqp->ptr += size;
 8004dac:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8004dae:	d9ef      	bls.n	8004d90 <ibqReadTimeout+0x90>
  _dbg_check_unlock();
 8004db0:	f7fe fa7e 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	42b3      	cmp	r3, r6
 8004db8:	d004      	beq.n	8004dc4 <ibqReadTimeout+0xc4>
 8004dba:	69b2      	ldr	r2, [r6, #24]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d32b      	bcc.n	8004e1c <ibqReadTimeout+0x11c>
 8004dc4:	f38a 8811 	msr	BASEPRI, sl
    if (r >= n) {
 8004dc8:	4545      	cmp	r5, r8
 8004dca:	d223      	bcs.n	8004e14 <ibqReadTimeout+0x114>
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004dd2:	f7fe faad 	bl	8003330 <_dbg_check_lock>
    if (ibqp->ptr == NULL) {
 8004dd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d1af      	bne.n	8004d3c <ibqReadTimeout+0x3c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8004ddc:	9b01      	ldr	r3, [sp, #4]
 8004dde:	3303      	adds	r3, #3
 8004de0:	d81f      	bhi.n	8004e22 <ibqReadTimeout+0x122>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8004dea:	4589      	cmp	r9, r1
 8004dec:	d305      	bcc.n	8004dfa <ibqReadTimeout+0xfa>
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7fd fe5e 	bl	8002ab0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8004df4:	b908      	cbnz	r0, 8004dfa <ibqReadTimeout+0xfa>
 8004df6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004df8:	e7a0      	b.n	8004d3c <ibqReadTimeout+0x3c>
  _dbg_check_unlock();
 8004dfa:	f7fe fa59 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	42b3      	cmp	r3, r6
 8004e02:	d004      	beq.n	8004e0e <ibqReadTimeout+0x10e>
 8004e04:	69b2      	ldr	r2, [r6, #24]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d306      	bcc.n	8004e1c <ibqReadTimeout+0x11c>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f383 8811 	msr	BASEPRI, r3
}
 8004e14:	4628      	mov	r0, r5
 8004e16:	b005      	add	sp, #20
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1c:	4806      	ldr	r0, [pc, #24]	; (8004e38 <ibqReadTimeout+0x138>)
 8004e1e:	f7fc fae7 	bl	80013f0 <chSysHalt>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8004e22:	4649      	mov	r1, r9
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7fd fe43 	bl	8002ab0 <ibqGetFullBufferTimeoutS>
 8004e2a:	e7e3      	b.n	8004df4 <ibqReadTimeout+0xf4>
  osalDbgCheck(n > 0U);
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <ibqReadTimeout+0x13c>)
 8004e2e:	f7fc fadf 	bl	80013f0 <chSysHalt>
 8004e32:	bf00      	nop
 8004e34:	200018e0 	.word	0x200018e0
 8004e38:	080099e8 	.word	0x080099e8
 8004e3c:	08009d28 	.word	0x08009d28

08004e40 <_readt>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8004e40:	300c      	adds	r0, #12
 8004e42:	f7ff bf5d 	b.w	8004d00 <ibqReadTimeout>
 8004e46:	bf00      	nop
	...

08004e50 <_read>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8004e50:	300c      	adds	r0, #12
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	f7ff bf53 	b.w	8004d00 <ibqReadTimeout>
 8004e5a:	bf00      	nop
 8004e5c:	0000      	movs	r0, r0
	...

08004e60 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8004e60:	b530      	push	{r4, r5, lr}
 8004e62:	2320      	movs	r3, #32
 8004e64:	b083      	sub	sp, #12
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004e6e:	f7fe fa5f 	bl	8003330 <_dbg_check_lock>
  if (ibqp->ptr == NULL) {
 8004e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e74:	b353      	cbz	r3, 8004ecc <ibqGetTimeout+0x6c>
  msg = (msg_t)*ibqp->ptr;
 8004e76:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 8004e7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8004e7c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d220      	bcs.n	8004ec4 <ibqGetTimeout+0x64>
  _dbg_check_unlock();
 8004e82:	f7fe fa15 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <ibqGetTimeout+0x7c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d004      	beq.n	8004e98 <ibqGetTimeout+0x38>
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	6893      	ldr	r3, [r2, #8]
 8004e92:	688a      	ldr	r2, [r1, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d312      	bcc.n	8004ebe <ibqGetTimeout+0x5e>
  msg = (msg_t)*ibqp->ptr;
 8004e98:	4628      	mov	r0, r5
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f383 8811 	msr	BASEPRI, r3
}
 8004ea0:	b003      	add	sp, #12
 8004ea2:	bd30      	pop	{r4, r5, pc}
 8004ea4:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 8004ea6:	f7fe fa03 	bl	80032b0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <ibqGetTimeout+0x7c>)
 8004eac:	9801      	ldr	r0, [sp, #4]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d0f2      	beq.n	8004e9a <ibqGetTimeout+0x3a>
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	6893      	ldr	r3, [r2, #8]
 8004eb8:	688a      	ldr	r2, [r1, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d2ed      	bcs.n	8004e9a <ibqGetTimeout+0x3a>
 8004ebe:	4808      	ldr	r0, [pc, #32]	; (8004ee0 <ibqGetTimeout+0x80>)
 8004ec0:	f7fc fa96 	bl	80013f0 <chSysHalt>
    ibqReleaseEmptyBufferS(ibqp);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7fd fcab 	bl	8002820 <ibqReleaseEmptyBufferS>
 8004eca:	e7da      	b.n	8004e82 <ibqGetTimeout+0x22>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7fd fdee 	bl	8002ab0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <ibqGetTimeout+0x44>
 8004ed8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eda:	e7cc      	b.n	8004e76 <ibqGetTimeout+0x16>
 8004edc:	200018e0 	.word	0x200018e0
 8004ee0:	080099e8 	.word	0x080099e8
	...

08004ef0 <_gett>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8004ef0:	300c      	adds	r0, #12
 8004ef2:	f7ff bfb5 	b.w	8004e60 <ibqGetTimeout>
 8004ef6:	bf00      	nop
	...

08004f00 <_get>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8004f00:	300c      	adds	r0, #12
 8004f02:	f04f 31ff 	mov.w	r1, #4294967295
 8004f06:	f7ff bfab 	b.w	8004e60 <ibqGetTimeout>
 8004f0a:	bf00      	nop
 8004f0c:	0000      	movs	r0, r0
	...

08004f10 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004f10:	4a86      	ldr	r2, [pc, #536]	; (800512c <__early_init+0x21c>)
  gpiop->OTYPER  = config->otyper;
 8004f12:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8005160 <__early_init+0x250>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004f16:	6911      	ldr	r1, [r2, #16]
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8004f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004f1c:	f240 19ff 	movw	r9, #511	; 0x1ff
 8004f20:	2300      	movs	r3, #0
 8004f22:	ea41 0109 	orr.w	r1, r1, r9
 8004f26:	6111      	str	r1, [r2, #16]
 8004f28:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004f2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 8004f2c:	f8df e234 	ldr.w	lr, [pc, #564]	; 8005164 <__early_init+0x254>
 8004f30:	4f7f      	ldr	r7, [pc, #508]	; (8005130 <__early_init+0x220>)
 8004f32:	4e80      	ldr	r6, [pc, #512]	; (8005134 <__early_init+0x224>)
 8004f34:	4d80      	ldr	r5, [pc, #512]	; (8005138 <__early_init+0x228>)
 8004f36:	4c81      	ldr	r4, [pc, #516]	; (800513c <__early_init+0x22c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004f38:	ea41 0109 	orr.w	r1, r1, r9
 8004f3c:	6311      	str	r1, [r2, #48]	; 0x30
 8004f3e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004f40:	ea41 0909 	orr.w	r9, r1, r9
 8004f44:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8004f48:	f46f 49a8 	mvn.w	r9, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8004f4c:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004f50:	f8ce 9008 	str.w	r9, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8004f54:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8005168 <__early_init+0x258>
 8004f58:	f8ce 900c 	str.w	r9, [lr, #12]
  gpiop->ODR     = config->odr;
 8004f5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8004f60:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800516c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8004f64:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8004f68:	f8ce 9020 	str.w	r9, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8004f6c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8005170 <__early_init+0x260>
 8004f70:	f8ce 9024 	str.w	r9, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004f74:	f109 592a 	add.w	r9, r9, #713031680	; 0x2a800000
 8004f78:	f509 19b0 	add.w	r9, r9, #1441792	; 0x160000
 8004f7c:	f8ce 9000 	str.w	r9, [lr]
  gpiop->OTYPER  = config->otyper;
 8004f80:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8004f84:	f8c7 e004 	str.w	lr, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8004f8c:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8005174 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8004f90:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8004f92:	f8c7 e00c 	str.w	lr, [r7, #12]
  gpiop->AFRL    = config->afrl;
 8004f96:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 8004f9a:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8004f9c:	f8c7 e020 	str.w	lr, [r7, #32]
  gpiop->MODER   = config->moder;
 8004fa0:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8005178 <__early_init+0x268>
  gpiop->AFRH    = config->afrh;
 8004fa4:	f04f 0840 	mov.w	r8, #64	; 0x40
 8004fa8:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004fac:	f8c7 e000 	str.w	lr, [r7]
  gpiop->PUPDR   = config->pupdr;
 8004fb0:	f10e 4eaa 	add.w	lr, lr, #1426063360	; 0x55000000
 8004fb4:	f5ae 0e43 	sub.w	lr, lr, #12779520	; 0xc30000
 8004fb8:	f6ae 3e2c 	subw	lr, lr, #2860	; 0xb2c
  gpiop->OTYPER  = config->otyper;
 8004fbc:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004fbe:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8004fc0:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->AFRL    = config->afrl;
 8004fc4:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8004fc8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8004fca:	f8c6 e020 	str.w	lr, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8004fce:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 800517c <__early_init+0x26c>
 8004fd2:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004fd6:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8005180 <__early_init+0x270>
 8004fda:	f8c6 e000 	str.w	lr, [r6]
  gpiop->PUPDR   = config->pupdr;
 8004fde:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8005184 <__early_init+0x274>
  gpiop->OTYPER  = config->otyper;
 8004fe2:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004fe4:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8004fe6:	f8c5 e00c 	str.w	lr, [r5, #12]
  gpiop->ODR     = config->odr;
 8004fea:	f640 7eff 	movw	lr, #4095	; 0xfff
 8004fee:	f8c5 e014 	str.w	lr, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 8004ff2:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 8004ff6:	f8df e190 	ldr.w	lr, [pc, #400]	; 8005188 <__early_init+0x278>
  gpiop->AFRL    = config->afrl;
 8004ffa:	622b      	str	r3, [r5, #32]
  gpiop->OTYPER  = config->otyper;
 8004ffc:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
  gpiop->AFRH    = config->afrh;
 8005000:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005002:	f8c5 e000 	str.w	lr, [r5]
  gpiop->OTYPER  = config->otyper;
 8005006:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800500a:	f8df e138 	ldr.w	lr, [pc, #312]	; 8005144 <__early_init+0x234>
 800500e:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005012:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8005016:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 800501a:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800501e:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8005022:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005026:	f8cc 8000 	str.w	r8, [ip]
  gpiop->OTYPER  = config->otyper;
 800502a:	607b      	str	r3, [r7, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800502c:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8005030:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8005032:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8005034:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8005036:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800503a:	603b      	str	r3, [r7, #0]
  PWR->CR = STM32_VOS;
 800503c:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8005040:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005042:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8005044:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8005046:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8005048:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800504a:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800504c:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 800504e:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005050:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8005052:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8005054:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8005056:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8005058:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800505a:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 800505c:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800505e:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8005060:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8005062:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8005064:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8005066:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005068:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800506a:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800506e:	f8ce 7000 	str.w	r7, [lr]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	079d      	lsls	r5, r3, #30
 800507e:	d5fc      	bpl.n	800507a <__early_init+0x16a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005080:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005082:	492a      	ldr	r1, [pc, #168]	; (800512c <__early_init+0x21c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800508a:	688b      	ldr	r3, [r1, #8]
 800508c:	f013 030c 	ands.w	r3, r3, #12
 8005090:	d1fb      	bne.n	800508a <__early_init+0x17a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005092:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8005094:	4825      	ldr	r0, [pc, #148]	; (800512c <__early_init+0x21c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005096:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800509a:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800509c:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 800509e:	680b      	ldr	r3, [r1, #0]
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	039c      	lsls	r4, r3, #14
 80050aa:	d5fc      	bpl.n	80050a6 <__early_init+0x196>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80050ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80050ae:	4a1f      	ldr	r2, [pc, #124]	; (800512c <__early_init+0x21c>)
  RCC->CSR |= RCC_CSR_LSION;
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80050b6:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80050b8:	0799      	lsls	r1, r3, #30
 80050ba:	d5fc      	bpl.n	80050b6 <__early_init+0x1a6>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <__early_init+0x230>)
 80050be:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80050c0:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80050c2:	4920      	ldr	r1, [pc, #128]	; (8005144 <__early_init+0x234>)
  RCC->CR |= RCC_CR_PLLON;
 80050c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c8:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80050ca:	684b      	ldr	r3, [r1, #4]
 80050cc:	045a      	lsls	r2, r3, #17
 80050ce:	d5fc      	bpl.n	80050ca <__early_init+0x1ba>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80050d0:	4a16      	ldr	r2, [pc, #88]	; (800512c <__early_init+0x21c>)
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	d5fc      	bpl.n	80050d2 <__early_init+0x1c2>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <__early_init+0x238>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80050da:	491c      	ldr	r1, [pc, #112]	; (800514c <__early_init+0x23c>)
 80050dc:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <__early_init+0x240>)
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d017      	beq.n	8005116 <__early_init+0x206>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <__early_init+0x244>)
 80050e8:	f240 7205 	movw	r2, #1797	; 0x705
 80050ec:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80050ee:	4a0f      	ldr	r2, [pc, #60]	; (800512c <__early_init+0x21c>)
 80050f0:	6893      	ldr	r3, [r2, #8]
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80050f8:	6893      	ldr	r3, [r2, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d1fa      	bne.n	80050f8 <__early_init+0x1e8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8005102:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005108:	6453      	str	r3, [r2, #68]	; 0x44
 800510a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800510c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005110:	6653      	str	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8005112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <__early_init+0x248>)
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <__early_init+0x24c>)
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d1e2      	bne.n	80050e6 <__early_init+0x1d6>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <__early_init+0x244>)
 8005122:	f240 1205 	movw	r2, #261	; 0x105
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e7e1      	b.n	80050ee <__early_init+0x1de>
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	40020400 	.word	0x40020400
 8005134:	40020800 	.word	0x40020800
 8005138:	40020c00 	.word	0x40020c00
 800513c:	40022000 	.word	0x40022000
 8005140:	07405408 	.word	0x07405408
 8005144:	40007000 	.word	0x40007000
 8005148:	e0042000 	.word	0xe0042000
 800514c:	38889400 	.word	0x38889400
 8005150:	20006411 	.word	0x20006411
 8005154:	40023c00 	.word	0x40023c00
 8005158:	e000ed00 	.word	0xe000ed00
 800515c:	410fc241 	.word	0x410fc241
 8005160:	40021000 	.word	0x40021000
 8005164:	40020000 	.word	0x40020000
 8005168:	40010054 	.word	0x40010054
 800516c:	55560000 	.word	0x55560000
 8005170:	000aaa00 	.word	0x000aaa00
 8005174:	55514515 	.word	0x55514515
 8005178:	00082080 	.word	0x00082080
 800517c:	00060600 	.word	0x00060600
 8005180:	02208001 	.word	0x02208001
 8005184:	00555055 	.word	0x00555055
 8005188:	55000100 	.word	0x55000100
 800518c:	00000000 	.word	0x00000000

08005190 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8005190:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005192:	4c09      	ldr	r4, [pc, #36]	; (80051b8 <VectorB8+0x28>)
 8005194:	4620      	mov	r0, r4
 8005196:	f7fc f903 	bl	80013a0 <_trace_isr_enter>
 800519a:	f7fc fa59 	bl	8001650 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD4);
 800519e:	4807      	ldr	r0, [pc, #28]	; (80051bc <VectorB8+0x2c>)
 80051a0:	f7fc fade 	bl	8001760 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80051a4:	f7fc fa3c 	bl	8001620 <_dbg_check_leave_isr>
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fc f8e1 	bl	8001370 <_trace_isr_leave>
}
 80051ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80051b2:	f7fc b84d 	b.w	8001250 <_port_irq_epilogue>
 80051b6:	bf00      	nop
 80051b8:	08009b4c 	.word	0x08009b4c
 80051bc:	20001238 	.word	0x20001238

080051c0 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 80051c0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80051c2:	4c09      	ldr	r4, [pc, #36]	; (80051e8 <VectorB4+0x28>)
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7fc f8eb 	bl	80013a0 <_trace_isr_enter>
 80051ca:	f7fc fa41 	bl	8001650 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD3);
 80051ce:	4807      	ldr	r0, [pc, #28]	; (80051ec <VectorB4+0x2c>)
 80051d0:	f7fc fac6 	bl	8001760 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80051d4:	f7fc fa24 	bl	8001620 <_dbg_check_leave_isr>
 80051d8:	4620      	mov	r0, r4
 80051da:	f7fc f8c9 	bl	8001370 <_trace_isr_leave>
}
 80051de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80051e2:	f7fc b835 	b.w	8001250 <_port_irq_epilogue>
 80051e6:	bf00      	nop
 80051e8:	08009b30 	.word	0x08009b30
 80051ec:	2000121c 	.word	0x2000121c

080051f0 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80051f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80051f4:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  OSAL_IRQ_PROLOGUE();
 80051f8:	4834      	ldr	r0, [pc, #208]	; (80052cc <VectorB0+0xdc>)
 80051fa:	f7fc f8d1 	bl	80013a0 <_trace_isr_enter>
 80051fe:	f7fc fa27 	bl	8001650 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8005202:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005206:	079b      	lsls	r3, r3, #30
 8005208:	d408      	bmi.n	800521c <VectorB0+0x2c>
  OSAL_IRQ_EPILOGUE();
 800520a:	f7fc fa09 	bl	8001620 <_dbg_check_leave_isr>
 800520e:	482f      	ldr	r0, [pc, #188]	; (80052cc <VectorB0+0xdc>)
 8005210:	f7fc f8ae 	bl	8001370 <_trace_isr_leave>
}
 8005214:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005218:	f7fc b81a 	b.w	8001250 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 800521c:	2600      	movs	r6, #0
 800521e:	f8c8 6010 	str.w	r6, [r8, #16]
 8005222:	2320      	movs	r3, #32
 8005224:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8005228:	4d29      	ldr	r5, [pc, #164]	; (80052d0 <VectorB0+0xe0>)
 800522a:	46aa      	mov	sl, r5
  _dbg_check_lock_from_isr();
 800522c:	f7fc fa40 	bl	80016b0 <_dbg_check_lock_from_isr>
  chDbgCheckClassI();
 8005230:	f7fc f906 	bl	8001440 <chDbgCheckClassI>
  chDbgCheckClassI();
 8005234:	f7fc f904 	bl	8001440 <chDbgCheckClassI>
  vtp = ch.vtlist.next;
 8005238:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 800523c:	68a3      	ldr	r3, [r4, #8]
 800523e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8005242:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005244:	eba1 0902 	sub.w	r9, r1, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8005248:	4599      	cmp	r9, r3
 800524a:	d31f      	bcc.n	800528c <VectorB0+0x9c>
 800524c:	2720      	movs	r7, #32

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800524e:	6821      	ldr	r1, [r4, #0]
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
 8005250:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      ch.vtlist.lasttime += vtp->delta;
 8005254:	441a      	add	r2, r3
      vtp->func = NULL;

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005256:	4551      	cmp	r1, sl
      ch.vtlist.lasttime += vtp->delta;
 8005258:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800525a:	f8c1 a004 	str.w	sl, [r1, #4]
      ch.vtlist.next = vtp->next;
 800525e:	61e9      	str	r1, [r5, #28]
      vtp->func = NULL;
 8005260:	60e6      	str	r6, [r4, #12]
  STM32_ST_TIM->DIER = 0;
 8005262:	bf08      	it	eq
 8005264:	f8c8 600c 	streq.w	r6, [r8, #12]
      nowdelta -= vtp->delta;
 8005268:	eba9 0903 	sub.w	r9, r9, r3
  _dbg_check_unlock_from_isr();
 800526c:	f7fc fa08 	bl	8001680 <_dbg_check_unlock_from_isr>
 8005270:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8005274:	6920      	ldr	r0, [r4, #16]
 8005276:	47d8      	blx	fp
 8005278:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock_from_isr();
 800527c:	f7fc fa18 	bl	80016b0 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8005280:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	4599      	cmp	r9, r3
 8005286:	d3da      	bcc.n	800523e <VectorB0+0x4e>
 8005288:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800528a:	e7e0      	b.n	800524e <VectorB0+0x5e>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800528c:	69eb      	ldr	r3, [r5, #28]
 800528e:	4553      	cmp	r3, sl
 8005290:	d013      	beq.n	80052ba <VectorB0+0xca>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8005292:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8005294:	62a9      	str	r1, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8005296:	eba2 0209 	sub.w	r2, r2, r9
 800529a:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 800529c:	68a4      	ldr	r4, [r4, #8]
 800529e:	2c02      	cmp	r4, #2
 80052a0:	bf2c      	ite	cs
 80052a2:	190c      	addcs	r4, r1, r4
 80052a4:	1c8c      	addcc	r4, r1, #2
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7fd fada 	bl	8002860 <stSetAlarm>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 80052ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (systime_t)STM32_ST_TIM->CNT;
 80052ae:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80052b2:	1aa1      	subs	r1, r4, r2
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d805      	bhi.n	80052c6 <VectorB0+0xd6>
  _dbg_check_unlock_from_isr();
 80052ba:	f7fc f9e1 	bl	8001680 <_dbg_check_unlock_from_isr>
 80052be:	2300      	movs	r3, #0
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	e7a1      	b.n	800520a <VectorB0+0x1a>
 80052c6:	4803      	ldr	r0, [pc, #12]	; (80052d4 <VectorB0+0xe4>)
 80052c8:	f7fc f892 	bl	80013f0 <chSysHalt>
 80052cc:	08009b24 	.word	0x08009b24
 80052d0:	200018e0 	.word	0x200018e0
 80052d4:	080099c8 	.word	0x080099c8
	...

080052e0 <Vector174>:
OSAL_IRQ_HANDLER(STM32_OTG2_HANDLER) {
 80052e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80052e2:	4c09      	ldr	r4, [pc, #36]	; (8005308 <Vector174+0x28>)
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fc f85b 	bl	80013a0 <_trace_isr_enter>
 80052ea:	f7fc f9b1 	bl	8001650 <_dbg_check_enter_isr>
  usb_lld_serve_interrupt(&USBD2);
 80052ee:	4807      	ldr	r0, [pc, #28]	; (800530c <Vector174+0x2c>)
 80052f0:	f7fc fca6 	bl	8001c40 <usb_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80052f4:	f7fc f994 	bl	8001620 <_dbg_check_leave_isr>
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7fc f839 	bl	8001370 <_trace_isr_leave>
}
 80052fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005302:	f7fb bfa5 	b.w	8001250 <_port_irq_epilogue>
 8005306:	bf00      	nop
 8005308:	08009e18 	.word	0x08009e18
 800530c:	2000175c 	.word	0x2000175c

08005310 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8005310:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005312:	4c09      	ldr	r4, [pc, #36]	; (8005338 <Vector14C+0x28>)
 8005314:	4620      	mov	r0, r4
 8005316:	f7fc f843 	bl	80013a0 <_trace_isr_enter>
 800531a:	f7fc f999 	bl	8001650 <_dbg_check_enter_isr>
  usb_lld_serve_interrupt(&USBD1);
 800531e:	4807      	ldr	r0, [pc, #28]	; (800533c <Vector14C+0x2c>)
 8005320:	f7fc fc8e 	bl	8001c40 <usb_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8005324:	f7fc f97c 	bl	8001620 <_dbg_check_leave_isr>
 8005328:	4620      	mov	r0, r4
 800532a:	f7fc f821 	bl	8001370 <_trace_isr_leave>
}
 800532e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005332:	f7fb bf8d 	b.w	8001250 <_port_irq_epilogue>
 8005336:	bf00      	nop
 8005338:	08009e0c 	.word	0x08009e0c
 800533c:	200016e4 	.word	0x200016e4

08005340 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8005340:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005342:	480d      	ldr	r0, [pc, #52]	; (8005378 <Vector158+0x38>)
 8005344:	f7fc f82c 	bl	80013a0 <_trace_isr_enter>
 8005348:	f7fc f982 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <Vector158+0x3c>)
  if (dma_isr_redir[15].dma_func)
 800534e:	480c      	ldr	r0, [pc, #48]	; (8005380 <Vector158+0x40>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005350:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8005352:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005354:	0d89      	lsrs	r1, r1, #22
 8005356:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 800535a:	058c      	lsls	r4, r1, #22
 800535c:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800535e:	b10a      	cbz	r2, 8005364 <Vector158+0x24>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8005360:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005362:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005364:	f7fc f95c 	bl	8001620 <_dbg_check_leave_isr>
 8005368:	4803      	ldr	r0, [pc, #12]	; (8005378 <Vector158+0x38>)
 800536a:	f7fc f801 	bl	8001370 <_trace_isr_leave>
}
 800536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005372:	f7fb bf6d 	b.w	8001250 <_port_irq_epilogue>
 8005376:	bf00      	nop
 8005378:	08009ca4 	.word	0x08009ca4
 800537c:	40026400 	.word	0x40026400
 8005380:	200022ac 	.word	0x200022ac
	...

08005390 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8005390:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005392:	480d      	ldr	r0, [pc, #52]	; (80053c8 <Vector154+0x38>)
 8005394:	f7fc f804 	bl	80013a0 <_trace_isr_enter>
 8005398:	f7fc f95a 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <Vector154+0x3c>)
  if (dma_isr_redir[14].dma_func)
 800539e:	480c      	ldr	r0, [pc, #48]	; (80053d0 <Vector154+0x40>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80053a0:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 80053a2:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80053a4:	0c09      	lsrs	r1, r1, #16
 80053a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80053aa:	040c      	lsls	r4, r1, #16
 80053ac:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80053ae:	b10a      	cbz	r2, 80053b4 <Vector154+0x24>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80053b0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80053b2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80053b4:	f7fc f934 	bl	8001620 <_dbg_check_leave_isr>
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <Vector154+0x38>)
 80053ba:	f7fb ffd9 	bl	8001370 <_trace_isr_leave>
}
 80053be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80053c2:	f7fb bf45 	b.w	8001250 <_port_irq_epilogue>
 80053c6:	bf00      	nop
 80053c8:	08009c98 	.word	0x08009c98
 80053cc:	40026400 	.word	0x40026400
 80053d0:	200022ac 	.word	0x200022ac
	...

080053e0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80053e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80053e2:	480d      	ldr	r0, [pc, #52]	; (8005418 <Vector150+0x38>)
 80053e4:	f7fb ffdc 	bl	80013a0 <_trace_isr_enter>
 80053e8:	f7fc f932 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <Vector150+0x3c>)
  if (dma_isr_redir[13].dma_func)
 80053ee:	480c      	ldr	r0, [pc, #48]	; (8005420 <Vector150+0x40>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80053f0:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 80053f2:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80053f4:	0989      	lsrs	r1, r1, #6
 80053f6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 80053fa:	018c      	lsls	r4, r1, #6
 80053fc:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80053fe:	b10a      	cbz	r2, 8005404 <Vector150+0x24>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8005400:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8005402:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005404:	f7fc f90c 	bl	8001620 <_dbg_check_leave_isr>
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <Vector150+0x38>)
 800540a:	f7fb ffb1 	bl	8001370 <_trace_isr_leave>
}
 800540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005412:	f7fb bf1d 	b.w	8001250 <_port_irq_epilogue>
 8005416:	bf00      	nop
 8005418:	08009c8c 	.word	0x08009c8c
 800541c:	40026400 	.word	0x40026400
 8005420:	200022ac 	.word	0x200022ac
	...

08005430 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8005430:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8005432:	480c      	ldr	r0, [pc, #48]	; (8005464 <Vector130+0x34>)
 8005434:	f7fb ffb4 	bl	80013a0 <_trace_isr_enter>
 8005438:	f7fc f90a 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <Vector130+0x38>)
  if (dma_isr_redir[12].dma_func)
 800543e:	480b      	ldr	r0, [pc, #44]	; (800546c <Vector130+0x3c>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005440:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8005442:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005444:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8005448:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800544a:	b10a      	cbz	r2, 8005450 <Vector130+0x20>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800544c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800544e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005450:	f7fc f8e6 	bl	8001620 <_dbg_check_leave_isr>
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <Vector130+0x34>)
 8005456:	f7fb ff8b 	bl	8001370 <_trace_isr_leave>
}
 800545a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800545e:	f7fb bef7 	b.w	8001250 <_port_irq_epilogue>
 8005462:	bf00      	nop
 8005464:	08009c74 	.word	0x08009c74
 8005468:	40026400 	.word	0x40026400
 800546c:	200022ac 	.word	0x200022ac

08005470 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8005470:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005472:	480d      	ldr	r0, [pc, #52]	; (80054a8 <Vector12C+0x38>)
 8005474:	f7fb ff94 	bl	80013a0 <_trace_isr_enter>
 8005478:	f7fc f8ea 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <Vector12C+0x3c>)
  if (dma_isr_redir[11].dma_func)
 800547e:	480c      	ldr	r0, [pc, #48]	; (80054b0 <Vector12C+0x40>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005480:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8005482:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8005484:	0d89      	lsrs	r1, r1, #22
 8005486:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 800548a:	058c      	lsls	r4, r1, #22
 800548c:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800548e:	b10a      	cbz	r2, 8005494 <Vector12C+0x24>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8005490:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005492:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005494:	f7fc f8c4 	bl	8001620 <_dbg_check_leave_isr>
 8005498:	4803      	ldr	r0, [pc, #12]	; (80054a8 <Vector12C+0x38>)
 800549a:	f7fb ff69 	bl	8001370 <_trace_isr_leave>
}
 800549e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80054a2:	f7fb bed5 	b.w	8001250 <_port_irq_epilogue>
 80054a6:	bf00      	nop
 80054a8:	08009c68 	.word	0x08009c68
 80054ac:	40026400 	.word	0x40026400
 80054b0:	200022ac 	.word	0x200022ac
	...

080054c0 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80054c0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80054c2:	480d      	ldr	r0, [pc, #52]	; (80054f8 <Vector128+0x38>)
 80054c4:	f7fb ff6c 	bl	80013a0 <_trace_isr_enter>
 80054c8:	f7fc f8c2 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <Vector128+0x3c>)
  if (dma_isr_redir[10].dma_func)
 80054ce:	480c      	ldr	r0, [pc, #48]	; (8005500 <Vector128+0x40>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80054d0:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 80054d2:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80054d4:	0c09      	lsrs	r1, r1, #16
 80054d6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 80054da:	040c      	lsls	r4, r1, #16
 80054dc:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 80054de:	b10a      	cbz	r2, 80054e4 <Vector128+0x24>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 80054e0:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80054e2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80054e4:	f7fc f89c 	bl	8001620 <_dbg_check_leave_isr>
 80054e8:	4803      	ldr	r0, [pc, #12]	; (80054f8 <Vector128+0x38>)
 80054ea:	f7fb ff41 	bl	8001370 <_trace_isr_leave>
}
 80054ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80054f2:	f7fb bead 	b.w	8001250 <_port_irq_epilogue>
 80054f6:	bf00      	nop
 80054f8:	08009c5c 	.word	0x08009c5c
 80054fc:	40026400 	.word	0x40026400
 8005500:	200022ac 	.word	0x200022ac
	...

08005510 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8005510:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005512:	480d      	ldr	r0, [pc, #52]	; (8005548 <Vector124+0x38>)
 8005514:	f7fb ff44 	bl	80013a0 <_trace_isr_enter>
 8005518:	f7fc f89a 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <Vector124+0x3c>)
  if (dma_isr_redir[9].dma_func)
 800551e:	480c      	ldr	r0, [pc, #48]	; (8005550 <Vector124+0x40>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005520:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8005522:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005524:	0989      	lsrs	r1, r1, #6
 8005526:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800552a:	018c      	lsls	r4, r1, #6
 800552c:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800552e:	b10a      	cbz	r2, 8005534 <Vector124+0x24>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8005530:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005532:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005534:	f7fc f874 	bl	8001620 <_dbg_check_leave_isr>
 8005538:	4803      	ldr	r0, [pc, #12]	; (8005548 <Vector124+0x38>)
 800553a:	f7fb ff19 	bl	8001370 <_trace_isr_leave>
}
 800553e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005542:	f7fb be85 	b.w	8001250 <_port_irq_epilogue>
 8005546:	bf00      	nop
 8005548:	08009c50 	.word	0x08009c50
 800554c:	40026400 	.word	0x40026400
 8005550:	200022ac 	.word	0x200022ac
	...

08005560 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8005560:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8005562:	480c      	ldr	r0, [pc, #48]	; (8005594 <Vector120+0x34>)
 8005564:	f7fb ff1c 	bl	80013a0 <_trace_isr_enter>
 8005568:	f7fc f872 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <Vector120+0x38>)
  if (dma_isr_redir[8].dma_func)
 800556e:	480b      	ldr	r0, [pc, #44]	; (800559c <Vector120+0x3c>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005570:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8005572:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8005574:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8005578:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800557a:	b10a      	cbz	r2, 8005580 <Vector120+0x20>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800557c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800557e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005580:	f7fc f84e 	bl	8001620 <_dbg_check_leave_isr>
 8005584:	4803      	ldr	r0, [pc, #12]	; (8005594 <Vector120+0x34>)
 8005586:	f7fb fef3 	bl	8001370 <_trace_isr_leave>
}
 800558a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800558e:	f7fb be5f 	b.w	8001250 <_port_irq_epilogue>
 8005592:	bf00      	nop
 8005594:	08009c44 	.word	0x08009c44
 8005598:	40026400 	.word	0x40026400
 800559c:	200022ac 	.word	0x200022ac

080055a0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80055a0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80055a2:	480d      	ldr	r0, [pc, #52]	; (80055d8 <VectorFC+0x38>)
 80055a4:	f7fb fefc 	bl	80013a0 <_trace_isr_enter>
 80055a8:	f7fc f852 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <VectorFC+0x3c>)
  if (dma_isr_redir[7].dma_func)
 80055ae:	480c      	ldr	r0, [pc, #48]	; (80055e0 <VectorFC+0x40>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80055b0:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 80055b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80055b4:	0d89      	lsrs	r1, r1, #22
 80055b6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80055ba:	058c      	lsls	r4, r1, #22
 80055bc:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 80055be:	b10a      	cbz	r2, 80055c4 <VectorFC+0x24>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 80055c0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80055c2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80055c4:	f7fc f82c 	bl	8001620 <_dbg_check_leave_isr>
 80055c8:	4803      	ldr	r0, [pc, #12]	; (80055d8 <VectorFC+0x38>)
 80055ca:	f7fb fed1 	bl	8001370 <_trace_isr_leave>
}
 80055ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80055d2:	f7fb be3d 	b.w	8001250 <_port_irq_epilogue>
 80055d6:	bf00      	nop
 80055d8:	08009c30 	.word	0x08009c30
 80055dc:	40026000 	.word	0x40026000
 80055e0:	200022ac 	.word	0x200022ac
	...

080055f0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80055f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80055f2:	480d      	ldr	r0, [pc, #52]	; (8005628 <Vector84+0x38>)
 80055f4:	f7fb fed4 	bl	80013a0 <_trace_isr_enter>
 80055f8:	f7fc f82a 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <Vector84+0x3c>)
  if (dma_isr_redir[6].dma_func)
 80055fe:	480c      	ldr	r0, [pc, #48]	; (8005630 <Vector84+0x40>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8005600:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8005602:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8005604:	0c09      	lsrs	r1, r1, #16
 8005606:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800560a:	040c      	lsls	r4, r1, #16
 800560c:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800560e:	b10a      	cbz	r2, 8005614 <Vector84+0x24>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8005610:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005612:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005614:	f7fc f804 	bl	8001620 <_dbg_check_leave_isr>
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <Vector84+0x38>)
 800561a:	f7fb fea9 	bl	8001370 <_trace_isr_leave>
}
 800561e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005622:	f7fb be15 	b.w	8001250 <_port_irq_epilogue>
 8005626:	bf00      	nop
 8005628:	08009c18 	.word	0x08009c18
 800562c:	40026000 	.word	0x40026000
 8005630:	200022ac 	.word	0x200022ac
	...

08005640 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8005640:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005642:	480d      	ldr	r0, [pc, #52]	; (8005678 <Vector80+0x38>)
 8005644:	f7fb feac 	bl	80013a0 <_trace_isr_enter>
 8005648:	f7fc f802 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <Vector80+0x3c>)
  if (dma_isr_redir[5].dma_func)
 800564e:	480c      	ldr	r0, [pc, #48]	; (8005680 <Vector80+0x40>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005650:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8005652:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005654:	0989      	lsrs	r1, r1, #6
 8005656:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800565a:	018c      	lsls	r4, r1, #6
 800565c:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800565e:	b10a      	cbz	r2, 8005664 <Vector80+0x24>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8005660:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005662:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005664:	f7fb ffdc 	bl	8001620 <_dbg_check_leave_isr>
 8005668:	4803      	ldr	r0, [pc, #12]	; (8005678 <Vector80+0x38>)
 800566a:	f7fb fe81 	bl	8001370 <_trace_isr_leave>
}
 800566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005672:	f7fb bded 	b.w	8001250 <_port_irq_epilogue>
 8005676:	bf00      	nop
 8005678:	08009c0c 	.word	0x08009c0c
 800567c:	40026000 	.word	0x40026000
 8005680:	200022ac 	.word	0x200022ac
	...

08005690 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8005690:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8005692:	480c      	ldr	r0, [pc, #48]	; (80056c4 <Vector7C+0x34>)
 8005694:	f7fb fe84 	bl	80013a0 <_trace_isr_enter>
 8005698:	f7fb ffda 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <Vector7C+0x38>)
  if (dma_isr_redir[4].dma_func)
 800569e:	480b      	ldr	r0, [pc, #44]	; (80056cc <Vector7C+0x3c>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80056a0:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80056a2:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80056a4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80056a8:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 80056aa:	b10a      	cbz	r2, 80056b0 <Vector7C+0x20>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80056ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80056ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80056b0:	f7fb ffb6 	bl	8001620 <_dbg_check_leave_isr>
 80056b4:	4803      	ldr	r0, [pc, #12]	; (80056c4 <Vector7C+0x34>)
 80056b6:	f7fb fe5b 	bl	8001370 <_trace_isr_leave>
}
 80056ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80056be:	f7fb bdc7 	b.w	8001250 <_port_irq_epilogue>
 80056c2:	bf00      	nop
 80056c4:	08009c00 	.word	0x08009c00
 80056c8:	40026000 	.word	0x40026000
 80056cc:	200022ac 	.word	0x200022ac

080056d0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80056d0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80056d2:	480d      	ldr	r0, [pc, #52]	; (8005708 <Vector78+0x38>)
 80056d4:	f7fb fe64 	bl	80013a0 <_trace_isr_enter>
 80056d8:	f7fb ffba 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <Vector78+0x3c>)
  if (dma_isr_redir[3].dma_func)
 80056de:	480c      	ldr	r0, [pc, #48]	; (8005710 <Vector78+0x40>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80056e0:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 80056e2:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80056e4:	0d89      	lsrs	r1, r1, #22
 80056e6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80056ea:	058c      	lsls	r4, r1, #22
 80056ec:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80056ee:	b10a      	cbz	r2, 80056f4 <Vector78+0x24>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80056f0:	69c0      	ldr	r0, [r0, #28]
 80056f2:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80056f4:	f7fb ff94 	bl	8001620 <_dbg_check_leave_isr>
 80056f8:	4803      	ldr	r0, [pc, #12]	; (8005708 <Vector78+0x38>)
 80056fa:	f7fb fe39 	bl	8001370 <_trace_isr_leave>
}
 80056fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005702:	f7fb bda5 	b.w	8001250 <_port_irq_epilogue>
 8005706:	bf00      	nop
 8005708:	08009be0 	.word	0x08009be0
 800570c:	40026000 	.word	0x40026000
 8005710:	200022ac 	.word	0x200022ac
	...

08005720 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8005720:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <Vector74+0x38>)
 8005724:	f7fb fe3c 	bl	80013a0 <_trace_isr_enter>
 8005728:	f7fb ff92 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <Vector74+0x3c>)
  if (dma_isr_redir[2].dma_func)
 800572e:	480c      	ldr	r0, [pc, #48]	; (8005760 <Vector74+0x40>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005730:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8005732:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005734:	0c09      	lsrs	r1, r1, #16
 8005736:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800573a:	040c      	lsls	r4, r1, #16
 800573c:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800573e:	b10a      	cbz	r2, 8005744 <Vector74+0x24>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8005740:	6940      	ldr	r0, [r0, #20]
 8005742:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005744:	f7fb ff6c 	bl	8001620 <_dbg_check_leave_isr>
 8005748:	4803      	ldr	r0, [pc, #12]	; (8005758 <Vector74+0x38>)
 800574a:	f7fb fe11 	bl	8001370 <_trace_isr_leave>
}
 800574e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005752:	f7fb bd7d 	b.w	8001250 <_port_irq_epilogue>
 8005756:	bf00      	nop
 8005758:	08009bc0 	.word	0x08009bc0
 800575c:	40026000 	.word	0x40026000
 8005760:	200022ac 	.word	0x200022ac
	...

08005770 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8005770:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005772:	480d      	ldr	r0, [pc, #52]	; (80057a8 <Vector70+0x38>)
 8005774:	f7fb fe14 	bl	80013a0 <_trace_isr_enter>
 8005778:	f7fb ff6a 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <Vector70+0x3c>)
  if (dma_isr_redir[1].dma_func)
 800577e:	480c      	ldr	r0, [pc, #48]	; (80057b0 <Vector70+0x40>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005780:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8005782:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005784:	0989      	lsrs	r1, r1, #6
 8005786:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800578a:	018c      	lsls	r4, r1, #6
 800578c:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800578e:	b10a      	cbz	r2, 8005794 <Vector70+0x24>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8005790:	68c0      	ldr	r0, [r0, #12]
 8005792:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8005794:	f7fb ff44 	bl	8001620 <_dbg_check_leave_isr>
 8005798:	4803      	ldr	r0, [pc, #12]	; (80057a8 <Vector70+0x38>)
 800579a:	f7fb fde9 	bl	8001370 <_trace_isr_leave>
}
 800579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80057a2:	f7fb bd55 	b.w	8001250 <_port_irq_epilogue>
 80057a6:	bf00      	nop
 80057a8:	08009b94 	.word	0x08009b94
 80057ac:	40026000 	.word	0x40026000
 80057b0:	200022ac 	.word	0x200022ac
	...

080057c0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80057c0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 80057c2:	480c      	ldr	r0, [pc, #48]	; (80057f4 <Vector6C+0x34>)
 80057c4:	f7fb fdec 	bl	80013a0 <_trace_isr_enter>
 80057c8:	f7fb ff42 	bl	8001650 <_dbg_check_enter_isr>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <Vector6C+0x38>)
  if (dma_isr_redir[0].dma_func)
 80057ce:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <Vector6C+0x3c>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 80057d6:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	b10b      	cbz	r3, 80057e0 <Vector6C+0x20>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 80057dc:	6850      	ldr	r0, [r2, #4]
 80057de:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80057e0:	f7fb ff1e 	bl	8001620 <_dbg_check_leave_isr>
 80057e4:	4803      	ldr	r0, [pc, #12]	; (80057f4 <Vector6C+0x34>)
 80057e6:	f7fb fdc3 	bl	8001370 <_trace_isr_leave>
}
 80057ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80057ee:	f7fb bd2f 	b.w	8001250 <_port_irq_epilogue>
 80057f2:	bf00      	nop
 80057f4:	08009b7c 	.word	0x08009b7c
 80057f8:	40026000 	.word	0x40026000
 80057fc:	200022ac 	.word	0x200022ac

08005800 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8005800:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8005802:	4820      	ldr	r0, [pc, #128]	; (8005884 <Vector88+0x84>)
 8005804:	f7fb fdcc 	bl	80013a0 <_trace_isr_enter>
 8005808:	f7fb ff22 	bl	8001650 <_dbg_check_enter_isr>
  sr = ADC1->SR;
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <Vector88+0x88>)
 800580e:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8005810:	2100      	movs	r1, #0
 8005812:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 8005814:	0693      	lsls	r3, r2, #26
 8005816:	d527      	bpl.n	8005868 <Vector88+0x68>
 8005818:	4c1c      	ldr	r4, [pc, #112]	; (800588c <Vector88+0x8c>)
 800581a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b313      	cbz	r3, 8005868 <Vector88+0x68>
    if (ADCD1.grpp != NULL)
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	b303      	cbz	r3, 8005868 <Vector88+0x68>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8005826:	4620      	mov	r0, r4
 8005828:	f7fc fc72 	bl	8002110 <adc_lld_stop_conversion>
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	b31b      	cbz	r3, 800587a <Vector88+0x7a>
 8005832:	2205      	movs	r2, #5
 8005834:	7022      	strb	r2, [r4, #0]
 8005836:	2101      	movs	r1, #1
 8005838:	4620      	mov	r0, r4
 800583a:	4798      	blx	r3
 800583c:	7823      	ldrb	r3, [r4, #0]
 800583e:	2b05      	cmp	r3, #5
 8005840:	bf04      	itt	eq
 8005842:	2302      	moveq	r3, #2
 8005844:	7023      	strbeq	r3, [r4, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	2320      	movs	r3, #32
 800584c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8005850:	f7fb ff2e 	bl	80016b0 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 8005854:	f04f 31ff 	mov.w	r1, #4294967295
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <Vector88+0x90>)
 800585a:	f7fb fec9 	bl	80015f0 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 800585e:	f7fb ff0f 	bl	8001680 <_dbg_check_unlock_from_isr>
 8005862:	2300      	movs	r3, #0
 8005864:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8005868:	f7fb feda 	bl	8001620 <_dbg_check_leave_isr>
 800586c:	4805      	ldr	r0, [pc, #20]	; (8005884 <Vector88+0x84>)
 800586e:	f7fb fd7f 	bl	8001370 <_trace_isr_leave>
}
 8005872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8005876:	f7fb bceb 	b.w	8001250 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800587a:	2202      	movs	r2, #2
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	7022      	strb	r2, [r4, #0]
 8005880:	e7e3      	b.n	800584a <Vector88+0x4a>
 8005882:	bf00      	nop
 8005884:	08009b70 	.word	0x08009b70
 8005888:	40012000 	.word	0x40012000
 800588c:	200011e8 	.word	0x200011e8
 8005890:	200011fc 	.word	0x200011fc
	...

080058a0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80058a0:	b4f0      	push	{r4, r5, r6, r7}
 80058a2:	4e14      	ldr	r6, [pc, #80]	; (80058f4 <__init_ram_areas+0x54>)
 80058a4:	4d14      	ldr	r5, [pc, #80]	; (80058f8 <__init_ram_areas+0x58>)
 80058a6:	4c15      	ldr	r4, [pc, #84]	; (80058fc <__init_ram_areas+0x5c>)
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <__init_ram_areas+0x60>)
 80058aa:	4916      	ldr	r1, [pc, #88]	; (8005904 <__init_ram_areas+0x64>)
 80058ac:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80058b0:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 80058b2:	429c      	cmp	r4, r3
 80058b4:	d911      	bls.n	80058da <__init_ram_areas+0x3a>
 80058b6:	3904      	subs	r1, #4
 80058b8:	461a      	mov	r2, r3
      *p = *tp;
 80058ba:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80058be:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80058c2:	4294      	cmp	r4, r2
 80058c4:	d8f9      	bhi.n	80058ba <__init_ram_areas+0x1a>
 80058c6:	43da      	mvns	r2, r3
 80058c8:	4414      	add	r4, r2
 80058ca:	f024 0403 	bic.w	r4, r4, #3
 80058ce:	3404      	adds	r4, #4
 80058d0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80058d2:	429d      	cmp	r5, r3
 80058d4:	d903      	bls.n	80058de <__init_ram_areas+0x3e>
      *p = 0;
 80058d6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 80058da:	429d      	cmp	r5, r3
 80058dc:	d8fb      	bhi.n	80058d6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80058de:	4566      	cmp	r6, ip
 80058e0:	d005      	beq.n	80058ee <__init_ram_areas+0x4e>
 80058e2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 80058e6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 80058ea:	3610      	adds	r6, #16
 80058ec:	e7e1      	b.n	80058b2 <__init_ram_areas+0x12>
#endif
}
 80058ee:	bcf0      	pop	{r4, r5, r6, r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	0800a03c 	.word	0x0800a03c
 80058f8:	20002ed8 	.word	0x20002ed8
 80058fc:	20002ed8 	.word	0x20002ed8
 8005900:	20002ed8 	.word	0x20002ed8
 8005904:	0800b008 	.word	0x0800b008
	...

08005910 <__default_exit>:
void __default_exit(void) {
 8005910:	e7fe      	b.n	8005910 <__default_exit>
 8005912:	bf00      	nop
	...

08005920 <__late_init>:
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
	...

08005930 <__core_init>:
}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop

08005934 <atoi>:
 8005934:	220a      	movs	r2, #10
 8005936:	2100      	movs	r1, #0
 8005938:	f000 b8d0 	b.w	8005adc <strtol>

0800593c <strtok>:
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <strtok+0xc>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2301      	movs	r3, #1
 8005942:	325c      	adds	r2, #92	; 0x5c
 8005944:	f000 b802 	b.w	800594c <__strtok_r>
 8005948:	2000083c 	.word	0x2000083c

0800594c <__strtok_r>:
 800594c:	b4f0      	push	{r4, r5, r6, r7}
 800594e:	b320      	cbz	r0, 800599a <__strtok_r+0x4e>
 8005950:	4607      	mov	r7, r0
 8005952:	460d      	mov	r5, r1
 8005954:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005958:	e001      	b.n	800595e <__strtok_r+0x12>
 800595a:	42a6      	cmp	r6, r4
 800595c:	d016      	beq.n	800598c <__strtok_r+0x40>
 800595e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005962:	2c00      	cmp	r4, #0
 8005964:	d1f9      	bne.n	800595a <__strtok_r+0xe>
 8005966:	b1ee      	cbz	r6, 80059a4 <__strtok_r+0x58>
 8005968:	463e      	mov	r6, r7
 800596a:	460c      	mov	r4, r1
 800596c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005970:	e000      	b.n	8005974 <__strtok_r+0x28>
 8005972:	b173      	cbz	r3, 8005992 <__strtok_r+0x46>
 8005974:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005978:	429d      	cmp	r5, r3
 800597a:	d1fa      	bne.n	8005972 <__strtok_r+0x26>
 800597c:	b15d      	cbz	r5, 8005996 <__strtok_r+0x4a>
 800597e:	2300      	movs	r3, #0
 8005980:	703b      	strb	r3, [r7, #0]
 8005982:	6016      	str	r6, [r2, #0]
 8005984:	4606      	mov	r6, r0
 8005986:	4630      	mov	r0, r6
 8005988:	bcf0      	pop	{r4, r5, r6, r7}
 800598a:	4770      	bx	lr
 800598c:	b163      	cbz	r3, 80059a8 <__strtok_r+0x5c>
 800598e:	4638      	mov	r0, r7
 8005990:	e7de      	b.n	8005950 <__strtok_r+0x4>
 8005992:	4637      	mov	r7, r6
 8005994:	e7e8      	b.n	8005968 <__strtok_r+0x1c>
 8005996:	462e      	mov	r6, r5
 8005998:	e7f3      	b.n	8005982 <__strtok_r+0x36>
 800599a:	6810      	ldr	r0, [r2, #0]
 800599c:	2800      	cmp	r0, #0
 800599e:	d1d7      	bne.n	8005950 <__strtok_r+0x4>
 80059a0:	4606      	mov	r6, r0
 80059a2:	e7f0      	b.n	8005986 <__strtok_r+0x3a>
 80059a4:	6016      	str	r6, [r2, #0]
 80059a6:	e7ee      	b.n	8005986 <__strtok_r+0x3a>
 80059a8:	6017      	str	r7, [r2, #0]
 80059aa:	4606      	mov	r6, r0
 80059ac:	7003      	strb	r3, [r0, #0]
 80059ae:	e7ea      	b.n	8005986 <__strtok_r+0x3a>

080059b0 <strtok_r>:
 80059b0:	2301      	movs	r3, #1
 80059b2:	f7ff bfcb 	b.w	800594c <__strtok_r>
 80059b6:	bf00      	nop

080059b8 <_strtol_l.isra.0>:
 80059b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	460e      	mov	r6, r1
 80059be:	4680      	mov	r8, r0
 80059c0:	4617      	mov	r7, r2
 80059c2:	4699      	mov	r9, r3
 80059c4:	460d      	mov	r5, r1
 80059c6:	e000      	b.n	80059ca <_strtol_l.isra.0+0x12>
 80059c8:	4625      	mov	r5, r4
 80059ca:	462c      	mov	r4, r5
 80059cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059ce:	f814 bb01 	ldrb.w	fp, [r4], #1
 80059d2:	f000 f899 	bl	8005b08 <__locale_ctype_ptr_l>
 80059d6:	4458      	add	r0, fp
 80059d8:	7841      	ldrb	r1, [r0, #1]
 80059da:	f011 0108 	ands.w	r1, r1, #8
 80059de:	d1f3      	bne.n	80059c8 <_strtol_l.isra.0+0x10>
 80059e0:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
 80059e4:	d057      	beq.n	8005a96 <_strtol_l.isra.0+0xde>
 80059e6:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80059ea:	bf04      	itt	eq
 80059ec:	f895 b001 	ldrbeq.w	fp, [r5, #1]
 80059f0:	1cac      	addeq	r4, r5, #2
 80059f2:	f1b9 0f00 	cmp.w	r9, #0
 80059f6:	d004      	beq.n	8005a02 <_strtol_l.isra.0+0x4a>
 80059f8:	f1b9 0f10 	cmp.w	r9, #16
 80059fc:	d050      	beq.n	8005aa0 <_strtol_l.isra.0+0xe8>
 80059fe:	46cc      	mov	ip, r9
 8005a00:	e005      	b.n	8005a0e <_strtol_l.isra.0+0x56>
 8005a02:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005a06:	d055      	beq.n	8005ab4 <_strtol_l.isra.0+0xfc>
 8005a08:	f04f 090a 	mov.w	r9, #10
 8005a0c:	46cc      	mov	ip, r9
 8005a0e:	2900      	cmp	r1, #0
 8005a10:	bf0c      	ite	eq
 8005a12:	f06f 4e00 	mvneq.w	lr, #2147483648	; 0x80000000
 8005a16:	f04f 4e00 	movne.w	lr, #2147483648	; 0x80000000
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	fbbe f3fc 	udiv	r3, lr, ip
 8005a20:	4628      	mov	r0, r5
 8005a22:	fb0c ea13 	mls	sl, ip, r3, lr
 8005a26:	e005      	b.n	8005a34 <_strtol_l.isra.0+0x7c>
 8005a28:	d029      	beq.n	8005a7e <_strtol_l.isra.0+0xc6>
 8005a2a:	fb0c 2000 	mla	r0, ip, r0, r2
 8005a2e:	2501      	movs	r5, #1
 8005a30:	f814 bb01 	ldrb.w	fp, [r4], #1
 8005a34:	f1ab 0230 	sub.w	r2, fp, #48	; 0x30
 8005a38:	2a09      	cmp	r2, #9
 8005a3a:	d905      	bls.n	8005a48 <_strtol_l.isra.0+0x90>
 8005a3c:	f1ab 0241 	sub.w	r2, fp, #65	; 0x41
 8005a40:	2a19      	cmp	r2, #25
 8005a42:	d80b      	bhi.n	8005a5c <_strtol_l.isra.0+0xa4>
 8005a44:	f1ab 0237 	sub.w	r2, fp, #55	; 0x37
 8005a48:	4591      	cmp	r9, r2
 8005a4a:	dd0f      	ble.n	8005a6c <_strtol_l.isra.0+0xb4>
 8005a4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a50:	d0ee      	beq.n	8005a30 <_strtol_l.isra.0+0x78>
 8005a52:	4283      	cmp	r3, r0
 8005a54:	d2e8      	bcs.n	8005a28 <_strtol_l.isra.0+0x70>
 8005a56:	f04f 35ff 	mov.w	r5, #4294967295
 8005a5a:	e7e9      	b.n	8005a30 <_strtol_l.isra.0+0x78>
 8005a5c:	f1ab 0261 	sub.w	r2, fp, #97	; 0x61
 8005a60:	2a19      	cmp	r2, #25
 8005a62:	d803      	bhi.n	8005a6c <_strtol_l.isra.0+0xb4>
 8005a64:	f1ab 0257 	sub.w	r2, fp, #87	; 0x57
 8005a68:	4591      	cmp	r9, r2
 8005a6a:	dcef      	bgt.n	8005a4c <_strtol_l.isra.0+0x94>
 8005a6c:	1c6b      	adds	r3, r5, #1
 8005a6e:	d00b      	beq.n	8005a88 <_strtol_l.isra.0+0xd0>
 8005a70:	b101      	cbz	r1, 8005a74 <_strtol_l.isra.0+0xbc>
 8005a72:	4240      	negs	r0, r0
 8005a74:	b10f      	cbz	r7, 8005a7a <_strtol_l.isra.0+0xc2>
 8005a76:	bb4d      	cbnz	r5, 8005acc <_strtol_l.isra.0+0x114>
 8005a78:	603e      	str	r6, [r7, #0]
 8005a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	4592      	cmp	sl, r2
 8005a80:	dad3      	bge.n	8005a2a <_strtol_l.isra.0+0x72>
 8005a82:	f04f 35ff 	mov.w	r5, #4294967295
 8005a86:	e7d3      	b.n	8005a30 <_strtol_l.isra.0+0x78>
 8005a88:	2322      	movs	r3, #34	; 0x22
 8005a8a:	f8c8 3000 	str.w	r3, [r8]
 8005a8e:	b1ff      	cbz	r7, 8005ad0 <_strtol_l.isra.0+0x118>
 8005a90:	1e66      	subs	r6, r4, #1
 8005a92:	4670      	mov	r0, lr
 8005a94:	e7f0      	b.n	8005a78 <_strtol_l.isra.0+0xc0>
 8005a96:	1cac      	adds	r4, r5, #2
 8005a98:	f895 b001 	ldrb.w	fp, [r5, #1]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	e7a8      	b.n	80059f2 <_strtol_l.isra.0+0x3a>
 8005aa0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005aa4:	d1ab      	bne.n	80059fe <_strtol_l.isra.0+0x46>
 8005aa6:	7823      	ldrb	r3, [r4, #0]
 8005aa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005aac:	2b58      	cmp	r3, #88	; 0x58
 8005aae:	d006      	beq.n	8005abe <_strtol_l.isra.0+0x106>
 8005ab0:	46cc      	mov	ip, r9
 8005ab2:	e7ac      	b.n	8005a0e <_strtol_l.isra.0+0x56>
 8005ab4:	7823      	ldrb	r3, [r4, #0]
 8005ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005aba:	2b58      	cmp	r3, #88	; 0x58
 8005abc:	d10a      	bne.n	8005ad4 <_strtol_l.isra.0+0x11c>
 8005abe:	f04f 0c10 	mov.w	ip, #16
 8005ac2:	f894 b001 	ldrb.w	fp, [r4, #1]
 8005ac6:	46e1      	mov	r9, ip
 8005ac8:	3402      	adds	r4, #2
 8005aca:	e7a0      	b.n	8005a0e <_strtol_l.isra.0+0x56>
 8005acc:	4686      	mov	lr, r0
 8005ace:	e7df      	b.n	8005a90 <_strtol_l.isra.0+0xd8>
 8005ad0:	4670      	mov	r0, lr
 8005ad2:	e7d2      	b.n	8005a7a <_strtol_l.isra.0+0xc2>
 8005ad4:	f04f 0908 	mov.w	r9, #8
 8005ad8:	46cc      	mov	ip, r9
 8005ada:	e798      	b.n	8005a0e <_strtol_l.isra.0+0x56>

08005adc <strtol>:
 8005adc:	b530      	push	{r4, r5, lr}
 8005ade:	4c08      	ldr	r4, [pc, #32]	; (8005b00 <strtol+0x24>)
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <strtol+0x28>)
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	bf08      	it	eq
 8005aec:	461c      	moveq	r4, r3
 8005aee:	9400      	str	r4, [sp, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	460a      	mov	r2, r1
 8005af4:	4601      	mov	r1, r0
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff ff5e 	bl	80059b8 <_strtol_l.isra.0>
 8005afc:	b003      	add	sp, #12
 8005afe:	bd30      	pop	{r4, r5, pc}
 8005b00:	2000083c 	.word	0x2000083c
 8005b04:	20000c68 	.word	0x20000c68

08005b08 <__locale_ctype_ptr_l>:
 8005b08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop

08005b10 <__ascii_mbtowc>:
 8005b10:	b082      	sub	sp, #8
 8005b12:	b149      	cbz	r1, 8005b28 <__ascii_mbtowc+0x18>
 8005b14:	b15a      	cbz	r2, 8005b2e <__ascii_mbtowc+0x1e>
 8005b16:	b16b      	cbz	r3, 8005b34 <__ascii_mbtowc+0x24>
 8005b18:	7813      	ldrb	r3, [r2, #0]
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	1c10      	adds	r0, r2, #0
 8005b20:	bf18      	it	ne
 8005b22:	2001      	movne	r0, #1
 8005b24:	b002      	add	sp, #8
 8005b26:	4770      	bx	lr
 8005b28:	a901      	add	r1, sp, #4
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d1f3      	bne.n	8005b16 <__ascii_mbtowc+0x6>
 8005b2e:	4610      	mov	r0, r2
 8005b30:	b002      	add	sp, #8
 8005b32:	4770      	bx	lr
 8005b34:	f06f 0001 	mvn.w	r0, #1
 8005b38:	e7f4      	b.n	8005b24 <__ascii_mbtowc+0x14>
 8005b3a:	bf00      	nop

08005b3c <__ascii_wctomb>:
 8005b3c:	b121      	cbz	r1, 8005b48 <__ascii_wctomb+0xc>
 8005b3e:	2aff      	cmp	r2, #255	; 0xff
 8005b40:	d804      	bhi.n	8005b4c <__ascii_wctomb+0x10>
 8005b42:	700a      	strb	r2, [r1, #0]
 8005b44:	2001      	movs	r0, #1
 8005b46:	4770      	bx	lr
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4770      	bx	lr
 8005b4c:	238a      	movs	r3, #138	; 0x8a
 8005b4e:	6003      	str	r3, [r0, #0]
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <memset>:
 8005b58:	b4f0      	push	{r4, r5, r6, r7}
 8005b5a:	0786      	lsls	r6, r0, #30
 8005b5c:	d043      	beq.n	8005be6 <memset+0x8e>
 8005b5e:	1e54      	subs	r4, r2, #1
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d03e      	beq.n	8005be2 <memset+0x8a>
 8005b64:	b2ca      	uxtb	r2, r1
 8005b66:	4603      	mov	r3, r0
 8005b68:	e002      	b.n	8005b70 <memset+0x18>
 8005b6a:	f114 34ff 	adds.w	r4, r4, #4294967295
 8005b6e:	d338      	bcc.n	8005be2 <memset+0x8a>
 8005b70:	f803 2b01 	strb.w	r2, [r3], #1
 8005b74:	079d      	lsls	r5, r3, #30
 8005b76:	d1f8      	bne.n	8005b6a <memset+0x12>
 8005b78:	2c03      	cmp	r4, #3
 8005b7a:	d92b      	bls.n	8005bd4 <memset+0x7c>
 8005b7c:	b2cd      	uxtb	r5, r1
 8005b7e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005b82:	2c0f      	cmp	r4, #15
 8005b84:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005b88:	d916      	bls.n	8005bb8 <memset+0x60>
 8005b8a:	f1a4 0710 	sub.w	r7, r4, #16
 8005b8e:	093f      	lsrs	r7, r7, #4
 8005b90:	f103 0620 	add.w	r6, r3, #32
 8005b94:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8005b98:	f103 0210 	add.w	r2, r3, #16
 8005b9c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8005ba0:	e942 5502 	strd	r5, r5, [r2, #-8]
 8005ba4:	3210      	adds	r2, #16
 8005ba6:	42b2      	cmp	r2, r6
 8005ba8:	d1f8      	bne.n	8005b9c <memset+0x44>
 8005baa:	f004 040f 	and.w	r4, r4, #15
 8005bae:	3701      	adds	r7, #1
 8005bb0:	2c03      	cmp	r4, #3
 8005bb2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8005bb6:	d90d      	bls.n	8005bd4 <memset+0x7c>
 8005bb8:	461e      	mov	r6, r3
 8005bba:	4622      	mov	r2, r4
 8005bbc:	3a04      	subs	r2, #4
 8005bbe:	2a03      	cmp	r2, #3
 8005bc0:	f846 5b04 	str.w	r5, [r6], #4
 8005bc4:	d8fa      	bhi.n	8005bbc <memset+0x64>
 8005bc6:	1f22      	subs	r2, r4, #4
 8005bc8:	f022 0203 	bic.w	r2, r2, #3
 8005bcc:	3204      	adds	r2, #4
 8005bce:	4413      	add	r3, r2
 8005bd0:	f004 0403 	and.w	r4, r4, #3
 8005bd4:	b12c      	cbz	r4, 8005be2 <memset+0x8a>
 8005bd6:	b2c9      	uxtb	r1, r1
 8005bd8:	441c      	add	r4, r3
 8005bda:	f803 1b01 	strb.w	r1, [r3], #1
 8005bde:	429c      	cmp	r4, r3
 8005be0:	d1fb      	bne.n	8005bda <memset+0x82>
 8005be2:	bcf0      	pop	{r4, r5, r6, r7}
 8005be4:	4770      	bx	lr
 8005be6:	4614      	mov	r4, r2
 8005be8:	4603      	mov	r3, r0
 8005bea:	e7c5      	b.n	8005b78 <memset+0x20>

08005bec <sprintf>:
 8005bec:	b40e      	push	{r1, r2, r3}
 8005bee:	b530      	push	{r4, r5, lr}
 8005bf0:	b09c      	sub	sp, #112	; 0x70
 8005bf2:	ab1f      	add	r3, sp, #124	; 0x7c
 8005bf4:	4c0c      	ldr	r4, [pc, #48]	; (8005c28 <sprintf+0x3c>)
 8005bf6:	4d0d      	ldr	r5, [pc, #52]	; (8005c2c <sprintf+0x40>)
 8005bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	4601      	mov	r1, r0
 8005c00:	9102      	str	r1, [sp, #8]
 8005c02:	9106      	str	r1, [sp, #24]
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	a902      	add	r1, sp, #8
 8005c08:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005c0c:	9407      	str	r4, [sp, #28]
 8005c0e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005c12:	f000 fa5f 	bl	80060d4 <_svfprintf_r>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	b01c      	add	sp, #112	; 0x70
 8005c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c22:	b003      	add	sp, #12
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2000083c 	.word	0x2000083c
 8005c2c:	ffff0208 	.word	0xffff0208

08005c30 <critical_factorization>:
 8005c30:	f04f 0c01 	mov.w	ip, #1
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	4664      	mov	r4, ip
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c40:	1933      	adds	r3, r6, r4
 8005c42:	428b      	cmp	r3, r1
 8005c44:	eb00 0705 	add.w	r7, r0, r5
 8005c48:	d20d      	bcs.n	8005c66 <critical_factorization+0x36>
 8005c4a:	5d3f      	ldrb	r7, [r7, r4]
 8005c4c:	f810 e003 	ldrb.w	lr, [r0, r3]
 8005c50:	45be      	cmp	lr, r7
 8005c52:	d22d      	bcs.n	8005cb0 <critical_factorization+0x80>
 8005c54:	461e      	mov	r6, r3
 8005c56:	2401      	movs	r4, #1
 8005c58:	eba3 0c05 	sub.w	ip, r3, r5
 8005c5c:	1933      	adds	r3, r6, r4
 8005c5e:	428b      	cmp	r3, r1
 8005c60:	eb00 0705 	add.w	r7, r0, r5
 8005c64:	d3f1      	bcc.n	8005c4a <critical_factorization+0x1a>
 8005c66:	f04f 0801 	mov.w	r8, #1
 8005c6a:	f8c2 c000 	str.w	ip, [r2]
 8005c6e:	4644      	mov	r4, r8
 8005c70:	2600      	movs	r6, #0
 8005c72:	f04f 37ff 	mov.w	r7, #4294967295
 8005c76:	1933      	adds	r3, r6, r4
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	eb00 0c07 	add.w	ip, r0, r7
 8005c7e:	d20e      	bcs.n	8005c9e <critical_factorization+0x6e>
 8005c80:	f81c c004 	ldrb.w	ip, [ip, r4]
 8005c84:	f810 e003 	ldrb.w	lr, [r0, r3]
 8005c88:	45e6      	cmp	lr, ip
 8005c8a:	d918      	bls.n	8005cbe <critical_factorization+0x8e>
 8005c8c:	461e      	mov	r6, r3
 8005c8e:	2401      	movs	r4, #1
 8005c90:	eba3 0807 	sub.w	r8, r3, r7
 8005c94:	1933      	adds	r3, r6, r4
 8005c96:	428b      	cmp	r3, r1
 8005c98:	eb00 0c07 	add.w	ip, r0, r7
 8005c9c:	d3f0      	bcc.n	8005c80 <critical_factorization+0x50>
 8005c9e:	3701      	adds	r7, #1
 8005ca0:	1c68      	adds	r0, r5, #1
 8005ca2:	4287      	cmp	r7, r0
 8005ca4:	bf24      	itt	cs
 8005ca6:	f8c2 8000 	strcs.w	r8, [r2]
 8005caa:	4638      	movcs	r0, r7
 8005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb0:	d00c      	beq.n	8005ccc <critical_factorization+0x9c>
 8005cb2:	f04f 0c01 	mov.w	ip, #1
 8005cb6:	4635      	mov	r5, r6
 8005cb8:	4664      	mov	r4, ip
 8005cba:	4466      	add	r6, ip
 8005cbc:	e7c0      	b.n	8005c40 <critical_factorization+0x10>
 8005cbe:	d00b      	beq.n	8005cd8 <critical_factorization+0xa8>
 8005cc0:	f04f 0801 	mov.w	r8, #1
 8005cc4:	4637      	mov	r7, r6
 8005cc6:	4644      	mov	r4, r8
 8005cc8:	4446      	add	r6, r8
 8005cca:	e7d4      	b.n	8005c76 <critical_factorization+0x46>
 8005ccc:	4564      	cmp	r4, ip
 8005cce:	bf12      	itee	ne
 8005cd0:	3401      	addne	r4, #1
 8005cd2:	461e      	moveq	r6, r3
 8005cd4:	2401      	moveq	r4, #1
 8005cd6:	e7b3      	b.n	8005c40 <critical_factorization+0x10>
 8005cd8:	4544      	cmp	r4, r8
 8005cda:	bf12      	itee	ne
 8005cdc:	3401      	addne	r4, #1
 8005cde:	461e      	moveq	r6, r3
 8005ce0:	2401      	moveq	r4, #1
 8005ce2:	e7c8      	b.n	8005c76 <critical_factorization+0x46>

08005ce4 <two_way_long_needle>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8005cec:	4691      	mov	r9, r2
 8005cee:	4605      	mov	r5, r0
 8005cf0:	468b      	mov	fp, r1
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	aa03      	add	r2, sp, #12
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	f7ff ff99 	bl	8005c30 <critical_factorization>
 8005cfe:	ab03      	add	r3, sp, #12
 8005d00:	4680      	mov	r8, r0
 8005d02:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
 8005d06:	f843 4f04 	str.w	r4, [r3, #4]!
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d1fb      	bne.n	8005d06 <two_way_long_needle+0x22>
 8005d0e:	b154      	cbz	r4, 8005d26 <two_way_long_needle+0x42>
 8005d10:	1e63      	subs	r3, r4, #1
 8005d12:	f109 32ff 	add.w	r2, r9, #4294967295
 8005d16:	a804      	add	r0, sp, #16
 8005d18:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005d1c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8005d20:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005d24:	d2f8      	bcs.n	8005d18 <two_way_long_needle+0x34>
 8005d26:	9903      	ldr	r1, [sp, #12]
 8005d28:	4642      	mov	r2, r8
 8005d2a:	4449      	add	r1, r9
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f002 fe5f 	bl	80089f0 <memcmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d16e      	bne.n	8005e14 <two_way_long_needle+0x130>
 8005d36:	f108 33ff 	add.w	r3, r8, #4294967295
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	444b      	add	r3, r9
 8005d3e:	4682      	mov	sl, r0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4623      	mov	r3, r4
 8005d44:	4607      	mov	r7, r0
 8005d46:	4654      	mov	r4, sl
 8005d48:	4658      	mov	r0, fp
 8005d4a:	469a      	mov	sl, r3
 8005d4c:	eb07 060a 	add.w	r6, r7, sl
 8005d50:	1a32      	subs	r2, r6, r0
 8005d52:	2100      	movs	r1, #0
 8005d54:	4428      	add	r0, r5
 8005d56:	f7fa fb6b 	bl	8000430 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d155      	bne.n	8005e0a <two_way_long_needle+0x126>
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d053      	beq.n	8005e0a <two_way_long_needle+0x126>
 8005d62:	19ab      	adds	r3, r5, r6
 8005d64:	aa04      	add	r2, sp, #16
 8005d66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6e:	b14b      	cbz	r3, 8005d84 <two_way_long_needle+0xa0>
 8005d70:	b124      	cbz	r4, 8005d7c <two_way_long_needle+0x98>
 8005d72:	9a03      	ldr	r2, [sp, #12]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d901      	bls.n	8005d7c <two_way_long_needle+0x98>
 8005d78:	ebaa 0302 	sub.w	r3, sl, r2
 8005d7c:	441f      	add	r7, r3
 8005d7e:	2400      	movs	r4, #0
 8005d80:	4630      	mov	r0, r6
 8005d82:	e7e3      	b.n	8005d4c <two_way_long_needle+0x68>
 8005d84:	4544      	cmp	r4, r8
 8005d86:	4623      	mov	r3, r4
 8005d88:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005d8c:	bf38      	it	cc
 8005d8e:	4643      	movcc	r3, r8
 8005d90:	4563      	cmp	r3, ip
 8005d92:	d213      	bcs.n	8005dbc <two_way_long_needle+0xd8>
 8005d94:	18fa      	adds	r2, r7, r3
 8005d96:	f819 0003 	ldrb.w	r0, [r9, r3]
 8005d9a:	f815 e002 	ldrb.w	lr, [r5, r2]
 8005d9e:	4586      	cmp	lr, r0
 8005da0:	442a      	add	r2, r5
 8005da2:	eb09 0103 	add.w	r1, r9, r3
 8005da6:	d006      	beq.n	8005db6 <two_way_long_needle+0xd2>
 8005da8:	e02b      	b.n	8005e02 <two_way_long_needle+0x11e>
 8005daa:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8005dae:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005db2:	4586      	cmp	lr, r0
 8005db4:	d125      	bne.n	8005e02 <two_way_long_needle+0x11e>
 8005db6:	3301      	adds	r3, #1
 8005db8:	4563      	cmp	r3, ip
 8005dba:	d3f6      	bcc.n	8005daa <two_way_long_needle+0xc6>
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	4544      	cmp	r4, r8
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f080 8087 	bcs.w	8005ed4 <two_way_long_needle+0x1f0>
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	9a00      	ldr	r2, [sp, #0]
 8005dca:	5ce8      	ldrb	r0, [r5, r3]
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	4282      	cmp	r2, r0
 8005dd0:	442b      	add	r3, r5
 8005dd2:	d17f      	bne.n	8005ed4 <two_way_long_needle+0x1f0>
 8005dd4:	9800      	ldr	r0, [sp, #0]
 8005dd6:	f104 3bff 	add.w	fp, r4, #4294967295
 8005dda:	e006      	b.n	8005dea <two_way_long_needle+0x106>
 8005ddc:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
 8005de0:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8005de4:	45e6      	cmp	lr, ip
 8005de6:	d103      	bne.n	8005df0 <two_way_long_needle+0x10c>
 8005de8:	4611      	mov	r1, r2
 8005dea:	1e4a      	subs	r2, r1, #1
 8005dec:	4593      	cmp	fp, r2
 8005dee:	d1f5      	bne.n	8005ddc <two_way_long_needle+0xf8>
 8005df0:	3401      	adds	r4, #1
 8005df2:	428c      	cmp	r4, r1
 8005df4:	d870      	bhi.n	8005ed8 <two_way_long_needle+0x1f4>
 8005df6:	9c03      	ldr	r4, [sp, #12]
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4427      	add	r7, r4
 8005dfc:	ebaa 0404 	sub.w	r4, sl, r4
 8005e00:	e7a4      	b.n	8005d4c <two_way_long_needle+0x68>
 8005e02:	f1c8 0201 	rsb	r2, r8, #1
 8005e06:	4417      	add	r7, r2
 8005e08:	e7b8      	b.n	8005d7c <two_way_long_needle+0x98>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	eba4 0308 	sub.w	r3, r4, r8
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	bf38      	it	cc
 8005e1c:	4643      	movcc	r3, r8
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f108 37ff 	add.w	r7, r8, #4294967295
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	eb09 0307 	add.w	r3, r9, r7
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f04f 0a00 	mov.w	sl, #0
 8005e30:	46c3      	mov	fp, r8
 8005e32:	4698      	mov	r8, r3
 8005e34:	eb0a 0604 	add.w	r6, sl, r4
 8005e38:	1a32      	subs	r2, r6, r0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4428      	add	r0, r5
 8005e3e:	f7fa faf7 	bl	8000430 <memchr>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1e1      	bne.n	8005e0a <two_way_long_needle+0x126>
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d0df      	beq.n	8005e0a <two_way_long_needle+0x126>
 8005e4a:	19ab      	adds	r3, r5, r6
 8005e4c:	aa04      	add	r2, sp, #16
 8005e4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e56:	bba3      	cbnz	r3, 8005ec2 <two_way_long_needle+0x1de>
 8005e58:	1e61      	subs	r1, r4, #1
 8005e5a:	458b      	cmp	fp, r1
 8005e5c:	d215      	bcs.n	8005e8a <two_way_long_needle+0x1a6>
 8005e5e:	eb0a 020b 	add.w	r2, sl, fp
 8005e62:	f819 300b 	ldrb.w	r3, [r9, fp]
 8005e66:	f815 c002 	ldrb.w	ip, [r5, r2]
 8005e6a:	459c      	cmp	ip, r3
 8005e6c:	442a      	add	r2, r5
 8005e6e:	eb09 000b 	add.w	r0, r9, fp
 8005e72:	465b      	mov	r3, fp
 8005e74:	d006      	beq.n	8005e84 <two_way_long_needle+0x1a0>
 8005e76:	e027      	b.n	8005ec8 <two_way_long_needle+0x1e4>
 8005e78:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 8005e7c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 8005e80:	45e6      	cmp	lr, ip
 8005e82:	d121      	bne.n	8005ec8 <two_way_long_needle+0x1e4>
 8005e84:	3301      	adds	r3, #1
 8005e86:	428b      	cmp	r3, r1
 8005e88:	d3f6      	bcc.n	8005e78 <two_way_long_needle+0x194>
 8005e8a:	1c7b      	adds	r3, r7, #1
 8005e8c:	d012      	beq.n	8005eb4 <two_way_long_needle+0x1d0>
 8005e8e:	eb0a 0307 	add.w	r3, sl, r7
 8005e92:	f898 0000 	ldrb.w	r0, [r8]
 8005e96:	5ce9      	ldrb	r1, [r5, r3]
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	eb05 0203 	add.w	r2, r5, r3
 8005e9e:	d10f      	bne.n	8005ec0 <two_way_long_needle+0x1dc>
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	e005      	b.n	8005eb0 <two_way_long_needle+0x1cc>
 8005ea4:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
 8005ea8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 8005eac:	4288      	cmp	r0, r1
 8005eae:	d107      	bne.n	8005ec0 <two_way_long_needle+0x1dc>
 8005eb0:	454b      	cmp	r3, r9
 8005eb2:	d1f7      	bne.n	8005ea4 <two_way_long_needle+0x1c0>
 8005eb4:	eb05 000a 	add.w	r0, r5, sl
 8005eb8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	449a      	add	sl, r3
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	e7b5      	b.n	8005e34 <two_way_long_needle+0x150>
 8005ec8:	f1cb 0201 	rsb	r2, fp, #1
 8005ecc:	4492      	add	sl, r2
 8005ece:	449a      	add	sl, r3
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	e7af      	b.n	8005e34 <two_way_long_needle+0x150>
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	e78b      	b.n	8005df0 <two_way_long_needle+0x10c>
 8005ed8:	19e8      	adds	r0, r5, r7
 8005eda:	e797      	b.n	8005e0c <two_way_long_needle+0x128>

08005edc <strstr>:
 8005edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee0:	7802      	ldrb	r2, [r0, #0]
 8005ee2:	460e      	mov	r6, r1
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	7809      	ldrb	r1, [r1, #0]
 8005eea:	b38a      	cbz	r2, 8005f50 <strstr+0x74>
 8005eec:	b1a1      	cbz	r1, 8005f18 <strstr+0x3c>
 8005eee:	4684      	mov	ip, r0
 8005ef0:	1c74      	adds	r4, r6, #1
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	2701      	movs	r7, #1
 8005ef6:	e001      	b.n	8005efc <strstr+0x20>
 8005ef8:	b168      	cbz	r0, 8005f16 <strstr+0x3a>
 8005efa:	461c      	mov	r4, r3
 8005efc:	4290      	cmp	r0, r2
 8005efe:	bf14      	ite	ne
 8005f00:	2700      	movne	r7, #0
 8005f02:	f007 0701 	andeq.w	r7, r7, #1
 8005f06:	4623      	mov	r3, r4
 8005f08:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005f0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f10:	2a00      	cmp	r2, #0
 8005f12:	d1f1      	bne.n	8005ef8 <strstr+0x1c>
 8005f14:	b9f0      	cbnz	r0, 8005f54 <strstr+0x78>
 8005f16:	b11f      	cbz	r7, 8005f20 <strstr+0x44>
 8005f18:	4628      	mov	r0, r5
 8005f1a:	b005      	add	sp, #20
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f20:	1c68      	adds	r0, r5, #1
 8005f22:	f003 f8a3 	bl	800906c <strchr>
 8005f26:	4607      	mov	r7, r0
 8005f28:	b1a0      	cbz	r0, 8005f54 <strstr+0x78>
 8005f2a:	1ba4      	subs	r4, r4, r6
 8005f2c:	2c01      	cmp	r4, #1
 8005f2e:	d016      	beq.n	8005f5e <strstr+0x82>
 8005f30:	4425      	add	r5, r4
 8005f32:	4285      	cmp	r5, r0
 8005f34:	bf2c      	ite	cs
 8005f36:	eba5 0900 	subcs.w	r9, r5, r0
 8005f3a:	f04f 0901 	movcc.w	r9, #1
 8005f3e:	2c1f      	cmp	r4, #31
 8005f40:	d90f      	bls.n	8005f62 <strstr+0x86>
 8005f42:	4623      	mov	r3, r4
 8005f44:	4632      	mov	r2, r6
 8005f46:	4649      	mov	r1, r9
 8005f48:	f7ff fecc 	bl	8005ce4 <two_way_long_needle>
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	e7e3      	b.n	8005f18 <strstr+0x3c>
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d0e1      	beq.n	8005f18 <strstr+0x3c>
 8005f54:	2500      	movs	r5, #0
 8005f56:	4628      	mov	r0, r5
 8005f58:	b005      	add	sp, #20
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	4605      	mov	r5, r0
 8005f60:	e7da      	b.n	8005f18 <strstr+0x3c>
 8005f62:	aa03      	add	r2, sp, #12
 8005f64:	4621      	mov	r1, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff fe62 	bl	8005c30 <critical_factorization>
 8005f6c:	9903      	ldr	r1, [sp, #12]
 8005f6e:	4680      	mov	r8, r0
 8005f70:	4602      	mov	r2, r0
 8005f72:	4431      	add	r1, r6
 8005f74:	4630      	mov	r0, r6
 8005f76:	f002 fd3b 	bl	80089f0 <memcmp>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d14e      	bne.n	800601c <strstr+0x140>
 8005f7e:	f108 33ff 	add.w	r3, r8, #4294967295
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	18f3      	adds	r3, r6, r3
 8005f86:	4682      	mov	sl, r0
 8005f88:	4605      	mov	r5, r0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	46b3      	mov	fp, r6
 8005f90:	1966      	adds	r6, r4, r5
 8005f92:	1a32      	subs	r2, r6, r0
 8005f94:	2100      	movs	r1, #0
 8005f96:	4438      	add	r0, r7
 8005f98:	f7fa fa4a 	bl	8000430 <memchr>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1d9      	bne.n	8005f54 <strstr+0x78>
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	d0d7      	beq.n	8005f54 <strstr+0x78>
 8005fa4:	45d0      	cmp	r8, sl
 8005fa6:	4643      	mov	r3, r8
 8005fa8:	bf38      	it	cc
 8005faa:	4653      	movcc	r3, sl
 8005fac:	429c      	cmp	r4, r3
 8005fae:	d912      	bls.n	8005fd6 <strstr+0xfa>
 8005fb0:	195a      	adds	r2, r3, r5
 8005fb2:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8005fb6:	5cb8      	ldrb	r0, [r7, r2]
 8005fb8:	4281      	cmp	r1, r0
 8005fba:	443a      	add	r2, r7
 8005fbc:	eb0b 0c03 	add.w	ip, fp, r3
 8005fc0:	d006      	beq.n	8005fd0 <strstr+0xf4>
 8005fc2:	e072      	b.n	80060aa <strstr+0x1ce>
 8005fc4:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8005fc8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005fcc:	4288      	cmp	r0, r1
 8005fce:	d16c      	bne.n	80060aa <strstr+0x1ce>
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	429c      	cmp	r4, r3
 8005fd4:	d1f6      	bne.n	8005fc4 <strstr+0xe8>
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	45d0      	cmp	r8, sl
 8005fda:	4619      	mov	r1, r3
 8005fdc:	d977      	bls.n	80060ce <strstr+0x1f2>
 8005fde:	18eb      	adds	r3, r5, r3
 8005fe0:	9a00      	ldr	r2, [sp, #0]
 8005fe2:	5cf8      	ldrb	r0, [r7, r3]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	4282      	cmp	r2, r0
 8005fe8:	443b      	add	r3, r7
 8005fea:	d170      	bne.n	80060ce <strstr+0x1f2>
 8005fec:	9800      	ldr	r0, [sp, #0]
 8005fee:	f10a 39ff 	add.w	r9, sl, #4294967295
 8005ff2:	e006      	b.n	8006002 <strstr+0x126>
 8005ff4:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
 8005ff8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8005ffc:	45e6      	cmp	lr, ip
 8005ffe:	d103      	bne.n	8006008 <strstr+0x12c>
 8006000:	4611      	mov	r1, r2
 8006002:	1e4a      	subs	r2, r1, #1
 8006004:	454a      	cmp	r2, r9
 8006006:	d1f5      	bne.n	8005ff4 <strstr+0x118>
 8006008:	f10a 0a01 	add.w	sl, sl, #1
 800600c:	458a      	cmp	sl, r1
 800600e:	d84a      	bhi.n	80060a6 <strstr+0x1ca>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	4630      	mov	r0, r6
 8006014:	441d      	add	r5, r3
 8006016:	eba4 0a03 	sub.w	sl, r4, r3
 800601a:	e7b9      	b.n	8005f90 <strstr+0xb4>
 800601c:	eba4 0308 	sub.w	r3, r4, r8
 8006020:	4543      	cmp	r3, r8
 8006022:	bf38      	it	cc
 8006024:	4643      	movcc	r3, r8
 8006026:	3301      	adds	r3, #1
 8006028:	f108 3aff 	add.w	sl, r8, #4294967295
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	eb06 030a 	add.w	r3, r6, sl
 8006032:	4648      	mov	r0, r9
 8006034:	2500      	movs	r5, #0
 8006036:	46b3      	mov	fp, r6
 8006038:	4699      	mov	r9, r3
 800603a:	1966      	adds	r6, r4, r5
 800603c:	1a32      	subs	r2, r6, r0
 800603e:	2100      	movs	r1, #0
 8006040:	4438      	add	r0, r7
 8006042:	f7fa f9f5 	bl	8000430 <memchr>
 8006046:	2800      	cmp	r0, #0
 8006048:	d184      	bne.n	8005f54 <strstr+0x78>
 800604a:	2e00      	cmp	r6, #0
 800604c:	d082      	beq.n	8005f54 <strstr+0x78>
 800604e:	4544      	cmp	r4, r8
 8006050:	d914      	bls.n	800607c <strstr+0x1a0>
 8006052:	eb08 0205 	add.w	r2, r8, r5
 8006056:	f81b 3008 	ldrb.w	r3, [fp, r8]
 800605a:	5cb8      	ldrb	r0, [r7, r2]
 800605c:	4298      	cmp	r0, r3
 800605e:	443a      	add	r2, r7
 8006060:	eb0b 0108 	add.w	r1, fp, r8
 8006064:	4643      	mov	r3, r8
 8006066:	d006      	beq.n	8006076 <strstr+0x19a>
 8006068:	e027      	b.n	80060ba <strstr+0x1de>
 800606a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800606e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006072:	4584      	cmp	ip, r0
 8006074:	d121      	bne.n	80060ba <strstr+0x1de>
 8006076:	3301      	adds	r3, #1
 8006078:	429c      	cmp	r4, r3
 800607a:	d1f6      	bne.n	800606a <strstr+0x18e>
 800607c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006080:	d011      	beq.n	80060a6 <strstr+0x1ca>
 8006082:	eb05 030a 	add.w	r3, r5, sl
 8006086:	f899 2000 	ldrb.w	r2, [r9]
 800608a:	5cf9      	ldrb	r1, [r7, r3]
 800608c:	4291      	cmp	r1, r2
 800608e:	443b      	add	r3, r7
 8006090:	d119      	bne.n	80060c6 <strstr+0x1ea>
 8006092:	464a      	mov	r2, r9
 8006094:	e005      	b.n	80060a2 <strstr+0x1c6>
 8006096:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800609a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800609e:	4288      	cmp	r0, r1
 80060a0:	d111      	bne.n	80060c6 <strstr+0x1ea>
 80060a2:	455a      	cmp	r2, fp
 80060a4:	d1f7      	bne.n	8006096 <strstr+0x1ba>
 80060a6:	443d      	add	r5, r7
 80060a8:	e736      	b.n	8005f18 <strstr+0x3c>
 80060aa:	f1c8 0201 	rsb	r2, r8, #1
 80060ae:	4415      	add	r5, r2
 80060b0:	441d      	add	r5, r3
 80060b2:	f04f 0a00 	mov.w	sl, #0
 80060b6:	4630      	mov	r0, r6
 80060b8:	e76a      	b.n	8005f90 <strstr+0xb4>
 80060ba:	f1c8 0201 	rsb	r2, r8, #1
 80060be:	4415      	add	r5, r2
 80060c0:	441d      	add	r5, r3
 80060c2:	4630      	mov	r0, r6
 80060c4:	e7b9      	b.n	800603a <strstr+0x15e>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	4630      	mov	r0, r6
 80060ca:	441d      	add	r5, r3
 80060cc:	e7b5      	b.n	800603a <strstr+0x15e>
 80060ce:	4641      	mov	r1, r8
 80060d0:	e79a      	b.n	8006008 <strstr+0x12c>
 80060d2:	bf00      	nop

080060d4 <_svfprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b0c3      	sub	sp, #268	; 0x10c
 80060da:	460c      	mov	r4, r1
 80060dc:	910c      	str	r1, [sp, #48]	; 0x30
 80060de:	4691      	mov	r9, r2
 80060e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060e2:	900d      	str	r0, [sp, #52]	; 0x34
 80060e4:	f002 f9d2 	bl	800848c <_localeconv_r>
 80060e8:	6803      	ldr	r3, [r0, #0]
 80060ea:	931a      	str	r3, [sp, #104]	; 0x68
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fa fa07 	bl	8000500 <strlen>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	9019      	str	r0, [sp, #100]	; 0x64
 80060f6:	061d      	lsls	r5, r3, #24
 80060f8:	d503      	bpl.n	8006102 <_svfprintf_r+0x2e>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8739 	beq.w	8006f74 <_svfprintf_r+0xea0>
 8006102:	2300      	movs	r3, #0
 8006104:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 8006108:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800610c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8006110:	9313      	str	r3, [sp, #76]	; 0x4c
 8006112:	9315      	str	r3, [sp, #84]	; 0x54
 8006114:	9314      	str	r3, [sp, #80]	; 0x50
 8006116:	9318      	str	r3, [sp, #96]	; 0x60
 8006118:	931b      	str	r3, [sp, #108]	; 0x6c
 800611a:	930a      	str	r3, [sp, #40]	; 0x28
 800611c:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8006120:	46c2      	mov	sl, r8
 8006122:	46cb      	mov	fp, r9
 8006124:	f89b 3000 	ldrb.w	r3, [fp]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8099 	beq.w	8006260 <_svfprintf_r+0x18c>
 800612e:	2b25      	cmp	r3, #37	; 0x25
 8006130:	465c      	mov	r4, fp
 8006132:	d102      	bne.n	800613a <_svfprintf_r+0x66>
 8006134:	e01c      	b.n	8006170 <_svfprintf_r+0x9c>
 8006136:	2b25      	cmp	r3, #37	; 0x25
 8006138:	d003      	beq.n	8006142 <_svfprintf_r+0x6e>
 800613a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f9      	bne.n	8006136 <_svfprintf_r+0x62>
 8006142:	eba4 050b 	sub.w	r5, r4, fp
 8006146:	b185      	cbz	r5, 800616a <_svfprintf_r+0x96>
 8006148:	e9dd 3226 	ldrd	r3, r2, [sp, #152]	; 0x98
 800614c:	3301      	adds	r3, #1
 800614e:	442a      	add	r2, r5
 8006150:	2b07      	cmp	r3, #7
 8006152:	f8ca b000 	str.w	fp, [sl]
 8006156:	f8ca 5004 	str.w	r5, [sl, #4]
 800615a:	e9cd 3226 	strd	r3, r2, [sp, #152]	; 0x98
 800615e:	dc77      	bgt.n	8006250 <_svfprintf_r+0x17c>
 8006160:	f10a 0a08 	add.w	sl, sl, #8
 8006164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006166:	442b      	add	r3, r5
 8006168:	930a      	str	r3, [sp, #40]	; 0x28
 800616a:	7823      	ldrb	r3, [r4, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d077      	beq.n	8006260 <_svfprintf_r+0x18c>
 8006170:	2300      	movs	r3, #0
 8006172:	461a      	mov	r2, r3
 8006174:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8006178:	4619      	mov	r1, r3
 800617a:	930b      	str	r3, [sp, #44]	; 0x2c
 800617c:	4699      	mov	r9, r3
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	7863      	ldrb	r3, [r4, #1]
 8006184:	9009      	str	r0, [sp, #36]	; 0x24
 8006186:	f104 0b01 	add.w	fp, r4, #1
 800618a:	f10b 0b01 	add.w	fp, fp, #1
 800618e:	461f      	mov	r7, r3
 8006190:	f1a7 0320 	sub.w	r3, r7, #32
 8006194:	2b58      	cmp	r3, #88	; 0x58
 8006196:	f200 8374 	bhi.w	8006882 <_svfprintf_r+0x7ae>
 800619a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800619e:	02d2      	.short	0x02d2
 80061a0:	03720372 	.word	0x03720372
 80061a4:	037202cd 	.word	0x037202cd
 80061a8:	03720372 	.word	0x03720372
 80061ac:	03720372 	.word	0x03720372
 80061b0:	02c10372 	.word	0x02c10372
 80061b4:	037202bc 	.word	0x037202bc
 80061b8:	034c0366 	.word	0x034c0366
 80061bc:	036b0372 	.word	0x036b0372
 80061c0:	00b700b7 	.word	0x00b700b7
 80061c4:	00b700b7 	.word	0x00b700b7
 80061c8:	00b700b7 	.word	0x00b700b7
 80061cc:	00b700b7 	.word	0x00b700b7
 80061d0:	037200b7 	.word	0x037200b7
 80061d4:	03720372 	.word	0x03720372
 80061d8:	03720372 	.word	0x03720372
 80061dc:	03720372 	.word	0x03720372
 80061e0:	03720372 	.word	0x03720372
 80061e4:	03340372 	.word	0x03340372
 80061e8:	037202f6 	.word	0x037202f6
 80061ec:	037202f6 	.word	0x037202f6
 80061f0:	03720372 	.word	0x03720372
 80061f4:	02f10372 	.word	0x02f10372
 80061f8:	03720372 	.word	0x03720372
 80061fc:	037200a6 	.word	0x037200a6
 8006200:	03720372 	.word	0x03720372
 8006204:	03720372 	.word	0x03720372
 8006208:	03720075 	.word	0x03720075
 800620c:	029a0372 	.word	0x029a0372
 8006210:	03720372 	.word	0x03720372
 8006214:	03720372 	.word	0x03720372
 8006218:	03720372 	.word	0x03720372
 800621c:	03720372 	.word	0x03720372
 8006220:	03720372 	.word	0x03720372
 8006224:	012d017b 	.word	0x012d017b
 8006228:	02f602f6 	.word	0x02f602f6
 800622c:	012802f6 	.word	0x012802f6
 8006230:	0372012d 	.word	0x0372012d
 8006234:	011b0372 	.word	0x011b0372
 8006238:	01040372 	.word	0x01040372
 800623c:	00cb00a8 	.word	0x00cb00a8
 8006240:	037200c6 	.word	0x037200c6
 8006244:	037200db 	.word	0x037200db
 8006248:	03720077 	.word	0x03720077
 800624c:	02da0372 	.word	0x02da0372
 8006250:	aa25      	add	r2, sp, #148	; 0x94
 8006252:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006256:	f002 ff7d 	bl	8009154 <__ssprint_r>
 800625a:	b940      	cbnz	r0, 800626e <_svfprintf_r+0x19a>
 800625c:	46c2      	mov	sl, r8
 800625e:	e781      	b.n	8006164 <_svfprintf_r+0x90>
 8006260:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006262:	b123      	cbz	r3, 800626e <_svfprintf_r+0x19a>
 8006264:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006268:	aa25      	add	r2, sp, #148	; 0x94
 800626a:	f002 ff73 	bl	8009154 <__ssprint_r>
 800626e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006270:	899b      	ldrh	r3, [r3, #12]
 8006272:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006278:	bf18      	it	ne
 800627a:	f04f 33ff 	movne.w	r3, #4294967295
 800627e:	930a      	str	r3, [sp, #40]	; 0x28
 8006280:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006282:	b043      	add	sp, #268	; 0x10c
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	f049 0910 	orr.w	r9, r9, #16
 800628c:	f019 0f20 	tst.w	r9, #32
 8006290:	f000 853b 	beq.w	8006d0a <_svfprintf_r+0xc36>
 8006294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006296:	3507      	adds	r5, #7
 8006298:	f025 0307 	bic.w	r3, r5, #7
 800629c:	f103 0208 	add.w	r2, r3, #8
 80062a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80062a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80062a6:	2301      	movs	r3, #1
 80062a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062aa:	2600      	movs	r6, #0
 80062ac:	3201      	adds	r2, #1
 80062ae:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 80062b2:	f000 843c 	beq.w	8006b2e <_svfprintf_r+0xa5a>
 80062b6:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 80062ba:	9207      	str	r2, [sp, #28]
 80062bc:	ea54 0205 	orrs.w	r2, r4, r5
 80062c0:	f040 80be 	bne.w	8006440 <_svfprintf_r+0x36c>
 80062c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	f040 86cf 	bne.w	800706a <_svfprintf_r+0xf96>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 84eb 	bne.w	8006ca8 <_svfprintf_r+0xbd4>
 80062d2:	f019 0301 	ands.w	r3, r9, #1
 80062d6:	930e      	str	r3, [sp, #56]	; 0x38
 80062d8:	f000 855d 	beq.w	8006d96 <_svfprintf_r+0xcc2>
 80062dc:	ab42      	add	r3, sp, #264	; 0x108
 80062de:	461a      	mov	r2, r3
 80062e0:	2330      	movs	r3, #48	; 0x30
 80062e2:	f802 3d41 	strb.w	r3, [r2, #-65]!
 80062e6:	9211      	str	r2, [sp, #68]	; 0x44
 80062e8:	e0cb      	b.n	8006482 <_svfprintf_r+0x3ae>
 80062ea:	f049 0910 	orr.w	r9, r9, #16
 80062ee:	f019 0320 	ands.w	r3, r9, #32
 80062f2:	f000 8515 	beq.w	8006d20 <_svfprintf_r+0xc4c>
 80062f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062f8:	3507      	adds	r5, #7
 80062fa:	f025 0307 	bic.w	r3, r5, #7
 80062fe:	f103 0208 	add.w	r2, r3, #8
 8006302:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006306:	920f      	str	r2, [sp, #60]	; 0x3c
 8006308:	2300      	movs	r3, #0
 800630a:	e7cd      	b.n	80062a8 <_svfprintf_r+0x1d4>
 800630c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006310:	2000      	movs	r0, #0
 8006312:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8006316:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800631a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800631e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006322:	2b09      	cmp	r3, #9
 8006324:	d9f5      	bls.n	8006312 <_svfprintf_r+0x23e>
 8006326:	900b      	str	r0, [sp, #44]	; 0x2c
 8006328:	e732      	b.n	8006190 <_svfprintf_r+0xbc>
 800632a:	f049 0920 	orr.w	r9, r9, #32
 800632e:	f89b 3000 	ldrb.w	r3, [fp]
 8006332:	e72a      	b.n	800618a <_svfprintf_r+0xb6>
 8006334:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006336:	4ba2      	ldr	r3, [pc, #648]	; (80065c0 <_svfprintf_r+0x4ec>)
 8006338:	6814      	ldr	r4, [r2, #0]
 800633a:	9318      	str	r3, [sp, #96]	; 0x60
 800633c:	3204      	adds	r2, #4
 800633e:	f647 0330 	movw	r3, #30768	; 0x7830
 8006342:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 8006346:	f049 0902 	orr.w	r9, r9, #2
 800634a:	920f      	str	r2, [sp, #60]	; 0x3c
 800634c:	2500      	movs	r5, #0
 800634e:	2302      	movs	r3, #2
 8006350:	2778      	movs	r7, #120	; 0x78
 8006352:	e7a9      	b.n	80062a8 <_svfprintf_r+0x1d4>
 8006354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	9311      	str	r3, [sp, #68]	; 0x44
 800635a:	2400      	movs	r4, #0
 800635c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
 8006360:	1d15      	adds	r5, r2, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8630 	beq.w	8006fc8 <_svfprintf_r+0xef4>
 8006368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636a:	1c53      	adds	r3, r2, #1
 800636c:	f000 86d8 	beq.w	8007120 <_svfprintf_r+0x104c>
 8006370:	4621      	mov	r1, r4
 8006372:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006374:	f7fa f85c 	bl	8000430 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	f000 87b9 	beq.w	80072f0 <_svfprintf_r+0x121c>
 800637e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006380:	9409      	str	r4, [sp, #36]	; 0x24
 8006382:	1ac3      	subs	r3, r0, r3
 8006384:	930e      	str	r3, [sp, #56]	; 0x38
 8006386:	950f      	str	r5, [sp, #60]	; 0x3c
 8006388:	f8cd 901c 	str.w	r9, [sp, #28]
 800638c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006390:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8006394:	9308      	str	r3, [sp, #32]
 8006396:	9412      	str	r4, [sp, #72]	; 0x48
 8006398:	2e00      	cmp	r6, #0
 800639a:	f000 808d 	beq.w	80064b8 <_svfprintf_r+0x3e4>
 800639e:	9b08      	ldr	r3, [sp, #32]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	e088      	b.n	80064b8 <_svfprintf_r+0x3e4>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	f041 80d7 	bne.w	800755a <_svfprintf_r+0x1486>
 80063ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ae:	f019 0f20 	tst.w	r9, #32
 80063b2:	f852 3b04 	ldr.w	r3, [r2], #4
 80063b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80063b8:	f040 852f 	bne.w	8006e1a <_svfprintf_r+0xd46>
 80063bc:	f019 0f10 	tst.w	r9, #16
 80063c0:	f040 8629 	bne.w	8007016 <_svfprintf_r+0xf42>
 80063c4:	f019 0f40 	tst.w	r9, #64	; 0x40
 80063c8:	f000 8625 	beq.w	8007016 <_svfprintf_r+0xf42>
 80063cc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	e6a7      	b.n	8006124 <_svfprintf_r+0x50>
 80063d4:	f89b 3000 	ldrb.w	r3, [fp]
 80063d8:	2b6c      	cmp	r3, #108	; 0x6c
 80063da:	bf03      	ittte	eq
 80063dc:	f89b 3001 	ldrbeq.w	r3, [fp, #1]
 80063e0:	f049 0920 	orreq.w	r9, r9, #32
 80063e4:	f10b 0b01 	addeq.w	fp, fp, #1
 80063e8:	f049 0910 	orrne.w	r9, r9, #16
 80063ec:	e6cd      	b.n	800618a <_svfprintf_r+0xb6>
 80063ee:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80063f2:	f89b 3000 	ldrb.w	r3, [fp]
 80063f6:	e6c8      	b.n	800618a <_svfprintf_r+0xb6>
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	f041 809a 	bne.w	8007532 <_svfprintf_r+0x145e>
 80063fe:	f019 0f20 	tst.w	r9, #32
 8006402:	f000 8209 	beq.w	8006818 <_svfprintf_r+0x744>
 8006406:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006408:	3507      	adds	r5, #7
 800640a:	f025 0307 	bic.w	r3, r5, #7
 800640e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006412:	f103 0208 	add.w	r2, r3, #8
 8006416:	920f      	str	r2, [sp, #60]	; 0x3c
 8006418:	2c00      	cmp	r4, #0
 800641a:	f175 0300 	sbcs.w	r3, r5, #0
 800641e:	f2c0 84c6 	blt.w	8006dae <_svfprintf_r+0xcda>
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8006428:	3301      	adds	r3, #1
 800642a:	f000 84cb 	beq.w	8006dc4 <_svfprintf_r+0xcf0>
 800642e:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8006432:	9207      	str	r2, [sp, #28]
 8006434:	ea54 0205 	orrs.w	r2, r4, r5
 8006438:	f04f 0301 	mov.w	r3, #1
 800643c:	f43f af42 	beq.w	80062c4 <_svfprintf_r+0x1f0>
 8006440:	2b01      	cmp	r3, #1
 8006442:	f000 8379 	beq.w	8006b38 <_svfprintf_r+0xa64>
 8006446:	2b02      	cmp	r3, #2
 8006448:	f000 8399 	beq.w	8006b7e <_svfprintf_r+0xaaa>
 800644c:	4641      	mov	r1, r8
 800644e:	e000      	b.n	8006452 <_svfprintf_r+0x37e>
 8006450:	4611      	mov	r1, r2
 8006452:	08e2      	lsrs	r2, r4, #3
 8006454:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8006458:	08e8      	lsrs	r0, r5, #3
 800645a:	f004 0307 	and.w	r3, r4, #7
 800645e:	4605      	mov	r5, r0
 8006460:	4614      	mov	r4, r2
 8006462:	3330      	adds	r3, #48	; 0x30
 8006464:	ea54 0005 	orrs.w	r0, r4, r5
 8006468:	f801 3c01 	strb.w	r3, [r1, #-1]
 800646c:	f101 32ff 	add.w	r2, r1, #4294967295
 8006470:	d1ee      	bne.n	8006450 <_svfprintf_r+0x37c>
 8006472:	9807      	ldr	r0, [sp, #28]
 8006474:	9211      	str	r2, [sp, #68]	; 0x44
 8006476:	07c0      	lsls	r0, r0, #31
 8006478:	f100 8470 	bmi.w	8006d5c <_svfprintf_r+0xc88>
 800647c:	eba8 0302 	sub.w	r3, r8, r2
 8006480:	930e      	str	r3, [sp, #56]	; 0x38
 8006482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006486:	4293      	cmp	r3, r2
 8006488:	bfb8      	it	lt
 800648a:	4613      	movlt	r3, r2
 800648c:	9308      	str	r3, [sp, #32]
 800648e:	2300      	movs	r3, #0
 8006490:	9312      	str	r3, [sp, #72]	; 0x48
 8006492:	e781      	b.n	8006398 <_svfprintf_r+0x2c4>
 8006494:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006496:	2300      	movs	r3, #0
 8006498:	680a      	ldr	r2, [r1, #0]
 800649a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800649e:	461e      	mov	r6, r3
 80064a0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80064a4:	2301      	movs	r3, #1
 80064a6:	1d0a      	adds	r2, r1, #4
 80064a8:	e9cd 9307 	strd	r9, r3, [sp, #28]
 80064ac:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 80064b0:	ab28      	add	r3, sp, #160	; 0xa0
 80064b2:	9609      	str	r6, [sp, #36]	; 0x24
 80064b4:	9612      	str	r6, [sp, #72]	; 0x48
 80064b6:	9311      	str	r3, [sp, #68]	; 0x44
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	f013 0302 	ands.w	r3, r3, #2
 80064be:	9310      	str	r3, [sp, #64]	; 0x40
 80064c0:	d002      	beq.n	80064c8 <_svfprintf_r+0x3f4>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	3302      	adds	r3, #2
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	9b07      	ldr	r3, [sp, #28]
 80064ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80064cc:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 80064d0:	d13f      	bne.n	8006552 <_svfprintf_r+0x47e>
 80064d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d4:	9a08      	ldr	r2, [sp, #32]
 80064d6:	1a9d      	subs	r5, r3, r2
 80064d8:	2d00      	cmp	r5, #0
 80064da:	dd3a      	ble.n	8006552 <_svfprintf_r+0x47e>
 80064dc:	2d10      	cmp	r5, #16
 80064de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064e0:	dd29      	ble.n	8006536 <_svfprintf_r+0x462>
 80064e2:	4652      	mov	r2, sl
 80064e4:	4621      	mov	r1, r4
 80064e6:	46aa      	mov	sl, r5
 80064e8:	2610      	movs	r6, #16
 80064ea:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
 80064ee:	e006      	b.n	80064fe <_svfprintf_r+0x42a>
 80064f0:	f1aa 0a10 	sub.w	sl, sl, #16
 80064f4:	f1ba 0f10 	cmp.w	sl, #16
 80064f8:	f102 0208 	add.w	r2, r2, #8
 80064fc:	dd18      	ble.n	8006530 <_svfprintf_r+0x45c>
 80064fe:	3301      	adds	r3, #1
 8006500:	4830      	ldr	r0, [pc, #192]	; (80065c4 <_svfprintf_r+0x4f0>)
 8006502:	3110      	adds	r1, #16
 8006504:	2b07      	cmp	r3, #7
 8006506:	e9cd 3126 	strd	r3, r1, [sp, #152]	; 0x98
 800650a:	e9c2 0600 	strd	r0, r6, [r2]
 800650e:	ddef      	ble.n	80064f0 <_svfprintf_r+0x41c>
 8006510:	aa25      	add	r2, sp, #148	; 0x94
 8006512:	4629      	mov	r1, r5
 8006514:	4620      	mov	r0, r4
 8006516:	f002 fe1d 	bl	8009154 <__ssprint_r>
 800651a:	2800      	cmp	r0, #0
 800651c:	f47f aea7 	bne.w	800626e <_svfprintf_r+0x19a>
 8006520:	f1aa 0a10 	sub.w	sl, sl, #16
 8006524:	f1ba 0f10 	cmp.w	sl, #16
 8006528:	e9dd 3126 	ldrd	r3, r1, [sp, #152]	; 0x98
 800652c:	4642      	mov	r2, r8
 800652e:	dce6      	bgt.n	80064fe <_svfprintf_r+0x42a>
 8006530:	4655      	mov	r5, sl
 8006532:	460c      	mov	r4, r1
 8006534:	4692      	mov	sl, r2
 8006536:	3301      	adds	r3, #1
 8006538:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <_svfprintf_r+0x4f0>)
 800653a:	442c      	add	r4, r5
 800653c:	2b07      	cmp	r3, #7
 800653e:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8006542:	e9ca 2500 	strd	r2, r5, [sl]
 8006546:	f300 856a 	bgt.w	800701e <_svfprintf_r+0xf4a>
 800654a:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 800654e:	f10a 0a08 	add.w	sl, sl, #8
 8006552:	b176      	cbz	r6, 8006572 <_svfprintf_r+0x49e>
 8006554:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006556:	3301      	adds	r3, #1
 8006558:	3401      	adds	r4, #1
 800655a:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 800655e:	2201      	movs	r2, #1
 8006560:	2b07      	cmp	r3, #7
 8006562:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8006566:	e9ca 1200 	strd	r1, r2, [sl]
 800656a:	f300 82f2 	bgt.w	8006b52 <_svfprintf_r+0xa7e>
 800656e:	f10a 0a08 	add.w	sl, sl, #8
 8006572:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006574:	b16b      	cbz	r3, 8006592 <_svfprintf_r+0x4be>
 8006576:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006578:	3301      	adds	r3, #1
 800657a:	3402      	adds	r4, #2
 800657c:	a91e      	add	r1, sp, #120	; 0x78
 800657e:	2202      	movs	r2, #2
 8006580:	2b07      	cmp	r3, #7
 8006582:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 8006586:	e9ca 1200 	strd	r1, r2, [sl]
 800658a:	f300 82ed 	bgt.w	8006b68 <_svfprintf_r+0xa94>
 800658e:	f10a 0a08 	add.w	sl, sl, #8
 8006592:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006596:	f000 81e8 	beq.w	800696a <_svfprintf_r+0x896>
 800659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800659e:	1a9d      	subs	r5, r3, r2
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	dd3e      	ble.n	8006622 <_svfprintf_r+0x54e>
 80065a4:	2d10      	cmp	r5, #16
 80065a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065a8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 80065c8 <_svfprintf_r+0x4f4>
 80065ac:	dd2e      	ble.n	800660c <_svfprintf_r+0x538>
 80065ae:	4648      	mov	r0, r9
 80065b0:	4653      	mov	r3, sl
 80065b2:	4621      	mov	r1, r4
 80065b4:	46b9      	mov	r9, r7
 80065b6:	2610      	movs	r6, #16
 80065b8:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 80065bc:	4607      	mov	r7, r0
 80065be:	e00a      	b.n	80065d6 <_svfprintf_r+0x502>
 80065c0:	0800a4d0 	.word	0x0800a4d0
 80065c4:	0800a4ec 	.word	0x0800a4ec
 80065c8:	0800a4fc 	.word	0x0800a4fc
 80065cc:	3d10      	subs	r5, #16
 80065ce:	2d10      	cmp	r5, #16
 80065d0:	f103 0308 	add.w	r3, r3, #8
 80065d4:	dd15      	ble.n	8006602 <_svfprintf_r+0x52e>
 80065d6:	3201      	adds	r2, #1
 80065d8:	3110      	adds	r1, #16
 80065da:	2a07      	cmp	r2, #7
 80065dc:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 80065e0:	e9c3 7600 	strd	r7, r6, [r3]
 80065e4:	ddf2      	ble.n	80065cc <_svfprintf_r+0x4f8>
 80065e6:	aa25      	add	r2, sp, #148	; 0x94
 80065e8:	4651      	mov	r1, sl
 80065ea:	4620      	mov	r0, r4
 80065ec:	f002 fdb2 	bl	8009154 <__ssprint_r>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f47f ae3c 	bne.w	800626e <_svfprintf_r+0x19a>
 80065f6:	3d10      	subs	r5, #16
 80065f8:	2d10      	cmp	r5, #16
 80065fa:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80065fe:	4643      	mov	r3, r8
 8006600:	dce9      	bgt.n	80065d6 <_svfprintf_r+0x502>
 8006602:	469a      	mov	sl, r3
 8006604:	463b      	mov	r3, r7
 8006606:	460c      	mov	r4, r1
 8006608:	464f      	mov	r7, r9
 800660a:	4699      	mov	r9, r3
 800660c:	3201      	adds	r2, #1
 800660e:	442c      	add	r4, r5
 8006610:	2a07      	cmp	r2, #7
 8006612:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8006616:	e9ca 9500 	strd	r9, r5, [sl]
 800661a:	f300 82c7 	bgt.w	8006bac <_svfprintf_r+0xad8>
 800661e:	f10a 0a08 	add.w	sl, sl, #8
 8006622:	9b07      	ldr	r3, [sp, #28]
 8006624:	05de      	lsls	r6, r3, #23
 8006626:	f100 8142 	bmi.w	80068ae <_svfprintf_r+0x7da>
 800662a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800662e:	f8ca 2000 	str.w	r2, [sl]
 8006632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006634:	f8ca 2004 	str.w	r2, [sl, #4]
 8006638:	3301      	adds	r3, #1
 800663a:	4414      	add	r4, r2
 800663c:	2b07      	cmp	r3, #7
 800663e:	9427      	str	r4, [sp, #156]	; 0x9c
 8006640:	9326      	str	r3, [sp, #152]	; 0x98
 8006642:	f300 821a 	bgt.w	8006a7a <_svfprintf_r+0x9a6>
 8006646:	f10a 0a08 	add.w	sl, sl, #8
 800664a:	9b07      	ldr	r3, [sp, #28]
 800664c:	075b      	lsls	r3, r3, #29
 800664e:	d531      	bpl.n	80066b4 <_svfprintf_r+0x5e0>
 8006650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006652:	9a08      	ldr	r2, [sp, #32]
 8006654:	1a9d      	subs	r5, r3, r2
 8006656:	2d00      	cmp	r5, #0
 8006658:	dd2c      	ble.n	80066b4 <_svfprintf_r+0x5e0>
 800665a:	2d10      	cmp	r5, #16
 800665c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800665e:	dd1f      	ble.n	80066a0 <_svfprintf_r+0x5cc>
 8006660:	2610      	movs	r6, #16
 8006662:	e9dd 970c 	ldrd	r9, r7, [sp, #48]	; 0x30
 8006666:	e004      	b.n	8006672 <_svfprintf_r+0x59e>
 8006668:	3d10      	subs	r5, #16
 800666a:	2d10      	cmp	r5, #16
 800666c:	f10a 0a08 	add.w	sl, sl, #8
 8006670:	dd16      	ble.n	80066a0 <_svfprintf_r+0x5cc>
 8006672:	3301      	adds	r3, #1
 8006674:	4ac7      	ldr	r2, [pc, #796]	; (8006994 <_svfprintf_r+0x8c0>)
 8006676:	3410      	adds	r4, #16
 8006678:	2b07      	cmp	r3, #7
 800667a:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 800667e:	e9ca 2600 	strd	r2, r6, [sl]
 8006682:	ddf1      	ble.n	8006668 <_svfprintf_r+0x594>
 8006684:	aa25      	add	r2, sp, #148	; 0x94
 8006686:	4649      	mov	r1, r9
 8006688:	4638      	mov	r0, r7
 800668a:	f002 fd63 	bl	8009154 <__ssprint_r>
 800668e:	2800      	cmp	r0, #0
 8006690:	f47f aded 	bne.w	800626e <_svfprintf_r+0x19a>
 8006694:	3d10      	subs	r5, #16
 8006696:	2d10      	cmp	r5, #16
 8006698:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 800669c:	46c2      	mov	sl, r8
 800669e:	dce8      	bgt.n	8006672 <_svfprintf_r+0x59e>
 80066a0:	3301      	adds	r3, #1
 80066a2:	4abc      	ldr	r2, [pc, #752]	; (8006994 <_svfprintf_r+0x8c0>)
 80066a4:	442c      	add	r4, r5
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 80066ac:	e9ca 2500 	strd	r2, r5, [sl]
 80066b0:	f300 8367 	bgt.w	8006d82 <_svfprintf_r+0xcae>
 80066b4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 80066b8:	9908      	ldr	r1, [sp, #32]
 80066ba:	428a      	cmp	r2, r1
 80066bc:	bfac      	ite	ge
 80066be:	189b      	addge	r3, r3, r2
 80066c0:	185b      	addlt	r3, r3, r1
 80066c2:	930a      	str	r3, [sp, #40]	; 0x28
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	f040 81a1 	bne.w	8006a0c <_svfprintf_r+0x938>
 80066ca:	2300      	movs	r3, #0
 80066cc:	9326      	str	r3, [sp, #152]	; 0x98
 80066ce:	46c2      	mov	sl, r8
 80066d0:	e528      	b.n	8006124 <_svfprintf_r+0x50>
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	f040 8731 	bne.w	800753a <_svfprintf_r+0x1466>
 80066d8:	4baf      	ldr	r3, [pc, #700]	; (8006998 <_svfprintf_r+0x8c4>)
 80066da:	9318      	str	r3, [sp, #96]	; 0x60
 80066dc:	f019 0f20 	tst.w	r9, #32
 80066e0:	d03f      	beq.n	8006762 <_svfprintf_r+0x68e>
 80066e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066e4:	3507      	adds	r5, #7
 80066e6:	f025 0307 	bic.w	r3, r5, #7
 80066ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80066ee:	f103 0208 	add.w	r2, r3, #8
 80066f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80066f4:	f019 0f01 	tst.w	r9, #1
 80066f8:	f000 80c1 	beq.w	800687e <_svfprintf_r+0x7aa>
 80066fc:	ea54 0305 	orrs.w	r3, r4, r5
 8006700:	f000 80bd 	beq.w	800687e <_svfprintf_r+0x7aa>
 8006704:	2330      	movs	r3, #48	; 0x30
 8006706:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800670a:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
 800670e:	f049 0902 	orr.w	r9, r9, #2
 8006712:	2302      	movs	r3, #2
 8006714:	e5c8      	b.n	80062a8 <_svfprintf_r+0x1d4>
 8006716:	f89b 3000 	ldrb.w	r3, [fp]
 800671a:	2201      	movs	r2, #1
 800671c:	212b      	movs	r1, #43	; 0x2b
 800671e:	e534      	b.n	800618a <_svfprintf_r+0xb6>
 8006720:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006722:	f89b 3000 	ldrb.w	r3, [fp]
 8006726:	6804      	ldr	r4, [r0, #0]
 8006728:	940b      	str	r4, [sp, #44]	; 0x2c
 800672a:	2c00      	cmp	r4, #0
 800672c:	f100 0004 	add.w	r0, r0, #4
 8006730:	f2c0 841c 	blt.w	8006f6c <_svfprintf_r+0xe98>
 8006734:	900f      	str	r0, [sp, #60]	; 0x3c
 8006736:	e528      	b.n	800618a <_svfprintf_r+0xb6>
 8006738:	f049 0901 	orr.w	r9, r9, #1
 800673c:	f89b 3000 	ldrb.w	r3, [fp]
 8006740:	e523      	b.n	800618a <_svfprintf_r+0xb6>
 8006742:	f89b 3000 	ldrb.w	r3, [fp]
 8006746:	2900      	cmp	r1, #0
 8006748:	f47f ad1f 	bne.w	800618a <_svfprintf_r+0xb6>
 800674c:	2201      	movs	r2, #1
 800674e:	2120      	movs	r1, #32
 8006750:	e51b      	b.n	800618a <_svfprintf_r+0xb6>
 8006752:	2a00      	cmp	r2, #0
 8006754:	f040 86e1 	bne.w	800751a <_svfprintf_r+0x1446>
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <_svfprintf_r+0x8c8>)
 800675a:	9318      	str	r3, [sp, #96]	; 0x60
 800675c:	f019 0f20 	tst.w	r9, #32
 8006760:	d1bf      	bne.n	80066e2 <_svfprintf_r+0x60e>
 8006762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006764:	f019 0f10 	tst.w	r9, #16
 8006768:	f853 4b04 	ldr.w	r4, [r3], #4
 800676c:	930f      	str	r3, [sp, #60]	; 0x3c
 800676e:	f040 8316 	bne.w	8006d9e <_svfprintf_r+0xcca>
 8006772:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006776:	f000 8312 	beq.w	8006d9e <_svfprintf_r+0xcca>
 800677a:	b2a4      	uxth	r4, r4
 800677c:	2500      	movs	r5, #0
 800677e:	e7b9      	b.n	80066f4 <_svfprintf_r+0x620>
 8006780:	f049 0908 	orr.w	r9, r9, #8
 8006784:	f89b 3000 	ldrb.w	r3, [fp]
 8006788:	e4ff      	b.n	800618a <_svfprintf_r+0xb6>
 800678a:	2a00      	cmp	r2, #0
 800678c:	f040 86d9 	bne.w	8007542 <_svfprintf_r+0x146e>
 8006790:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006792:	4b83      	ldr	r3, [pc, #524]	; (80069a0 <_svfprintf_r+0x8cc>)
 8006794:	3507      	adds	r5, #7
 8006796:	f025 0607 	bic.w	r6, r5, #7
 800679a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800679e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80067a2:	9114      	str	r1, [sp, #80]	; 0x50
 80067a4:	3608      	adds	r6, #8
 80067a6:	f04f 32ff 	mov.w	r2, #4294967295
 80067aa:	4621      	mov	r1, r4
 80067ac:	9015      	str	r0, [sp, #84]	; 0x54
 80067ae:	4605      	mov	r5, r0
 80067b0:	960f      	str	r6, [sp, #60]	; 0x3c
 80067b2:	f7fa fb69 	bl	8000e88 <__aeabi_dcmpun>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f040 833e 	bne.w	8006e38 <_svfprintf_r+0xd64>
 80067bc:	4628      	mov	r0, r5
 80067be:	4621      	mov	r1, r4
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295
 80067c4:	4b76      	ldr	r3, [pc, #472]	; (80069a0 <_svfprintf_r+0x8cc>)
 80067c6:	f7fa fb41 	bl	8000e4c <__aeabi_dcmple>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f040 8334 	bne.w	8006e38 <_svfprintf_r+0xd64>
 80067d0:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80067d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80067d8:	f7fa fb2e 	bl	8000e38 <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 853a 	bne.w	8007256 <_svfprintf_r+0x1182>
 80067e2:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 80067e6:	4a6f      	ldr	r2, [pc, #444]	; (80069a4 <_svfprintf_r+0x8d0>)
 80067e8:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <_svfprintf_r+0x8d4>)
 80067ea:	2103      	movs	r1, #3
 80067ec:	2000      	movs	r0, #0
 80067ee:	f029 0480 	bic.w	r4, r9, #128	; 0x80
 80067f2:	2f47      	cmp	r7, #71	; 0x47
 80067f4:	bfd8      	it	le
 80067f6:	461a      	movle	r2, r3
 80067f8:	e9cd 1008 	strd	r1, r0, [sp, #32]
 80067fc:	9407      	str	r4, [sp, #28]
 80067fe:	9211      	str	r2, [sp, #68]	; 0x44
 8006800:	910e      	str	r1, [sp, #56]	; 0x38
 8006802:	9012      	str	r0, [sp, #72]	; 0x48
 8006804:	e5c8      	b.n	8006398 <_svfprintf_r+0x2c4>
 8006806:	2a00      	cmp	r2, #0
 8006808:	f040 869f 	bne.w	800754a <_svfprintf_r+0x1476>
 800680c:	f049 0910 	orr.w	r9, r9, #16
 8006810:	f019 0f20 	tst.w	r9, #32
 8006814:	f47f adf7 	bne.w	8006406 <_svfprintf_r+0x332>
 8006818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800681a:	f019 0f10 	tst.w	r9, #16
 800681e:	f853 4b04 	ldr.w	r4, [r3], #4
 8006822:	930f      	str	r3, [sp, #60]	; 0x3c
 8006824:	f040 82bd 	bne.w	8006da2 <_svfprintf_r+0xcce>
 8006828:	f019 0f40 	tst.w	r9, #64	; 0x40
 800682c:	f000 82b9 	beq.w	8006da2 <_svfprintf_r+0xcce>
 8006830:	b224      	sxth	r4, r4
 8006832:	17e5      	asrs	r5, r4, #31
 8006834:	e5f0      	b.n	8006418 <_svfprintf_r+0x344>
 8006836:	f89b 7000 	ldrb.w	r7, [fp]
 800683a:	2f2a      	cmp	r7, #42	; 0x2a
 800683c:	f10b 0001 	add.w	r0, fp, #1
 8006840:	f000 8640 	beq.w	80074c4 <_svfprintf_r+0x13f0>
 8006844:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006848:	2b09      	cmp	r3, #9
 800684a:	4683      	mov	fp, r0
 800684c:	f200 854c 	bhi.w	80072e8 <_svfprintf_r+0x1214>
 8006850:	2000      	movs	r0, #0
 8006852:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8006856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800685a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800685e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006862:	2b09      	cmp	r3, #9
 8006864:	d9f5      	bls.n	8006852 <_svfprintf_r+0x77e>
 8006866:	9009      	str	r0, [sp, #36]	; 0x24
 8006868:	e492      	b.n	8006190 <_svfprintf_r+0xbc>
 800686a:	f89b 3000 	ldrb.w	r3, [fp]
 800686e:	f049 0904 	orr.w	r9, r9, #4
 8006872:	e48a      	b.n	800618a <_svfprintf_r+0xb6>
 8006874:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8006878:	f89b 3000 	ldrb.w	r3, [fp]
 800687c:	e485      	b.n	800618a <_svfprintf_r+0xb6>
 800687e:	2302      	movs	r3, #2
 8006880:	e512      	b.n	80062a8 <_svfprintf_r+0x1d4>
 8006882:	2a00      	cmp	r2, #0
 8006884:	f040 8665 	bne.w	8007552 <_svfprintf_r+0x147e>
 8006888:	2f00      	cmp	r7, #0
 800688a:	f43f ace9 	beq.w	8006260 <_svfprintf_r+0x18c>
 800688e:	2300      	movs	r3, #0
 8006890:	2201      	movs	r2, #1
 8006892:	461e      	mov	r6, r3
 8006894:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8006898:	9309      	str	r3, [sp, #36]	; 0x24
 800689a:	9312      	str	r3, [sp, #72]	; 0x48
 800689c:	ab28      	add	r3, sp, #160	; 0xa0
 800689e:	9208      	str	r2, [sp, #32]
 80068a0:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
 80068a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80068a8:	920e      	str	r2, [sp, #56]	; 0x38
 80068aa:	9311      	str	r3, [sp, #68]	; 0x44
 80068ac:	e604      	b.n	80064b8 <_svfprintf_r+0x3e4>
 80068ae:	2f65      	cmp	r7, #101	; 0x65
 80068b0:	f340 80ee 	ble.w	8006a90 <_svfprintf_r+0x9bc>
 80068b4:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 80068b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 80068bc:	f7fa fab2 	bl	8000e24 <__aeabi_dcmpeq>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f000 817e 	beq.w	8006bc2 <_svfprintf_r+0xaee>
 80068c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068c8:	4a38      	ldr	r2, [pc, #224]	; (80069ac <_svfprintf_r+0x8d8>)
 80068ca:	f8ca 2000 	str.w	r2, [sl]
 80068ce:	3301      	adds	r3, #1
 80068d0:	3401      	adds	r4, #1
 80068d2:	2201      	movs	r2, #1
 80068d4:	2b07      	cmp	r3, #7
 80068d6:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 80068da:	f8ca 2004 	str.w	r2, [sl, #4]
 80068de:	f300 83f1 	bgt.w	80070c4 <_svfprintf_r+0xff0>
 80068e2:	f10a 0a08 	add.w	sl, sl, #8
 80068e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80068ec:	4293      	cmp	r3, r2
 80068ee:	f280 8243 	bge.w	8006d78 <_svfprintf_r+0xca4>
 80068f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068f6:	f8ca 2000 	str.w	r2, [sl]
 80068fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068fc:	f8ca 2004 	str.w	r2, [sl, #4]
 8006900:	3301      	adds	r3, #1
 8006902:	4414      	add	r4, r2
 8006904:	2b07      	cmp	r3, #7
 8006906:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
 800690a:	f300 8352 	bgt.w	8006fb2 <_svfprintf_r+0xede>
 800690e:	f10a 0a08 	add.w	sl, sl, #8
 8006912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006914:	1e5d      	subs	r5, r3, #1
 8006916:	2d00      	cmp	r5, #0
 8006918:	f77f ae97 	ble.w	800664a <_svfprintf_r+0x576>
 800691c:	2d10      	cmp	r5, #16
 800691e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006920:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80069b0 <_svfprintf_r+0x8dc>
 8006924:	f340 83a7 	ble.w	8007076 <_svfprintf_r+0xfa2>
 8006928:	4623      	mov	r3, r4
 800692a:	2610      	movs	r6, #16
 800692c:	464c      	mov	r4, r9
 800692e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006930:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006934:	e005      	b.n	8006942 <_svfprintf_r+0x86e>
 8006936:	f10a 0a08 	add.w	sl, sl, #8
 800693a:	3d10      	subs	r5, #16
 800693c:	2d10      	cmp	r5, #16
 800693e:	f340 8398 	ble.w	8007072 <_svfprintf_r+0xf9e>
 8006942:	3201      	adds	r2, #1
 8006944:	3310      	adds	r3, #16
 8006946:	2a07      	cmp	r2, #7
 8006948:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800694c:	e9ca 4600 	strd	r4, r6, [sl]
 8006950:	ddf1      	ble.n	8006936 <_svfprintf_r+0x862>
 8006952:	aa25      	add	r2, sp, #148	; 0x94
 8006954:	4649      	mov	r1, r9
 8006956:	4638      	mov	r0, r7
 8006958:	f002 fbfc 	bl	8009154 <__ssprint_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	f47f ac86 	bne.w	800626e <_svfprintf_r+0x19a>
 8006962:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8006966:	46c2      	mov	sl, r8
 8006968:	e7e7      	b.n	800693a <_svfprintf_r+0x866>
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	9a08      	ldr	r2, [sp, #32]
 800696e:	1a9d      	subs	r5, r3, r2
 8006970:	2d00      	cmp	r5, #0
 8006972:	f77f ae12 	ble.w	800659a <_svfprintf_r+0x4c6>
 8006976:	2d10      	cmp	r5, #16
 8006978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800697a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 80069b0 <_svfprintf_r+0x8dc>
 800697e:	dd39      	ble.n	80069f4 <_svfprintf_r+0x920>
 8006980:	4648      	mov	r0, r9
 8006982:	4653      	mov	r3, sl
 8006984:	4621      	mov	r1, r4
 8006986:	46b9      	mov	r9, r7
 8006988:	2610      	movs	r6, #16
 800698a:	e9dd a40c 	ldrd	sl, r4, [sp, #48]	; 0x30
 800698e:	4607      	mov	r7, r0
 8006990:	e015      	b.n	80069be <_svfprintf_r+0x8ea>
 8006992:	bf00      	nop
 8006994:	0800a4ec 	.word	0x0800a4ec
 8006998:	0800a4bc 	.word	0x0800a4bc
 800699c:	0800a4d0 	.word	0x0800a4d0
 80069a0:	7fefffff 	.word	0x7fefffff
 80069a4:	0800a4b0 	.word	0x0800a4b0
 80069a8:	0800a4ac 	.word	0x0800a4ac
 80069ac:	08009f68 	.word	0x08009f68
 80069b0:	0800a4fc 	.word	0x0800a4fc
 80069b4:	3d10      	subs	r5, #16
 80069b6:	2d10      	cmp	r5, #16
 80069b8:	f103 0308 	add.w	r3, r3, #8
 80069bc:	dd15      	ble.n	80069ea <_svfprintf_r+0x916>
 80069be:	3201      	adds	r2, #1
 80069c0:	3110      	adds	r1, #16
 80069c2:	2a07      	cmp	r2, #7
 80069c4:	e9cd 2126 	strd	r2, r1, [sp, #152]	; 0x98
 80069c8:	e9c3 7600 	strd	r7, r6, [r3]
 80069cc:	ddf2      	ble.n	80069b4 <_svfprintf_r+0x8e0>
 80069ce:	aa25      	add	r2, sp, #148	; 0x94
 80069d0:	4651      	mov	r1, sl
 80069d2:	4620      	mov	r0, r4
 80069d4:	f002 fbbe 	bl	8009154 <__ssprint_r>
 80069d8:	2800      	cmp	r0, #0
 80069da:	f47f ac48 	bne.w	800626e <_svfprintf_r+0x19a>
 80069de:	3d10      	subs	r5, #16
 80069e0:	2d10      	cmp	r5, #16
 80069e2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80069e6:	4643      	mov	r3, r8
 80069e8:	dce9      	bgt.n	80069be <_svfprintf_r+0x8ea>
 80069ea:	469a      	mov	sl, r3
 80069ec:	463b      	mov	r3, r7
 80069ee:	460c      	mov	r4, r1
 80069f0:	464f      	mov	r7, r9
 80069f2:	4699      	mov	r9, r3
 80069f4:	3201      	adds	r2, #1
 80069f6:	442c      	add	r4, r5
 80069f8:	2a07      	cmp	r2, #7
 80069fa:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 80069fe:	e9ca 9500 	strd	r9, r5, [sl]
 8006a02:	f300 8342 	bgt.w	800708a <_svfprintf_r+0xfb6>
 8006a06:	f10a 0a08 	add.w	sl, sl, #8
 8006a0a:	e5c6      	b.n	800659a <_svfprintf_r+0x4c6>
 8006a0c:	aa25      	add	r2, sp, #148	; 0x94
 8006a0e:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006a12:	f002 fb9f 	bl	8009154 <__ssprint_r>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f ae57 	beq.w	80066ca <_svfprintf_r+0x5f6>
 8006a1c:	e427      	b.n	800626e <_svfprintf_r+0x19a>
 8006a1e:	aa25      	add	r2, sp, #148	; 0x94
 8006a20:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006a24:	f002 fb96 	bl	8009154 <__ssprint_r>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f47f ac20 	bne.w	800626e <_svfprintf_r+0x19a>
 8006a2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006a32:	46c2      	mov	sl, r8
 8006a34:	b91b      	cbnz	r3, 8006a3e <_svfprintf_r+0x96a>
 8006a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	f000 837c 	beq.w	8007136 <_svfprintf_r+0x1062>
 8006a3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a40:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a42:	f8ca 1000 	str.w	r1, [sl]
 8006a46:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006a48:	f8ca 1004 	str.w	r1, [sl, #4]
 8006a4c:	3201      	adds	r2, #1
 8006a4e:	440c      	add	r4, r1
 8006a50:	2a07      	cmp	r2, #7
 8006a52:	9427      	str	r4, [sp, #156]	; 0x9c
 8006a54:	9226      	str	r2, [sp, #152]	; 0x98
 8006a56:	f300 8457 	bgt.w	8007308 <_svfprintf_r+0x1234>
 8006a5a:	f10a 0a08 	add.w	sl, sl, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f2c0 8490 	blt.w	8007384 <_svfprintf_r+0x12b0>
 8006a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a68:	3201      	adds	r2, #1
 8006a6a:	441c      	add	r4, r3
 8006a6c:	2a07      	cmp	r2, #7
 8006a6e:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8006a72:	e9ca 1300 	strd	r1, r3, [sl]
 8006a76:	f77f ade6 	ble.w	8006646 <_svfprintf_r+0x572>
 8006a7a:	aa25      	add	r2, sp, #148	; 0x94
 8006a7c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006a80:	f002 fb68 	bl	8009154 <__ssprint_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f47f abf2 	bne.w	800626e <_svfprintf_r+0x19a>
 8006a8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006a8c:	46c2      	mov	sl, r8
 8006a8e:	e5dc      	b.n	800664a <_svfprintf_r+0x576>
 8006a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a94:	2a01      	cmp	r2, #1
 8006a96:	f104 0401 	add.w	r4, r4, #1
 8006a9a:	f103 0501 	add.w	r5, r3, #1
 8006a9e:	f10a 0608 	add.w	r6, sl, #8
 8006aa2:	f340 8147 	ble.w	8006d34 <_svfprintf_r+0xc60>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006aaa:	f8ca 2000 	str.w	r2, [sl]
 8006aae:	2d07      	cmp	r5, #7
 8006ab0:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 8006ab4:	f8ca 3004 	str.w	r3, [sl, #4]
 8006ab8:	f300 82bf 	bgt.w	800703a <_svfprintf_r+0xf66>
 8006abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006abe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	441c      	add	r4, r3
 8006ac4:	2d07      	cmp	r5, #7
 8006ac6:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 8006aca:	e9c6 2300 	strd	r2, r3, [r6]
 8006ace:	f300 82c0 	bgt.w	8007052 <_svfprintf_r+0xf7e>
 8006ad2:	3608      	adds	r6, #8
 8006ad4:	1c6f      	adds	r7, r5, #1
 8006ad6:	970e      	str	r7, [sp, #56]	; 0x38
 8006ad8:	9709      	str	r7, [sp, #36]	; 0x24
 8006ada:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ade:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006ae0:	e9dd 0215 	ldrd	r0, r2, [sp, #84]	; 0x54
 8006ae4:	3f01      	subs	r7, #1
 8006ae6:	f106 0a08 	add.w	sl, r6, #8
 8006aea:	f7fa f99b 	bl	8000e24 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f040 80e0 	bne.w	8006cb4 <_svfprintf_r+0xbe0>
 8006af4:	443c      	add	r4, r7
 8006af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006af8:	6077      	str	r7, [r6, #4]
 8006afa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006afc:	9427      	str	r4, [sp, #156]	; 0x9c
 8006afe:	3301      	adds	r3, #1
 8006b00:	2f07      	cmp	r7, #7
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	9726      	str	r7, [sp, #152]	; 0x98
 8006b06:	f300 8244 	bgt.w	8006f92 <_svfprintf_r+0xebe>
 8006b0a:	f106 0310 	add.w	r3, r6, #16
 8006b0e:	1caa      	adds	r2, r5, #2
 8006b10:	4656      	mov	r6, sl
 8006b12:	9209      	str	r2, [sp, #36]	; 0x24
 8006b14:	469a      	mov	sl, r3
 8006b16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006b18:	6072      	str	r2, [r6, #4]
 8006b1a:	4414      	add	r4, r2
 8006b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1e:	9427      	str	r4, [sp, #156]	; 0x9c
 8006b20:	ab21      	add	r3, sp, #132	; 0x84
 8006b22:	2a07      	cmp	r2, #7
 8006b24:	9226      	str	r2, [sp, #152]	; 0x98
 8006b26:	6033      	str	r3, [r6, #0]
 8006b28:	f77f ad8f 	ble.w	800664a <_svfprintf_r+0x576>
 8006b2c:	e7a5      	b.n	8006a7a <_svfprintf_r+0x9a6>
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b34:	f47f ac87 	bne.w	8006446 <_svfprintf_r+0x372>
 8006b38:	2d00      	cmp	r5, #0
 8006b3a:	bf08      	it	eq
 8006b3c:	2c0a      	cmpeq	r4, #10
 8006b3e:	f080 8148 	bcs.w	8006dd2 <_svfprintf_r+0xcfe>
 8006b42:	ab42      	add	r3, sp, #264	; 0x108
 8006b44:	3430      	adds	r4, #48	; 0x30
 8006b46:	f803 4d41 	strb.w	r4, [r3, #-65]!
 8006b4a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b50:	e497      	b.n	8006482 <_svfprintf_r+0x3ae>
 8006b52:	aa25      	add	r2, sp, #148	; 0x94
 8006b54:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006b58:	f002 fafc 	bl	8009154 <__ssprint_r>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f47f ab86 	bne.w	800626e <_svfprintf_r+0x19a>
 8006b62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006b64:	46c2      	mov	sl, r8
 8006b66:	e504      	b.n	8006572 <_svfprintf_r+0x49e>
 8006b68:	aa25      	add	r2, sp, #148	; 0x94
 8006b6a:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006b6e:	f002 faf1 	bl	8009154 <__ssprint_r>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	f47f ab7b 	bne.w	800626e <_svfprintf_r+0x19a>
 8006b78:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006b7a:	46c2      	mov	sl, r8
 8006b7c:	e509      	b.n	8006592 <_svfprintf_r+0x4be>
 8006b7e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8006b82:	4642      	mov	r2, r8
 8006b84:	0923      	lsrs	r3, r4, #4
 8006b86:	f004 000f 	and.w	r0, r4, #15
 8006b8a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006b8e:	0929      	lsrs	r1, r5, #4
 8006b90:	461c      	mov	r4, r3
 8006b92:	460d      	mov	r5, r1
 8006b94:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8006b98:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006b9c:	ea54 0305 	orrs.w	r3, r4, r5
 8006ba0:	d1f0      	bne.n	8006b84 <_svfprintf_r+0xab0>
 8006ba2:	eba8 0302 	sub.w	r3, r8, r2
 8006ba6:	9211      	str	r2, [sp, #68]	; 0x44
 8006ba8:	930e      	str	r3, [sp, #56]	; 0x38
 8006baa:	e46a      	b.n	8006482 <_svfprintf_r+0x3ae>
 8006bac:	aa25      	add	r2, sp, #148	; 0x94
 8006bae:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006bb2:	f002 facf 	bl	8009154 <__ssprint_r>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f47f ab59 	bne.w	800626e <_svfprintf_r+0x19a>
 8006bbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006bbe:	46c2      	mov	sl, r8
 8006bc0:	e52f      	b.n	8006622 <_svfprintf_r+0x54e>
 8006bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f340 826c 	ble.w	80070a2 <_svfprintf_r+0xfce>
 8006bca:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	bfa8      	it	ge
 8006bd2:	4613      	movge	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	dd0e      	ble.n	8006bf8 <_svfprintf_r+0xb24>
 8006bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006bde:	f8ca 2000 	str.w	r2, [sl]
 8006be2:	3301      	adds	r3, #1
 8006be4:	442c      	add	r4, r5
 8006be6:	2b07      	cmp	r3, #7
 8006be8:	9427      	str	r4, [sp, #156]	; 0x9c
 8006bea:	f8ca 5004 	str.w	r5, [sl, #4]
 8006bee:	9326      	str	r3, [sp, #152]	; 0x98
 8006bf0:	f300 8326 	bgt.w	8007240 <_svfprintf_r+0x116c>
 8006bf4:	f10a 0a08 	add.w	sl, sl, #8
 8006bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bfa:	2d00      	cmp	r5, #0
 8006bfc:	bfa8      	it	ge
 8006bfe:	1b5b      	subge	r3, r3, r5
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	461d      	mov	r5, r3
 8006c04:	f300 818b 	bgt.w	8006f1e <_svfprintf_r+0xe4a>
 8006c08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f2c0 81f1 	blt.w	8006ff4 <_svfprintf_r+0xf20>
 8006c12:	9a07      	ldr	r2, [sp, #28]
 8006c14:	07d1      	lsls	r1, r2, #31
 8006c16:	f100 81ed 	bmi.w	8006ff4 <_svfprintf_r+0xf20>
 8006c1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	1a15      	subs	r5, r2, r0
 8006c22:	429d      	cmp	r5, r3
 8006c24:	bfa8      	it	ge
 8006c26:	461d      	movge	r5, r3
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	dd0f      	ble.n	8006c4c <_svfprintf_r+0xb78>
 8006c2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c2e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006c30:	f8ca 5004 	str.w	r5, [sl, #4]
 8006c34:	3201      	adds	r2, #1
 8006c36:	4401      	add	r1, r0
 8006c38:	442c      	add	r4, r5
 8006c3a:	2a07      	cmp	r2, #7
 8006c3c:	f8ca 1000 	str.w	r1, [sl]
 8006c40:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8006c44:	f300 8342 	bgt.w	80072cc <_svfprintf_r+0x11f8>
 8006c48:	f10a 0a08 	add.w	sl, sl, #8
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	bfac      	ite	ge
 8006c50:	1b5d      	subge	r5, r3, r5
 8006c52:	461d      	movlt	r5, r3
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	f77f acf8 	ble.w	800664a <_svfprintf_r+0x576>
 8006c5a:	2d10      	cmp	r5, #16
 8006c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c5e:	f8df 9668 	ldr.w	r9, [pc, #1640]	; 80072c8 <_svfprintf_r+0x11f4>
 8006c62:	f340 8208 	ble.w	8007076 <_svfprintf_r+0xfa2>
 8006c66:	4623      	mov	r3, r4
 8006c68:	2610      	movs	r6, #16
 8006c6a:	464c      	mov	r4, r9
 8006c6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006c6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006c72:	e005      	b.n	8006c80 <_svfprintf_r+0xbac>
 8006c74:	f10a 0a08 	add.w	sl, sl, #8
 8006c78:	3d10      	subs	r5, #16
 8006c7a:	2d10      	cmp	r5, #16
 8006c7c:	f340 81f9 	ble.w	8007072 <_svfprintf_r+0xf9e>
 8006c80:	3201      	adds	r2, #1
 8006c82:	3310      	adds	r3, #16
 8006c84:	2a07      	cmp	r2, #7
 8006c86:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8006c8a:	e9ca 4600 	strd	r4, r6, [sl]
 8006c8e:	ddf1      	ble.n	8006c74 <_svfprintf_r+0xba0>
 8006c90:	aa25      	add	r2, sp, #148	; 0x94
 8006c92:	4649      	mov	r1, r9
 8006c94:	4638      	mov	r0, r7
 8006c96:	f002 fa5d 	bl	8009154 <__ssprint_r>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f47f aae7 	bne.w	800626e <_svfprintf_r+0x19a>
 8006ca0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8006ca4:	46c2      	mov	sl, r8
 8006ca6:	e7e7      	b.n	8006c78 <_svfprintf_r+0xba4>
 8006ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006caa:	930e      	str	r3, [sp, #56]	; 0x38
 8006cac:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8006cb0:	f7ff bbe7 	b.w	8006482 <_svfprintf_r+0x3ae>
 8006cb4:	2f00      	cmp	r7, #0
 8006cb6:	f77f af2e 	ble.w	8006b16 <_svfprintf_r+0xa42>
 8006cba:	2f10      	cmp	r7, #16
 8006cbc:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 80072c8 <_svfprintf_r+0x11f4>
 8006cc0:	f340 83fb 	ble.w	80074ba <_svfprintf_r+0x13e6>
 8006cc4:	4633      	mov	r3, r6
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	464e      	mov	r6, r9
 8006cca:	f04f 0a10 	mov.w	sl, #16
 8006cce:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	; 0x34
 8006cd2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006cd6:	e005      	b.n	8006ce4 <_svfprintf_r+0xc10>
 8006cd8:	3308      	adds	r3, #8
 8006cda:	3f10      	subs	r7, #16
 8006cdc:	2f10      	cmp	r7, #16
 8006cde:	f340 81fb 	ble.w	80070d8 <_svfprintf_r+0x1004>
 8006ce2:	3501      	adds	r5, #1
 8006ce4:	3210      	adds	r2, #16
 8006ce6:	2d07      	cmp	r5, #7
 8006ce8:	e9cd 5226 	strd	r5, r2, [sp, #152]	; 0x98
 8006cec:	e9c3 6a00 	strd	r6, sl, [r3]
 8006cf0:	ddf2      	ble.n	8006cd8 <_svfprintf_r+0xc04>
 8006cf2:	aa25      	add	r2, sp, #148	; 0x94
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f002 fa2c 	bl	8009154 <__ssprint_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f47f aab6 	bne.w	800626e <_svfprintf_r+0x19a>
 8006d02:	e9dd 5226 	ldrd	r5, r2, [sp, #152]	; 0x98
 8006d06:	4643      	mov	r3, r8
 8006d08:	e7e7      	b.n	8006cda <_svfprintf_r+0xc06>
 8006d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d0c:	f019 0f10 	tst.w	r9, #16
 8006d10:	f853 4b04 	ldr.w	r4, [r3], #4
 8006d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d16:	d078      	beq.n	8006e0a <_svfprintf_r+0xd36>
 8006d18:	2500      	movs	r5, #0
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f7ff bac4 	b.w	80062a8 <_svfprintf_r+0x1d4>
 8006d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d22:	f852 4b04 	ldr.w	r4, [r2], #4
 8006d26:	920f      	str	r2, [sp, #60]	; 0x3c
 8006d28:	f019 0210 	ands.w	r2, r9, #16
 8006d2c:	d07c      	beq.n	8006e28 <_svfprintf_r+0xd54>
 8006d2e:	2500      	movs	r5, #0
 8006d30:	f7ff baba 	b.w	80062a8 <_svfprintf_r+0x1d4>
 8006d34:	9a07      	ldr	r2, [sp, #28]
 8006d36:	07d2      	lsls	r2, r2, #31
 8006d38:	f53f aeb5 	bmi.w	8006aa6 <_svfprintf_r+0x9d2>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d40:	f8ca 1000 	str.w	r1, [sl]
 8006d44:	2d07      	cmp	r5, #7
 8006d46:	e9cd 5426 	strd	r5, r4, [sp, #152]	; 0x98
 8006d4a:	f8ca 2004 	str.w	r2, [sl, #4]
 8006d4e:	f300 8120 	bgt.w	8006f92 <_svfprintf_r+0xebe>
 8006d52:	3302      	adds	r3, #2
 8006d54:	9309      	str	r3, [sp, #36]	; 0x24
 8006d56:	f10a 0a10 	add.w	sl, sl, #16
 8006d5a:	e6dc      	b.n	8006b16 <_svfprintf_r+0xa42>
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	f000 8143 	beq.w	8006fe8 <_svfprintf_r+0xf14>
 8006d62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d64:	3902      	subs	r1, #2
 8006d66:	2330      	movs	r3, #48	; 0x30
 8006d68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d6c:	eba8 0301 	sub.w	r3, r8, r1
 8006d70:	930e      	str	r3, [sp, #56]	; 0x38
 8006d72:	9111      	str	r1, [sp, #68]	; 0x44
 8006d74:	f7ff bb85 	b.w	8006482 <_svfprintf_r+0x3ae>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	07dd      	lsls	r5, r3, #31
 8006d7c:	f53f adb9 	bmi.w	80068f2 <_svfprintf_r+0x81e>
 8006d80:	e463      	b.n	800664a <_svfprintf_r+0x576>
 8006d82:	aa25      	add	r2, sp, #148	; 0x94
 8006d84:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006d88:	f002 f9e4 	bl	8009154 <__ssprint_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f47f aa6e 	bne.w	800626e <_svfprintf_r+0x19a>
 8006d92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006d94:	e48e      	b.n	80066b4 <_svfprintf_r+0x5e0>
 8006d96:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8006d9a:	f7ff bb72 	b.w	8006482 <_svfprintf_r+0x3ae>
 8006d9e:	2500      	movs	r5, #0
 8006da0:	e4a8      	b.n	80066f4 <_svfprintf_r+0x620>
 8006da2:	17e5      	asrs	r5, r4, #31
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	f175 0300 	sbcs.w	r3, r5, #0
 8006daa:	f6bf ab3a 	bge.w	8006422 <_svfprintf_r+0x34e>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	4264      	negs	r4, r4
 8006db2:	f04f 062d 	mov.w	r6, #45	; 0x2d
 8006db6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8006dc0:	f47f ab35 	bne.w	800642e <_svfprintf_r+0x35a>
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	bf08      	it	eq
 8006dc8:	2c0a      	cmpeq	r4, #10
 8006dca:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dce:	f4ff aeb8 	bcc.w	8006b42 <_svfprintf_r+0xa6e>
 8006dd2:	46c1      	mov	r9, r8
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	220a      	movs	r2, #10
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f7fa f892 	bl	8000f04 <__aeabi_uldivmod>
 8006de0:	3230      	adds	r2, #48	; 0x30
 8006de2:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	f7fa f889 	bl	8000f04 <__aeabi_uldivmod>
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	ea54 0305 	orrs.w	r3, r4, r5
 8006dfa:	d1eb      	bne.n	8006dd4 <_svfprintf_r+0xd00>
 8006dfc:	eba8 0309 	sub.w	r3, r8, r9
 8006e00:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8006e04:	930e      	str	r3, [sp, #56]	; 0x38
 8006e06:	f7ff bb3c 	b.w	8006482 <_svfprintf_r+0x3ae>
 8006e0a:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006e0e:	bf18      	it	ne
 8006e10:	b2a4      	uxthne	r4, r4
 8006e12:	2500      	movs	r5, #0
 8006e14:	2301      	movs	r3, #1
 8006e16:	f7ff ba47 	b.w	80062a8 <_svfprintf_r+0x1d4>
 8006e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	17d1      	asrs	r1, r2, #31
 8006e20:	e9c3 0100 	strd	r0, r1, [r3]
 8006e24:	f7ff b97e 	b.w	8006124 <_svfprintf_r+0x50>
 8006e28:	f019 0340 	ands.w	r3, r9, #64	; 0x40
 8006e2c:	bf1c      	itt	ne
 8006e2e:	4613      	movne	r3, r2
 8006e30:	b2a4      	uxthne	r4, r4
 8006e32:	2500      	movs	r5, #0
 8006e34:	f7ff ba38 	b.w	80062a8 <_svfprintf_r+0x1d4>
 8006e38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8006e40:	4623      	mov	r3, r4
 8006e42:	4621      	mov	r1, r4
 8006e44:	f7fa f820 	bl	8000e88 <__aeabi_dcmpun>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f040 8322 	bne.w	8007492 <_svfprintf_r+0x13be>
 8006e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e50:	f027 0320 	bic.w	r3, r7, #32
 8006e54:	1c54      	adds	r4, r2, #1
 8006e56:	9308      	str	r3, [sp, #32]
 8006e58:	f000 821a 	beq.w	8007290 <_svfprintf_r+0x11bc>
 8006e5c:	2b47      	cmp	r3, #71	; 0x47
 8006e5e:	f000 816f 	beq.w	8007140 <_svfprintf_r+0x106c>
 8006e62:	f449 7380 	orr.w	r3, r9, #256	; 0x100
 8006e66:	9307      	str	r3, [sp, #28]
 8006e68:	e9dd 3614 	ldrd	r3, r6, [sp, #80]	; 0x50
 8006e6c:	1e1d      	subs	r5, r3, #0
 8006e6e:	bfb6      	itet	lt
 8006e70:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8006e74:	2300      	movge	r3, #0
 8006e76:	232d      	movlt	r3, #45	; 0x2d
 8006e78:	2f66      	cmp	r7, #102	; 0x66
 8006e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8006e7c:	f000 820b 	beq.w	8007296 <_svfprintf_r+0x11c2>
 8006e80:	2f46      	cmp	r7, #70	; 0x46
 8006e82:	f000 8262 	beq.w	800734a <_svfprintf_r+0x1276>
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	2b45      	cmp	r3, #69	; 0x45
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	f000 815d 	beq.w	800714c <_svfprintf_r+0x1078>
 8006e92:	a823      	add	r0, sp, #140	; 0x8c
 8006e94:	a920      	add	r1, sp, #128	; 0x80
 8006e96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006e98:	9004      	str	r0, [sp, #16]
 8006e9a:	9103      	str	r1, [sp, #12]
 8006e9c:	a81f      	add	r0, sp, #124	; 0x7c
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	9002      	str	r0, [sp, #8]
 8006ea2:	9401      	str	r4, [sp, #4]
 8006ea4:	9100      	str	r1, [sp, #0]
 8006ea6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006ea8:	f000 fbf6 	bl	8007698 <_dtoa_r>
 8006eac:	2f67      	cmp	r7, #103	; 0x67
 8006eae:	9011      	str	r0, [sp, #68]	; 0x44
 8006eb0:	f040 8330 	bne.w	8007514 <_svfprintf_r+0x1440>
 8006eb4:	f019 0f01 	tst.w	r9, #1
 8006eb8:	f000 816f 	beq.w	800719a <_svfprintf_r+0x10c6>
 8006ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec0:	189c      	adds	r4, r3, r2
 8006ec2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 ffab 	bl	8000e24 <__aeabi_dcmpeq>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f000 81d2 	beq.w	8007278 <_svfprintf_r+0x11a4>
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	9313      	str	r3, [sp, #76]	; 0x4c
 8006edc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ede:	9312      	str	r3, [sp, #72]	; 0x48
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	2b47      	cmp	r3, #71	; 0x47
 8006ee4:	f000 8162 	beq.w	80071ac <_svfprintf_r+0x10d8>
 8006ee8:	2f66      	cmp	r7, #102	; 0x66
 8006eea:	f040 8166 	bne.w	80071ba <_svfprintf_r+0x10e6>
 8006eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef4:	f340 82d9 	ble.w	80074aa <_svfprintf_r+0x13d6>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f040 82c0 	bne.w	800747e <_svfprintf_r+0x13aa>
 8006efe:	f019 0f01 	tst.w	r9, #1
 8006f02:	f040 82bc 	bne.w	800747e <_svfprintf_r+0x13aa>
 8006f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f08:	9308      	str	r3, [sp, #32]
 8006f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 817e 	bne.w	8007210 <_svfprintf_r+0x113c>
 8006f14:	9309      	str	r3, [sp, #36]	; 0x24
 8006f16:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8006f1a:	f7ff ba3d 	b.w	8006398 <_svfprintf_r+0x2c4>
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f22:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 80072c8 <_svfprintf_r+0x11f4>
 8006f26:	f340 80ef 	ble.w	8007108 <_svfprintf_r+0x1034>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	2610      	movs	r6, #16
 8006f2e:	464c      	mov	r4, r9
 8006f30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006f32:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006f36:	e005      	b.n	8006f44 <_svfprintf_r+0xe70>
 8006f38:	f10a 0a08 	add.w	sl, sl, #8
 8006f3c:	3d10      	subs	r5, #16
 8006f3e:	2d10      	cmp	r5, #16
 8006f40:	f340 80e0 	ble.w	8007104 <_svfprintf_r+0x1030>
 8006f44:	3201      	adds	r2, #1
 8006f46:	3310      	adds	r3, #16
 8006f48:	2a07      	cmp	r2, #7
 8006f4a:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8006f4e:	e9ca 4600 	strd	r4, r6, [sl]
 8006f52:	ddf1      	ble.n	8006f38 <_svfprintf_r+0xe64>
 8006f54:	aa25      	add	r2, sp, #148	; 0x94
 8006f56:	4649      	mov	r1, r9
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f002 f8fb 	bl	8009154 <__ssprint_r>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f47f a985 	bne.w	800626e <_svfprintf_r+0x19a>
 8006f64:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8006f68:	46c2      	mov	sl, r8
 8006f6a:	e7e7      	b.n	8006f3c <_svfprintf_r+0xe68>
 8006f6c:	4264      	negs	r4, r4
 8006f6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006f70:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f72:	e47c      	b.n	800686e <_svfprintf_r+0x79a>
 8006f74:	2140      	movs	r1, #64	; 0x40
 8006f76:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f78:	f001 fa96 	bl	80084a8 <_malloc_r>
 8006f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	6118      	str	r0, [r3, #16]
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f000 82cd 	beq.w	8007522 <_svfprintf_r+0x144e>
 8006f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	6153      	str	r3, [r2, #20]
 8006f8e:	f7ff b8b8 	b.w	8006102 <_svfprintf_r+0x2e>
 8006f92:	aa25      	add	r2, sp, #148	; 0x94
 8006f94:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006f98:	f002 f8dc 	bl	8009154 <__ssprint_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f47f a966 	bne.w	800626e <_svfprintf_r+0x19a>
 8006fa2:	e9dd 3426 	ldrd	r3, r4, [sp, #152]	; 0x98
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8006faa:	f10d 0ad0 	add.w	sl, sp, #208	; 0xd0
 8006fae:	4646      	mov	r6, r8
 8006fb0:	e5b1      	b.n	8006b16 <_svfprintf_r+0xa42>
 8006fb2:	aa25      	add	r2, sp, #148	; 0x94
 8006fb4:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8006fb8:	f002 f8cc 	bl	8009154 <__ssprint_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f47f a956 	bne.w	800626e <_svfprintf_r+0x19a>
 8006fc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8006fc4:	46c2      	mov	sl, r8
 8006fc6:	e4a4      	b.n	8006912 <_svfprintf_r+0x83e>
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006fcc:	9609      	str	r6, [sp, #36]	; 0x24
 8006fce:	2b06      	cmp	r3, #6
 8006fd0:	bf28      	it	cs
 8006fd2:	2306      	movcs	r3, #6
 8006fd4:	9308      	str	r3, [sp, #32]
 8006fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8006fd8:	4bb9      	ldr	r3, [pc, #740]	; (80072c0 <_svfprintf_r+0x11ec>)
 8006fda:	950f      	str	r5, [sp, #60]	; 0x3c
 8006fdc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fe0:	9612      	str	r6, [sp, #72]	; 0x48
 8006fe2:	9311      	str	r3, [sp, #68]	; 0x44
 8006fe4:	f7ff b9d8 	b.w	8006398 <_svfprintf_r+0x2c4>
 8006fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fea:	eba8 0303 	sub.w	r3, r8, r3
 8006fee:	930e      	str	r3, [sp, #56]	; 0x38
 8006ff0:	f7ff ba47 	b.w	8006482 <_svfprintf_r+0x3ae>
 8006ff4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ff6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ff8:	f8ca 1000 	str.w	r1, [sl]
 8006ffc:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006ffe:	f8ca 1004 	str.w	r1, [sl, #4]
 8007002:	3201      	adds	r2, #1
 8007004:	440c      	add	r4, r1
 8007006:	2a07      	cmp	r2, #7
 8007008:	9427      	str	r4, [sp, #156]	; 0x9c
 800700a:	9226      	str	r2, [sp, #152]	; 0x98
 800700c:	f300 8128 	bgt.w	8007260 <_svfprintf_r+0x118c>
 8007010:	f10a 0a08 	add.w	sl, sl, #8
 8007014:	e601      	b.n	8006c1a <_svfprintf_r+0xb46>
 8007016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f7ff b883 	b.w	8006124 <_svfprintf_r+0x50>
 800701e:	aa25      	add	r2, sp, #148	; 0x94
 8007020:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007024:	f002 f896 	bl	8009154 <__ssprint_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	f47f a920 	bne.w	800626e <_svfprintf_r+0x19a>
 800702e:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8007032:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007034:	46c2      	mov	sl, r8
 8007036:	f7ff ba8c 	b.w	8006552 <_svfprintf_r+0x47e>
 800703a:	aa25      	add	r2, sp, #148	; 0x94
 800703c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007040:	f002 f888 	bl	8009154 <__ssprint_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	f47f a912 	bne.w	800626e <_svfprintf_r+0x19a>
 800704a:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 800704e:	4646      	mov	r6, r8
 8007050:	e534      	b.n	8006abc <_svfprintf_r+0x9e8>
 8007052:	aa25      	add	r2, sp, #148	; 0x94
 8007054:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007058:	f002 f87c 	bl	8009154 <__ssprint_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	f47f a906 	bne.w	800626e <_svfprintf_r+0x19a>
 8007062:	e9dd 5426 	ldrd	r5, r4, [sp, #152]	; 0x98
 8007066:	4646      	mov	r6, r8
 8007068:	e534      	b.n	8006ad4 <_svfprintf_r+0xa00>
 800706a:	2b01      	cmp	r3, #1
 800706c:	f47f a9eb 	bne.w	8006446 <_svfprintf_r+0x372>
 8007070:	e567      	b.n	8006b42 <_svfprintf_r+0xa6e>
 8007072:	46a1      	mov	r9, r4
 8007074:	461c      	mov	r4, r3
 8007076:	3201      	adds	r2, #1
 8007078:	442c      	add	r4, r5
 800707a:	2a07      	cmp	r2, #7
 800707c:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8007080:	e9ca 9500 	strd	r9, r5, [sl]
 8007084:	f77f aadf 	ble.w	8006646 <_svfprintf_r+0x572>
 8007088:	e4f7      	b.n	8006a7a <_svfprintf_r+0x9a6>
 800708a:	aa25      	add	r2, sp, #148	; 0x94
 800708c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007090:	f002 f860 	bl	8009154 <__ssprint_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	f47f a8ea 	bne.w	800626e <_svfprintf_r+0x19a>
 800709a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800709c:	46c2      	mov	sl, r8
 800709e:	f7ff ba7c 	b.w	800659a <_svfprintf_r+0x4c6>
 80070a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070a4:	4987      	ldr	r1, [pc, #540]	; (80072c4 <_svfprintf_r+0x11f0>)
 80070a6:	f8ca 1000 	str.w	r1, [sl]
 80070aa:	3201      	adds	r2, #1
 80070ac:	3401      	adds	r4, #1
 80070ae:	2101      	movs	r1, #1
 80070b0:	2a07      	cmp	r2, #7
 80070b2:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 80070b6:	f8ca 1004 	str.w	r1, [sl, #4]
 80070ba:	f73f acb0 	bgt.w	8006a1e <_svfprintf_r+0x94a>
 80070be:	f10a 0a08 	add.w	sl, sl, #8
 80070c2:	e4b7      	b.n	8006a34 <_svfprintf_r+0x960>
 80070c4:	aa25      	add	r2, sp, #148	; 0x94
 80070c6:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80070ca:	f002 f843 	bl	8009154 <__ssprint_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f47f a8cd 	bne.w	800626e <_svfprintf_r+0x19a>
 80070d4:	46c2      	mov	sl, r8
 80070d6:	e406      	b.n	80068e6 <_svfprintf_r+0x812>
 80070d8:	46b1      	mov	r9, r6
 80070da:	461e      	mov	r6, r3
 80070dc:	1c6b      	adds	r3, r5, #1
 80070de:	4614      	mov	r4, r2
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	f106 0208 	add.w	r2, r6, #8
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	9326      	str	r3, [sp, #152]	; 0x98
 80070ea:	443c      	add	r4, r7
 80070ec:	2b07      	cmp	r3, #7
 80070ee:	9427      	str	r4, [sp, #156]	; 0x9c
 80070f0:	e9c6 9700 	strd	r9, r7, [r6]
 80070f4:	f73f af4d 	bgt.w	8006f92 <_svfprintf_r+0xebe>
 80070f8:	3301      	adds	r3, #1
 80070fa:	9309      	str	r3, [sp, #36]	; 0x24
 80070fc:	f102 0a08 	add.w	sl, r2, #8
 8007100:	4616      	mov	r6, r2
 8007102:	e508      	b.n	8006b16 <_svfprintf_r+0xa42>
 8007104:	46a1      	mov	r9, r4
 8007106:	461c      	mov	r4, r3
 8007108:	3201      	adds	r2, #1
 800710a:	442c      	add	r4, r5
 800710c:	2a07      	cmp	r2, #7
 800710e:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 8007112:	e9ca 9500 	strd	r9, r5, [sl]
 8007116:	f300 812a 	bgt.w	800736e <_svfprintf_r+0x129a>
 800711a:	f10a 0a08 	add.w	sl, sl, #8
 800711e:	e573      	b.n	8006c08 <_svfprintf_r+0xb34>
 8007120:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007122:	9409      	str	r4, [sp, #36]	; 0x24
 8007124:	f7f9 f9ec 	bl	8000500 <strlen>
 8007128:	f8cd 901c 	str.w	r9, [sp, #28]
 800712c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
 8007130:	4603      	mov	r3, r0
 8007132:	f7ff b92b 	b.w	800638c <_svfprintf_r+0x2b8>
 8007136:	9a07      	ldr	r2, [sp, #28]
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	f57f aa86 	bpl.w	800664a <_svfprintf_r+0x576>
 800713e:	e47e      	b.n	8006a3e <_svfprintf_r+0x96a>
 8007140:	2a00      	cmp	r2, #0
 8007142:	4613      	mov	r3, r2
 8007144:	bf08      	it	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	9309      	str	r3, [sp, #36]	; 0x24
 800714a:	e68a      	b.n	8006e62 <_svfprintf_r+0xd8e>
 800714c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714e:	3101      	adds	r1, #1
 8007150:	460c      	mov	r4, r1
 8007152:	910e      	str	r1, [sp, #56]	; 0x38
 8007154:	a823      	add	r0, sp, #140	; 0x8c
 8007156:	a920      	add	r1, sp, #128	; 0x80
 8007158:	9004      	str	r0, [sp, #16]
 800715a:	9103      	str	r1, [sp, #12]
 800715c:	a81f      	add	r0, sp, #124	; 0x7c
 800715e:	2102      	movs	r1, #2
 8007160:	9002      	str	r0, [sp, #8]
 8007162:	9401      	str	r4, [sp, #4]
 8007164:	9100      	str	r1, [sp, #0]
 8007166:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007168:	f000 fa96 	bl	8007698 <_dtoa_r>
 800716c:	9011      	str	r0, [sp, #68]	; 0x44
 800716e:	2f47      	cmp	r7, #71	; 0x47
 8007170:	f040 81c8 	bne.w	8007504 <_svfprintf_r+0x1430>
 8007174:	f019 0f01 	tst.w	r9, #1
 8007178:	f000 81bd 	beq.w	80074f6 <_svfprintf_r+0x1422>
 800717c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800717e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007180:	2f46      	cmp	r7, #70	; 0x46
 8007182:	eb03 0402 	add.w	r4, r3, r2
 8007186:	f47f ae9c 	bne.w	8006ec2 <_svfprintf_r+0xdee>
 800718a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b30      	cmp	r3, #48	; 0x30
 8007190:	f000 815c 	beq.w	800744c <_svfprintf_r+0x1378>
 8007194:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007196:	441c      	add	r4, r3
 8007198:	e693      	b.n	8006ec2 <_svfprintf_r+0xdee>
 800719a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800719c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800719e:	9212      	str	r2, [sp, #72]	; 0x48
 80071a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80071a6:	9b08      	ldr	r3, [sp, #32]
 80071a8:	2b47      	cmp	r3, #71	; 0x47
 80071aa:	d106      	bne.n	80071ba <_svfprintf_r+0x10e6>
 80071ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071ae:	1cda      	adds	r2, r3, #3
 80071b0:	db02      	blt.n	80071b8 <_svfprintf_r+0x10e4>
 80071b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b4:	429a      	cmp	r2, r3
 80071b6:	da32      	bge.n	800721e <_svfprintf_r+0x114a>
 80071b8:	3f02      	subs	r7, #2
 80071ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071bc:	f88d 7084 	strb.w	r7, [sp, #132]	; 0x84
 80071c0:	3b01      	subs	r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80071c6:	bfbd      	ittte	lt
 80071c8:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80071ca:	f1c3 0301 	rsblt	r3, r3, #1
 80071ce:	222d      	movlt	r2, #45	; 0x2d
 80071d0:	222b      	movge	r2, #43	; 0x2b
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 80071d8:	f300 8105 	bgt.w	80073e6 <_svfprintf_r+0x1312>
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	2230      	movs	r2, #48	; 0x30
 80071e0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80071e4:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 80071e8:	ab22      	add	r3, sp, #136	; 0x88
 80071ea:	aa21      	add	r2, sp, #132	; 0x84
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80071f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80071f2:	2a01      	cmp	r2, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	930e      	str	r3, [sp, #56]	; 0x38
 80071f8:	f340 8137 	ble.w	800746a <_svfprintf_r+0x1396>
 80071fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007200:	4413      	add	r3, r2
 8007202:	930e      	str	r3, [sp, #56]	; 0x38
 8007204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007208:	9308      	str	r3, [sp, #32]
 800720a:	2300      	movs	r3, #0
 800720c:	9312      	str	r3, [sp, #72]	; 0x48
 800720e:	e67d      	b.n	8006f0c <_svfprintf_r+0xe38>
 8007210:	262d      	movs	r6, #45	; 0x2d
 8007212:	2300      	movs	r3, #0
 8007214:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	f7ff b8c0 	b.w	800639e <_svfprintf_r+0x2ca>
 800721e:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
 8007222:	428b      	cmp	r3, r1
 8007224:	db7e      	blt.n	8007324 <_svfprintf_r+0x1250>
 8007226:	f019 0f01 	tst.w	r9, #1
 800722a:	f000 8109 	beq.w	8007440 <_svfprintf_r+0x136c>
 800722e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007232:	4413      	add	r3, r2
 8007234:	930e      	str	r3, [sp, #56]	; 0x38
 8007236:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800723a:	9308      	str	r3, [sp, #32]
 800723c:	2767      	movs	r7, #103	; 0x67
 800723e:	e665      	b.n	8006f0c <_svfprintf_r+0xe38>
 8007240:	aa25      	add	r2, sp, #148	; 0x94
 8007242:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007246:	f001 ff85 	bl	8009154 <__ssprint_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	f47f a80f 	bne.w	800626e <_svfprintf_r+0x19a>
 8007250:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007252:	46c2      	mov	sl, r8
 8007254:	e4d0      	b.n	8006bf8 <_svfprintf_r+0xb24>
 8007256:	262d      	movs	r6, #45	; 0x2d
 8007258:	f88d 6077 	strb.w	r6, [sp, #119]	; 0x77
 800725c:	f7ff bac3 	b.w	80067e6 <_svfprintf_r+0x712>
 8007260:	aa25      	add	r2, sp, #148	; 0x94
 8007262:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007266:	f001 ff75 	bl	8009154 <__ssprint_r>
 800726a:	2800      	cmp	r0, #0
 800726c:	f47e afff 	bne.w	800626e <_svfprintf_r+0x19a>
 8007270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007272:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007274:	46c2      	mov	sl, r8
 8007276:	e4d0      	b.n	8006c1a <_svfprintf_r+0xb46>
 8007278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800727a:	42a3      	cmp	r3, r4
 800727c:	f4bf ae2b 	bcs.w	8006ed6 <_svfprintf_r+0xe02>
 8007280:	2130      	movs	r1, #48	; 0x30
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	9223      	str	r2, [sp, #140]	; 0x8c
 8007286:	7019      	strb	r1, [r3, #0]
 8007288:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800728a:	429c      	cmp	r4, r3
 800728c:	d8f9      	bhi.n	8007282 <_svfprintf_r+0x11ae>
 800728e:	e622      	b.n	8006ed6 <_svfprintf_r+0xe02>
 8007290:	2306      	movs	r3, #6
 8007292:	9309      	str	r3, [sp, #36]	; 0x24
 8007294:	e5e5      	b.n	8006e62 <_svfprintf_r+0xd8e>
 8007296:	a823      	add	r0, sp, #140	; 0x8c
 8007298:	a920      	add	r1, sp, #128	; 0x80
 800729a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800729c:	9004      	str	r0, [sp, #16]
 800729e:	9103      	str	r1, [sp, #12]
 80072a0:	a81f      	add	r0, sp, #124	; 0x7c
 80072a2:	2103      	movs	r1, #3
 80072a4:	462b      	mov	r3, r5
 80072a6:	9401      	str	r4, [sp, #4]
 80072a8:	9002      	str	r0, [sp, #8]
 80072aa:	4632      	mov	r2, r6
 80072ac:	9100      	str	r1, [sp, #0]
 80072ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80072b0:	f000 f9f2 	bl	8007698 <_dtoa_r>
 80072b4:	4623      	mov	r3, r4
 80072b6:	9011      	str	r0, [sp, #68]	; 0x44
 80072b8:	1904      	adds	r4, r0, r4
 80072ba:	930e      	str	r3, [sp, #56]	; 0x38
 80072bc:	e765      	b.n	800718a <_svfprintf_r+0x10b6>
 80072be:	bf00      	nop
 80072c0:	0800a4e4 	.word	0x0800a4e4
 80072c4:	08009f68 	.word	0x08009f68
 80072c8:	0800a4fc 	.word	0x0800a4fc
 80072cc:	aa25      	add	r2, sp, #148	; 0x94
 80072ce:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80072d2:	f001 ff3f 	bl	8009154 <__ssprint_r>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f47e afc9 	bne.w	800626e <_svfprintf_r+0x19a>
 80072dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	46c2      	mov	sl, r8
 80072e6:	e4b1      	b.n	8006c4c <_svfprintf_r+0xb78>
 80072e8:	2300      	movs	r3, #0
 80072ea:	9309      	str	r3, [sp, #36]	; 0x24
 80072ec:	f7fe bf50 	b.w	8006190 <_svfprintf_r+0xbc>
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	9308      	str	r3, [sp, #32]
 80072f4:	930e      	str	r3, [sp, #56]	; 0x38
 80072f6:	9009      	str	r0, [sp, #36]	; 0x24
 80072f8:	950f      	str	r5, [sp, #60]	; 0x3c
 80072fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80072fe:	9012      	str	r0, [sp, #72]	; 0x48
 8007300:	f89d 6077 	ldrb.w	r6, [sp, #119]	; 0x77
 8007304:	f7ff b848 	b.w	8006398 <_svfprintf_r+0x2c4>
 8007308:	aa25      	add	r2, sp, #148	; 0x94
 800730a:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 800730e:	f001 ff21 	bl	8009154 <__ssprint_r>
 8007312:	2800      	cmp	r0, #0
 8007314:	f47e afab 	bne.w	800626e <_svfprintf_r+0x19a>
 8007318:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800731a:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 800731e:	46c2      	mov	sl, r8
 8007320:	f7ff bb9d 	b.w	8006a5e <_svfprintf_r+0x98a>
 8007324:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007328:	4413      	add	r3, r2
 800732a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800732c:	930e      	str	r3, [sp, #56]	; 0x38
 800732e:	2a00      	cmp	r2, #0
 8007330:	dc06      	bgt.n	8007340 <_svfprintf_r+0x126c>
 8007332:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007336:	f1c3 0301 	rsb	r3, r3, #1
 800733a:	441a      	add	r2, r3
 800733c:	4613      	mov	r3, r2
 800733e:	920e      	str	r2, [sp, #56]	; 0x38
 8007340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007344:	9308      	str	r3, [sp, #32]
 8007346:	2767      	movs	r7, #103	; 0x67
 8007348:	e5e0      	b.n	8006f0c <_svfprintf_r+0xe38>
 800734a:	a823      	add	r0, sp, #140	; 0x8c
 800734c:	a920      	add	r1, sp, #128	; 0x80
 800734e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007350:	9004      	str	r0, [sp, #16]
 8007352:	9103      	str	r1, [sp, #12]
 8007354:	a81f      	add	r0, sp, #124	; 0x7c
 8007356:	2103      	movs	r1, #3
 8007358:	9002      	str	r0, [sp, #8]
 800735a:	4632      	mov	r2, r6
 800735c:	462b      	mov	r3, r5
 800735e:	9401      	str	r4, [sp, #4]
 8007360:	9100      	str	r1, [sp, #0]
 8007362:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007364:	f000 f998 	bl	8007698 <_dtoa_r>
 8007368:	940e      	str	r4, [sp, #56]	; 0x38
 800736a:	9011      	str	r0, [sp, #68]	; 0x44
 800736c:	e706      	b.n	800717c <_svfprintf_r+0x10a8>
 800736e:	aa25      	add	r2, sp, #148	; 0x94
 8007370:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8007374:	f001 feee 	bl	8009154 <__ssprint_r>
 8007378:	2800      	cmp	r0, #0
 800737a:	f47e af78 	bne.w	800626e <_svfprintf_r+0x19a>
 800737e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007380:	46c2      	mov	sl, r8
 8007382:	e441      	b.n	8006c08 <_svfprintf_r+0xb34>
 8007384:	425d      	negs	r5, r3
 8007386:	3310      	adds	r3, #16
 8007388:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8007570 <_svfprintf_r+0x149c>
 800738c:	da1f      	bge.n	80073ce <_svfprintf_r+0x12fa>
 800738e:	4623      	mov	r3, r4
 8007390:	2610      	movs	r6, #16
 8007392:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007394:	464c      	mov	r4, r9
 8007396:	e004      	b.n	80073a2 <_svfprintf_r+0x12ce>
 8007398:	f10a 0a08 	add.w	sl, sl, #8
 800739c:	3d10      	subs	r5, #16
 800739e:	2d10      	cmp	r5, #16
 80073a0:	dd13      	ble.n	80073ca <_svfprintf_r+0x12f6>
 80073a2:	3201      	adds	r2, #1
 80073a4:	3310      	adds	r3, #16
 80073a6:	2a07      	cmp	r2, #7
 80073a8:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 80073ac:	e9ca 4600 	strd	r4, r6, [sl]
 80073b0:	ddf2      	ble.n	8007398 <_svfprintf_r+0x12c4>
 80073b2:	aa25      	add	r2, sp, #148	; 0x94
 80073b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073b6:	4638      	mov	r0, r7
 80073b8:	f001 fecc 	bl	8009154 <__ssprint_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	f47e af56 	bne.w	800626e <_svfprintf_r+0x19a>
 80073c2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 80073c6:	46c2      	mov	sl, r8
 80073c8:	e7e8      	b.n	800739c <_svfprintf_r+0x12c8>
 80073ca:	46a1      	mov	r9, r4
 80073cc:	461c      	mov	r4, r3
 80073ce:	3201      	adds	r2, #1
 80073d0:	442c      	add	r4, r5
 80073d2:	2a07      	cmp	r2, #7
 80073d4:	e9cd 2426 	strd	r2, r4, [sp, #152]	; 0x98
 80073d8:	e9ca 9500 	strd	r9, r5, [sl]
 80073dc:	dc7e      	bgt.n	80074dc <_svfprintf_r+0x1408>
 80073de:	f10a 0a08 	add.w	sl, sl, #8
 80073e2:	f7ff bb3f 	b.w	8006a64 <_svfprintf_r+0x990>
 80073e6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
 80073ea:	4620      	mov	r0, r4
 80073ec:	4d5d      	ldr	r5, [pc, #372]	; (8007564 <_svfprintf_r+0x1490>)
 80073ee:	e000      	b.n	80073f2 <_svfprintf_r+0x131e>
 80073f0:	4610      	mov	r0, r2
 80073f2:	fba5 1203 	umull	r1, r2, r5, r3
 80073f6:	08d2      	lsrs	r2, r2, #3
 80073f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80073fc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007400:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007404:	4613      	mov	r3, r2
 8007406:	2b09      	cmp	r3, #9
 8007408:	f800 1c01 	strb.w	r1, [r0, #-1]
 800740c:	f100 32ff 	add.w	r2, r0, #4294967295
 8007410:	dcee      	bgt.n	80073f0 <_svfprintf_r+0x131c>
 8007412:	3330      	adds	r3, #48	; 0x30
 8007414:	3802      	subs	r0, #2
 8007416:	b2d9      	uxtb	r1, r3
 8007418:	4284      	cmp	r4, r0
 800741a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800741e:	d976      	bls.n	800750e <_svfprintf_r+0x143a>
 8007420:	f10d 0086 	add.w	r0, sp, #134	; 0x86
 8007424:	4613      	mov	r3, r2
 8007426:	e001      	b.n	800742c <_svfprintf_r+0x1358>
 8007428:	f813 1b01 	ldrb.w	r1, [r3], #1
 800742c:	f800 1b01 	strb.w	r1, [r0], #1
 8007430:	429c      	cmp	r4, r3
 8007432:	d1f9      	bne.n	8007428 <_svfprintf_r+0x1354>
 8007434:	ab25      	add	r3, sp, #148	; 0x94
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 800743c:	4413      	add	r3, r2
 800743e:	e6d4      	b.n	80071ea <_svfprintf_r+0x1116>
 8007440:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007444:	9208      	str	r2, [sp, #32]
 8007446:	930e      	str	r3, [sp, #56]	; 0x38
 8007448:	2767      	movs	r7, #103	; 0x67
 800744a:	e55f      	b.n	8006f0c <_svfprintf_r+0xe38>
 800744c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800744e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007450:	4630      	mov	r0, r6
 8007452:	4629      	mov	r1, r5
 8007454:	f7f9 fce6 	bl	8000e24 <__aeabi_dcmpeq>
 8007458:	2800      	cmp	r0, #0
 800745a:	f47f ae9b 	bne.w	8007194 <_svfprintf_r+0x10c0>
 800745e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007460:	f1c3 0301 	rsb	r3, r3, #1
 8007464:	931f      	str	r3, [sp, #124]	; 0x7c
 8007466:	441c      	add	r4, r3
 8007468:	e52b      	b.n	8006ec2 <_svfprintf_r+0xdee>
 800746a:	f019 0301 	ands.w	r3, r9, #1
 800746e:	9312      	str	r3, [sp, #72]	; 0x48
 8007470:	f47f aec4 	bne.w	80071fc <_svfprintf_r+0x1128>
 8007474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	e546      	b.n	8006f0c <_svfprintf_r+0xe38>
 800747e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007482:	4413      	add	r3, r2
 8007484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007486:	441a      	add	r2, r3
 8007488:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800748c:	920e      	str	r2, [sp, #56]	; 0x38
 800748e:	9308      	str	r3, [sp, #32]
 8007490:	e53c      	b.n	8006f0c <_svfprintf_r+0xe38>
 8007492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007494:	4a34      	ldr	r2, [pc, #208]	; (8007568 <_svfprintf_r+0x1494>)
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb6      	itet	lt
 800749a:	262d      	movlt	r6, #45	; 0x2d
 800749c:	f89d 6077 	ldrbge.w	r6, [sp, #119]	; 0x77
 80074a0:	f88d 6077 	strblt.w	r6, [sp, #119]	; 0x77
 80074a4:	4b31      	ldr	r3, [pc, #196]	; (800756c <_svfprintf_r+0x1498>)
 80074a6:	f7ff b9a0 	b.w	80067ea <_svfprintf_r+0x716>
 80074aa:	b943      	cbnz	r3, 80074be <_svfprintf_r+0x13ea>
 80074ac:	f019 0f01 	tst.w	r9, #1
 80074b0:	d105      	bne.n	80074be <_svfprintf_r+0x13ea>
 80074b2:	2301      	movs	r3, #1
 80074b4:	9308      	str	r3, [sp, #32]
 80074b6:	930e      	str	r3, [sp, #56]	; 0x38
 80074b8:	e528      	b.n	8006f0c <_svfprintf_r+0xe38>
 80074ba:	4652      	mov	r2, sl
 80074bc:	e613      	b.n	80070e6 <_svfprintf_r+0x1012>
 80074be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074c0:	3301      	adds	r3, #1
 80074c2:	e7df      	b.n	8007484 <_svfprintf_r+0x13b0>
 80074c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074c6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80074ca:	682c      	ldr	r4, [r5, #0]
 80074cc:	4683      	mov	fp, r0
 80074ce:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80074d2:	1d28      	adds	r0, r5, #4
 80074d4:	9409      	str	r4, [sp, #36]	; 0x24
 80074d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80074d8:	f7fe be57 	b.w	800618a <_svfprintf_r+0xb6>
 80074dc:	aa25      	add	r2, sp, #148	; 0x94
 80074de:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 80074e2:	f001 fe37 	bl	8009154 <__ssprint_r>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f47e aec1 	bne.w	800626e <_svfprintf_r+0x19a>
 80074ec:	e9dd 2426 	ldrd	r2, r4, [sp, #152]	; 0x98
 80074f0:	46c2      	mov	sl, r8
 80074f2:	f7ff bab7 	b.w	8006a64 <_svfprintf_r+0x990>
 80074f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074fa:	9212      	str	r2, [sp, #72]	; 0x48
 80074fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	9313      	str	r3, [sp, #76]	; 0x4c
 8007502:	e653      	b.n	80071ac <_svfprintf_r+0x10d8>
 8007504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007506:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007508:	4413      	add	r3, r2
 800750a:	461c      	mov	r4, r3
 800750c:	e4d9      	b.n	8006ec2 <_svfprintf_r+0xdee>
 800750e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8007512:	e66a      	b.n	80071ea <_svfprintf_r+0x1116>
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	930e      	str	r3, [sp, #56]	; 0x38
 8007518:	e629      	b.n	800716e <_svfprintf_r+0x109a>
 800751a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 800751e:	f7ff b91b 	b.w	8006758 <_svfprintf_r+0x684>
 8007522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007524:	230c      	movs	r3, #12
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	f04f 33ff 	mov.w	r3, #4294967295
 800752c:	930a      	str	r3, [sp, #40]	; 0x28
 800752e:	f7fe bea7 	b.w	8006280 <_svfprintf_r+0x1ac>
 8007532:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8007536:	f7fe bf62 	b.w	80063fe <_svfprintf_r+0x32a>
 800753a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 800753e:	f7ff b8cb 	b.w	80066d8 <_svfprintf_r+0x604>
 8007542:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8007546:	f7ff b923 	b.w	8006790 <_svfprintf_r+0x6bc>
 800754a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 800754e:	f7ff b95d 	b.w	800680c <_svfprintf_r+0x738>
 8007552:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 8007556:	f7ff b997 	b.w	8006888 <_svfprintf_r+0x7b4>
 800755a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
 800755e:	f7fe bf25 	b.w	80063ac <_svfprintf_r+0x2d8>
 8007562:	bf00      	nop
 8007564:	cccccccd 	.word	0xcccccccd
 8007568:	0800a4b8 	.word	0x0800a4b8
 800756c:	0800a4b4 	.word	0x0800a4b4
 8007570:	0800a4fc 	.word	0x0800a4fc

08007574 <quorem>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	6903      	ldr	r3, [r0, #16]
 800757a:	690f      	ldr	r7, [r1, #16]
 800757c:	42bb      	cmp	r3, r7
 800757e:	b083      	sub	sp, #12
 8007580:	f2c0 8086 	blt.w	8007690 <quorem+0x11c>
 8007584:	3f01      	subs	r7, #1
 8007586:	f101 0914 	add.w	r9, r1, #20
 800758a:	f100 0a14 	add.w	sl, r0, #20
 800758e:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 8007592:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8007596:	00bc      	lsls	r4, r7, #2
 8007598:	3201      	adds	r2, #1
 800759a:	fbb3 f8f2 	udiv	r8, r3, r2
 800759e:	eb0a 0304 	add.w	r3, sl, r4
 80075a2:	9400      	str	r4, [sp, #0]
 80075a4:	eb09 0b04 	add.w	fp, r9, r4
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	f1b8 0f00 	cmp.w	r8, #0
 80075ae:	d038      	beq.n	8007622 <quorem+0xae>
 80075b0:	2500      	movs	r5, #0
 80075b2:	462e      	mov	r6, r5
 80075b4:	46ce      	mov	lr, r9
 80075b6:	46d4      	mov	ip, sl
 80075b8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80075bc:	f8dc 3000 	ldr.w	r3, [ip]
 80075c0:	b2a2      	uxth	r2, r4
 80075c2:	fb08 5502 	mla	r5, r8, r2, r5
 80075c6:	0c22      	lsrs	r2, r4, #16
 80075c8:	0c2c      	lsrs	r4, r5, #16
 80075ca:	fb08 4202 	mla	r2, r8, r2, r4
 80075ce:	b2ad      	uxth	r5, r5
 80075d0:	1b75      	subs	r5, r6, r5
 80075d2:	b296      	uxth	r6, r2
 80075d4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 80075d8:	fa15 f383 	uxtah	r3, r5, r3
 80075dc:	eb06 4623 	add.w	r6, r6, r3, asr #16
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80075e6:	45f3      	cmp	fp, lr
 80075e8:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80075ec:	f84c 3b04 	str.w	r3, [ip], #4
 80075f0:	ea4f 4626 	mov.w	r6, r6, asr #16
 80075f4:	d2e0      	bcs.n	80075b8 <quorem+0x44>
 80075f6:	9b00      	ldr	r3, [sp, #0]
 80075f8:	f85a 3003 	ldr.w	r3, [sl, r3]
 80075fc:	b98b      	cbnz	r3, 8007622 <quorem+0xae>
 80075fe:	9a01      	ldr	r2, [sp, #4]
 8007600:	1f13      	subs	r3, r2, #4
 8007602:	459a      	cmp	sl, r3
 8007604:	d20c      	bcs.n	8007620 <quorem+0xac>
 8007606:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800760a:	b94b      	cbnz	r3, 8007620 <quorem+0xac>
 800760c:	f1a2 0308 	sub.w	r3, r2, #8
 8007610:	e002      	b.n	8007618 <quorem+0xa4>
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	3b04      	subs	r3, #4
 8007616:	b91a      	cbnz	r2, 8007620 <quorem+0xac>
 8007618:	459a      	cmp	sl, r3
 800761a:	f107 37ff 	add.w	r7, r7, #4294967295
 800761e:	d3f8      	bcc.n	8007612 <quorem+0x9e>
 8007620:	6107      	str	r7, [r0, #16]
 8007622:	4604      	mov	r4, r0
 8007624:	f001 fc38 	bl	8008e98 <__mcmp>
 8007628:	2800      	cmp	r0, #0
 800762a:	db2d      	blt.n	8007688 <quorem+0x114>
 800762c:	f108 0801 	add.w	r8, r8, #1
 8007630:	4655      	mov	r5, sl
 8007632:	2300      	movs	r3, #0
 8007634:	f859 1b04 	ldr.w	r1, [r9], #4
 8007638:	6828      	ldr	r0, [r5, #0]
 800763a:	b28a      	uxth	r2, r1
 800763c:	1a9a      	subs	r2, r3, r2
 800763e:	0c0b      	lsrs	r3, r1, #16
 8007640:	fa12 f280 	uxtah	r2, r2, r0
 8007644:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 8007648:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800764c:	b292      	uxth	r2, r2
 800764e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007652:	45cb      	cmp	fp, r9
 8007654:	f845 2b04 	str.w	r2, [r5], #4
 8007658:	ea4f 4323 	mov.w	r3, r3, asr #16
 800765c:	d2ea      	bcs.n	8007634 <quorem+0xc0>
 800765e:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8007662:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 8007666:	b97a      	cbnz	r2, 8007688 <quorem+0x114>
 8007668:	1f1a      	subs	r2, r3, #4
 800766a:	4592      	cmp	sl, r2
 800766c:	d20b      	bcs.n	8007686 <quorem+0x112>
 800766e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007672:	b942      	cbnz	r2, 8007686 <quorem+0x112>
 8007674:	3b08      	subs	r3, #8
 8007676:	e002      	b.n	800767e <quorem+0x10a>
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	3b04      	subs	r3, #4
 800767c:	b91a      	cbnz	r2, 8007686 <quorem+0x112>
 800767e:	459a      	cmp	sl, r3
 8007680:	f107 37ff 	add.w	r7, r7, #4294967295
 8007684:	d3f8      	bcc.n	8007678 <quorem+0x104>
 8007686:	6127      	str	r7, [r4, #16]
 8007688:	4640      	mov	r0, r8
 800768a:	b003      	add	sp, #12
 800768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007690:	2000      	movs	r0, #0
 8007692:	b003      	add	sp, #12
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800769e:	b097      	sub	sp, #92	; 0x5c
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	4683      	mov	fp, r0
 80076a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80076aa:	b149      	cbz	r1, 80076c0 <_dtoa_r+0x28>
 80076ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076ae:	604a      	str	r2, [r1, #4]
 80076b0:	2301      	movs	r3, #1
 80076b2:	4093      	lsls	r3, r2
 80076b4:	608b      	str	r3, [r1, #8]
 80076b6:	f001 f9ff 	bl	8008ab8 <_Bfree>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80076c0:	1e2e      	subs	r6, r5, #0
 80076c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80076c4:	bfb4      	ite	lt
 80076c6:	2301      	movlt	r3, #1
 80076c8:	2300      	movge	r3, #0
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	4b78      	ldr	r3, [pc, #480]	; (80078b0 <_dtoa_r+0x218>)
 80076ce:	bfbc      	itt	lt
 80076d0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 80076d4:	9603      	strlt	r6, [sp, #12]
 80076d6:	43b3      	bics	r3, r6
 80076d8:	f000 80a8 	beq.w	800782c <_dtoa_r+0x194>
 80076dc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80076e0:	2200      	movs	r2, #0
 80076e2:	4640      	mov	r0, r8
 80076e4:	4649      	mov	r1, r9
 80076e6:	2300      	movs	r3, #0
 80076e8:	f7f9 fb9c 	bl	8000e24 <__aeabi_dcmpeq>
 80076ec:	4605      	mov	r5, r0
 80076ee:	b178      	cbz	r0, 8007710 <_dtoa_r+0x78>
 80076f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076f2:	2301      	movs	r3, #1
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 80c4 	beq.w	8007886 <_dtoa_r+0x1ee>
 80076fe:	4b6d      	ldr	r3, [pc, #436]	; (80078b4 <_dtoa_r+0x21c>)
 8007700:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	3b01      	subs	r3, #1
 8007706:	9304      	str	r3, [sp, #16]
 8007708:	9804      	ldr	r0, [sp, #16]
 800770a:	b017      	add	sp, #92	; 0x5c
 800770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007710:	aa14      	add	r2, sp, #80	; 0x50
 8007712:	ab15      	add	r3, sp, #84	; 0x54
 8007714:	e9cd 3200 	strd	r3, r2, [sp]
 8007718:	4658      	mov	r0, fp
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	f001 fc4d 	bl	8008fbc <__d2b>
 8007722:	0d34      	lsrs	r4, r6, #20
 8007724:	4682      	mov	sl, r0
 8007726:	f040 80a3 	bne.w	8007870 <_dtoa_r+0x1d8>
 800772a:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800772e:	442c      	add	r4, r5
 8007730:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007734:	2b20      	cmp	r3, #32
 8007736:	f340 8417 	ble.w	8007f68 <_dtoa_r+0x8d0>
 800773a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800773e:	409e      	lsls	r6, r3
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8007746:	fa23 f000 	lsr.w	r0, r3, r0
 800774a:	4330      	orrs	r0, r6
 800774c:	f7f9 f888 	bl	8000860 <__aeabi_ui2d>
 8007750:	2301      	movs	r3, #1
 8007752:	4680      	mov	r8, r0
 8007754:	3c01      	subs	r4, #1
 8007756:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800775a:	9312      	str	r3, [sp, #72]	; 0x48
 800775c:	2200      	movs	r2, #0
 800775e:	4b56      	ldr	r3, [pc, #344]	; (80078b8 <_dtoa_r+0x220>)
 8007760:	4640      	mov	r0, r8
 8007762:	4649      	mov	r1, r9
 8007764:	f7f8 ff3e 	bl	80005e4 <__aeabi_dsub>
 8007768:	a34b      	add	r3, pc, #300	; (adr r3, 8007898 <_dtoa_r+0x200>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f9 f8f1 	bl	8000954 <__aeabi_dmul>
 8007772:	a34b      	add	r3, pc, #300	; (adr r3, 80078a0 <_dtoa_r+0x208>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 ff36 	bl	80005e8 <__adddf3>
 800777c:	4606      	mov	r6, r0
 800777e:	4620      	mov	r0, r4
 8007780:	460f      	mov	r7, r1
 8007782:	f7f9 f87d 	bl	8000880 <__aeabi_i2d>
 8007786:	a348      	add	r3, pc, #288	; (adr r3, 80078a8 <_dtoa_r+0x210>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f9 f8e2 	bl	8000954 <__aeabi_dmul>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f8 ff26 	bl	80005e8 <__adddf3>
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	f7f9 fb88 	bl	8000eb4 <__aeabi_d2iz>
 80077a4:	2200      	movs	r2, #0
 80077a6:	9005      	str	r0, [sp, #20]
 80077a8:	2300      	movs	r3, #0
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f9 fb43 	bl	8000e38 <__aeabi_dcmplt>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f040 826e 	bne.w	8007c94 <_dtoa_r+0x5fc>
 80077b8:	9e05      	ldr	r6, [sp, #20]
 80077ba:	2e16      	cmp	r6, #22
 80077bc:	f200 825f 	bhi.w	8007c7e <_dtoa_r+0x5e6>
 80077c0:	4b3e      	ldr	r3, [pc, #248]	; (80078bc <_dtoa_r+0x224>)
 80077c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077ce:	f7f9 fb51 	bl	8000e74 <__aeabi_dcmpgt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f000 83c4 	beq.w	8007f60 <_dtoa_r+0x8c8>
 80077d8:	1e73      	subs	r3, r6, #1
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	2300      	movs	r3, #0
 80077de:	930a      	str	r3, [sp, #40]	; 0x28
 80077e0:	1b2c      	subs	r4, r5, r4
 80077e2:	9b05      	ldr	r3, [sp, #20]
 80077e4:	f1b4 0801 	subs.w	r8, r4, #1
 80077e8:	bf46      	itte	mi
 80077ea:	f1c4 0901 	rsbmi	r9, r4, #1
 80077ee:	f04f 0800 	movmi.w	r8, #0
 80077f2:	f04f 0900 	movpl.w	r9, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f2c0 8244 	blt.w	8007c84 <_dtoa_r+0x5ec>
 80077fc:	4498      	add	r8, r3
 80077fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007800:	2300      	movs	r3, #0
 8007802:	9308      	str	r3, [sp, #32]
 8007804:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007806:	2b09      	cmp	r3, #9
 8007808:	d860      	bhi.n	80078cc <_dtoa_r+0x234>
 800780a:	2b05      	cmp	r3, #5
 800780c:	f340 83aa 	ble.w	8007f64 <_dtoa_r+0x8cc>
 8007810:	3b04      	subs	r3, #4
 8007812:	9320      	str	r3, [sp, #128]	; 0x80
 8007814:	2500      	movs	r5, #0
 8007816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007818:	3b02      	subs	r3, #2
 800781a:	2b03      	cmp	r3, #3
 800781c:	f200 848d 	bhi.w	800813a <_dtoa_r+0xaa2>
 8007820:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007824:	03a903c9 	.word	0x03a903c9
 8007828:	04ea03d3 	.word	0x04ea03d3
 800782c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800782e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	b97b      	cbnz	r3, 8007858 <_dtoa_r+0x1c0>
 8007838:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800783c:	b966      	cbnz	r6, 8007858 <_dtoa_r+0x1c0>
 800783e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8612 	beq.w	800846a <_dtoa_r+0xdd2>
 8007846:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <_dtoa_r+0x228>)
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	3308      	adds	r3, #8
 800784c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800784e:	9804      	ldr	r0, [sp, #16]
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	b017      	add	sp, #92	; 0x5c
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800785a:	b92b      	cbnz	r3, 8007868 <_dtoa_r+0x1d0>
 800785c:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <_dtoa_r+0x22c>)
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	9804      	ldr	r0, [sp, #16]
 8007862:	b017      	add	sp, #92	; 0x5c
 8007864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007868:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <_dtoa_r+0x22c>)
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	3303      	adds	r3, #3
 800786e:	e7ed      	b.n	800784c <_dtoa_r+0x1b4>
 8007870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007874:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007878:	9512      	str	r5, [sp, #72]	; 0x48
 800787a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800787e:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007882:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007884:	e76a      	b.n	800775c <_dtoa_r+0xc4>
 8007886:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <_dtoa_r+0x230>)
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	9804      	ldr	r0, [sp, #16]
 800788c:	b017      	add	sp, #92	; 0x5c
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	bf00      	nop
 8007894:	f3af 8000 	nop.w
 8007898:	636f4361 	.word	0x636f4361
 800789c:	3fd287a7 	.word	0x3fd287a7
 80078a0:	8b60c8b3 	.word	0x8b60c8b3
 80078a4:	3fc68a28 	.word	0x3fc68a28
 80078a8:	509f79fb 	.word	0x509f79fb
 80078ac:	3fd34413 	.word	0x3fd34413
 80078b0:	7ff00000 	.word	0x7ff00000
 80078b4:	08009f69 	.word	0x08009f69
 80078b8:	3ff80000 	.word	0x3ff80000
 80078bc:	0800a548 	.word	0x0800a548
 80078c0:	0800a50c 	.word	0x0800a50c
 80078c4:	0800a518 	.word	0x0800a518
 80078c8:	08009f68 	.word	0x08009f68
 80078cc:	f04f 34ff 	mov.w	r4, #4294967295
 80078d0:	2501      	movs	r5, #1
 80078d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9320      	str	r3, [sp, #128]	; 0x80
 80078da:	9321      	str	r3, [sp, #132]	; 0x84
 80078dc:	2100      	movs	r1, #0
 80078de:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 80078e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80078e4:	4658      	mov	r0, fp
 80078e6:	f001 f8c1 	bl	8008a6c <_Balloc>
 80078ea:	2c0e      	cmp	r4, #14
 80078ec:	9004      	str	r0, [sp, #16]
 80078ee:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80078f2:	f200 80f9 	bhi.w	8007ae8 <_dtoa_r+0x450>
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f000 80f6 	beq.w	8007ae8 <_dtoa_r+0x450>
 80078fc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8007900:	9905      	ldr	r1, [sp, #20]
 8007902:	461d      	mov	r5, r3
 8007904:	4626      	mov	r6, r4
 8007906:	2900      	cmp	r1, #0
 8007908:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 800790c:	f340 83d3 	ble.w	80080b6 <_dtoa_r+0xa1e>
 8007910:	4b9a      	ldr	r3, [pc, #616]	; (8007b7c <_dtoa_r+0x4e4>)
 8007912:	f001 020f 	and.w	r2, r1, #15
 8007916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	110c      	asrs	r4, r1, #4
 8007920:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007924:	06e3      	lsls	r3, r4, #27
 8007926:	f140 8488 	bpl.w	800823a <_dtoa_r+0xba2>
 800792a:	4b95      	ldr	r3, [pc, #596]	; (8007b80 <_dtoa_r+0x4e8>)
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007934:	f7f9 f938 	bl	8000ba8 <__aeabi_ddiv>
 8007938:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800793c:	f004 040f 	and.w	r4, r4, #15
 8007940:	2603      	movs	r6, #3
 8007942:	b17c      	cbz	r4, 8007964 <_dtoa_r+0x2cc>
 8007944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007948:	4d8d      	ldr	r5, [pc, #564]	; (8007b80 <_dtoa_r+0x4e8>)
 800794a:	07e7      	lsls	r7, r4, #31
 800794c:	d504      	bpl.n	8007958 <_dtoa_r+0x2c0>
 800794e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007952:	3601      	adds	r6, #1
 8007954:	f7f8 fffe 	bl	8000954 <__aeabi_dmul>
 8007958:	1064      	asrs	r4, r4, #1
 800795a:	f105 0508 	add.w	r5, r5, #8
 800795e:	d1f4      	bne.n	800794a <_dtoa_r+0x2b2>
 8007960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007968:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800796c:	f7f9 f91c 	bl	8000ba8 <__aeabi_ddiv>
 8007970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007976:	b143      	cbz	r3, 800798a <_dtoa_r+0x2f2>
 8007978:	2200      	movs	r2, #0
 800797a:	4b82      	ldr	r3, [pc, #520]	; (8007b84 <_dtoa_r+0x4ec>)
 800797c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007980:	f7f9 fa5a 	bl	8000e38 <__aeabi_dcmplt>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 84eb 	bne.w	8008360 <_dtoa_r+0xcc8>
 800798a:	4630      	mov	r0, r6
 800798c:	f7f8 ff78 	bl	8000880 <__aeabi_i2d>
 8007990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007994:	f7f8 ffde 	bl	8000954 <__aeabi_dmul>
 8007998:	4b7b      	ldr	r3, [pc, #492]	; (8007b88 <_dtoa_r+0x4f0>)
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fe24 	bl	80005e8 <__adddf3>
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	4606      	mov	r6, r0
 80079a4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 840a 	beq.w	80081c2 <_dtoa_r+0xb2a>
 80079ae:	9b05      	ldr	r3, [sp, #20]
 80079b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	930e      	str	r3, [sp, #56]	; 0x38
 80079b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ba:	f7f9 fa7b 	bl	8000eb4 <__aeabi_d2iz>
 80079be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079c0:	4b6e      	ldr	r3, [pc, #440]	; (8007b7c <_dtoa_r+0x4e4>)
 80079c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c6:	e953 3402 	ldrd	r3, r4, [r3, #-8]
 80079ca:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80079ce:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079d2:	f7f8 ff55 	bl	8000880 <__aeabi_i2d>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079e2:	f7f8 fdff 	bl	80005e4 <__aeabi_dsub>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	4606      	mov	r6, r0
 80079ea:	9807      	ldr	r0, [sp, #28]
 80079ec:	1c5c      	adds	r4, r3, #1
 80079ee:	b2ed      	uxtb	r5, r5
 80079f0:	460f      	mov	r7, r1
 80079f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f000 8445 	beq.w	8008286 <_dtoa_r+0xbee>
 80079fc:	2000      	movs	r0, #0
 80079fe:	4963      	ldr	r1, [pc, #396]	; (8007b8c <_dtoa_r+0x4f4>)
 8007a00:	f7f9 f8d2 	bl	8000ba8 <__aeabi_ddiv>
 8007a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a08:	f7f8 fdec 	bl	80005e4 <__aeabi_dsub>
 8007a0c:	9a04      	ldr	r2, [sp, #16]
 8007a0e:	463b      	mov	r3, r7
 8007a10:	7015      	strb	r5, [r2, #0]
 8007a12:	4632      	mov	r2, r6
 8007a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a18:	f7f9 fa2c 	bl	8000e74 <__aeabi_dcmpgt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 84ef 	bne.w	8008400 <_dtoa_r+0xd68>
 8007a22:	4632      	mov	r2, r6
 8007a24:	463b      	mov	r3, r7
 8007a26:	2000      	movs	r0, #0
 8007a28:	4956      	ldr	r1, [pc, #344]	; (8007b84 <_dtoa_r+0x4ec>)
 8007a2a:	f7f8 fddb 	bl	80005e4 <__aeabi_dsub>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a36:	f7f9 fa1d 	bl	8000e74 <__aeabi_dcmpgt>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	f040 84e5 	bne.w	800840a <_dtoa_r+0xd72>
 8007a40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a42:	2901      	cmp	r1, #1
 8007a44:	d04c      	beq.n	8007ae0 <_dtoa_r+0x448>
 8007a46:	9a04      	ldr	r2, [sp, #16]
 8007a48:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a4c:	4411      	add	r1, r2
 8007a4e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007a52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a56:	f8cd a008 	str.w	sl, [sp, #8]
 8007a5a:	468a      	mov	sl, r1
 8007a5c:	e00c      	b.n	8007a78 <_dtoa_r+0x3e0>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	4948      	ldr	r1, [pc, #288]	; (8007b84 <_dtoa_r+0x4ec>)
 8007a62:	f7f8 fdbf 	bl	80005e4 <__aeabi_dsub>
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	f7f9 f9e5 	bl	8000e38 <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f040 84c9 	bne.w	8008406 <_dtoa_r+0xd6e>
 8007a74:	4554      	cmp	r4, sl
 8007a76:	d02d      	beq.n	8007ad4 <_dtoa_r+0x43c>
 8007a78:	4640      	mov	r0, r8
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <_dtoa_r+0x4f8>)
 8007a80:	f7f8 ff68 	bl	8000954 <__aeabi_dmul>
 8007a84:	2200      	movs	r2, #0
 8007a86:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <_dtoa_r+0x4f8>)
 8007a88:	4680      	mov	r8, r0
 8007a8a:	4689      	mov	r9, r1
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f8 ff60 	bl	8000954 <__aeabi_dmul>
 8007a94:	460f      	mov	r7, r1
 8007a96:	4606      	mov	r6, r0
 8007a98:	f7f9 fa0c 	bl	8000eb4 <__aeabi_d2iz>
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	f7f8 feef 	bl	8000880 <__aeabi_i2d>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fd9b 	bl	80005e4 <__aeabi_dsub>
 8007aae:	3530      	adds	r5, #48	; 0x30
 8007ab0:	b2ed      	uxtb	r5, r5
 8007ab2:	4642      	mov	r2, r8
 8007ab4:	464b      	mov	r3, r9
 8007ab6:	f804 5b01 	strb.w	r5, [r4], #1
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	f7f9 f9bb 	bl	8000e38 <__aeabi_dcmplt>
 8007ac2:	4632      	mov	r2, r6
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0c9      	beq.n	8007a5e <_dtoa_r+0x3c6>
 8007aca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007acc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007ad0:	9305      	str	r3, [sp, #20]
 8007ad2:	e219      	b.n	8007f08 <_dtoa_r+0x870>
 8007ad4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007ad8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007adc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007ae0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ae4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f2c0 80ad 	blt.w	8007c4a <_dtoa_r+0x5b2>
 8007af0:	9a05      	ldr	r2, [sp, #20]
 8007af2:	2a0e      	cmp	r2, #14
 8007af4:	f300 80a9 	bgt.w	8007c4a <_dtoa_r+0x5b2>
 8007af8:	4b20      	ldr	r3, [pc, #128]	; (8007b7c <_dtoa_r+0x4e4>)
 8007afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f2c0 82b3 	blt.w	8008070 <_dtoa_r+0x9d8>
 8007b0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7f9 f847 	bl	8000ba8 <__aeabi_ddiv>
 8007b1a:	f7f9 f9cb 	bl	8000eb4 <__aeabi_d2iz>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	f7f8 feae 	bl	8000880 <__aeabi_i2d>
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	f7f8 ff14 	bl	8000954 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 fd56 	bl	80005e4 <__aeabi_dsub>
 8007b38:	9a04      	ldr	r2, [sp, #16]
 8007b3a:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8007b3e:	7013      	strb	r3, [r2, #0]
 8007b40:	9b06      	ldr	r3, [sp, #24]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	4606      	mov	r6, r0
 8007b46:	460f      	mov	r7, r1
 8007b48:	f102 0401 	add.w	r4, r2, #1
 8007b4c:	d053      	beq.n	8007bf6 <_dtoa_r+0x55e>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <_dtoa_r+0x4f8>)
 8007b52:	f7f8 feff 	bl	8000954 <__aeabi_dmul>
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	f7f9 f961 	bl	8000e24 <__aeabi_dcmpeq>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f040 81d0 	bne.w	8007f08 <_dtoa_r+0x870>
 8007b68:	f8cd a008 	str.w	sl, [sp, #8]
 8007b6c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007b70:	f8cd b018 	str.w	fp, [sp, #24]
 8007b74:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007b78:	e017      	b.n	8007baa <_dtoa_r+0x512>
 8007b7a:	bf00      	nop
 8007b7c:	0800a548 	.word	0x0800a548
 8007b80:	0800a520 	.word	0x0800a520
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	401c0000 	.word	0x401c0000
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	40240000 	.word	0x40240000
 8007b94:	f7f8 fede 	bl	8000954 <__aeabi_dmul>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	f7f9 f940 	bl	8000e24 <__aeabi_dcmpeq>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f040 8331 	bne.w	800820c <_dtoa_r+0xb74>
 8007baa:	4642      	mov	r2, r8
 8007bac:	464b      	mov	r3, r9
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 fff9 	bl	8000ba8 <__aeabi_ddiv>
 8007bb6:	f7f9 f97d 	bl	8000eb4 <__aeabi_d2iz>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	f7f8 fe60 	bl	8000880 <__aeabi_i2d>
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	f7f8 fec6 	bl	8000954 <__aeabi_dmul>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f7f8 fd08 	bl	80005e4 <__aeabi_dsub>
 8007bd4:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8007bd8:	f804 cb01 	strb.w	ip, [r4], #1
 8007bdc:	eba4 0c0b 	sub.w	ip, r4, fp
 8007be0:	45e2      	cmp	sl, ip
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	4bb8      	ldr	r3, [pc, #736]	; (8007ecc <_dtoa_r+0x834>)
 8007bec:	d1d2      	bne.n	8007b94 <_dtoa_r+0x4fc>
 8007bee:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007bf2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	f7f8 fcf3 	bl	80005e8 <__adddf3>
 8007c02:	4642      	mov	r2, r8
 8007c04:	464b      	mov	r3, r9
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	f7f9 f933 	bl	8000e74 <__aeabi_dcmpgt>
 8007c0e:	b958      	cbnz	r0, 8007c28 <_dtoa_r+0x590>
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f9 f904 	bl	8000e24 <__aeabi_dcmpeq>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f000 8173 	beq.w	8007f08 <_dtoa_r+0x870>
 8007c22:	07eb      	lsls	r3, r5, #31
 8007c24:	f140 8170 	bpl.w	8007f08 <_dtoa_r+0x870>
 8007c28:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8007c2c:	9a04      	ldr	r2, [sp, #16]
 8007c2e:	e005      	b.n	8007c3c <_dtoa_r+0x5a4>
 8007c30:	429a      	cmp	r2, r3
 8007c32:	f000 831e 	beq.w	8008272 <_dtoa_r+0xbda>
 8007c36:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8007c3a:	461c      	mov	r4, r3
 8007c3c:	2d39      	cmp	r5, #57	; 0x39
 8007c3e:	f104 33ff 	add.w	r3, r4, #4294967295
 8007c42:	d0f5      	beq.n	8007c30 <_dtoa_r+0x598>
 8007c44:	3501      	adds	r5, #1
 8007c46:	701d      	strb	r5, [r3, #0]
 8007c48:	e15e      	b.n	8007f08 <_dtoa_r+0x870>
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	b392      	cbz	r2, 8007cb4 <_dtoa_r+0x61c>
 8007c4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c50:	2a01      	cmp	r2, #1
 8007c52:	f340 8202 	ble.w	800805a <_dtoa_r+0x9c2>
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	1e5f      	subs	r7, r3, #1
 8007c5a:	9b08      	ldr	r3, [sp, #32]
 8007c5c:	42bb      	cmp	r3, r7
 8007c5e:	f2c0 82da 	blt.w	8008216 <_dtoa_r+0xb7e>
 8007c62:	1bdf      	subs	r7, r3, r7
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f2c0 82f9 	blt.w	800825e <_dtoa_r+0xbc6>
 8007c6c:	464c      	mov	r4, r9
 8007c6e:	4498      	add	r8, r3
 8007c70:	4499      	add	r9, r3
 8007c72:	2101      	movs	r1, #1
 8007c74:	4658      	mov	r0, fp
 8007c76:	f000 ffb9 	bl	8008bec <__i2b>
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	e01d      	b.n	8007cba <_dtoa_r+0x622>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	930a      	str	r3, [sp, #40]	; 0x28
 8007c82:	e5ad      	b.n	80077e0 <_dtoa_r+0x148>
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	eba9 0903 	sub.w	r9, r9, r3
 8007c8a:	425b      	negs	r3, r3
 8007c8c:	9308      	str	r3, [sp, #32]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9309      	str	r3, [sp, #36]	; 0x24
 8007c92:	e5b7      	b.n	8007804 <_dtoa_r+0x16c>
 8007c94:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007c98:	4640      	mov	r0, r8
 8007c9a:	f7f8 fdf1 	bl	8000880 <__aeabi_i2d>
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f7f9 f8bf 	bl	8000e24 <__aeabi_dcmpeq>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	f47f ad86 	bne.w	80077b8 <_dtoa_r+0x120>
 8007cac:	f108 33ff 	add.w	r3, r8, #4294967295
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	e581      	b.n	80077b8 <_dtoa_r+0x120>
 8007cb4:	9f08      	ldr	r7, [sp, #32]
 8007cb6:	9d07      	ldr	r5, [sp, #28]
 8007cb8:	464c      	mov	r4, r9
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	dd0b      	ble.n	8007cd6 <_dtoa_r+0x63e>
 8007cbe:	f1b8 0f00 	cmp.w	r8, #0
 8007cc2:	dd08      	ble.n	8007cd6 <_dtoa_r+0x63e>
 8007cc4:	4544      	cmp	r4, r8
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	bfa8      	it	ge
 8007cca:	4643      	movge	r3, r8
 8007ccc:	eba9 0903 	sub.w	r9, r9, r3
 8007cd0:	1ae4      	subs	r4, r4, r3
 8007cd2:	eba8 0803 	sub.w	r8, r8, r3
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	b16b      	cbz	r3, 8007cf6 <_dtoa_r+0x65e>
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	f000 828e 	beq.w	80081fe <_dtoa_r+0xb66>
 8007ce2:	1bde      	subs	r6, r3, r7
 8007ce4:	2f00      	cmp	r7, #0
 8007ce6:	f040 818e 	bne.w	8008006 <_dtoa_r+0x96e>
 8007cea:	4651      	mov	r1, sl
 8007cec:	4632      	mov	r2, r6
 8007cee:	4658      	mov	r0, fp
 8007cf0:	f001 f82c 	bl	8008d4c <__pow5mult>
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4658      	mov	r0, fp
 8007cfa:	f000 ff77 	bl	8008bec <__i2b>
 8007cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d00:	4606      	mov	r6, r0
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	f040 8118 	bne.w	8007f38 <_dtoa_r+0x8a0>
 8007d08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	f340 8160 	ble.w	8007fd0 <_dtoa_r+0x938>
 8007d10:	2001      	movs	r0, #1
 8007d12:	4440      	add	r0, r8
 8007d14:	f010 001f 	ands.w	r0, r0, #31
 8007d18:	f000 8109 	beq.w	8007f2e <_dtoa_r+0x896>
 8007d1c:	f1c0 0320 	rsb	r3, r0, #32
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	f340 83a6 	ble.w	8008472 <_dtoa_r+0xdda>
 8007d26:	f1c0 001c 	rsb	r0, r0, #28
 8007d2a:	4481      	add	r9, r0
 8007d2c:	4404      	add	r4, r0
 8007d2e:	4480      	add	r8, r0
 8007d30:	f1b9 0f00 	cmp.w	r9, #0
 8007d34:	dd05      	ble.n	8007d42 <_dtoa_r+0x6aa>
 8007d36:	4651      	mov	r1, sl
 8007d38:	464a      	mov	r2, r9
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f001 f856 	bl	8008dec <__lshift>
 8007d40:	4682      	mov	sl, r0
 8007d42:	f1b8 0f00 	cmp.w	r8, #0
 8007d46:	dd05      	ble.n	8007d54 <_dtoa_r+0x6bc>
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f001 f84d 	bl	8008dec <__lshift>
 8007d52:	4606      	mov	r6, r0
 8007d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d173      	bne.n	8007e42 <_dtoa_r+0x7aa>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f340 8209 	ble.w	8008174 <_dtoa_r+0xadc>
 8007d62:	9b07      	ldr	r3, [sp, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8085 	beq.w	8007e74 <_dtoa_r+0x7dc>
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	f300 8160 	bgt.w	8008030 <_dtoa_r+0x998>
 8007d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 81c8 	bne.w	8008108 <_dtoa_r+0xa70>
 8007d78:	46a8      	mov	r8, r5
 8007d7a:	9a02      	ldr	r2, [sp, #8]
 8007d7c:	9f04      	ldr	r7, [sp, #16]
 8007d7e:	f002 0201 	and.w	r2, r2, #1
 8007d82:	9209      	str	r2, [sp, #36]	; 0x24
 8007d84:	9a06      	ldr	r2, [sp, #24]
 8007d86:	1e7b      	subs	r3, r7, #1
 8007d88:	441a      	add	r2, r3
 8007d8a:	9207      	str	r2, [sp, #28]
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4650      	mov	r0, sl
 8007d90:	f7ff fbf0 	bl	8007574 <quorem>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4681      	mov	r9, r0
 8007d98:	9008      	str	r0, [sp, #32]
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f001 f87c 	bl	8008e98 <__mcmp>
 8007da0:	4631      	mov	r1, r6
 8007da2:	9002      	str	r0, [sp, #8]
 8007da4:	4642      	mov	r2, r8
 8007da6:	4658      	mov	r0, fp
 8007da8:	f001 f892 	bl	8008ed0 <__mdiff>
 8007dac:	68c3      	ldr	r3, [r0, #12]
 8007dae:	4604      	mov	r4, r0
 8007db0:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8007db4:	4601      	mov	r1, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f040 81d7 	bne.w	800816a <_dtoa_r+0xad2>
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f001 f86b 	bl	8008e98 <__mcmp>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	9006      	str	r0, [sp, #24]
 8007dc6:	4658      	mov	r0, fp
 8007dc8:	f000 fe76 	bl	8008ab8 <_Bfree>
 8007dcc:	9b06      	ldr	r3, [sp, #24]
 8007dce:	b933      	cbnz	r3, 8007dde <_dtoa_r+0x746>
 8007dd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dd2:	b922      	cbnz	r2, 8007dde <_dtoa_r+0x746>
 8007dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 831b 	beq.w	8008412 <_dtoa_r+0xd7a>
 8007ddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dde:	9a02      	ldr	r2, [sp, #8]
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	f2c0 8220 	blt.w	8008226 <_dtoa_r+0xb8e>
 8007de6:	d105      	bne.n	8007df4 <_dtoa_r+0x75c>
 8007de8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dea:	b91a      	cbnz	r2, 8007df4 <_dtoa_r+0x75c>
 8007dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	f000 8219 	beq.w	8008226 <_dtoa_r+0xb8e>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f107 0401 	add.w	r4, r7, #1
 8007dfa:	f300 8225 	bgt.w	8008248 <_dtoa_r+0xbb0>
 8007dfe:	9b07      	ldr	r3, [sp, #28]
 8007e00:	f887 9000 	strb.w	r9, [r7]
 8007e04:	42bb      	cmp	r3, r7
 8007e06:	f000 822e 	beq.w	8008266 <_dtoa_r+0xbce>
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	4658      	mov	r0, fp
 8007e12:	f000 fe5b 	bl	8008acc <__multadd>
 8007e16:	4545      	cmp	r5, r8
 8007e18:	4682      	mov	sl, r0
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	f04f 020a 	mov.w	r2, #10
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 819a 	beq.w	800815e <_dtoa_r+0xac6>
 8007e2a:	f000 fe4f 	bl	8008acc <__multadd>
 8007e2e:	4641      	mov	r1, r8
 8007e30:	4605      	mov	r5, r0
 8007e32:	2300      	movs	r3, #0
 8007e34:	220a      	movs	r2, #10
 8007e36:	4658      	mov	r0, fp
 8007e38:	f000 fe48 	bl	8008acc <__multadd>
 8007e3c:	4627      	mov	r7, r4
 8007e3e:	4680      	mov	r8, r0
 8007e40:	e7a4      	b.n	8007d8c <_dtoa_r+0x6f4>
 8007e42:	4631      	mov	r1, r6
 8007e44:	4650      	mov	r0, sl
 8007e46:	f001 f827 	bl	8008e98 <__mcmp>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	da85      	bge.n	8007d5a <_dtoa_r+0x6c2>
 8007e4e:	9f05      	ldr	r7, [sp, #20]
 8007e50:	4651      	mov	r1, sl
 8007e52:	2300      	movs	r3, #0
 8007e54:	220a      	movs	r2, #10
 8007e56:	4658      	mov	r0, fp
 8007e58:	3f01      	subs	r7, #1
 8007e5a:	9705      	str	r7, [sp, #20]
 8007e5c:	f000 fe36 	bl	8008acc <__multadd>
 8007e60:	9b07      	ldr	r3, [sp, #28]
 8007e62:	4682      	mov	sl, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f040 82e4 	bne.w	8008432 <_dtoa_r+0xd9a>
 8007e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f340 82ec 	ble.w	800844a <_dtoa_r+0xdb2>
 8007e72:	9306      	str	r3, [sp, #24]
 8007e74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e78:	9f06      	ldr	r7, [sp, #24]
 8007e7a:	4644      	mov	r4, r8
 8007e7c:	e002      	b.n	8007e84 <_dtoa_r+0x7ec>
 8007e7e:	f000 fe25 	bl	8008acc <__multadd>
 8007e82:	4682      	mov	sl, r0
 8007e84:	4631      	mov	r1, r6
 8007e86:	4650      	mov	r0, sl
 8007e88:	f7ff fb74 	bl	8007574 <quorem>
 8007e8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e90:	f804 9b01 	strb.w	r9, [r4], #1
 8007e94:	eba4 0308 	sub.w	r3, r4, r8
 8007e98:	429f      	cmp	r7, r3
 8007e9a:	f04f 020a 	mov.w	r2, #10
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	4651      	mov	r1, sl
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	dcea      	bgt.n	8007e7e <_dtoa_r+0x7e6>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	4651      	mov	r1, sl
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	f000 ff9b 	bl	8008dec <__lshift>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4682      	mov	sl, r0
 8007eba:	f000 ffed 	bl	8008e98 <__mcmp>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8007ec4:	f340 80bb 	ble.w	800803e <_dtoa_r+0x9a6>
 8007ec8:	9904      	ldr	r1, [sp, #16]
 8007eca:	e007      	b.n	8007edc <_dtoa_r+0x844>
 8007ecc:	40240000 	.word	0x40240000
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	f000 815c 	beq.w	800818e <_dtoa_r+0xaf6>
 8007ed6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007eda:	461c      	mov	r4, r3
 8007edc:	2a39      	cmp	r2, #57	; 0x39
 8007ede:	f104 33ff 	add.w	r3, r4, #4294967295
 8007ee2:	d0f5      	beq.n	8007ed0 <_dtoa_r+0x838>
 8007ee4:	3201      	adds	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fde4 	bl	8008ab8 <_Bfree>
 8007ef0:	b155      	cbz	r5, 8007f08 <_dtoa_r+0x870>
 8007ef2:	9902      	ldr	r1, [sp, #8]
 8007ef4:	b121      	cbz	r1, 8007f00 <_dtoa_r+0x868>
 8007ef6:	42a9      	cmp	r1, r5
 8007ef8:	d002      	beq.n	8007f00 <_dtoa_r+0x868>
 8007efa:	4658      	mov	r0, fp
 8007efc:	f000 fddc 	bl	8008ab8 <_Bfree>
 8007f00:	4629      	mov	r1, r5
 8007f02:	4658      	mov	r0, fp
 8007f04:	f000 fdd8 	bl	8008ab8 <_Bfree>
 8007f08:	4651      	mov	r1, sl
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	f000 fdd4 	bl	8008ab8 <_Bfree>
 8007f10:	2200      	movs	r2, #0
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	7022      	strb	r2, [r4, #0]
 8007f16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f18:	3301      	adds	r3, #1
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f43f abf2 	beq.w	8007708 <_dtoa_r+0x70>
 8007f24:	9804      	ldr	r0, [sp, #16]
 8007f26:	601c      	str	r4, [r3, #0]
 8007f28:	b017      	add	sp, #92	; 0x5c
 8007f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2e:	201c      	movs	r0, #28
 8007f30:	4481      	add	r9, r0
 8007f32:	4404      	add	r4, r0
 8007f34:	4480      	add	r8, r0
 8007f36:	e6fb      	b.n	8007d30 <_dtoa_r+0x698>
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4658      	mov	r0, fp
 8007f3c:	f000 ff06 	bl	8008d4c <__pow5mult>
 8007f40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	4606      	mov	r6, r0
 8007f46:	f340 80f3 	ble.w	8008130 <_dtoa_r+0xa98>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4e:	6933      	ldr	r3, [r6, #16]
 8007f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f54:	6918      	ldr	r0, [r3, #16]
 8007f56:	f000 fdf9 	bl	8008b4c <__hi0bits>
 8007f5a:	f1c0 0020 	rsb	r0, r0, #32
 8007f5e:	e6d8      	b.n	8007d12 <_dtoa_r+0x67a>
 8007f60:	900a      	str	r0, [sp, #40]	; 0x28
 8007f62:	e43d      	b.n	80077e0 <_dtoa_r+0x148>
 8007f64:	2501      	movs	r5, #1
 8007f66:	e456      	b.n	8007816 <_dtoa_r+0x17e>
 8007f68:	f1c3 0620 	rsb	r6, r3, #32
 8007f6c:	9b02      	ldr	r3, [sp, #8]
 8007f6e:	fa03 f006 	lsl.w	r0, r3, r6
 8007f72:	f7ff bbeb 	b.w	800774c <_dtoa_r+0xb4>
 8007f76:	2300      	movs	r3, #0
 8007f78:	9307      	str	r3, [sp, #28]
 8007f7a:	9b05      	ldr	r3, [sp, #20]
 8007f7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f7e:	4413      	add	r3, r2
 8007f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f82:	3301      	adds	r3, #1
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	461e      	mov	r6, r3
 8007f88:	9306      	str	r3, [sp, #24]
 8007f8a:	bfb8      	it	lt
 8007f8c:	2601      	movlt	r6, #1
 8007f8e:	2100      	movs	r1, #0
 8007f90:	2e17      	cmp	r6, #23
 8007f92:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8007f96:	9c06      	ldr	r4, [sp, #24]
 8007f98:	f77f aca4 	ble.w	80078e4 <_dtoa_r+0x24c>
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2304      	movs	r3, #4
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	f103 0014 	add.w	r0, r3, #20
 8007fa6:	42b0      	cmp	r0, r6
 8007fa8:	4611      	mov	r1, r2
 8007faa:	f102 0201 	add.w	r2, r2, #1
 8007fae:	d9f7      	bls.n	8007fa0 <_dtoa_r+0x908>
 8007fb0:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8007fb4:	e496      	b.n	80078e4 <_dtoa_r+0x24c>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f340 80ed 	ble.w	800819c <_dtoa_r+0xb04>
 8007fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc4:	9306      	str	r3, [sp, #24]
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	e7e1      	b.n	8007f8e <_dtoa_r+0x8f6>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	9307      	str	r3, [sp, #28]
 8007fce:	e7f4      	b.n	8007fba <_dtoa_r+0x922>
 8007fd0:	9b02      	ldr	r3, [sp, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f47f ae9c 	bne.w	8007d10 <_dtoa_r+0x678>
 8007fd8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007fdc:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 8199 	bne.w	8008318 <_dtoa_r+0xc80>
 8007fe6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007fea:	0d1b      	lsrs	r3, r3, #20
 8007fec:	051b      	lsls	r3, r3, #20
 8007fee:	b123      	cbz	r3, 8007ffa <_dtoa_r+0x962>
 8007ff0:	f109 0901 	add.w	r9, r9, #1
 8007ff4:	f108 0801 	add.w	r8, r8, #1
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	f43f ae86 	beq.w	8007d10 <_dtoa_r+0x678>
 8008004:	e7a3      	b.n	8007f4e <_dtoa_r+0x8b6>
 8008006:	463a      	mov	r2, r7
 8008008:	4629      	mov	r1, r5
 800800a:	4658      	mov	r0, fp
 800800c:	f000 fe9e 	bl	8008d4c <__pow5mult>
 8008010:	4652      	mov	r2, sl
 8008012:	4601      	mov	r1, r0
 8008014:	4605      	mov	r5, r0
 8008016:	4658      	mov	r0, fp
 8008018:	f000 fdf2 	bl	8008c00 <__multiply>
 800801c:	4651      	mov	r1, sl
 800801e:	4607      	mov	r7, r0
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fd49 	bl	8008ab8 <_Bfree>
 8008026:	46ba      	mov	sl, r7
 8008028:	2e00      	cmp	r6, #0
 800802a:	f43f ae64 	beq.w	8007cf6 <_dtoa_r+0x65e>
 800802e:	e65c      	b.n	8007cea <_dtoa_r+0x652>
 8008030:	4629      	mov	r1, r5
 8008032:	4622      	mov	r2, r4
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fed9 	bl	8008dec <__lshift>
 800803a:	4605      	mov	r5, r0
 800803c:	e698      	b.n	8007d70 <_dtoa_r+0x6d8>
 800803e:	d107      	bne.n	8008050 <_dtoa_r+0x9b8>
 8008040:	f019 0f01 	tst.w	r9, #1
 8008044:	f47f af40 	bne.w	8007ec8 <_dtoa_r+0x830>
 8008048:	e002      	b.n	8008050 <_dtoa_r+0x9b8>
 800804a:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800804e:	461c      	mov	r4, r3
 8008050:	2a30      	cmp	r2, #48	; 0x30
 8008052:	f104 33ff 	add.w	r3, r4, #4294967295
 8008056:	d0f8      	beq.n	800804a <_dtoa_r+0x9b2>
 8008058:	e746      	b.n	8007ee8 <_dtoa_r+0x850>
 800805a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800805c:	2a00      	cmp	r2, #0
 800805e:	f000 8153 	beq.w	8008308 <_dtoa_r+0xc70>
 8008062:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008066:	464c      	mov	r4, r9
 8008068:	4498      	add	r8, r3
 800806a:	4499      	add	r9, r3
 800806c:	9f08      	ldr	r7, [sp, #32]
 800806e:	e600      	b.n	8007c72 <_dtoa_r+0x5da>
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f73f ad49 	bgt.w	8007b0a <_dtoa_r+0x472>
 8008078:	f040 80bb 	bne.w	80081f2 <_dtoa_r+0xb5a>
 800807c:	2200      	movs	r2, #0
 800807e:	4bb2      	ldr	r3, [pc, #712]	; (8008348 <_dtoa_r+0xcb0>)
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fc66 	bl	8000954 <__aeabi_dmul>
 8008088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808c:	f7f8 fee8 	bl	8000e60 <__aeabi_dcmpge>
 8008090:	9e06      	ldr	r6, [sp, #24]
 8008092:	4635      	mov	r5, r6
 8008094:	2800      	cmp	r0, #0
 8008096:	d175      	bne.n	8008184 <_dtoa_r+0xaec>
 8008098:	9a05      	ldr	r2, [sp, #20]
 800809a:	3201      	adds	r2, #1
 800809c:	9205      	str	r2, [sp, #20]
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	2331      	movs	r3, #49	; 0x31
 80080a2:	7013      	strb	r3, [r2, #0]
 80080a4:	1c54      	adds	r4, r2, #1
 80080a6:	4631      	mov	r1, r6
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fd05 	bl	8008ab8 <_Bfree>
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	f47f af26 	bne.w	8007f00 <_dtoa_r+0x868>
 80080b4:	e728      	b.n	8007f08 <_dtoa_r+0x870>
 80080b6:	f000 813f 	beq.w	8008338 <_dtoa_r+0xca0>
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	425c      	negs	r4, r3
 80080be:	4ba3      	ldr	r3, [pc, #652]	; (800834c <_dtoa_r+0xcb4>)
 80080c0:	f004 020f 	and.w	r2, r4, #15
 80080c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080d0:	f7f8 fc40 	bl	8000954 <__aeabi_dmul>
 80080d4:	1124      	asrs	r4, r4, #4
 80080d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080da:	f000 81bb 	beq.w	8008454 <_dtoa_r+0xdbc>
 80080de:	4d9c      	ldr	r5, [pc, #624]	; (8008350 <_dtoa_r+0xcb8>)
 80080e0:	2300      	movs	r3, #0
 80080e2:	2602      	movs	r6, #2
 80080e4:	07e2      	lsls	r2, r4, #31
 80080e6:	d505      	bpl.n	80080f4 <_dtoa_r+0xa5c>
 80080e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080ec:	f7f8 fc32 	bl	8000954 <__aeabi_dmul>
 80080f0:	3601      	adds	r6, #1
 80080f2:	2301      	movs	r3, #1
 80080f4:	1064      	asrs	r4, r4, #1
 80080f6:	f105 0508 	add.w	r5, r5, #8
 80080fa:	d1f3      	bne.n	80080e4 <_dtoa_r+0xa4c>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f43f ac39 	beq.w	8007974 <_dtoa_r+0x2dc>
 8008102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008106:	e435      	b.n	8007974 <_dtoa_r+0x2dc>
 8008108:	6869      	ldr	r1, [r5, #4]
 800810a:	4658      	mov	r0, fp
 800810c:	f000 fcae 	bl	8008a6c <_Balloc>
 8008110:	692b      	ldr	r3, [r5, #16]
 8008112:	3302      	adds	r3, #2
 8008114:	009a      	lsls	r2, r3, #2
 8008116:	4604      	mov	r4, r0
 8008118:	f105 010c 	add.w	r1, r5, #12
 800811c:	300c      	adds	r0, #12
 800811e:	f7f8 f8e9 	bl	80002f4 <memcpy>
 8008122:	4621      	mov	r1, r4
 8008124:	2201      	movs	r2, #1
 8008126:	4658      	mov	r0, fp
 8008128:	f000 fe60 	bl	8008dec <__lshift>
 800812c:	4680      	mov	r8, r0
 800812e:	e624      	b.n	8007d7a <_dtoa_r+0x6e2>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f43f af50 	beq.w	8007fd8 <_dtoa_r+0x940>
 8008138:	e707      	b.n	8007f4a <_dtoa_r+0x8b2>
 800813a:	2400      	movs	r4, #0
 800813c:	f8cb 4044 	str.w	r4, [fp, #68]	; 0x44
 8008140:	4621      	mov	r1, r4
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fc92 	bl	8008a6c <_Balloc>
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	930b      	str	r3, [sp, #44]	; 0x2c
 800814e:	9306      	str	r3, [sp, #24]
 8008150:	2301      	movs	r3, #1
 8008152:	9004      	str	r0, [sp, #16]
 8008154:	9421      	str	r4, [sp, #132]	; 0x84
 8008156:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800815a:	9307      	str	r3, [sp, #28]
 800815c:	e4c4      	b.n	8007ae8 <_dtoa_r+0x450>
 800815e:	f000 fcb5 	bl	8008acc <__multadd>
 8008162:	4627      	mov	r7, r4
 8008164:	4605      	mov	r5, r0
 8008166:	4680      	mov	r8, r0
 8008168:	e610      	b.n	8007d8c <_dtoa_r+0x6f4>
 800816a:	4658      	mov	r0, fp
 800816c:	f000 fca4 	bl	8008ab8 <_Bfree>
 8008170:	2301      	movs	r3, #1
 8008172:	e634      	b.n	8007dde <_dtoa_r+0x746>
 8008174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008176:	2b02      	cmp	r3, #2
 8008178:	f77f adf3 	ble.w	8007d62 <_dtoa_r+0x6ca>
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80cc 	beq.w	800831c <_dtoa_r+0xc84>
 8008184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008186:	9c04      	ldr	r4, [sp, #16]
 8008188:	43db      	mvns	r3, r3
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	e78b      	b.n	80080a6 <_dtoa_r+0xa0e>
 800818e:	9a05      	ldr	r2, [sp, #20]
 8008190:	3201      	adds	r2, #1
 8008192:	9205      	str	r2, [sp, #20]
 8008194:	9a04      	ldr	r2, [sp, #16]
 8008196:	2331      	movs	r3, #49	; 0x31
 8008198:	7013      	strb	r3, [r2, #0]
 800819a:	e6a5      	b.n	8007ee8 <_dtoa_r+0x850>
 800819c:	2401      	movs	r4, #1
 800819e:	9421      	str	r4, [sp, #132]	; 0x84
 80081a0:	9406      	str	r4, [sp, #24]
 80081a2:	f7ff bb9b 	b.w	80078dc <_dtoa_r+0x244>
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7f8 fb6a 	bl	8000880 <__aeabi_i2d>
 80081ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b0:	f7f8 fbd0 	bl	8000954 <__aeabi_dmul>
 80081b4:	2200      	movs	r2, #0
 80081b6:	4b67      	ldr	r3, [pc, #412]	; (8008354 <_dtoa_r+0xcbc>)
 80081b8:	f7f8 fa16 	bl	80005e8 <__adddf3>
 80081bc:	4606      	mov	r6, r0
 80081be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80081c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	4b5f      	ldr	r3, [pc, #380]	; (8008348 <_dtoa_r+0xcb0>)
 80081ca:	f7f8 fa0b 	bl	80005e4 <__aeabi_dsub>
 80081ce:	4632      	mov	r2, r6
 80081d0:	463b      	mov	r3, r7
 80081d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d6:	f7f8 fe4d 	bl	8000e74 <__aeabi_dcmpgt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d146      	bne.n	800826c <_dtoa_r+0xbd4>
 80081de:	4632      	mov	r2, r6
 80081e0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80081e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e8:	f7f8 fe26 	bl	8000e38 <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f43f ac77 	beq.w	8007ae0 <_dtoa_r+0x448>
 80081f2:	2600      	movs	r6, #0
 80081f4:	4635      	mov	r5, r6
 80081f6:	e7c5      	b.n	8008184 <_dtoa_r+0xaec>
 80081f8:	2301      	movs	r3, #1
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	e6bd      	b.n	8007f7a <_dtoa_r+0x8e2>
 80081fe:	4651      	mov	r1, sl
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	4658      	mov	r0, fp
 8008204:	f000 fda2 	bl	8008d4c <__pow5mult>
 8008208:	4682      	mov	sl, r0
 800820a:	e574      	b.n	8007cf6 <_dtoa_r+0x65e>
 800820c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8008210:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008214:	e678      	b.n	8007f08 <_dtoa_r+0x870>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821a:	1afb      	subs	r3, r7, r3
 800821c:	441a      	add	r2, r3
 800821e:	e9cd 7208 	strd	r7, r2, [sp, #32]
 8008222:	2700      	movs	r7, #0
 8008224:	e51e      	b.n	8007c64 <_dtoa_r+0x5cc>
 8008226:	2b00      	cmp	r3, #0
 8008228:	f107 0401 	add.w	r4, r7, #1
 800822c:	f300 80bc 	bgt.w	80083a8 <_dtoa_r+0xd10>
 8008230:	9502      	str	r5, [sp, #8]
 8008232:	f887 9000 	strb.w	r9, [r7]
 8008236:	4645      	mov	r5, r8
 8008238:	e656      	b.n	8007ee8 <_dtoa_r+0x850>
 800823a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800823e:	2602      	movs	r6, #2
 8008240:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008244:	f7ff bb7d 	b.w	8007942 <_dtoa_r+0x2aa>
 8008248:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800824c:	f000 80be 	beq.w	80083cc <_dtoa_r+0xd34>
 8008250:	f109 0901 	add.w	r9, r9, #1
 8008254:	9502      	str	r5, [sp, #8]
 8008256:	f887 9000 	strb.w	r9, [r7]
 800825a:	4645      	mov	r5, r8
 800825c:	e644      	b.n	8007ee8 <_dtoa_r+0x850>
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	eba9 0403 	sub.w	r4, r9, r3
 8008264:	e505      	b.n	8007c72 <_dtoa_r+0x5da>
 8008266:	9502      	str	r5, [sp, #8]
 8008268:	4645      	mov	r5, r8
 800826a:	e61f      	b.n	8007eac <_dtoa_r+0x814>
 800826c:	2600      	movs	r6, #0
 800826e:	4635      	mov	r5, r6
 8008270:	e712      	b.n	8008098 <_dtoa_r+0xa00>
 8008272:	9a04      	ldr	r2, [sp, #16]
 8008274:	2330      	movs	r3, #48	; 0x30
 8008276:	7013      	strb	r3, [r2, #0]
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800827e:	3301      	adds	r3, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4613      	mov	r3, r2
 8008284:	e4de      	b.n	8007c44 <_dtoa_r+0x5ac>
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	f7f8 fb63 	bl	8000954 <__aeabi_dmul>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	701d      	strb	r5, [r3, #0]
 8008292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008294:	2b01      	cmp	r3, #1
 8008296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800829a:	d023      	beq.n	80082e4 <_dtoa_r+0xc4c>
 800829c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80082a4:	4413      	add	r3, r2
 80082a6:	46c1      	mov	r9, r8
 80082a8:	4698      	mov	r8, r3
 80082aa:	2200      	movs	r2, #0
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <_dtoa_r+0xcc0>)
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 fb4f 	bl	8000954 <__aeabi_dmul>
 80082b6:	460f      	mov	r7, r1
 80082b8:	4606      	mov	r6, r0
 80082ba:	f7f8 fdfb 	bl	8000eb4 <__aeabi_d2iz>
 80082be:	4605      	mov	r5, r0
 80082c0:	f7f8 fade 	bl	8000880 <__aeabi_i2d>
 80082c4:	3530      	adds	r5, #48	; 0x30
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4630      	mov	r0, r6
 80082cc:	4639      	mov	r1, r7
 80082ce:	f7f8 f989 	bl	80005e4 <__aeabi_dsub>
 80082d2:	f804 5b01 	strb.w	r5, [r4], #1
 80082d6:	4544      	cmp	r4, r8
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	d1e5      	bne.n	80082aa <_dtoa_r+0xc12>
 80082de:	46c8      	mov	r8, r9
 80082e0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <_dtoa_r+0xcc4>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ec:	f7f8 f97c 	bl	80005e8 <__adddf3>
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	f7f8 fda0 	bl	8000e38 <__aeabi_dcmplt>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d06d      	beq.n	80083d8 <_dtoa_r+0xd40>
 80082fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082fe:	9305      	str	r3, [sp, #20]
 8008300:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8008304:	9a04      	ldr	r2, [sp, #16]
 8008306:	e499      	b.n	8007c3c <_dtoa_r+0x5a4>
 8008308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800830a:	9f08      	ldr	r7, [sp, #32]
 800830c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008310:	464c      	mov	r4, r9
 8008312:	4498      	add	r8, r3
 8008314:	4499      	add	r9, r3
 8008316:	e4ac      	b.n	8007c72 <_dtoa_r+0x5da>
 8008318:	2300      	movs	r3, #0
 800831a:	e66e      	b.n	8007ffa <_dtoa_r+0x962>
 800831c:	4631      	mov	r1, r6
 800831e:	2205      	movs	r2, #5
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fbd3 	bl	8008acc <__multadd>
 8008326:	4601      	mov	r1, r0
 8008328:	4606      	mov	r6, r0
 800832a:	4650      	mov	r0, sl
 800832c:	f000 fdb4 	bl	8008e98 <__mcmp>
 8008330:	2800      	cmp	r0, #0
 8008332:	f73f aeb1 	bgt.w	8008098 <_dtoa_r+0xa00>
 8008336:	e725      	b.n	8008184 <_dtoa_r+0xaec>
 8008338:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800833c:	2602      	movs	r6, #2
 800833e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008342:	f7ff bb17 	b.w	8007974 <_dtoa_r+0x2dc>
 8008346:	bf00      	nop
 8008348:	40140000 	.word	0x40140000
 800834c:	0800a548 	.word	0x0800a548
 8008350:	0800a520 	.word	0x0800a520
 8008354:	401c0000 	.word	0x401c0000
 8008358:	40240000 	.word	0x40240000
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	9b06      	ldr	r3, [sp, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f43f af1f 	beq.w	80081a6 <_dtoa_r+0xb0e>
 8008368:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800836a:	2c00      	cmp	r4, #0
 800836c:	f77f abb8 	ble.w	8007ae0 <_dtoa_r+0x448>
 8008370:	2200      	movs	r2, #0
 8008372:	4b42      	ldr	r3, [pc, #264]	; (800847c <_dtoa_r+0xde4>)
 8008374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008378:	f7f8 faec 	bl	8000954 <__aeabi_dmul>
 800837c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008380:	1c70      	adds	r0, r6, #1
 8008382:	f7f8 fa7d 	bl	8000880 <__aeabi_i2d>
 8008386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800838a:	f7f8 fae3 	bl	8000954 <__aeabi_dmul>
 800838e:	4b3c      	ldr	r3, [pc, #240]	; (8008480 <_dtoa_r+0xde8>)
 8008390:	2200      	movs	r2, #0
 8008392:	f7f8 f929 	bl	80005e8 <__adddf3>
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	940e      	str	r4, [sp, #56]	; 0x38
 800839a:	3b01      	subs	r3, #1
 800839c:	4606      	mov	r6, r0
 800839e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80083a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80083a4:	f7ff bb07 	b.w	80079b6 <_dtoa_r+0x31e>
 80083a8:	4651      	mov	r1, sl
 80083aa:	2201      	movs	r2, #1
 80083ac:	4658      	mov	r0, fp
 80083ae:	f000 fd1d 	bl	8008dec <__lshift>
 80083b2:	4631      	mov	r1, r6
 80083b4:	4682      	mov	sl, r0
 80083b6:	f000 fd6f 	bl	8008e98 <__mcmp>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dd32      	ble.n	8008424 <_dtoa_r+0xd8c>
 80083be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083c2:	d003      	beq.n	80083cc <_dtoa_r+0xd34>
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80083ca:	e731      	b.n	8008230 <_dtoa_r+0xb98>
 80083cc:	2239      	movs	r2, #57	; 0x39
 80083ce:	9502      	str	r5, [sp, #8]
 80083d0:	703a      	strb	r2, [r7, #0]
 80083d2:	4645      	mov	r5, r8
 80083d4:	9904      	ldr	r1, [sp, #16]
 80083d6:	e581      	b.n	8007edc <_dtoa_r+0x844>
 80083d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083dc:	2000      	movs	r0, #0
 80083de:	4929      	ldr	r1, [pc, #164]	; (8008484 <_dtoa_r+0xdec>)
 80083e0:	f7f8 f900 	bl	80005e4 <__aeabi_dsub>
 80083e4:	4632      	mov	r2, r6
 80083e6:	463b      	mov	r3, r7
 80083e8:	f7f8 fd44 	bl	8000e74 <__aeabi_dcmpgt>
 80083ec:	b910      	cbnz	r0, 80083f4 <_dtoa_r+0xd5c>
 80083ee:	f7ff bb77 	b.w	8007ae0 <_dtoa_r+0x448>
 80083f2:	4614      	mov	r4, r2
 80083f4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80083f8:	2b30      	cmp	r3, #48	; 0x30
 80083fa:	f104 32ff 	add.w	r2, r4, #4294967295
 80083fe:	d0f8      	beq.n	80083f2 <_dtoa_r+0xd5a>
 8008400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	e580      	b.n	8007f08 <_dtoa_r+0x870>
 8008406:	f8dd a008 	ldr.w	sl, [sp, #8]
 800840a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	9a04      	ldr	r2, [sp, #16]
 8008410:	e414      	b.n	8007c3c <_dtoa_r+0x5a4>
 8008412:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008416:	f107 0401 	add.w	r4, r7, #1
 800841a:	d0d7      	beq.n	80083cc <_dtoa_r+0xd34>
 800841c:	9b02      	ldr	r3, [sp, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	dcd0      	bgt.n	80083c4 <_dtoa_r+0xd2c>
 8008422:	e705      	b.n	8008230 <_dtoa_r+0xb98>
 8008424:	f47f af04 	bne.w	8008230 <_dtoa_r+0xb98>
 8008428:	f019 0f01 	tst.w	r9, #1
 800842c:	f43f af00 	beq.w	8008230 <_dtoa_r+0xb98>
 8008430:	e7c5      	b.n	80083be <_dtoa_r+0xd26>
 8008432:	4629      	mov	r1, r5
 8008434:	2300      	movs	r3, #0
 8008436:	220a      	movs	r2, #10
 8008438:	4658      	mov	r0, fp
 800843a:	f000 fb47 	bl	8008acc <__multadd>
 800843e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008440:	2b00      	cmp	r3, #0
 8008442:	4605      	mov	r5, r0
 8008444:	dd09      	ble.n	800845a <_dtoa_r+0xdc2>
 8008446:	9306      	str	r3, [sp, #24]
 8008448:	e48f      	b.n	8007d6a <_dtoa_r+0x6d2>
 800844a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800844c:	2b02      	cmp	r3, #2
 800844e:	dc09      	bgt.n	8008464 <_dtoa_r+0xdcc>
 8008450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008452:	e50e      	b.n	8007e72 <_dtoa_r+0x7da>
 8008454:	2602      	movs	r6, #2
 8008456:	f7ff ba8d 	b.w	8007974 <_dtoa_r+0x2dc>
 800845a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800845c:	2b02      	cmp	r3, #2
 800845e:	dc01      	bgt.n	8008464 <_dtoa_r+0xdcc>
 8008460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008462:	e7f0      	b.n	8008446 <_dtoa_r+0xdae>
 8008464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	e688      	b.n	800817c <_dtoa_r+0xae4>
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <_dtoa_r+0xdf0>)
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	f7ff b94b 	b.w	8007708 <_dtoa_r+0x70>
 8008472:	f43f ac5d 	beq.w	8007d30 <_dtoa_r+0x698>
 8008476:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800847a:	e559      	b.n	8007f30 <_dtoa_r+0x898>
 800847c:	40240000 	.word	0x40240000
 8008480:	401c0000 	.word	0x401c0000
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	0800a50c 	.word	0x0800a50c

0800848c <_localeconv_r>:
 800848c:	4a04      	ldr	r2, [pc, #16]	; (80084a0 <_localeconv_r+0x14>)
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <_localeconv_r+0x18>)
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008494:	2800      	cmp	r0, #0
 8008496:	bf08      	it	eq
 8008498:	4618      	moveq	r0, r3
 800849a:	30f0      	adds	r0, #240	; 0xf0
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	2000083c 	.word	0x2000083c
 80084a4:	20000c68 	.word	0x20000c68

080084a8 <_malloc_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	f101 050b 	add.w	r5, r1, #11
 80084b0:	2d16      	cmp	r5, #22
 80084b2:	b083      	sub	sp, #12
 80084b4:	4606      	mov	r6, r0
 80084b6:	d823      	bhi.n	8008500 <_malloc_r+0x58>
 80084b8:	2910      	cmp	r1, #16
 80084ba:	f200 80b9 	bhi.w	8008630 <_malloc_r+0x188>
 80084be:	f000 fac9 	bl	8008a54 <__malloc_lock>
 80084c2:	2510      	movs	r5, #16
 80084c4:	2318      	movs	r3, #24
 80084c6:	2002      	movs	r0, #2
 80084c8:	4fc5      	ldr	r7, [pc, #788]	; (80087e0 <_malloc_r+0x338>)
 80084ca:	443b      	add	r3, r7
 80084cc:	f1a3 0208 	sub.w	r2, r3, #8
 80084d0:	685c      	ldr	r4, [r3, #4]
 80084d2:	4294      	cmp	r4, r2
 80084d4:	f000 8166 	beq.w	80087a4 <_malloc_r+0x2fc>
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	4423      	add	r3, r4
 80084e0:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	60e9      	str	r1, [r5, #12]
 80084e8:	f042 0201 	orr.w	r2, r2, #1
 80084ec:	608d      	str	r5, [r1, #8]
 80084ee:	4630      	mov	r0, r6
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	f000 fab5 	bl	8008a60 <__malloc_unlock>
 80084f6:	3408      	adds	r4, #8
 80084f8:	4620      	mov	r0, r4
 80084fa:	b003      	add	sp, #12
 80084fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	f035 0507 	bics.w	r5, r5, #7
 8008504:	f100 8094 	bmi.w	8008630 <_malloc_r+0x188>
 8008508:	42a9      	cmp	r1, r5
 800850a:	f200 8091 	bhi.w	8008630 <_malloc_r+0x188>
 800850e:	f000 faa1 	bl	8008a54 <__malloc_lock>
 8008512:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008516:	f0c0 8183 	bcc.w	8008820 <_malloc_r+0x378>
 800851a:	0a6b      	lsrs	r3, r5, #9
 800851c:	f000 808f 	beq.w	800863e <_malloc_r+0x196>
 8008520:	2b04      	cmp	r3, #4
 8008522:	f200 8146 	bhi.w	80087b2 <_malloc_r+0x30a>
 8008526:	09ab      	lsrs	r3, r5, #6
 8008528:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800852c:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8008530:	00c3      	lsls	r3, r0, #3
 8008532:	4fab      	ldr	r7, [pc, #684]	; (80087e0 <_malloc_r+0x338>)
 8008534:	443b      	add	r3, r7
 8008536:	f1a3 0108 	sub.w	r1, r3, #8
 800853a:	685c      	ldr	r4, [r3, #4]
 800853c:	42a1      	cmp	r1, r4
 800853e:	d106      	bne.n	800854e <_malloc_r+0xa6>
 8008540:	e00c      	b.n	800855c <_malloc_r+0xb4>
 8008542:	2a00      	cmp	r2, #0
 8008544:	f280 811d 	bge.w	8008782 <_malloc_r+0x2da>
 8008548:	68e4      	ldr	r4, [r4, #12]
 800854a:	42a1      	cmp	r1, r4
 800854c:	d006      	beq.n	800855c <_malloc_r+0xb4>
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	1b5a      	subs	r2, r3, r5
 8008556:	2a0f      	cmp	r2, #15
 8008558:	ddf3      	ble.n	8008542 <_malloc_r+0x9a>
 800855a:	4660      	mov	r0, ip
 800855c:	693c      	ldr	r4, [r7, #16]
 800855e:	f8df c294 	ldr.w	ip, [pc, #660]	; 80087f4 <_malloc_r+0x34c>
 8008562:	4564      	cmp	r4, ip
 8008564:	d071      	beq.n	800864a <_malloc_r+0x1a2>
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	f023 0303 	bic.w	r3, r3, #3
 800856c:	1b5a      	subs	r2, r3, r5
 800856e:	2a0f      	cmp	r2, #15
 8008570:	f300 8144 	bgt.w	80087fc <_malloc_r+0x354>
 8008574:	2a00      	cmp	r2, #0
 8008576:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 800857a:	f280 8126 	bge.w	80087ca <_malloc_r+0x322>
 800857e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008582:	f080 8169 	bcs.w	8008858 <_malloc_r+0x3b0>
 8008586:	08db      	lsrs	r3, r3, #3
 8008588:	1c59      	adds	r1, r3, #1
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8008590:	f8c4 8008 	str.w	r8, [r4, #8]
 8008594:	f04f 0e01 	mov.w	lr, #1
 8008598:	109b      	asrs	r3, r3, #2
 800859a:	fa0e f303 	lsl.w	r3, lr, r3
 800859e:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f1ae 0208 	sub.w	r2, lr, #8
 80085a8:	60e2      	str	r2, [r4, #12]
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 80085b0:	f8c8 400c 	str.w	r4, [r8, #12]
 80085b4:	1082      	asrs	r2, r0, #2
 80085b6:	2401      	movs	r4, #1
 80085b8:	4094      	lsls	r4, r2
 80085ba:	429c      	cmp	r4, r3
 80085bc:	d84b      	bhi.n	8008656 <_malloc_r+0x1ae>
 80085be:	421c      	tst	r4, r3
 80085c0:	d106      	bne.n	80085d0 <_malloc_r+0x128>
 80085c2:	f020 0003 	bic.w	r0, r0, #3
 80085c6:	0064      	lsls	r4, r4, #1
 80085c8:	421c      	tst	r4, r3
 80085ca:	f100 0004 	add.w	r0, r0, #4
 80085ce:	d0fa      	beq.n	80085c6 <_malloc_r+0x11e>
 80085d0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80085d4:	46ce      	mov	lr, r9
 80085d6:	4680      	mov	r8, r0
 80085d8:	f8de 300c 	ldr.w	r3, [lr, #12]
 80085dc:	459e      	cmp	lr, r3
 80085de:	d107      	bne.n	80085f0 <_malloc_r+0x148>
 80085e0:	e122      	b.n	8008828 <_malloc_r+0x380>
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	f280 8129 	bge.w	800883a <_malloc_r+0x392>
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	459e      	cmp	lr, r3
 80085ec:	f000 811c 	beq.w	8008828 <_malloc_r+0x380>
 80085f0:	6859      	ldr	r1, [r3, #4]
 80085f2:	f021 0103 	bic.w	r1, r1, #3
 80085f6:	1b4a      	subs	r2, r1, r5
 80085f8:	2a0f      	cmp	r2, #15
 80085fa:	ddf2      	ble.n	80085e2 <_malloc_r+0x13a>
 80085fc:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8008600:	195c      	adds	r4, r3, r5
 8008602:	f045 0501 	orr.w	r5, r5, #1
 8008606:	605d      	str	r5, [r3, #4]
 8008608:	f042 0501 	orr.w	r5, r2, #1
 800860c:	f8c8 e00c 	str.w	lr, [r8, #12]
 8008610:	4630      	mov	r0, r6
 8008612:	f8ce 8008 	str.w	r8, [lr, #8]
 8008616:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800861a:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 800861e:	6065      	str	r5, [r4, #4]
 8008620:	505a      	str	r2, [r3, r1]
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	f000 fa1c 	bl	8008a60 <__malloc_unlock>
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	f103 0408 	add.w	r4, r3, #8
 800862e:	e763      	b.n	80084f8 <_malloc_r+0x50>
 8008630:	2400      	movs	r4, #0
 8008632:	230c      	movs	r3, #12
 8008634:	4620      	mov	r0, r4
 8008636:	6033      	str	r3, [r6, #0]
 8008638:	b003      	add	sp, #12
 800863a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008642:	2040      	movs	r0, #64	; 0x40
 8008644:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8008648:	e773      	b.n	8008532 <_malloc_r+0x8a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	1082      	asrs	r2, r0, #2
 800864e:	2401      	movs	r4, #1
 8008650:	4094      	lsls	r4, r2
 8008652:	429c      	cmp	r4, r3
 8008654:	d9b3      	bls.n	80085be <_malloc_r+0x116>
 8008656:	68bc      	ldr	r4, [r7, #8]
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	f023 0903 	bic.w	r9, r3, #3
 800865e:	45a9      	cmp	r9, r5
 8008660:	d303      	bcc.n	800866a <_malloc_r+0x1c2>
 8008662:	eba9 0305 	sub.w	r3, r9, r5
 8008666:	2b0f      	cmp	r3, #15
 8008668:	dc7b      	bgt.n	8008762 <_malloc_r+0x2ba>
 800866a:	4b5e      	ldr	r3, [pc, #376]	; (80087e4 <_malloc_r+0x33c>)
 800866c:	f8df a188 	ldr.w	sl, [pc, #392]	; 80087f8 <_malloc_r+0x350>
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	f8da 3000 	ldr.w	r3, [sl]
 8008676:	3301      	adds	r3, #1
 8008678:	eb05 0802 	add.w	r8, r5, r2
 800867c:	f000 8148 	beq.w	8008910 <_malloc_r+0x468>
 8008680:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8008684:	f108 080f 	add.w	r8, r8, #15
 8008688:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 800868c:	f028 080f 	bic.w	r8, r8, #15
 8008690:	4641      	mov	r1, r8
 8008692:	4630      	mov	r0, r6
 8008694:	f7fa fe84 	bl	80033a0 <_sbrk_r>
 8008698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800869c:	4683      	mov	fp, r0
 800869e:	f000 8104 	beq.w	80088aa <_malloc_r+0x402>
 80086a2:	eb04 0009 	add.w	r0, r4, r9
 80086a6:	4558      	cmp	r0, fp
 80086a8:	f200 80fd 	bhi.w	80088a6 <_malloc_r+0x3fe>
 80086ac:	4a4e      	ldr	r2, [pc, #312]	; (80087e8 <_malloc_r+0x340>)
 80086ae:	6813      	ldr	r3, [r2, #0]
 80086b0:	4443      	add	r3, r8
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	f000 814d 	beq.w	8008952 <_malloc_r+0x4aa>
 80086b8:	f8da 1000 	ldr.w	r1, [sl]
 80086bc:	3101      	adds	r1, #1
 80086be:	bf1b      	ittet	ne
 80086c0:	ebab 0000 	subne.w	r0, fp, r0
 80086c4:	181b      	addne	r3, r3, r0
 80086c6:	f8ca b000 	streq.w	fp, [sl]
 80086ca:	6013      	strne	r3, [r2, #0]
 80086cc:	f01b 0307 	ands.w	r3, fp, #7
 80086d0:	f000 8134 	beq.w	800893c <_malloc_r+0x494>
 80086d4:	f1c3 0108 	rsb	r1, r3, #8
 80086d8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80086dc:	448b      	add	fp, r1
 80086de:	3308      	adds	r3, #8
 80086e0:	44d8      	add	r8, fp
 80086e2:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80086e6:	eba3 0808 	sub.w	r8, r3, r8
 80086ea:	4641      	mov	r1, r8
 80086ec:	4630      	mov	r0, r6
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	f7fa fe56 	bl	80033a0 <_sbrk_r>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	9a01      	ldr	r2, [sp, #4]
 80086f8:	f000 8146 	beq.w	8008988 <_malloc_r+0x4e0>
 80086fc:	eba0 010b 	sub.w	r1, r0, fp
 8008700:	4441      	add	r1, r8
 8008702:	f041 0101 	orr.w	r1, r1, #1
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	f8c7 b008 	str.w	fp, [r7, #8]
 800870c:	4443      	add	r3, r8
 800870e:	42bc      	cmp	r4, r7
 8008710:	f8cb 1004 	str.w	r1, [fp, #4]
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	d015      	beq.n	8008744 <_malloc_r+0x29c>
 8008718:	f1b9 0f0f 	cmp.w	r9, #15
 800871c:	f240 8130 	bls.w	8008980 <_malloc_r+0x4d8>
 8008720:	6860      	ldr	r0, [r4, #4]
 8008722:	f1a9 010c 	sub.w	r1, r9, #12
 8008726:	f021 0107 	bic.w	r1, r1, #7
 800872a:	f000 0001 	and.w	r0, r0, #1
 800872e:	eb04 0c01 	add.w	ip, r4, r1
 8008732:	4308      	orrs	r0, r1
 8008734:	f04f 0e05 	mov.w	lr, #5
 8008738:	290f      	cmp	r1, #15
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8008740:	f200 813a 	bhi.w	80089b8 <_malloc_r+0x510>
 8008744:	4a29      	ldr	r2, [pc, #164]	; (80087ec <_malloc_r+0x344>)
 8008746:	482a      	ldr	r0, [pc, #168]	; (80087f0 <_malloc_r+0x348>)
 8008748:	6811      	ldr	r1, [r2, #0]
 800874a:	68bc      	ldr	r4, [r7, #8]
 800874c:	428b      	cmp	r3, r1
 800874e:	6801      	ldr	r1, [r0, #0]
 8008750:	bf88      	it	hi
 8008752:	6013      	strhi	r3, [r2, #0]
 8008754:	6862      	ldr	r2, [r4, #4]
 8008756:	428b      	cmp	r3, r1
 8008758:	f022 0203 	bic.w	r2, r2, #3
 800875c:	bf88      	it	hi
 800875e:	6003      	strhi	r3, [r0, #0]
 8008760:	e0a7      	b.n	80088b2 <_malloc_r+0x40a>
 8008762:	1962      	adds	r2, r4, r5
 8008764:	f043 0301 	orr.w	r3, r3, #1
 8008768:	f045 0501 	orr.w	r5, r5, #1
 800876c:	6065      	str	r5, [r4, #4]
 800876e:	4630      	mov	r0, r6
 8008770:	60ba      	str	r2, [r7, #8]
 8008772:	6053      	str	r3, [r2, #4]
 8008774:	f000 f974 	bl	8008a60 <__malloc_unlock>
 8008778:	3408      	adds	r4, #8
 800877a:	4620      	mov	r0, r4
 800877c:	b003      	add	sp, #12
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008782:	4423      	add	r3, r4
 8008784:	68e1      	ldr	r1, [r4, #12]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	68a5      	ldr	r5, [r4, #8]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	60e9      	str	r1, [r5, #12]
 8008790:	4630      	mov	r0, r6
 8008792:	608d      	str	r5, [r1, #8]
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	f000 f963 	bl	8008a60 <__malloc_unlock>
 800879a:	3408      	adds	r4, #8
 800879c:	4620      	mov	r0, r4
 800879e:	b003      	add	sp, #12
 80087a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a4:	68dc      	ldr	r4, [r3, #12]
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	bf08      	it	eq
 80087aa:	3002      	addeq	r0, #2
 80087ac:	f43f aed6 	beq.w	800855c <_malloc_r+0xb4>
 80087b0:	e692      	b.n	80084d8 <_malloc_r+0x30>
 80087b2:	2b14      	cmp	r3, #20
 80087b4:	d971      	bls.n	800889a <_malloc_r+0x3f2>
 80087b6:	2b54      	cmp	r3, #84	; 0x54
 80087b8:	f200 80ad 	bhi.w	8008916 <_malloc_r+0x46e>
 80087bc:	0b2b      	lsrs	r3, r5, #12
 80087be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80087c2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80087c6:	00c3      	lsls	r3, r0, #3
 80087c8:	e6b3      	b.n	8008532 <_malloc_r+0x8a>
 80087ca:	4423      	add	r3, r4
 80087cc:	4630      	mov	r0, r6
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	f042 0201 	orr.w	r2, r2, #1
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	3408      	adds	r4, #8
 80087d8:	f000 f942 	bl	8008a60 <__malloc_unlock>
 80087dc:	e68c      	b.n	80084f8 <_malloc_r+0x50>
 80087de:	bf00      	nop
 80087e0:	20000dd4 	.word	0x20000dd4
 80087e4:	20002eb0 	.word	0x20002eb0
 80087e8:	20002e80 	.word	0x20002e80
 80087ec:	20002ea8 	.word	0x20002ea8
 80087f0:	20002eac 	.word	0x20002eac
 80087f4:	20000ddc 	.word	0x20000ddc
 80087f8:	200011dc 	.word	0x200011dc
 80087fc:	1961      	adds	r1, r4, r5
 80087fe:	f045 0e01 	orr.w	lr, r5, #1
 8008802:	f042 0501 	orr.w	r5, r2, #1
 8008806:	f8c4 e004 	str.w	lr, [r4, #4]
 800880a:	4630      	mov	r0, r6
 800880c:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8008810:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8008814:	604d      	str	r5, [r1, #4]
 8008816:	50e2      	str	r2, [r4, r3]
 8008818:	f000 f922 	bl	8008a60 <__malloc_unlock>
 800881c:	3408      	adds	r4, #8
 800881e:	e66b      	b.n	80084f8 <_malloc_r+0x50>
 8008820:	08e8      	lsrs	r0, r5, #3
 8008822:	f105 0308 	add.w	r3, r5, #8
 8008826:	e64f      	b.n	80084c8 <_malloc_r+0x20>
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	f018 0f03 	tst.w	r8, #3
 8008830:	f10e 0e08 	add.w	lr, lr, #8
 8008834:	f47f aed0 	bne.w	80085d8 <_malloc_r+0x130>
 8008838:	e052      	b.n	80088e0 <_malloc_r+0x438>
 800883a:	4419      	add	r1, r3
 800883c:	461c      	mov	r4, r3
 800883e:	684a      	ldr	r2, [r1, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	604a      	str	r2, [r1, #4]
 800884c:	4630      	mov	r0, r6
 800884e:	60eb      	str	r3, [r5, #12]
 8008850:	609d      	str	r5, [r3, #8]
 8008852:	f000 f905 	bl	8008a60 <__malloc_unlock>
 8008856:	e64f      	b.n	80084f8 <_malloc_r+0x50>
 8008858:	0a5a      	lsrs	r2, r3, #9
 800885a:	2a04      	cmp	r2, #4
 800885c:	d935      	bls.n	80088ca <_malloc_r+0x422>
 800885e:	2a14      	cmp	r2, #20
 8008860:	d86f      	bhi.n	8008942 <_malloc_r+0x49a>
 8008862:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8008866:	00c9      	lsls	r1, r1, #3
 8008868:	325b      	adds	r2, #91	; 0x5b
 800886a:	eb07 0e01 	add.w	lr, r7, r1
 800886e:	5879      	ldr	r1, [r7, r1]
 8008870:	f1ae 0e08 	sub.w	lr, lr, #8
 8008874:	458e      	cmp	lr, r1
 8008876:	d058      	beq.n	800892a <_malloc_r+0x482>
 8008878:	684a      	ldr	r2, [r1, #4]
 800887a:	f022 0203 	bic.w	r2, r2, #3
 800887e:	429a      	cmp	r2, r3
 8008880:	d902      	bls.n	8008888 <_malloc_r+0x3e0>
 8008882:	6889      	ldr	r1, [r1, #8]
 8008884:	458e      	cmp	lr, r1
 8008886:	d1f7      	bne.n	8008878 <_malloc_r+0x3d0>
 8008888:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8008892:	f8ce 4008 	str.w	r4, [lr, #8]
 8008896:	60cc      	str	r4, [r1, #12]
 8008898:	e68c      	b.n	80085b4 <_malloc_r+0x10c>
 800889a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800889e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80088a2:	00c3      	lsls	r3, r0, #3
 80088a4:	e645      	b.n	8008532 <_malloc_r+0x8a>
 80088a6:	42bc      	cmp	r4, r7
 80088a8:	d072      	beq.n	8008990 <_malloc_r+0x4e8>
 80088aa:	68bc      	ldr	r4, [r7, #8]
 80088ac:	6862      	ldr	r2, [r4, #4]
 80088ae:	f022 0203 	bic.w	r2, r2, #3
 80088b2:	4295      	cmp	r5, r2
 80088b4:	eba2 0305 	sub.w	r3, r2, r5
 80088b8:	d802      	bhi.n	80088c0 <_malloc_r+0x418>
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	f73f af51 	bgt.w	8008762 <_malloc_r+0x2ba>
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f8cd 	bl	8008a60 <__malloc_unlock>
 80088c6:	2400      	movs	r4, #0
 80088c8:	e616      	b.n	80084f8 <_malloc_r+0x50>
 80088ca:	099a      	lsrs	r2, r3, #6
 80088cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80088d0:	00c9      	lsls	r1, r1, #3
 80088d2:	3238      	adds	r2, #56	; 0x38
 80088d4:	e7c9      	b.n	800886a <_malloc_r+0x3c2>
 80088d6:	f8d9 9000 	ldr.w	r9, [r9]
 80088da:	4599      	cmp	r9, r3
 80088dc:	f040 8083 	bne.w	80089e6 <_malloc_r+0x53e>
 80088e0:	f010 0f03 	tst.w	r0, #3
 80088e4:	f1a9 0308 	sub.w	r3, r9, #8
 80088e8:	f100 30ff 	add.w	r0, r0, #4294967295
 80088ec:	d1f3      	bne.n	80088d6 <_malloc_r+0x42e>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	ea23 0304 	bic.w	r3, r3, r4
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	0064      	lsls	r4, r4, #1
 80088f8:	429c      	cmp	r4, r3
 80088fa:	f63f aeac 	bhi.w	8008656 <_malloc_r+0x1ae>
 80088fe:	b91c      	cbnz	r4, 8008908 <_malloc_r+0x460>
 8008900:	e6a9      	b.n	8008656 <_malloc_r+0x1ae>
 8008902:	0064      	lsls	r4, r4, #1
 8008904:	f108 0804 	add.w	r8, r8, #4
 8008908:	421c      	tst	r4, r3
 800890a:	d0fa      	beq.n	8008902 <_malloc_r+0x45a>
 800890c:	4640      	mov	r0, r8
 800890e:	e65f      	b.n	80085d0 <_malloc_r+0x128>
 8008910:	f108 0810 	add.w	r8, r8, #16
 8008914:	e6bc      	b.n	8008690 <_malloc_r+0x1e8>
 8008916:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800891a:	d826      	bhi.n	800896a <_malloc_r+0x4c2>
 800891c:	0beb      	lsrs	r3, r5, #15
 800891e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008922:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8008926:	00c3      	lsls	r3, r0, #3
 8008928:	e603      	b.n	8008532 <_malloc_r+0x8a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	1092      	asrs	r2, r2, #2
 800892e:	f04f 0801 	mov.w	r8, #1
 8008932:	fa08 f202 	lsl.w	r2, r8, r2
 8008936:	4313      	orrs	r3, r2
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	e7a8      	b.n	800888e <_malloc_r+0x3e6>
 800893c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008940:	e6ce      	b.n	80086e0 <_malloc_r+0x238>
 8008942:	2a54      	cmp	r2, #84	; 0x54
 8008944:	d829      	bhi.n	800899a <_malloc_r+0x4f2>
 8008946:	0b1a      	lsrs	r2, r3, #12
 8008948:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800894c:	00c9      	lsls	r1, r1, #3
 800894e:	326e      	adds	r2, #110	; 0x6e
 8008950:	e78b      	b.n	800886a <_malloc_r+0x3c2>
 8008952:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8008956:	2900      	cmp	r1, #0
 8008958:	f47f aeae 	bne.w	80086b8 <_malloc_r+0x210>
 800895c:	eb09 0208 	add.w	r2, r9, r8
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	604a      	str	r2, [r1, #4]
 8008968:	e6ec      	b.n	8008744 <_malloc_r+0x29c>
 800896a:	f240 5254 	movw	r2, #1364	; 0x554
 800896e:	4293      	cmp	r3, r2
 8008970:	d81c      	bhi.n	80089ac <_malloc_r+0x504>
 8008972:	0cab      	lsrs	r3, r5, #18
 8008974:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8008978:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800897c:	00c3      	lsls	r3, r0, #3
 800897e:	e5d8      	b.n	8008532 <_malloc_r+0x8a>
 8008980:	2301      	movs	r3, #1
 8008982:	f8cb 3004 	str.w	r3, [fp, #4]
 8008986:	e79b      	b.n	80088c0 <_malloc_r+0x418>
 8008988:	2101      	movs	r1, #1
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	e6ba      	b.n	8008706 <_malloc_r+0x25e>
 8008990:	4a16      	ldr	r2, [pc, #88]	; (80089ec <_malloc_r+0x544>)
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	4443      	add	r3, r8
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	e68e      	b.n	80086b8 <_malloc_r+0x210>
 800899a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800899e:	d814      	bhi.n	80089ca <_malloc_r+0x522>
 80089a0:	0bda      	lsrs	r2, r3, #15
 80089a2:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80089a6:	00c9      	lsls	r1, r1, #3
 80089a8:	3277      	adds	r2, #119	; 0x77
 80089aa:	e75e      	b.n	800886a <_malloc_r+0x3c2>
 80089ac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80089b0:	207f      	movs	r0, #127	; 0x7f
 80089b2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80089b6:	e5bc      	b.n	8008532 <_malloc_r+0x8a>
 80089b8:	f104 0108 	add.w	r1, r4, #8
 80089bc:	4630      	mov	r0, r6
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	f000 fcc6 	bl	8009350 <_free_r>
 80089c4:	9a01      	ldr	r2, [sp, #4]
 80089c6:	6813      	ldr	r3, [r2, #0]
 80089c8:	e6bc      	b.n	8008744 <_malloc_r+0x29c>
 80089ca:	f240 5154 	movw	r1, #1364	; 0x554
 80089ce:	428a      	cmp	r2, r1
 80089d0:	d805      	bhi.n	80089de <_malloc_r+0x536>
 80089d2:	0c9a      	lsrs	r2, r3, #18
 80089d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80089d8:	00c9      	lsls	r1, r1, #3
 80089da:	327c      	adds	r2, #124	; 0x7c
 80089dc:	e745      	b.n	800886a <_malloc_r+0x3c2>
 80089de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80089e2:	227e      	movs	r2, #126	; 0x7e
 80089e4:	e741      	b.n	800886a <_malloc_r+0x3c2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	e785      	b.n	80088f6 <_malloc_r+0x44e>
 80089ea:	bf00      	nop
 80089ec:	20002e80 	.word	0x20002e80

080089f0 <memcmp>:
 80089f0:	2a03      	cmp	r2, #3
 80089f2:	b470      	push	{r4, r5, r6}
 80089f4:	d914      	bls.n	8008a20 <memcmp+0x30>
 80089f6:	ea40 0501 	orr.w	r5, r0, r1
 80089fa:	07ad      	lsls	r5, r5, #30
 80089fc:	4604      	mov	r4, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	d122      	bne.n	8008a48 <memcmp+0x58>
 8008a02:	681d      	ldr	r5, [r3, #0]
 8008a04:	6826      	ldr	r6, [r4, #0]
 8008a06:	42ae      	cmp	r6, r5
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f103 0304 	add.w	r3, r3, #4
 8008a10:	f104 0404 	add.w	r4, r4, #4
 8008a14:	d118      	bne.n	8008a48 <memcmp+0x58>
 8008a16:	3a04      	subs	r2, #4
 8008a18:	2a03      	cmp	r2, #3
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	d8f0      	bhi.n	8008a02 <memcmp+0x12>
 8008a20:	1e54      	subs	r4, r2, #1
 8008a22:	b172      	cbz	r2, 8008a42 <memcmp+0x52>
 8008a24:	7802      	ldrb	r2, [r0, #0]
 8008a26:	780b      	ldrb	r3, [r1, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	bf08      	it	eq
 8008a2c:	1864      	addeq	r4, r4, r1
 8008a2e:	d006      	beq.n	8008a3e <memcmp+0x4e>
 8008a30:	e00c      	b.n	8008a4c <memcmp+0x5c>
 8008a32:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008a36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d106      	bne.n	8008a4c <memcmp+0x5c>
 8008a3e:	42a1      	cmp	r1, r4
 8008a40:	d1f7      	bne.n	8008a32 <memcmp+0x42>
 8008a42:	2000      	movs	r0, #0
 8008a44:	bc70      	pop	{r4, r5, r6}
 8008a46:	4770      	bx	lr
 8008a48:	1e54      	subs	r4, r2, #1
 8008a4a:	e7eb      	b.n	8008a24 <memcmp+0x34>
 8008a4c:	1ad0      	subs	r0, r2, r3
 8008a4e:	bc70      	pop	{r4, r5, r6}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <__malloc_lock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__malloc_lock+0x8>)
 8008a56:	f000 bd6f 	b.w	8009538 <__retarget_lock_acquire_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20002ec4 	.word	0x20002ec4

08008a60 <__malloc_unlock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	; (8008a68 <__malloc_unlock+0x8>)
 8008a62:	f000 bd6b 	b.w	800953c <__retarget_lock_release_recursive>
 8008a66:	bf00      	nop
 8008a68:	20002ec4 	.word	0x20002ec4

08008a6c <_Balloc>:
 8008a6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	b14b      	cbz	r3, 8008a8a <_Balloc+0x1e>
 8008a76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008a7a:	b180      	cbz	r0, 8008a9e <_Balloc+0x32>
 8008a7c:	6802      	ldr	r2, [r0, #0]
 8008a7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008a82:	2300      	movs	r3, #0
 8008a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
 8008a8a:	2221      	movs	r2, #33	; 0x21
 8008a8c:	2104      	movs	r1, #4
 8008a8e:	f000 fbdb 	bl	8009248 <_calloc_r>
 8008a92:	4603      	mov	r3, r0
 8008a94:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d1ed      	bne.n	8008a76 <_Balloc+0xa>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	bd70      	pop	{r4, r5, r6, pc}
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	fa01 f604 	lsl.w	r6, r1, r4
 8008aa4:	1d72      	adds	r2, r6, #5
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	0092      	lsls	r2, r2, #2
 8008aaa:	f000 fbcd 	bl	8009248 <_calloc_r>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0f3      	beq.n	8008a9a <_Balloc+0x2e>
 8008ab2:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008ab6:	e7e4      	b.n	8008a82 <_Balloc+0x16>

08008ab8 <_Bfree>:
 8008ab8:	b131      	cbz	r1, 8008ac8 <_Bfree+0x10>
 8008aba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008abc:	684a      	ldr	r2, [r1, #4]
 8008abe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ac2:	6008      	str	r0, [r1, #0]
 8008ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop

08008acc <__multadd>:
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ace:	690c      	ldr	r4, [r1, #16]
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	f101 0c14 	add.w	ip, r1, #20
 8008ada:	2700      	movs	r7, #0
 8008adc:	f8dc 0000 	ldr.w	r0, [ip]
 8008ae0:	b281      	uxth	r1, r0
 8008ae2:	fb02 3301 	mla	r3, r2, r1, r3
 8008ae6:	0c01      	lsrs	r1, r0, #16
 8008ae8:	0c18      	lsrs	r0, r3, #16
 8008aea:	fb02 0101 	mla	r1, r2, r1, r0
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	3701      	adds	r7, #1
 8008af2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8008af6:	42bc      	cmp	r4, r7
 8008af8:	f84c 3b04 	str.w	r3, [ip], #4
 8008afc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8008b00:	dcec      	bgt.n	8008adc <__multadd+0x10>
 8008b02:	b13b      	cbz	r3, 8008b14 <__multadd+0x48>
 8008b04:	68aa      	ldr	r2, [r5, #8]
 8008b06:	42a2      	cmp	r2, r4
 8008b08:	dd07      	ble.n	8008b1a <__multadd+0x4e>
 8008b0a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008b0e:	3401      	adds	r4, #1
 8008b10:	6153      	str	r3, [r2, #20]
 8008b12:	612c      	str	r4, [r5, #16]
 8008b14:	4628      	mov	r0, r5
 8008b16:	b003      	add	sp, #12
 8008b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1a:	6869      	ldr	r1, [r5, #4]
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	3101      	adds	r1, #1
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7ff ffa3 	bl	8008a6c <_Balloc>
 8008b26:	692a      	ldr	r2, [r5, #16]
 8008b28:	3202      	adds	r2, #2
 8008b2a:	f105 010c 	add.w	r1, r5, #12
 8008b2e:	4607      	mov	r7, r0
 8008b30:	0092      	lsls	r2, r2, #2
 8008b32:	300c      	adds	r0, #12
 8008b34:	f7f7 fbde 	bl	80002f4 <memcpy>
 8008b38:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008b3a:	6869      	ldr	r1, [r5, #4]
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008b42:	6028      	str	r0, [r5, #0]
 8008b44:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8008b48:	463d      	mov	r5, r7
 8008b4a:	e7de      	b.n	8008b0a <__multadd+0x3e>

08008b4c <__hi0bits>:
 8008b4c:	0c02      	lsrs	r2, r0, #16
 8008b4e:	0412      	lsls	r2, r2, #16
 8008b50:	4603      	mov	r3, r0
 8008b52:	b9c2      	cbnz	r2, 8008b86 <__hi0bits+0x3a>
 8008b54:	0403      	lsls	r3, r0, #16
 8008b56:	2010      	movs	r0, #16
 8008b58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b5c:	bf04      	itt	eq
 8008b5e:	021b      	lsleq	r3, r3, #8
 8008b60:	3008      	addeq	r0, #8
 8008b62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b66:	bf04      	itt	eq
 8008b68:	011b      	lsleq	r3, r3, #4
 8008b6a:	3004      	addeq	r0, #4
 8008b6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b70:	bf04      	itt	eq
 8008b72:	009b      	lsleq	r3, r3, #2
 8008b74:	3002      	addeq	r0, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	db04      	blt.n	8008b84 <__hi0bits+0x38>
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	d501      	bpl.n	8008b82 <__hi0bits+0x36>
 8008b7e:	3001      	adds	r0, #1
 8008b80:	4770      	bx	lr
 8008b82:	2020      	movs	r0, #32
 8008b84:	4770      	bx	lr
 8008b86:	2000      	movs	r0, #0
 8008b88:	e7e6      	b.n	8008b58 <__hi0bits+0xc>
 8008b8a:	bf00      	nop

08008b8c <__lo0bits>:
 8008b8c:	6803      	ldr	r3, [r0, #0]
 8008b8e:	f013 0207 	ands.w	r2, r3, #7
 8008b92:	4601      	mov	r1, r0
 8008b94:	d007      	beq.n	8008ba6 <__lo0bits+0x1a>
 8008b96:	07da      	lsls	r2, r3, #31
 8008b98:	d41f      	bmi.n	8008bda <__lo0bits+0x4e>
 8008b9a:	0798      	lsls	r0, r3, #30
 8008b9c:	d51f      	bpl.n	8008bde <__lo0bits+0x52>
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	600b      	str	r3, [r1, #0]
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	4770      	bx	lr
 8008ba6:	b298      	uxth	r0, r3
 8008ba8:	b1a0      	cbz	r0, 8008bd4 <__lo0bits+0x48>
 8008baa:	4610      	mov	r0, r2
 8008bac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008bb0:	bf04      	itt	eq
 8008bb2:	0a1b      	lsreq	r3, r3, #8
 8008bb4:	3008      	addeq	r0, #8
 8008bb6:	071a      	lsls	r2, r3, #28
 8008bb8:	bf04      	itt	eq
 8008bba:	091b      	lsreq	r3, r3, #4
 8008bbc:	3004      	addeq	r0, #4
 8008bbe:	079a      	lsls	r2, r3, #30
 8008bc0:	bf04      	itt	eq
 8008bc2:	089b      	lsreq	r3, r3, #2
 8008bc4:	3002      	addeq	r0, #2
 8008bc6:	07da      	lsls	r2, r3, #31
 8008bc8:	d402      	bmi.n	8008bd0 <__lo0bits+0x44>
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	d00b      	beq.n	8008be6 <__lo0bits+0x5a>
 8008bce:	3001      	adds	r0, #1
 8008bd0:	600b      	str	r3, [r1, #0]
 8008bd2:	4770      	bx	lr
 8008bd4:	0c1b      	lsrs	r3, r3, #16
 8008bd6:	2010      	movs	r0, #16
 8008bd8:	e7e8      	b.n	8008bac <__lo0bits+0x20>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	4770      	bx	lr
 8008bde:	089b      	lsrs	r3, r3, #2
 8008be0:	600b      	str	r3, [r1, #0]
 8008be2:	2002      	movs	r0, #2
 8008be4:	4770      	bx	lr
 8008be6:	2020      	movs	r0, #32
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop

08008bec <__i2b>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	460c      	mov	r4, r1
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	f7ff ff3b 	bl	8008a6c <_Balloc>
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	e9c0 2404 	strd	r2, r4, [r0, #16]
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop

08008c00 <__multiply>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	690e      	ldr	r6, [r1, #16]
 8008c06:	6914      	ldr	r4, [r2, #16]
 8008c08:	42a6      	cmp	r6, r4
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	4615      	mov	r5, r2
 8008c10:	da04      	bge.n	8008c1c <__multiply+0x1c>
 8008c12:	4632      	mov	r2, r6
 8008c14:	462f      	mov	r7, r5
 8008c16:	4626      	mov	r6, r4
 8008c18:	460d      	mov	r5, r1
 8008c1a:	4614      	mov	r4, r2
 8008c1c:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 8008c20:	eb06 0804 	add.w	r8, r6, r4
 8008c24:	4543      	cmp	r3, r8
 8008c26:	bfb8      	it	lt
 8008c28:	3101      	addlt	r1, #1
 8008c2a:	f7ff ff1f 	bl	8008a6c <_Balloc>
 8008c2e:	f100 0914 	add.w	r9, r0, #20
 8008c32:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 8008c36:	45f1      	cmp	r9, lr
 8008c38:	9000      	str	r0, [sp, #0]
 8008c3a:	d205      	bcs.n	8008c48 <__multiply+0x48>
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f843 2b04 	str.w	r2, [r3], #4
 8008c44:	459e      	cmp	lr, r3
 8008c46:	d8fb      	bhi.n	8008c40 <__multiply+0x40>
 8008c48:	f105 0a14 	add.w	sl, r5, #20
 8008c4c:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	45a2      	cmp	sl, r4
 8008c56:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 8008c5a:	d261      	bcs.n	8008d20 <__multiply+0x120>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	3c15      	subs	r4, #21
 8008c60:	f024 0403 	bic.w	r4, r4, #3
 8008c64:	f8cd e004 	str.w	lr, [sp, #4]
 8008c68:	44a2      	add	sl, r4
 8008c6a:	f105 0210 	add.w	r2, r5, #16
 8008c6e:	469e      	mov	lr, r3
 8008c70:	e005      	b.n	8008c7e <__multiply+0x7e>
 8008c72:	0c2d      	lsrs	r5, r5, #16
 8008c74:	d12b      	bne.n	8008cce <__multiply+0xce>
 8008c76:	4592      	cmp	sl, r2
 8008c78:	f109 0904 	add.w	r9, r9, #4
 8008c7c:	d04e      	beq.n	8008d1c <__multiply+0x11c>
 8008c7e:	f852 5f04 	ldr.w	r5, [r2, #4]!
 8008c82:	fa1f fb85 	uxth.w	fp, r5
 8008c86:	f1bb 0f00 	cmp.w	fp, #0
 8008c8a:	d0f2      	beq.n	8008c72 <__multiply+0x72>
 8008c8c:	4677      	mov	r7, lr
 8008c8e:	464e      	mov	r6, r9
 8008c90:	2000      	movs	r0, #0
 8008c92:	e000      	b.n	8008c96 <__multiply+0x96>
 8008c94:	4626      	mov	r6, r4
 8008c96:	f857 1b04 	ldr.w	r1, [r7], #4
 8008c9a:	6834      	ldr	r4, [r6, #0]
 8008c9c:	b28b      	uxth	r3, r1
 8008c9e:	b2a5      	uxth	r5, r4
 8008ca0:	0c09      	lsrs	r1, r1, #16
 8008ca2:	0c24      	lsrs	r4, r4, #16
 8008ca4:	fb0b 5303 	mla	r3, fp, r3, r5
 8008ca8:	4403      	add	r3, r0
 8008caa:	fb0b 4001 	mla	r0, fp, r1, r4
 8008cae:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008cb2:	4634      	mov	r4, r6
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008cba:	45bc      	cmp	ip, r7
 8008cbc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8008cc0:	f844 3b04 	str.w	r3, [r4], #4
 8008cc4:	d8e6      	bhi.n	8008c94 <__multiply+0x94>
 8008cc6:	6070      	str	r0, [r6, #4]
 8008cc8:	6815      	ldr	r5, [r2, #0]
 8008cca:	0c2d      	lsrs	r5, r5, #16
 8008ccc:	d0d3      	beq.n	8008c76 <__multiply+0x76>
 8008cce:	f8d9 3000 	ldr.w	r3, [r9]
 8008cd2:	4676      	mov	r6, lr
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	46cb      	mov	fp, r9
 8008cd8:	2100      	movs	r1, #0
 8008cda:	e000      	b.n	8008cde <__multiply+0xde>
 8008cdc:	46a3      	mov	fp, r4
 8008cde:	8834      	ldrh	r4, [r6, #0]
 8008ce0:	0c00      	lsrs	r0, r0, #16
 8008ce2:	fb05 0004 	mla	r0, r5, r4, r0
 8008ce6:	4401      	add	r1, r0
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	465c      	mov	r4, fp
 8008cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008cf0:	f844 3b04 	str.w	r3, [r4], #4
 8008cf4:	f856 3b04 	ldr.w	r3, [r6], #4
 8008cf8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	b287      	uxth	r7, r0
 8008d00:	fb05 7303 	mla	r3, r5, r3, r7
 8008d04:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8008d08:	45b4      	cmp	ip, r6
 8008d0a:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8008d0e:	d8e5      	bhi.n	8008cdc <__multiply+0xdc>
 8008d10:	4592      	cmp	sl, r2
 8008d12:	f8cb 3004 	str.w	r3, [fp, #4]
 8008d16:	f109 0904 	add.w	r9, r9, #4
 8008d1a:	d1b0      	bne.n	8008c7e <__multiply+0x7e>
 8008d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	dd0b      	ble.n	8008d3e <__multiply+0x13e>
 8008d26:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 8008d2a:	f1ae 0e04 	sub.w	lr, lr, #4
 8008d2e:	b11b      	cbz	r3, 8008d38 <__multiply+0x138>
 8008d30:	e005      	b.n	8008d3e <__multiply+0x13e>
 8008d32:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d36:	b913      	cbnz	r3, 8008d3e <__multiply+0x13e>
 8008d38:	f1b8 0801 	subs.w	r8, r8, #1
 8008d3c:	d1f9      	bne.n	8008d32 <__multiply+0x132>
 8008d3e:	9800      	ldr	r0, [sp, #0]
 8008d40:	f8c0 8010 	str.w	r8, [r0, #16]
 8008d44:	b003      	add	sp, #12
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	bf00      	nop

08008d4c <__pow5mult>:
 8008d4c:	f012 0303 	ands.w	r3, r2, #3
 8008d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d54:	4614      	mov	r4, r2
 8008d56:	4607      	mov	r7, r0
 8008d58:	d12e      	bne.n	8008db8 <__pow5mult+0x6c>
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	d01c      	beq.n	8008d9a <__pow5mult+0x4e>
 8008d60:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8008d62:	b396      	cbz	r6, 8008dca <__pow5mult+0x7e>
 8008d64:	07e3      	lsls	r3, r4, #31
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	d406      	bmi.n	8008d7a <__pow5mult+0x2e>
 8008d6c:	1064      	asrs	r4, r4, #1
 8008d6e:	d014      	beq.n	8008d9a <__pow5mult+0x4e>
 8008d70:	6830      	ldr	r0, [r6, #0]
 8008d72:	b1a8      	cbz	r0, 8008da0 <__pow5mult+0x54>
 8008d74:	4606      	mov	r6, r0
 8008d76:	07e3      	lsls	r3, r4, #31
 8008d78:	d5f8      	bpl.n	8008d6c <__pow5mult+0x20>
 8008d7a:	4632      	mov	r2, r6
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f7ff ff3e 	bl	8008c00 <__multiply>
 8008d84:	b1b5      	cbz	r5, 8008db4 <__pow5mult+0x68>
 8008d86:	686a      	ldr	r2, [r5, #4]
 8008d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8a:	1064      	asrs	r4, r4, #1
 8008d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d90:	6029      	str	r1, [r5, #0]
 8008d92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d96:	4605      	mov	r5, r0
 8008d98:	d1ea      	bne.n	8008d70 <__pow5mult+0x24>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	4632      	mov	r2, r6
 8008da2:	4631      	mov	r1, r6
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ff2b 	bl	8008c00 <__multiply>
 8008daa:	6030      	str	r0, [r6, #0]
 8008dac:	f8c0 8000 	str.w	r8, [r0]
 8008db0:	4606      	mov	r6, r0
 8008db2:	e7e0      	b.n	8008d76 <__pow5mult+0x2a>
 8008db4:	4605      	mov	r5, r0
 8008db6:	e7d9      	b.n	8008d6c <__pow5mult+0x20>
 8008db8:	3b01      	subs	r3, #1
 8008dba:	4a0b      	ldr	r2, [pc, #44]	; (8008de8 <__pow5mult+0x9c>)
 8008dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f7ff fe83 	bl	8008acc <__multadd>
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	e7c8      	b.n	8008d5c <__pow5mult+0x10>
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff fe4d 	bl	8008a6c <_Balloc>
 8008dd2:	f240 2371 	movw	r3, #625	; 0x271
 8008dd6:	6143      	str	r3, [r0, #20]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6102      	str	r2, [r0, #16]
 8008dde:	4606      	mov	r6, r0
 8008de0:	64b8      	str	r0, [r7, #72]	; 0x48
 8008de2:	6003      	str	r3, [r0, #0]
 8008de4:	e7be      	b.n	8008d64 <__pow5mult+0x18>
 8008de6:	bf00      	nop
 8008de8:	0800a610 	.word	0x0800a610

08008dec <__lshift>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	4691      	mov	r9, r2
 8008df2:	690a      	ldr	r2, [r1, #16]
 8008df4:	460e      	mov	r6, r1
 8008df6:	ea4f 1469 	mov.w	r4, r9, asr #5
 8008dfa:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 8008dfe:	eb04 0802 	add.w	r8, r4, r2
 8008e02:	f108 0501 	add.w	r5, r8, #1
 8008e06:	429d      	cmp	r5, r3
 8008e08:	4607      	mov	r7, r0
 8008e0a:	dd04      	ble.n	8008e16 <__lshift+0x2a>
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	429d      	cmp	r5, r3
 8008e10:	f101 0101 	add.w	r1, r1, #1
 8008e14:	dcfa      	bgt.n	8008e0c <__lshift+0x20>
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff fe28 	bl	8008a6c <_Balloc>
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	f100 0314 	add.w	r3, r0, #20
 8008e22:	dd37      	ble.n	8008e94 <__lshift+0xa8>
 8008e24:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f843 2b04 	str.w	r2, [r3], #4
 8008e2e:	428b      	cmp	r3, r1
 8008e30:	d1fb      	bne.n	8008e2a <__lshift+0x3e>
 8008e32:	6934      	ldr	r4, [r6, #16]
 8008e34:	f106 0314 	add.w	r3, r6, #20
 8008e38:	f019 091f 	ands.w	r9, r9, #31
 8008e3c:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 8008e40:	d020      	beq.n	8008e84 <__lshift+0x98>
 8008e42:	f1c9 0e20 	rsb	lr, r9, #32
 8008e46:	2200      	movs	r2, #0
 8008e48:	e000      	b.n	8008e4c <__lshift+0x60>
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	681c      	ldr	r4, [r3, #0]
 8008e4e:	468a      	mov	sl, r1
 8008e50:	fa04 f409 	lsl.w	r4, r4, r9
 8008e54:	4314      	orrs	r4, r2
 8008e56:	f84a 4b04 	str.w	r4, [sl], #4
 8008e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5e:	4563      	cmp	r3, ip
 8008e60:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e64:	d3f1      	bcc.n	8008e4a <__lshift+0x5e>
 8008e66:	604a      	str	r2, [r1, #4]
 8008e68:	b10a      	cbz	r2, 8008e6e <__lshift+0x82>
 8008e6a:	f108 0502 	add.w	r5, r8, #2
 8008e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e70:	6872      	ldr	r2, [r6, #4]
 8008e72:	3d01      	subs	r5, #1
 8008e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e78:	6105      	str	r5, [r0, #16]
 8008e7a:	6031      	str	r1, [r6, #0]
 8008e7c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e84:	3904      	subs	r1, #4
 8008e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e8e:	459c      	cmp	ip, r3
 8008e90:	d8f9      	bhi.n	8008e86 <__lshift+0x9a>
 8008e92:	e7ec      	b.n	8008e6e <__lshift+0x82>
 8008e94:	4619      	mov	r1, r3
 8008e96:	e7cc      	b.n	8008e32 <__lshift+0x46>

08008e98 <__mcmp>:
 8008e98:	b430      	push	{r4, r5}
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	6900      	ldr	r0, [r0, #16]
 8008ea0:	1ac0      	subs	r0, r0, r3
 8008ea2:	d10f      	bne.n	8008ec4 <__mcmp+0x2c>
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	3514      	adds	r5, #20
 8008ea8:	3114      	adds	r1, #20
 8008eaa:	4419      	add	r1, r3
 8008eac:	442b      	add	r3, r5
 8008eae:	e001      	b.n	8008eb4 <__mcmp+0x1c>
 8008eb0:	429d      	cmp	r5, r3
 8008eb2:	d207      	bcs.n	8008ec4 <__mcmp+0x2c>
 8008eb4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ebc:	4294      	cmp	r4, r2
 8008ebe:	d0f7      	beq.n	8008eb0 <__mcmp+0x18>
 8008ec0:	d302      	bcc.n	8008ec8 <__mcmp+0x30>
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	bc30      	pop	{r4, r5}
 8008ec6:	4770      	bx	lr
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e7fa      	b.n	8008ec4 <__mcmp+0x2c>
 8008ece:	bf00      	nop

08008ed0 <__mdiff>:
 8008ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed4:	6913      	ldr	r3, [r2, #16]
 8008ed6:	690d      	ldr	r5, [r1, #16]
 8008ed8:	1aed      	subs	r5, r5, r3
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	460e      	mov	r6, r1
 8008ede:	4690      	mov	r8, r2
 8008ee0:	f101 0414 	add.w	r4, r1, #20
 8008ee4:	f102 0714 	add.w	r7, r2, #20
 8008ee8:	d114      	bne.n	8008f14 <__mdiff+0x44>
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	18e2      	adds	r2, r4, r3
 8008eee:	443b      	add	r3, r7
 8008ef0:	e001      	b.n	8008ef6 <__mdiff+0x26>
 8008ef2:	42a2      	cmp	r2, r4
 8008ef4:	d959      	bls.n	8008faa <__mdiff+0xda>
 8008ef6:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 8008efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008efe:	458c      	cmp	ip, r1
 8008f00:	d0f7      	beq.n	8008ef2 <__mdiff+0x22>
 8008f02:	d209      	bcs.n	8008f18 <__mdiff+0x48>
 8008f04:	4622      	mov	r2, r4
 8008f06:	4633      	mov	r3, r6
 8008f08:	463c      	mov	r4, r7
 8008f0a:	4646      	mov	r6, r8
 8008f0c:	4617      	mov	r7, r2
 8008f0e:	4698      	mov	r8, r3
 8008f10:	2501      	movs	r5, #1
 8008f12:	e001      	b.n	8008f18 <__mdiff+0x48>
 8008f14:	dbf6      	blt.n	8008f04 <__mdiff+0x34>
 8008f16:	2500      	movs	r5, #0
 8008f18:	6871      	ldr	r1, [r6, #4]
 8008f1a:	f7ff fda7 	bl	8008a6c <_Balloc>
 8008f1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008f22:	6936      	ldr	r6, [r6, #16]
 8008f24:	60c5      	str	r5, [r0, #12]
 8008f26:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 8008f2a:	46bc      	mov	ip, r7
 8008f2c:	f100 0514 	add.w	r5, r0, #20
 8008f30:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8008f34:	2300      	movs	r3, #0
 8008f36:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f3a:	f854 8b04 	ldr.w	r8, [r4], #4
 8008f3e:	b28a      	uxth	r2, r1
 8008f40:	fa13 f388 	uxtah	r3, r3, r8
 8008f44:	0c09      	lsrs	r1, r1, #16
 8008f46:	1a9a      	subs	r2, r3, r2
 8008f48:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8008f4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8008f50:	b292      	uxth	r2, r2
 8008f52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f56:	45e6      	cmp	lr, ip
 8008f58:	f845 2b04 	str.w	r2, [r5], #4
 8008f5c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008f60:	d8e9      	bhi.n	8008f36 <__mdiff+0x66>
 8008f62:	42a7      	cmp	r7, r4
 8008f64:	d917      	bls.n	8008f96 <__mdiff+0xc6>
 8008f66:	46ae      	mov	lr, r5
 8008f68:	46a4      	mov	ip, r4
 8008f6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f6e:	fa13 f382 	uxtah	r3, r3, r2
 8008f72:	1419      	asrs	r1, r3, #16
 8008f74:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 8008f7e:	4567      	cmp	r7, ip
 8008f80:	f84e 2b04 	str.w	r2, [lr], #4
 8008f84:	ea4f 4321 	mov.w	r3, r1, asr #16
 8008f88:	d8ef      	bhi.n	8008f6a <__mdiff+0x9a>
 8008f8a:	43e4      	mvns	r4, r4
 8008f8c:	4427      	add	r7, r4
 8008f8e:	f027 0703 	bic.w	r7, r7, #3
 8008f92:	3704      	adds	r7, #4
 8008f94:	443d      	add	r5, r7
 8008f96:	3d04      	subs	r5, #4
 8008f98:	b922      	cbnz	r2, 8008fa4 <__mdiff+0xd4>
 8008f9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008f9e:	3e01      	subs	r6, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0fa      	beq.n	8008f9a <__mdiff+0xca>
 8008fa4:	6106      	str	r6, [r0, #16]
 8008fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008faa:	2100      	movs	r1, #0
 8008fac:	f7ff fd5e 	bl	8008a6c <_Balloc>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fbc <__d2b>:
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	461c      	mov	r4, r3
 8008fc6:	4690      	mov	r8, r2
 8008fc8:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008fcc:	f7ff fd4e 	bl	8008a6c <_Balloc>
 8008fd0:	4623      	mov	r3, r4
 8008fd2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fdc:	b10c      	cbz	r4, 8008fe2 <__d2b+0x26>
 8008fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fe2:	f1b8 0200 	subs.w	r2, r8, #0
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	d01f      	beq.n	800902a <__d2b+0x6e>
 8008fea:	a802      	add	r0, sp, #8
 8008fec:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008ff0:	f7ff fdcc 	bl	8008b8c <__lo0bits>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d12d      	bne.n	8009054 <__d2b+0x98>
 8008ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ffc:	617a      	str	r2, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf0c      	ite	eq
 8009002:	2101      	moveq	r1, #1
 8009004:	2102      	movne	r1, #2
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	6139      	str	r1, [r7, #16]
 800900a:	b9c4      	cbnz	r4, 800903e <__d2b+0x82>
 800900c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009014:	6030      	str	r0, [r6, #0]
 8009016:	6918      	ldr	r0, [r3, #16]
 8009018:	f7ff fd98 	bl	8008b4c <__hi0bits>
 800901c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009020:	6028      	str	r0, [r5, #0]
 8009022:	4638      	mov	r0, r7
 8009024:	b002      	add	sp, #8
 8009026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902a:	a801      	add	r0, sp, #4
 800902c:	f7ff fdae 	bl	8008b8c <__lo0bits>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	2101      	movs	r1, #1
 8009036:	3020      	adds	r0, #32
 8009038:	6139      	str	r1, [r7, #16]
 800903a:	2c00      	cmp	r4, #0
 800903c:	d0e6      	beq.n	800900c <__d2b+0x50>
 800903e:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
 8009042:	4403      	add	r3, r0
 8009044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009048:	6033      	str	r3, [r6, #0]
 800904a:	6028      	str	r0, [r5, #0]
 800904c:	4638      	mov	r0, r7
 800904e:	b002      	add	sp, #8
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	e9dd 1300 	ldrd	r1, r3, [sp]
 8009058:	f1c0 0220 	rsb	r2, r0, #32
 800905c:	fa03 f202 	lsl.w	r2, r3, r2
 8009060:	430a      	orrs	r2, r1
 8009062:	40c3      	lsrs	r3, r0
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	617a      	str	r2, [r7, #20]
 8009068:	e7c9      	b.n	8008ffe <__d2b+0x42>
 800906a:	bf00      	nop

0800906c <strchr>:
 800906c:	b2c9      	uxtb	r1, r1
 800906e:	f000 0303 	and.w	r3, r0, #3
 8009072:	2900      	cmp	r1, #0
 8009074:	d043      	beq.n	80090fe <strchr+0x92>
 8009076:	b17b      	cbz	r3, 8009098 <strchr+0x2c>
 8009078:	7803      	ldrb	r3, [r0, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d067      	beq.n	800914e <strchr+0xe2>
 800907e:	4299      	cmp	r1, r3
 8009080:	d03c      	beq.n	80090fc <strchr+0x90>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	e005      	b.n	8009092 <strchr+0x26>
 8009086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800908a:	2a00      	cmp	r2, #0
 800908c:	d05d      	beq.n	800914a <strchr+0xde>
 800908e:	428a      	cmp	r2, r1
 8009090:	d034      	beq.n	80090fc <strchr+0x90>
 8009092:	079a      	lsls	r2, r3, #30
 8009094:	4618      	mov	r0, r3
 8009096:	d1f6      	bne.n	8009086 <strchr+0x1a>
 8009098:	b470      	push	{r4, r5, r6}
 800909a:	6804      	ldr	r4, [r0, #0]
 800909c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80090a0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80090a4:	ea86 0504 	eor.w	r5, r6, r4
 80090a8:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 80090ac:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80090b0:	ea23 0305 	bic.w	r3, r3, r5
 80090b4:	ea22 0204 	bic.w	r2, r2, r4
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80090be:	d10f      	bne.n	80090e0 <strchr+0x74>
 80090c0:	f850 4f04 	ldr.w	r4, [r0, #4]!
 80090c4:	ea84 0506 	eor.w	r5, r4, r6
 80090c8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 80090cc:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 80090d0:	ea22 0205 	bic.w	r2, r2, r5
 80090d4:	ea23 0304 	bic.w	r3, r3, r4
 80090d8:	4313      	orrs	r3, r2
 80090da:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80090de:	d0ef      	beq.n	80090c0 <strchr+0x54>
 80090e0:	7803      	ldrb	r3, [r0, #0]
 80090e2:	b143      	cbz	r3, 80090f6 <strchr+0x8a>
 80090e4:	4299      	cmp	r1, r3
 80090e6:	d102      	bne.n	80090ee <strchr+0x82>
 80090e8:	e006      	b.n	80090f8 <strchr+0x8c>
 80090ea:	428b      	cmp	r3, r1
 80090ec:	d004      	beq.n	80090f8 <strchr+0x8c>
 80090ee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f9      	bne.n	80090ea <strchr+0x7e>
 80090f6:	4618      	mov	r0, r3
 80090f8:	bc70      	pop	{r4, r5, r6}
 80090fa:	4770      	bx	lr
 80090fc:	4770      	bx	lr
 80090fe:	b15b      	cbz	r3, 8009118 <strchr+0xac>
 8009100:	7803      	ldrb	r3, [r0, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0fa      	beq.n	80090fc <strchr+0x90>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	e003      	b.n	8009112 <strchr+0xa6>
 800910a:	7802      	ldrb	r2, [r0, #0]
 800910c:	3301      	adds	r3, #1
 800910e:	2a00      	cmp	r2, #0
 8009110:	d0f4      	beq.n	80090fc <strchr+0x90>
 8009112:	0799      	lsls	r1, r3, #30
 8009114:	4618      	mov	r0, r3
 8009116:	d1f8      	bne.n	800910a <strchr+0x9e>
 8009118:	6802      	ldr	r2, [r0, #0]
 800911a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800911e:	ea23 0302 	bic.w	r3, r3, r2
 8009122:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009126:	d108      	bne.n	800913a <strchr+0xce>
 8009128:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800912c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8009130:	ea23 0302 	bic.w	r3, r3, r2
 8009134:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009138:	d0f6      	beq.n	8009128 <strchr+0xbc>
 800913a:	7803      	ldrb	r3, [r0, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0dd      	beq.n	80090fc <strchr+0x90>
 8009140:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1fb      	bne.n	8009140 <strchr+0xd4>
 8009148:	4770      	bx	lr
 800914a:	4610      	mov	r0, r2
 800914c:	4770      	bx	lr
 800914e:	4618      	mov	r0, r3
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop

08009154 <__ssprint_r>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	6893      	ldr	r3, [r2, #8]
 800915a:	b083      	sub	sp, #12
 800915c:	4690      	mov	r8, r2
 800915e:	2b00      	cmp	r3, #0
 8009160:	d06c      	beq.n	800923c <__ssprint_r+0xe8>
 8009162:	6817      	ldr	r7, [r2, #0]
 8009164:	688d      	ldr	r5, [r1, #8]
 8009166:	4682      	mov	sl, r0
 8009168:	460c      	mov	r4, r1
 800916a:	6808      	ldr	r0, [r1, #0]
 800916c:	3708      	adds	r7, #8
 800916e:	e042      	b.n	80091f6 <__ssprint_r+0xa2>
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009176:	d02d      	beq.n	80091d4 <__ssprint_r+0x80>
 8009178:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800917c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009180:	eba0 0b01 	sub.w	fp, r0, r1
 8009184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009188:	1c70      	adds	r0, r6, #1
 800918a:	106d      	asrs	r5, r5, #1
 800918c:	4458      	add	r0, fp
 800918e:	42a8      	cmp	r0, r5
 8009190:	462a      	mov	r2, r5
 8009192:	bf84      	itt	hi
 8009194:	4605      	movhi	r5, r0
 8009196:	462a      	movhi	r2, r5
 8009198:	055b      	lsls	r3, r3, #21
 800919a:	d536      	bpl.n	800920a <__ssprint_r+0xb6>
 800919c:	4611      	mov	r1, r2
 800919e:	4650      	mov	r0, sl
 80091a0:	f7ff f982 	bl	80084a8 <_malloc_r>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d03a      	beq.n	800921e <__ssprint_r+0xca>
 80091a8:	465a      	mov	r2, fp
 80091aa:	6921      	ldr	r1, [r4, #16]
 80091ac:	9001      	str	r0, [sp, #4]
 80091ae:	f7f7 f8a1 	bl	80002f4 <memcpy>
 80091b2:	89a2      	ldrh	r2, [r4, #12]
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80091ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091be:	81a2      	strh	r2, [r4, #12]
 80091c0:	eba5 020b 	sub.w	r2, r5, fp
 80091c4:	eb03 000b 	add.w	r0, r3, fp
 80091c8:	6165      	str	r5, [r4, #20]
 80091ca:	6123      	str	r3, [r4, #16]
 80091cc:	6020      	str	r0, [r4, #0]
 80091ce:	60a2      	str	r2, [r4, #8]
 80091d0:	4635      	mov	r5, r6
 80091d2:	46b3      	mov	fp, r6
 80091d4:	465a      	mov	r2, fp
 80091d6:	4649      	mov	r1, r9
 80091d8:	f000 f9b2 	bl	8009540 <memmove>
 80091dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091e0:	68a2      	ldr	r2, [r4, #8]
 80091e2:	6820      	ldr	r0, [r4, #0]
 80091e4:	1b55      	subs	r5, r2, r5
 80091e6:	4458      	add	r0, fp
 80091e8:	1b9e      	subs	r6, r3, r6
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	6020      	str	r0, [r4, #0]
 80091ee:	f8c8 6008 	str.w	r6, [r8, #8]
 80091f2:	b31e      	cbz	r6, 800923c <__ssprint_r+0xe8>
 80091f4:	3708      	adds	r7, #8
 80091f6:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 80091fa:	46ab      	mov	fp, r5
 80091fc:	2e00      	cmp	r6, #0
 80091fe:	d0f9      	beq.n	80091f4 <__ssprint_r+0xa0>
 8009200:	42ae      	cmp	r6, r5
 8009202:	d2b5      	bcs.n	8009170 <__ssprint_r+0x1c>
 8009204:	4635      	mov	r5, r6
 8009206:	46b3      	mov	fp, r6
 8009208:	e7e4      	b.n	80091d4 <__ssprint_r+0x80>
 800920a:	4650      	mov	r0, sl
 800920c:	f000 f9fc 	bl	8009608 <_realloc_r>
 8009210:	4603      	mov	r3, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	d1d4      	bne.n	80091c0 <__ssprint_r+0x6c>
 8009216:	6921      	ldr	r1, [r4, #16]
 8009218:	4650      	mov	r0, sl
 800921a:	f000 f899 	bl	8009350 <_free_r>
 800921e:	230c      	movs	r3, #12
 8009220:	f8ca 3000 	str.w	r3, [sl]
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	e9c8 2201 	strd	r2, r2, [r8, #4]
 8009236:	b003      	add	sp, #12
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	2000      	movs	r0, #0
 800923e:	f8c8 0004 	str.w	r0, [r8, #4]
 8009242:	b003      	add	sp, #12
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009248 <_calloc_r>:
 8009248:	b510      	push	{r4, lr}
 800924a:	fb02 f101 	mul.w	r1, r2, r1
 800924e:	f7ff f92b 	bl	80084a8 <_malloc_r>
 8009252:	4604      	mov	r4, r0
 8009254:	b1d8      	cbz	r0, 800928e <_calloc_r+0x46>
 8009256:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800925a:	f022 0203 	bic.w	r2, r2, #3
 800925e:	3a04      	subs	r2, #4
 8009260:	2a24      	cmp	r2, #36	; 0x24
 8009262:	d81d      	bhi.n	80092a0 <_calloc_r+0x58>
 8009264:	2a13      	cmp	r2, #19
 8009266:	d914      	bls.n	8009292 <_calloc_r+0x4a>
 8009268:	2300      	movs	r3, #0
 800926a:	2a1b      	cmp	r2, #27
 800926c:	e9c0 3300 	strd	r3, r3, [r0]
 8009270:	d91b      	bls.n	80092aa <_calloc_r+0x62>
 8009272:	2a24      	cmp	r2, #36	; 0x24
 8009274:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8009278:	bf0a      	itet	eq
 800927a:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800927e:	f100 0210 	addne.w	r2, r0, #16
 8009282:	f100 0218 	addeq.w	r2, r0, #24
 8009286:	2300      	movs	r3, #0
 8009288:	e9c2 3300 	strd	r3, r3, [r2]
 800928c:	6093      	str	r3, [r2, #8]
 800928e:	4620      	mov	r0, r4
 8009290:	bd10      	pop	{r4, pc}
 8009292:	4602      	mov	r2, r0
 8009294:	2300      	movs	r3, #0
 8009296:	e9c2 3300 	strd	r3, r3, [r2]
 800929a:	6093      	str	r3, [r2, #8]
 800929c:	4620      	mov	r0, r4
 800929e:	bd10      	pop	{r4, pc}
 80092a0:	2100      	movs	r1, #0
 80092a2:	f7fc fc59 	bl	8005b58 <memset>
 80092a6:	4620      	mov	r0, r4
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	f100 0208 	add.w	r2, r0, #8
 80092ae:	e7f1      	b.n	8009294 <_calloc_r+0x4c>

080092b0 <_malloc_trim_r>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	4f24      	ldr	r7, [pc, #144]	; (8009344 <_malloc_trim_r+0x94>)
 80092b4:	460c      	mov	r4, r1
 80092b6:	4606      	mov	r6, r0
 80092b8:	f7ff fbcc 	bl	8008a54 <__malloc_lock>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	685d      	ldr	r5, [r3, #4]
 80092c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80092c4:	310f      	adds	r1, #15
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	4429      	add	r1, r5
 80092cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80092d0:	f021 010f 	bic.w	r1, r1, #15
 80092d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80092d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80092dc:	db07      	blt.n	80092ee <_malloc_trim_r+0x3e>
 80092de:	2100      	movs	r1, #0
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7fa f85d 	bl	80033a0 <_sbrk_r>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	442b      	add	r3, r5
 80092ea:	4298      	cmp	r0, r3
 80092ec:	d004      	beq.n	80092f8 <_malloc_trim_r+0x48>
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff fbb6 	bl	8008a60 <__malloc_unlock>
 80092f4:	2000      	movs	r0, #0
 80092f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f8:	4261      	negs	r1, r4
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7fa f850 	bl	80033a0 <_sbrk_r>
 8009300:	3001      	adds	r0, #1
 8009302:	d00d      	beq.n	8009320 <_malloc_trim_r+0x70>
 8009304:	4b10      	ldr	r3, [pc, #64]	; (8009348 <_malloc_trim_r+0x98>)
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	6819      	ldr	r1, [r3, #0]
 800930a:	1b2d      	subs	r5, r5, r4
 800930c:	f045 0501 	orr.w	r5, r5, #1
 8009310:	4630      	mov	r0, r6
 8009312:	1b09      	subs	r1, r1, r4
 8009314:	6055      	str	r5, [r2, #4]
 8009316:	6019      	str	r1, [r3, #0]
 8009318:	f7ff fba2 	bl	8008a60 <__malloc_unlock>
 800931c:	2001      	movs	r0, #1
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	2100      	movs	r1, #0
 8009322:	4630      	mov	r0, r6
 8009324:	f7fa f83c 	bl	80033a0 <_sbrk_r>
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	1a83      	subs	r3, r0, r2
 800932c:	2b0f      	cmp	r3, #15
 800932e:	ddde      	ble.n	80092ee <_malloc_trim_r+0x3e>
 8009330:	4c06      	ldr	r4, [pc, #24]	; (800934c <_malloc_trim_r+0x9c>)
 8009332:	4905      	ldr	r1, [pc, #20]	; (8009348 <_malloc_trim_r+0x98>)
 8009334:	6824      	ldr	r4, [r4, #0]
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	1b00      	subs	r0, r0, r4
 800933c:	6053      	str	r3, [r2, #4]
 800933e:	6008      	str	r0, [r1, #0]
 8009340:	e7d5      	b.n	80092ee <_malloc_trim_r+0x3e>
 8009342:	bf00      	nop
 8009344:	20000dd4 	.word	0x20000dd4
 8009348:	20002e80 	.word	0x20002e80
 800934c:	200011dc 	.word	0x200011dc

08009350 <_free_r>:
 8009350:	2900      	cmp	r1, #0
 8009352:	d053      	beq.n	80093fc <_free_r+0xac>
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	4606      	mov	r6, r0
 800935a:	f7ff fb7b 	bl	8008a54 <__malloc_lock>
 800935e:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8009362:	4f71      	ldr	r7, [pc, #452]	; (8009528 <_free_r+0x1d8>)
 8009364:	f02c 0101 	bic.w	r1, ip, #1
 8009368:	f1a4 0508 	sub.w	r5, r4, #8
 800936c:	186b      	adds	r3, r5, r1
 800936e:	68b8      	ldr	r0, [r7, #8]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	4298      	cmp	r0, r3
 8009374:	f022 0203 	bic.w	r2, r2, #3
 8009378:	d053      	beq.n	8009422 <_free_r+0xd2>
 800937a:	f01c 0f01 	tst.w	ip, #1
 800937e:	605a      	str	r2, [r3, #4]
 8009380:	eb03 0002 	add.w	r0, r3, r2
 8009384:	d13b      	bne.n	80093fe <_free_r+0xae>
 8009386:	f854 cc08 	ldr.w	ip, [r4, #-8]
 800938a:	6840      	ldr	r0, [r0, #4]
 800938c:	eba5 050c 	sub.w	r5, r5, ip
 8009390:	f107 0e08 	add.w	lr, r7, #8
 8009394:	68ac      	ldr	r4, [r5, #8]
 8009396:	4574      	cmp	r4, lr
 8009398:	4461      	add	r1, ip
 800939a:	f000 0001 	and.w	r0, r0, #1
 800939e:	d075      	beq.n	800948c <_free_r+0x13c>
 80093a0:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80093a4:	f8c4 c00c 	str.w	ip, [r4, #12]
 80093a8:	f8cc 4008 	str.w	r4, [ip, #8]
 80093ac:	b360      	cbz	r0, 8009408 <_free_r+0xb8>
 80093ae:	f041 0301 	orr.w	r3, r1, #1
 80093b2:	606b      	str	r3, [r5, #4]
 80093b4:	5069      	str	r1, [r5, r1]
 80093b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80093ba:	d350      	bcc.n	800945e <_free_r+0x10e>
 80093bc:	0a4b      	lsrs	r3, r1, #9
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d870      	bhi.n	80094a4 <_free_r+0x154>
 80093c2:	098b      	lsrs	r3, r1, #6
 80093c4:	f103 0439 	add.w	r4, r3, #57	; 0x39
 80093c8:	00e4      	lsls	r4, r4, #3
 80093ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093ce:	1938      	adds	r0, r7, r4
 80093d0:	593b      	ldr	r3, [r7, r4]
 80093d2:	3808      	subs	r0, #8
 80093d4:	4298      	cmp	r0, r3
 80093d6:	d078      	beq.n	80094ca <_free_r+0x17a>
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	f022 0203 	bic.w	r2, r2, #3
 80093de:	428a      	cmp	r2, r1
 80093e0:	d971      	bls.n	80094c6 <_free_r+0x176>
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4298      	cmp	r0, r3
 80093e6:	d1f7      	bne.n	80093d8 <_free_r+0x88>
 80093e8:	68c3      	ldr	r3, [r0, #12]
 80093ea:	e9c5 0302 	strd	r0, r3, [r5, #8]
 80093ee:	609d      	str	r5, [r3, #8]
 80093f0:	60c5      	str	r5, [r0, #12]
 80093f2:	4630      	mov	r0, r6
 80093f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093f8:	f7ff bb32 	b.w	8008a60 <__malloc_unlock>
 80093fc:	4770      	bx	lr
 80093fe:	6840      	ldr	r0, [r0, #4]
 8009400:	f000 0001 	and.w	r0, r0, #1
 8009404:	2800      	cmp	r0, #0
 8009406:	d1d2      	bne.n	80093ae <_free_r+0x5e>
 8009408:	6898      	ldr	r0, [r3, #8]
 800940a:	4c48      	ldr	r4, [pc, #288]	; (800952c <_free_r+0x1dc>)
 800940c:	4411      	add	r1, r2
 800940e:	42a0      	cmp	r0, r4
 8009410:	f041 0201 	orr.w	r2, r1, #1
 8009414:	d062      	beq.n	80094dc <_free_r+0x18c>
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	60c3      	str	r3, [r0, #12]
 800941a:	6098      	str	r0, [r3, #8]
 800941c:	606a      	str	r2, [r5, #4]
 800941e:	5069      	str	r1, [r5, r1]
 8009420:	e7c9      	b.n	80093b6 <_free_r+0x66>
 8009422:	f01c 0f01 	tst.w	ip, #1
 8009426:	440a      	add	r2, r1
 8009428:	d107      	bne.n	800943a <_free_r+0xea>
 800942a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800942e:	1aed      	subs	r5, r5, r3
 8009430:	441a      	add	r2, r3
 8009432:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8009436:	60cb      	str	r3, [r1, #12]
 8009438:	6099      	str	r1, [r3, #8]
 800943a:	4b3d      	ldr	r3, [pc, #244]	; (8009530 <_free_r+0x1e0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0101 	orr.w	r1, r2, #1
 8009442:	4293      	cmp	r3, r2
 8009444:	6069      	str	r1, [r5, #4]
 8009446:	60bd      	str	r5, [r7, #8]
 8009448:	d804      	bhi.n	8009454 <_free_r+0x104>
 800944a:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <_free_r+0x1e4>)
 800944c:	4630      	mov	r0, r6
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	f7ff ff2e 	bl	80092b0 <_malloc_trim_r>
 8009454:	4630      	mov	r0, r6
 8009456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800945a:	f7ff bb01 	b.w	8008a60 <__malloc_unlock>
 800945e:	08c9      	lsrs	r1, r1, #3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	1c4a      	adds	r2, r1, #1
 8009464:	2301      	movs	r3, #1
 8009466:	1089      	asrs	r1, r1, #2
 8009468:	408b      	lsls	r3, r1
 800946a:	4303      	orrs	r3, r0
 800946c:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 8009470:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	3908      	subs	r1, #8
 8009478:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800947c:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 8009480:	60c5      	str	r5, [r0, #12]
 8009482:	4630      	mov	r0, r6
 8009484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009488:	f7ff baea 	b.w	8008a60 <__malloc_unlock>
 800948c:	2800      	cmp	r0, #0
 800948e:	d145      	bne.n	800951c <_free_r+0x1cc>
 8009490:	440a      	add	r2, r1
 8009492:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 8009496:	f042 0001 	orr.w	r0, r2, #1
 800949a:	60cb      	str	r3, [r1, #12]
 800949c:	6099      	str	r1, [r3, #8]
 800949e:	6068      	str	r0, [r5, #4]
 80094a0:	50aa      	str	r2, [r5, r2]
 80094a2:	e7d7      	b.n	8009454 <_free_r+0x104>
 80094a4:	2b14      	cmp	r3, #20
 80094a6:	d908      	bls.n	80094ba <_free_r+0x16a>
 80094a8:	2b54      	cmp	r3, #84	; 0x54
 80094aa:	d81e      	bhi.n	80094ea <_free_r+0x19a>
 80094ac:	0b0b      	lsrs	r3, r1, #12
 80094ae:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80094b2:	00e4      	lsls	r4, r4, #3
 80094b4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80094b8:	e789      	b.n	80093ce <_free_r+0x7e>
 80094ba:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80094be:	00e4      	lsls	r4, r4, #3
 80094c0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80094c4:	e783      	b.n	80093ce <_free_r+0x7e>
 80094c6:	4618      	mov	r0, r3
 80094c8:	e78e      	b.n	80093e8 <_free_r+0x98>
 80094ca:	1093      	asrs	r3, r2, #2
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	430b      	orrs	r3, r1
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	4603      	mov	r3, r0
 80094da:	e786      	b.n	80093ea <_free_r+0x9a>
 80094dc:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80094e0:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80094e4:	606a      	str	r2, [r5, #4]
 80094e6:	5069      	str	r1, [r5, r1]
 80094e8:	e7b4      	b.n	8009454 <_free_r+0x104>
 80094ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80094ee:	d806      	bhi.n	80094fe <_free_r+0x1ae>
 80094f0:	0bcb      	lsrs	r3, r1, #15
 80094f2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80094f6:	00e4      	lsls	r4, r4, #3
 80094f8:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80094fc:	e767      	b.n	80093ce <_free_r+0x7e>
 80094fe:	f240 5254 	movw	r2, #1364	; 0x554
 8009502:	4293      	cmp	r3, r2
 8009504:	d806      	bhi.n	8009514 <_free_r+0x1c4>
 8009506:	0c8b      	lsrs	r3, r1, #18
 8009508:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800950c:	00e4      	lsls	r4, r4, #3
 800950e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8009512:	e75c      	b.n	80093ce <_free_r+0x7e>
 8009514:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 8009518:	227e      	movs	r2, #126	; 0x7e
 800951a:	e758      	b.n	80093ce <_free_r+0x7e>
 800951c:	f041 0201 	orr.w	r2, r1, #1
 8009520:	606a      	str	r2, [r5, #4]
 8009522:	6019      	str	r1, [r3, #0]
 8009524:	e796      	b.n	8009454 <_free_r+0x104>
 8009526:	bf00      	nop
 8009528:	20000dd4 	.word	0x20000dd4
 800952c:	20000ddc 	.word	0x20000ddc
 8009530:	200011e0 	.word	0x200011e0
 8009534:	20002eb0 	.word	0x20002eb0

08009538 <__retarget_lock_acquire_recursive>:
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <__retarget_lock_release_recursive>:
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop

08009540 <memmove>:
 8009540:	4288      	cmp	r0, r1
 8009542:	b4f0      	push	{r4, r5, r6, r7}
 8009544:	d90d      	bls.n	8009562 <memmove+0x22>
 8009546:	188b      	adds	r3, r1, r2
 8009548:	4283      	cmp	r3, r0
 800954a:	d90a      	bls.n	8009562 <memmove+0x22>
 800954c:	1884      	adds	r4, r0, r2
 800954e:	b132      	cbz	r2, 800955e <memmove+0x1e>
 8009550:	4622      	mov	r2, r4
 8009552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800955a:	4299      	cmp	r1, r3
 800955c:	d1f9      	bne.n	8009552 <memmove+0x12>
 800955e:	bcf0      	pop	{r4, r5, r6, r7}
 8009560:	4770      	bx	lr
 8009562:	2a0f      	cmp	r2, #15
 8009564:	d949      	bls.n	80095fa <memmove+0xba>
 8009566:	ea40 0301 	orr.w	r3, r0, r1
 800956a:	079b      	lsls	r3, r3, #30
 800956c:	d147      	bne.n	80095fe <memmove+0xbe>
 800956e:	f1a2 0310 	sub.w	r3, r2, #16
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	f101 0720 	add.w	r7, r1, #32
 8009578:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800957c:	f101 0410 	add.w	r4, r1, #16
 8009580:	f100 0510 	add.w	r5, r0, #16
 8009584:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8009588:	f845 6c10 	str.w	r6, [r5, #-16]
 800958c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8009590:	f845 6c0c 	str.w	r6, [r5, #-12]
 8009594:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8009598:	f845 6c08 	str.w	r6, [r5, #-8]
 800959c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80095a0:	f845 6c04 	str.w	r6, [r5, #-4]
 80095a4:	3410      	adds	r4, #16
 80095a6:	42bc      	cmp	r4, r7
 80095a8:	f105 0510 	add.w	r5, r5, #16
 80095ac:	d1ea      	bne.n	8009584 <memmove+0x44>
 80095ae:	3301      	adds	r3, #1
 80095b0:	f002 050f 	and.w	r5, r2, #15
 80095b4:	011b      	lsls	r3, r3, #4
 80095b6:	2d03      	cmp	r5, #3
 80095b8:	4419      	add	r1, r3
 80095ba:	4403      	add	r3, r0
 80095bc:	d921      	bls.n	8009602 <memmove+0xc2>
 80095be:	1f1f      	subs	r7, r3, #4
 80095c0:	460e      	mov	r6, r1
 80095c2:	462c      	mov	r4, r5
 80095c4:	3c04      	subs	r4, #4
 80095c6:	f856 cb04 	ldr.w	ip, [r6], #4
 80095ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80095ce:	2c03      	cmp	r4, #3
 80095d0:	d8f8      	bhi.n	80095c4 <memmove+0x84>
 80095d2:	1f2c      	subs	r4, r5, #4
 80095d4:	f024 0403 	bic.w	r4, r4, #3
 80095d8:	3404      	adds	r4, #4
 80095da:	4423      	add	r3, r4
 80095dc:	4421      	add	r1, r4
 80095de:	f002 0203 	and.w	r2, r2, #3
 80095e2:	2a00      	cmp	r2, #0
 80095e4:	d0bb      	beq.n	800955e <memmove+0x1e>
 80095e6:	3b01      	subs	r3, #1
 80095e8:	440a      	add	r2, r1
 80095ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f2:	4291      	cmp	r1, r2
 80095f4:	d1f9      	bne.n	80095ea <memmove+0xaa>
 80095f6:	bcf0      	pop	{r4, r5, r6, r7}
 80095f8:	4770      	bx	lr
 80095fa:	4603      	mov	r3, r0
 80095fc:	e7f1      	b.n	80095e2 <memmove+0xa2>
 80095fe:	4603      	mov	r3, r0
 8009600:	e7f1      	b.n	80095e6 <memmove+0xa6>
 8009602:	462a      	mov	r2, r5
 8009604:	e7ed      	b.n	80095e2 <memmove+0xa2>
 8009606:	bf00      	nop

08009608 <_realloc_r>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	4692      	mov	sl, r2
 800960e:	b083      	sub	sp, #12
 8009610:	2900      	cmp	r1, #0
 8009612:	f000 80a1 	beq.w	8009758 <_realloc_r+0x150>
 8009616:	460d      	mov	r5, r1
 8009618:	4680      	mov	r8, r0
 800961a:	f10a 040b 	add.w	r4, sl, #11
 800961e:	f7ff fa19 	bl	8008a54 <__malloc_lock>
 8009622:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8009626:	2c16      	cmp	r4, #22
 8009628:	f022 0603 	bic.w	r6, r2, #3
 800962c:	f1a5 0708 	sub.w	r7, r5, #8
 8009630:	d83e      	bhi.n	80096b0 <_realloc_r+0xa8>
 8009632:	2410      	movs	r4, #16
 8009634:	4621      	mov	r1, r4
 8009636:	45a2      	cmp	sl, r4
 8009638:	d83f      	bhi.n	80096ba <_realloc_r+0xb2>
 800963a:	428e      	cmp	r6, r1
 800963c:	eb07 0906 	add.w	r9, r7, r6
 8009640:	da74      	bge.n	800972c <_realloc_r+0x124>
 8009642:	4bc7      	ldr	r3, [pc, #796]	; (8009960 <_realloc_r+0x358>)
 8009644:	6898      	ldr	r0, [r3, #8]
 8009646:	4548      	cmp	r0, r9
 8009648:	f000 80aa 	beq.w	80097a0 <_realloc_r+0x198>
 800964c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009650:	f020 0301 	bic.w	r3, r0, #1
 8009654:	444b      	add	r3, r9
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	07db      	lsls	r3, r3, #31
 800965a:	f140 8083 	bpl.w	8009764 <_realloc_r+0x15c>
 800965e:	07d2      	lsls	r2, r2, #31
 8009660:	d534      	bpl.n	80096cc <_realloc_r+0xc4>
 8009662:	4651      	mov	r1, sl
 8009664:	4640      	mov	r0, r8
 8009666:	f7fe ff1f 	bl	80084a8 <_malloc_r>
 800966a:	4682      	mov	sl, r0
 800966c:	b1e0      	cbz	r0, 80096a8 <_realloc_r+0xa0>
 800966e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	443b      	add	r3, r7
 8009678:	f1a0 0208 	sub.w	r2, r0, #8
 800967c:	4293      	cmp	r3, r2
 800967e:	f000 80f9 	beq.w	8009874 <_realloc_r+0x26c>
 8009682:	1f32      	subs	r2, r6, #4
 8009684:	2a24      	cmp	r2, #36	; 0x24
 8009686:	f200 8107 	bhi.w	8009898 <_realloc_r+0x290>
 800968a:	2a13      	cmp	r2, #19
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	f200 80e6 	bhi.w	800985e <_realloc_r+0x256>
 8009692:	4603      	mov	r3, r0
 8009694:	462a      	mov	r2, r5
 8009696:	6019      	str	r1, [r3, #0]
 8009698:	6851      	ldr	r1, [r2, #4]
 800969a:	6059      	str	r1, [r3, #4]
 800969c:	6892      	ldr	r2, [r2, #8]
 800969e:	609a      	str	r2, [r3, #8]
 80096a0:	4629      	mov	r1, r5
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff fe54 	bl	8009350 <_free_r>
 80096a8:	4640      	mov	r0, r8
 80096aa:	f7ff f9d9 	bl	8008a60 <__malloc_unlock>
 80096ae:	e04f      	b.n	8009750 <_realloc_r+0x148>
 80096b0:	f024 0407 	bic.w	r4, r4, #7
 80096b4:	2c00      	cmp	r4, #0
 80096b6:	4621      	mov	r1, r4
 80096b8:	dabd      	bge.n	8009636 <_realloc_r+0x2e>
 80096ba:	f04f 0a00 	mov.w	sl, #0
 80096be:	230c      	movs	r3, #12
 80096c0:	4650      	mov	r0, sl
 80096c2:	f8c8 3000 	str.w	r3, [r8]
 80096c6:	b003      	add	sp, #12
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80096d0:	eba7 0b03 	sub.w	fp, r7, r3
 80096d4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80096d8:	f022 0203 	bic.w	r2, r2, #3
 80096dc:	18b3      	adds	r3, r6, r2
 80096de:	428b      	cmp	r3, r1
 80096e0:	dbbf      	blt.n	8009662 <_realloc_r+0x5a>
 80096e2:	46da      	mov	sl, fp
 80096e4:	f8db 100c 	ldr.w	r1, [fp, #12]
 80096e8:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 80096ec:	1f32      	subs	r2, r6, #4
 80096ee:	2a24      	cmp	r2, #36	; 0x24
 80096f0:	60c1      	str	r1, [r0, #12]
 80096f2:	eb0b 0903 	add.w	r9, fp, r3
 80096f6:	6088      	str	r0, [r1, #8]
 80096f8:	f200 80c6 	bhi.w	8009888 <_realloc_r+0x280>
 80096fc:	2a13      	cmp	r2, #19
 80096fe:	6829      	ldr	r1, [r5, #0]
 8009700:	f240 80c0 	bls.w	8009884 <_realloc_r+0x27c>
 8009704:	f8cb 1008 	str.w	r1, [fp, #8]
 8009708:	6869      	ldr	r1, [r5, #4]
 800970a:	f8cb 100c 	str.w	r1, [fp, #12]
 800970e:	2a1b      	cmp	r2, #27
 8009710:	68a9      	ldr	r1, [r5, #8]
 8009712:	f200 80d8 	bhi.w	80098c6 <_realloc_r+0x2be>
 8009716:	f10b 0210 	add.w	r2, fp, #16
 800971a:	3508      	adds	r5, #8
 800971c:	6011      	str	r1, [r2, #0]
 800971e:	6869      	ldr	r1, [r5, #4]
 8009720:	6051      	str	r1, [r2, #4]
 8009722:	68a9      	ldr	r1, [r5, #8]
 8009724:	6091      	str	r1, [r2, #8]
 8009726:	461e      	mov	r6, r3
 8009728:	465f      	mov	r7, fp
 800972a:	4655      	mov	r5, sl
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	1b32      	subs	r2, r6, r4
 8009730:	2a0f      	cmp	r2, #15
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	d822      	bhi.n	800977e <_realloc_r+0x176>
 8009738:	4333      	orrs	r3, r6
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009740:	f043 0301 	orr.w	r3, r3, #1
 8009744:	f8c9 3004 	str.w	r3, [r9, #4]
 8009748:	4640      	mov	r0, r8
 800974a:	f7ff f989 	bl	8008a60 <__malloc_unlock>
 800974e:	46aa      	mov	sl, r5
 8009750:	4650      	mov	r0, sl
 8009752:	b003      	add	sp, #12
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	4611      	mov	r1, r2
 800975a:	b003      	add	sp, #12
 800975c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	f7fe bea2 	b.w	80084a8 <_malloc_r>
 8009764:	f020 0003 	bic.w	r0, r0, #3
 8009768:	1833      	adds	r3, r6, r0
 800976a:	428b      	cmp	r3, r1
 800976c:	db61      	blt.n	8009832 <_realloc_r+0x22a>
 800976e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 8009772:	461e      	mov	r6, r3
 8009774:	60ca      	str	r2, [r1, #12]
 8009776:	eb07 0903 	add.w	r9, r7, r3
 800977a:	6091      	str	r1, [r2, #8]
 800977c:	e7d6      	b.n	800972c <_realloc_r+0x124>
 800977e:	1939      	adds	r1, r7, r4
 8009780:	4323      	orrs	r3, r4
 8009782:	f042 0201 	orr.w	r2, r2, #1
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	604a      	str	r2, [r1, #4]
 800978a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	3108      	adds	r1, #8
 8009794:	f8c9 3004 	str.w	r3, [r9, #4]
 8009798:	4640      	mov	r0, r8
 800979a:	f7ff fdd9 	bl	8009350 <_free_r>
 800979e:	e7d3      	b.n	8009748 <_realloc_r+0x140>
 80097a0:	6840      	ldr	r0, [r0, #4]
 80097a2:	f020 0903 	bic.w	r9, r0, #3
 80097a6:	44b1      	add	r9, r6
 80097a8:	f104 0010 	add.w	r0, r4, #16
 80097ac:	4581      	cmp	r9, r0
 80097ae:	da77      	bge.n	80098a0 <_realloc_r+0x298>
 80097b0:	07d2      	lsls	r2, r2, #31
 80097b2:	f53f af56 	bmi.w	8009662 <_realloc_r+0x5a>
 80097b6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80097ba:	eba7 0b02 	sub.w	fp, r7, r2
 80097be:	f8db 2004 	ldr.w	r2, [fp, #4]
 80097c2:	f022 0203 	bic.w	r2, r2, #3
 80097c6:	4491      	add	r9, r2
 80097c8:	4548      	cmp	r0, r9
 80097ca:	dc87      	bgt.n	80096dc <_realloc_r+0xd4>
 80097cc:	46da      	mov	sl, fp
 80097ce:	f8db 100c 	ldr.w	r1, [fp, #12]
 80097d2:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 80097d6:	1f32      	subs	r2, r6, #4
 80097d8:	2a24      	cmp	r2, #36	; 0x24
 80097da:	60c1      	str	r1, [r0, #12]
 80097dc:	6088      	str	r0, [r1, #8]
 80097de:	f200 80a1 	bhi.w	8009924 <_realloc_r+0x31c>
 80097e2:	2a13      	cmp	r2, #19
 80097e4:	6829      	ldr	r1, [r5, #0]
 80097e6:	f240 809b 	bls.w	8009920 <_realloc_r+0x318>
 80097ea:	f8cb 1008 	str.w	r1, [fp, #8]
 80097ee:	6869      	ldr	r1, [r5, #4]
 80097f0:	f8cb 100c 	str.w	r1, [fp, #12]
 80097f4:	2a1b      	cmp	r2, #27
 80097f6:	68a9      	ldr	r1, [r5, #8]
 80097f8:	f200 809b 	bhi.w	8009932 <_realloc_r+0x32a>
 80097fc:	f10b 0210 	add.w	r2, fp, #16
 8009800:	3508      	adds	r5, #8
 8009802:	6011      	str	r1, [r2, #0]
 8009804:	6869      	ldr	r1, [r5, #4]
 8009806:	6051      	str	r1, [r2, #4]
 8009808:	68a9      	ldr	r1, [r5, #8]
 800980a:	6091      	str	r1, [r2, #8]
 800980c:	eb0b 0104 	add.w	r1, fp, r4
 8009810:	eba9 0204 	sub.w	r2, r9, r4
 8009814:	f042 0201 	orr.w	r2, r2, #1
 8009818:	6099      	str	r1, [r3, #8]
 800981a:	604a      	str	r2, [r1, #4]
 800981c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	431c      	orrs	r4, r3
 8009826:	4640      	mov	r0, r8
 8009828:	f8cb 4004 	str.w	r4, [fp, #4]
 800982c:	f7ff f918 	bl	8008a60 <__malloc_unlock>
 8009830:	e78e      	b.n	8009750 <_realloc_r+0x148>
 8009832:	07d3      	lsls	r3, r2, #31
 8009834:	f53f af15 	bmi.w	8009662 <_realloc_r+0x5a>
 8009838:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800983c:	eba7 0b03 	sub.w	fp, r7, r3
 8009840:	f8db 2004 	ldr.w	r2, [fp, #4]
 8009844:	f022 0203 	bic.w	r2, r2, #3
 8009848:	4410      	add	r0, r2
 800984a:	1983      	adds	r3, r0, r6
 800984c:	428b      	cmp	r3, r1
 800984e:	f6ff af45 	blt.w	80096dc <_realloc_r+0xd4>
 8009852:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 8009856:	46da      	mov	sl, fp
 8009858:	60ca      	str	r2, [r1, #12]
 800985a:	6091      	str	r1, [r2, #8]
 800985c:	e742      	b.n	80096e4 <_realloc_r+0xdc>
 800985e:	6001      	str	r1, [r0, #0]
 8009860:	686b      	ldr	r3, [r5, #4]
 8009862:	6043      	str	r3, [r0, #4]
 8009864:	2a1b      	cmp	r2, #27
 8009866:	d83a      	bhi.n	80098de <_realloc_r+0x2d6>
 8009868:	f105 0208 	add.w	r2, r5, #8
 800986c:	f100 0308 	add.w	r3, r0, #8
 8009870:	68a9      	ldr	r1, [r5, #8]
 8009872:	e710      	b.n	8009696 <_realloc_r+0x8e>
 8009874:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	441e      	add	r6, r3
 800987e:	eb07 0906 	add.w	r9, r7, r6
 8009882:	e753      	b.n	800972c <_realloc_r+0x124>
 8009884:	4652      	mov	r2, sl
 8009886:	e749      	b.n	800971c <_realloc_r+0x114>
 8009888:	4629      	mov	r1, r5
 800988a:	4650      	mov	r0, sl
 800988c:	461e      	mov	r6, r3
 800988e:	465f      	mov	r7, fp
 8009890:	f7ff fe56 	bl	8009540 <memmove>
 8009894:	4655      	mov	r5, sl
 8009896:	e749      	b.n	800972c <_realloc_r+0x124>
 8009898:	4629      	mov	r1, r5
 800989a:	f7ff fe51 	bl	8009540 <memmove>
 800989e:	e6ff      	b.n	80096a0 <_realloc_r+0x98>
 80098a0:	4427      	add	r7, r4
 80098a2:	eba9 0904 	sub.w	r9, r9, r4
 80098a6:	f049 0201 	orr.w	r2, r9, #1
 80098aa:	609f      	str	r7, [r3, #8]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	431c      	orrs	r4, r3
 80098b8:	4640      	mov	r0, r8
 80098ba:	f845 4c04 	str.w	r4, [r5, #-4]
 80098be:	f7ff f8cf 	bl	8008a60 <__malloc_unlock>
 80098c2:	46aa      	mov	sl, r5
 80098c4:	e744      	b.n	8009750 <_realloc_r+0x148>
 80098c6:	f8cb 1010 	str.w	r1, [fp, #16]
 80098ca:	68e9      	ldr	r1, [r5, #12]
 80098cc:	f8cb 1014 	str.w	r1, [fp, #20]
 80098d0:	2a24      	cmp	r2, #36	; 0x24
 80098d2:	d010      	beq.n	80098f6 <_realloc_r+0x2ee>
 80098d4:	6929      	ldr	r1, [r5, #16]
 80098d6:	f10b 0218 	add.w	r2, fp, #24
 80098da:	3510      	adds	r5, #16
 80098dc:	e71e      	b.n	800971c <_realloc_r+0x114>
 80098de:	68ab      	ldr	r3, [r5, #8]
 80098e0:	6083      	str	r3, [r0, #8]
 80098e2:	68eb      	ldr	r3, [r5, #12]
 80098e4:	60c3      	str	r3, [r0, #12]
 80098e6:	2a24      	cmp	r2, #36	; 0x24
 80098e8:	d010      	beq.n	800990c <_realloc_r+0x304>
 80098ea:	f105 0210 	add.w	r2, r5, #16
 80098ee:	f100 0310 	add.w	r3, r0, #16
 80098f2:	6929      	ldr	r1, [r5, #16]
 80098f4:	e6cf      	b.n	8009696 <_realloc_r+0x8e>
 80098f6:	692a      	ldr	r2, [r5, #16]
 80098f8:	f8cb 2018 	str.w	r2, [fp, #24]
 80098fc:	696a      	ldr	r2, [r5, #20]
 80098fe:	f8cb 201c 	str.w	r2, [fp, #28]
 8009902:	69a9      	ldr	r1, [r5, #24]
 8009904:	f10b 0220 	add.w	r2, fp, #32
 8009908:	3518      	adds	r5, #24
 800990a:	e707      	b.n	800971c <_realloc_r+0x114>
 800990c:	692b      	ldr	r3, [r5, #16]
 800990e:	6103      	str	r3, [r0, #16]
 8009910:	696b      	ldr	r3, [r5, #20]
 8009912:	6143      	str	r3, [r0, #20]
 8009914:	69a9      	ldr	r1, [r5, #24]
 8009916:	f105 0218 	add.w	r2, r5, #24
 800991a:	f100 0318 	add.w	r3, r0, #24
 800991e:	e6ba      	b.n	8009696 <_realloc_r+0x8e>
 8009920:	4652      	mov	r2, sl
 8009922:	e76e      	b.n	8009802 <_realloc_r+0x1fa>
 8009924:	4629      	mov	r1, r5
 8009926:	4650      	mov	r0, sl
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	f7ff fe09 	bl	8009540 <memmove>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	e76c      	b.n	800980c <_realloc_r+0x204>
 8009932:	f8cb 1010 	str.w	r1, [fp, #16]
 8009936:	68e9      	ldr	r1, [r5, #12]
 8009938:	f8cb 1014 	str.w	r1, [fp, #20]
 800993c:	2a24      	cmp	r2, #36	; 0x24
 800993e:	d004      	beq.n	800994a <_realloc_r+0x342>
 8009940:	6929      	ldr	r1, [r5, #16]
 8009942:	f10b 0218 	add.w	r2, fp, #24
 8009946:	3510      	adds	r5, #16
 8009948:	e75b      	b.n	8009802 <_realloc_r+0x1fa>
 800994a:	692a      	ldr	r2, [r5, #16]
 800994c:	f8cb 2018 	str.w	r2, [fp, #24]
 8009950:	696a      	ldr	r2, [r5, #20]
 8009952:	f8cb 201c 	str.w	r2, [fp, #28]
 8009956:	69a9      	ldr	r1, [r5, #24]
 8009958:	f10b 0220 	add.w	r2, fp, #32
 800995c:	3518      	adds	r5, #24
 800995e:	e750      	b.n	8009802 <_realloc_r+0x1fa>
 8009960:	20000dd4 	.word	0x20000dd4
