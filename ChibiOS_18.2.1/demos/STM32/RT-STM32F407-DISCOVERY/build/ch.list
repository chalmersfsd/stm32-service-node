
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002ba 	.word	0x080002ba
 8000010:	080002ba 	.word	0x080002ba
 8000014:	080002ba 	.word	0x080002ba
 8000018:	080002ba 	.word	0x080002ba
 800001c:	080002ba 	.word	0x080002ba
 8000020:	080002ba 	.word	0x080002ba
 8000024:	080002ba 	.word	0x080002ba
 8000028:	080002ba 	.word	0x080002ba
 800002c:	08002f41 	.word	0x08002f41
 8000030:	080002ba 	.word	0x080002ba
 8000034:	080002ba 	.word	0x080002ba
 8000038:	080002ba 	.word	0x080002ba
 800003c:	080002ba 	.word	0x080002ba
 8000040:	080002ba 	.word	0x080002ba
 8000044:	080002ba 	.word	0x080002ba
 8000048:	080002ba 	.word	0x080002ba
 800004c:	080002ba 	.word	0x080002ba
 8000050:	080002ba 	.word	0x080002ba
 8000054:	080002ba 	.word	0x080002ba
 8000058:	080002ba 	.word	0x080002ba
 800005c:	080002ba 	.word	0x080002ba
 8000060:	080002ba 	.word	0x080002ba
 8000064:	080002ba 	.word	0x080002ba
 8000068:	080002ba 	.word	0x080002ba
 800006c:	080002ba 	.word	0x080002ba
 8000070:	080002ba 	.word	0x080002ba
 8000074:	080002ba 	.word	0x080002ba
 8000078:	080002ba 	.word	0x080002ba
 800007c:	080002ba 	.word	0x080002ba
 8000080:	080002ba 	.word	0x080002ba
 8000084:	080002ba 	.word	0x080002ba
 8000088:	080002ba 	.word	0x080002ba
 800008c:	080002ba 	.word	0x080002ba
 8000090:	080002ba 	.word	0x080002ba
 8000094:	080002ba 	.word	0x080002ba
 8000098:	080002ba 	.word	0x080002ba
 800009c:	080002ba 	.word	0x080002ba
 80000a0:	080002ba 	.word	0x080002ba
 80000a4:	080002ba 	.word	0x080002ba
 80000a8:	080002ba 	.word	0x080002ba
 80000ac:	080002ba 	.word	0x080002ba
 80000b0:	08001951 	.word	0x08001951
 80000b4:	080002ba 	.word	0x080002ba
 80000b8:	080002ba 	.word	0x080002ba
 80000bc:	080002ba 	.word	0x080002ba
 80000c0:	080002ba 	.word	0x080002ba
 80000c4:	080002ba 	.word	0x080002ba
 80000c8:	080002ba 	.word	0x080002ba
 80000cc:	080002ba 	.word	0x080002ba
 80000d0:	080002ba 	.word	0x080002ba
 80000d4:	080002ba 	.word	0x080002ba
 80000d8:	080017b1 	.word	0x080017b1
 80000dc:	080002ba 	.word	0x080002ba
 80000e0:	080002ba 	.word	0x080002ba
 80000e4:	080002ba 	.word	0x080002ba
 80000e8:	080002ba 	.word	0x080002ba
 80000ec:	080002ba 	.word	0x080002ba
 80000f0:	080002ba 	.word	0x080002ba
 80000f4:	080002ba 	.word	0x080002ba
 80000f8:	080002ba 	.word	0x080002ba
 80000fc:	080002ba 	.word	0x080002ba
 8000100:	080002ba 	.word	0x080002ba
 8000104:	080002ba 	.word	0x080002ba
 8000108:	080002ba 	.word	0x080002ba
 800010c:	080002ba 	.word	0x080002ba
 8000110:	080002ba 	.word	0x080002ba
 8000114:	080002ba 	.word	0x080002ba
 8000118:	080002ba 	.word	0x080002ba
 800011c:	080002ba 	.word	0x080002ba
 8000120:	080002ba 	.word	0x080002ba
 8000124:	080002ba 	.word	0x080002ba
 8000128:	080002ba 	.word	0x080002ba
 800012c:	080002ba 	.word	0x080002ba
 8000130:	080002ba 	.word	0x080002ba
 8000134:	080002ba 	.word	0x080002ba
 8000138:	080002ba 	.word	0x080002ba
 800013c:	080002ba 	.word	0x080002ba
 8000140:	080002ba 	.word	0x080002ba
 8000144:	080002ba 	.word	0x080002ba
 8000148:	080002ba 	.word	0x080002ba
 800014c:	080002ba 	.word	0x080002ba
 8000150:	080002ba 	.word	0x080002ba
 8000154:	080002ba 	.word	0x080002ba
 8000158:	080002ba 	.word	0x080002ba
 800015c:	080002ba 	.word	0x080002ba
 8000160:	080002ba 	.word	0x080002ba
 8000164:	080002ba 	.word	0x080002ba
 8000168:	080002ba 	.word	0x080002ba
 800016c:	080002ba 	.word	0x080002ba
 8000170:	080002ba 	.word	0x080002ba
 8000174:	080002ba 	.word	0x080002ba
 8000178:	080002ba 	.word	0x080002ba
 800017c:	080002ba 	.word	0x080002ba
 8000180:	080002ba 	.word	0x080002ba
 8000184:	080002ba 	.word	0x080002ba
 8000188:	080002ba 	.word	0x080002ba
 800018c:	080002ba 	.word	0x080002ba
 8000190:	080002ba 	.word	0x080002ba
 8000194:	080002ba 	.word	0x080002ba
 8000198:	080002ba 	.word	0x080002ba
 800019c:	080002ba 	.word	0x080002ba
 80001a0:	080002ba 	.word	0x080002ba
 80001a4:	080002ba 	.word	0x080002ba
 80001a8:	080002ba 	.word	0x080002ba
 80001ac:	080002ba 	.word	0x080002ba
 80001b0:	080002ba 	.word	0x080002ba
 80001b4:	080002ba 	.word	0x080002ba
 80001b8:	080002ba 	.word	0x080002ba
 80001bc:	080002ba 	.word	0x080002ba
 80001c0:	080002ba 	.word	0x080002ba
 80001c4:	080002ba 	.word	0x080002ba
 80001c8:	080002ba 	.word	0x080002ba
 80001cc:	080002ba 	.word	0x080002ba
 80001d0:	080002ba 	.word	0x080002ba
 80001d4:	080002ba 	.word	0x080002ba
 80001d8:	080002ba 	.word	0x080002ba
 80001dc:	080002ba 	.word	0x080002ba

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f001 fc3c 	bl	8001a80 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f001 f992 	bl	8001530 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f001 fbce 	bl	80019f0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f001 fc0c 	bl	8001a70 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f003 fbba 	bl	80039e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f001 bbf0 	b.w	8001a60 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000294:	08009b38 	.word	0x08009b38
                ldr     r2, =_data_start
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800029c:	2000088c 	.word	0x2000088c
                ldr     r1, =_bss_start
 80002a0:	20000890 	.word	0x20000890
                ldr     r2, =_bss_end
 80002a4:	200013f0 	.word	0x200013f0
                ldr     r4, =__init_array_start
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_start
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f000 fe50 	bl	8000f80 <chThdExit>

080002e0 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e0:	f000 fb3e 	bl	8000960 <chSchDoReschedule>

080002e4 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e4:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e6:	e7fe      	b.n	80002e6 <_port_exit_from_isr+0x2>

080002e8 <memcpy>:
 80002e8:	e352000f 	cmp	r2, #15
 80002ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 80002f0:	9a000029 	bls	800039c <memcpy+0xb4>
 80002f4:	e1813000 	orr	r3, r1, r0
 80002f8:	e3130003 	tst	r3, #3
 80002fc:	1a000031 	bne	80003c8 <memcpy+0xe0>
 8000300:	e1a0e002 	mov	lr, r2
 8000304:	e280c010 	add	ip, r0, #16
 8000308:	e2813010 	add	r3, r1, #16
 800030c:	e5137010 	ldr	r7, [r3, #-16]
 8000310:	e513600c 	ldr	r6, [r3, #-12]
 8000314:	e5135008 	ldr	r5, [r3, #-8]
 8000318:	e5134004 	ldr	r4, [r3, #-4]
 800031c:	e24ee010 	sub	lr, lr, #16
 8000320:	e35e000f 	cmp	lr, #15
 8000324:	e50c7010 	str	r7, [ip, #-16]
 8000328:	e50c600c 	str	r6, [ip, #-12]
 800032c:	e50c5008 	str	r5, [ip, #-8]
 8000330:	e50c4004 	str	r4, [ip, #-4]
 8000334:	e2833010 	add	r3, r3, #16
 8000338:	e28cc010 	add	ip, ip, #16
 800033c:	8afffff2 	bhi	800030c <memcpy+0x24>
 8000340:	e2423010 	sub	r3, r2, #16
 8000344:	e3c3300f 	bic	r3, r3, #15
 8000348:	e202600f 	and	r6, r2, #15
 800034c:	e2833010 	add	r3, r3, #16
 8000350:	e3560003 	cmp	r6, #3
 8000354:	e0811003 	add	r1, r1, r3
 8000358:	e0803003 	add	r3, r0, r3
 800035c:	9a00001b 	bls	80003d0 <memcpy+0xe8>
 8000360:	e1a04001 	mov	r4, r1
 8000364:	e1a0c006 	mov	ip, r6
 8000368:	e243e004 	sub	lr, r3, #4
 800036c:	e24cc004 	sub	ip, ip, #4
 8000370:	e4945004 	ldr	r5, [r4], #4
 8000374:	e35c0003 	cmp	ip, #3
 8000378:	e5ae5004 	str	r5, [lr, #4]!
 800037c:	8afffffa 	bhi	800036c <memcpy+0x84>
 8000380:	e246c004 	sub	ip, r6, #4
 8000384:	e3ccc003 	bic	ip, ip, #3
 8000388:	e28cc004 	add	ip, ip, #4
 800038c:	e083300c 	add	r3, r3, ip
 8000390:	e081100c 	add	r1, r1, ip
 8000394:	e2022003 	and	r2, r2, #3
 8000398:	ea000000 	b	80003a0 <memcpy+0xb8>
 800039c:	e1a03000 	mov	r3, r0
 80003a0:	e3520000 	cmp	r2, #0
 80003a4:	0a000005 	beq	80003c0 <memcpy+0xd8>
 80003a8:	e2433001 	sub	r3, r3, #1
 80003ac:	e0812002 	add	r2, r1, r2
 80003b0:	e4d1c001 	ldrb	ip, [r1], #1
 80003b4:	e1510002 	cmp	r1, r2
 80003b8:	e5e3c001 	strb	ip, [r3, #1]!
 80003bc:	1afffffb 	bne	80003b0 <memcpy+0xc8>
 80003c0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
 80003c4:	e12fff1e 	bx	lr
 80003c8:	e1a03000 	mov	r3, r0
 80003cc:	eafffff5 	b	80003a8 <memcpy+0xc0>
 80003d0:	e1a02006 	mov	r2, r6
 80003d4:	eafffff1 	b	80003a0 <memcpy+0xb8>

080003d8 <memset>:
 80003d8:	e3100003 	tst	r0, #3
 80003dc:	e92d4010 	push	{r4, lr}
 80003e0:	0a000037 	beq	80004c4 <memset+0xec>
 80003e4:	e3520000 	cmp	r2, #0
 80003e8:	e2422001 	sub	r2, r2, #1
 80003ec:	0a000032 	beq	80004bc <memset+0xe4>
 80003f0:	e201c0ff 	and	ip, r1, #255	; 0xff
 80003f4:	e1a03000 	mov	r3, r0
 80003f8:	ea000002 	b	8000408 <memset+0x30>
 80003fc:	e3520000 	cmp	r2, #0
 8000400:	e2422001 	sub	r2, r2, #1
 8000404:	0a00002c 	beq	80004bc <memset+0xe4>
 8000408:	e4c3c001 	strb	ip, [r3], #1
 800040c:	e3130003 	tst	r3, #3
 8000410:	1afffff9 	bne	80003fc <memset+0x24>
 8000414:	e3520003 	cmp	r2, #3
 8000418:	9a000020 	bls	80004a0 <memset+0xc8>
 800041c:	e201e0ff 	and	lr, r1, #255	; 0xff
 8000420:	e18ee40e 	orr	lr, lr, lr, lsl #8
 8000424:	e352000f 	cmp	r2, #15
 8000428:	e18ee80e 	orr	lr, lr, lr, lsl #16
 800042c:	9a000010 	bls	8000474 <memset+0x9c>
 8000430:	e1a04002 	mov	r4, r2
 8000434:	e283c010 	add	ip, r3, #16
 8000438:	e2444010 	sub	r4, r4, #16
 800043c:	e354000f 	cmp	r4, #15
 8000440:	e50ce010 	str	lr, [ip, #-16]
 8000444:	e50ce00c 	str	lr, [ip, #-12]
 8000448:	e50ce008 	str	lr, [ip, #-8]
 800044c:	e50ce004 	str	lr, [ip, #-4]
 8000450:	e28cc010 	add	ip, ip, #16
 8000454:	8afffff7 	bhi	8000438 <memset+0x60>
 8000458:	e242c010 	sub	ip, r2, #16
 800045c:	e3ccc00f 	bic	ip, ip, #15
 8000460:	e202200f 	and	r2, r2, #15
 8000464:	e28cc010 	add	ip, ip, #16
 8000468:	e3520003 	cmp	r2, #3
 800046c:	e083300c 	add	r3, r3, ip
 8000470:	9a00000a 	bls	80004a0 <memset+0xc8>
 8000474:	e1a04003 	mov	r4, r3
 8000478:	e1a0c002 	mov	ip, r2
 800047c:	e24cc004 	sub	ip, ip, #4
 8000480:	e35c0003 	cmp	ip, #3
 8000484:	e484e004 	str	lr, [r4], #4
 8000488:	8afffffb 	bhi	800047c <memset+0xa4>
 800048c:	e242c004 	sub	ip, r2, #4
 8000490:	e3ccc003 	bic	ip, ip, #3
 8000494:	e28cc004 	add	ip, ip, #4
 8000498:	e083300c 	add	r3, r3, ip
 800049c:	e2022003 	and	r2, r2, #3
 80004a0:	e3520000 	cmp	r2, #0
 80004a4:	120110ff 	andne	r1, r1, #255	; 0xff
 80004a8:	10832002 	addne	r2, r3, r2
 80004ac:	0a000002 	beq	80004bc <memset+0xe4>
 80004b0:	e4c31001 	strb	r1, [r3], #1
 80004b4:	e1530002 	cmp	r3, r2
 80004b8:	1afffffc 	bne	80004b0 <memset+0xd8>
 80004bc:	e8bd4010 	pop	{r4, lr}
 80004c0:	e12fff1e 	bx	lr
 80004c4:	e1a03000 	mov	r3, r0
 80004c8:	eaffffd1 	b	8000414 <memset+0x3c>

080004cc <strncmp>:
 80004cc:	e3520000 	cmp	r2, #0
 80004d0:	0a00003b 	beq	80005c4 <strncmp+0xf8>
 80004d4:	e1803001 	orr	r3, r0, r1
 80004d8:	e2133003 	ands	r3, r3, #3
 80004dc:	e92d4070 	push	{r4, r5, r6, lr}
 80004e0:	1a000023 	bne	8000574 <strncmp+0xa8>
 80004e4:	e3520003 	cmp	r2, #3
 80004e8:	9a000021 	bls	8000574 <strncmp+0xa8>
 80004ec:	e590e000 	ldr	lr, [r0]
 80004f0:	e591c000 	ldr	ip, [r1]
 80004f4:	e15e000c 	cmp	lr, ip
 80004f8:	1a00001d 	bne	8000574 <strncmp+0xa8>
 80004fc:	e2522004 	subs	r2, r2, #4
 8000500:	0a000034 	beq	80005d8 <strncmp+0x10c>
 8000504:	e59fc0dc 	ldr	ip, [pc, #220]	; 80005e8 <strncmp+0x11c>
 8000508:	e59f40dc 	ldr	r4, [pc, #220]	; 80005ec <strncmp+0x120>
 800050c:	e08ec00c 	add	ip, lr, ip
 8000510:	e1ccc00e 	bic	ip, ip, lr
 8000514:	e004400c 	and	r4, r4, ip
 8000518:	e3540000 	cmp	r4, #0
 800051c:	02805004 	addeq	r5, r0, #4
 8000520:	02814004 	addeq	r4, r1, #4
 8000524:	0a00000c 	beq	800055c <strncmp+0x90>
 8000528:	ea00002c 	b	80005e0 <strncmp+0x114>
 800052c:	e495c004 	ldr	ip, [r5], #4
 8000530:	e5946000 	ldr	r6, [r4]
 8000534:	e08c3003 	add	r3, ip, r3
 8000538:	e1c3300c 	bic	r3, r3, ip
 800053c:	e15c0006 	cmp	ip, r6
 8000540:	e00ee003 	and	lr, lr, r3
 8000544:	e2844004 	add	r4, r4, #4
 8000548:	1a000009 	bne	8000574 <strncmp+0xa8>
 800054c:	e2522004 	subs	r2, r2, #4
 8000550:	0a000020 	beq	80005d8 <strncmp+0x10c>
 8000554:	e35e0000 	cmp	lr, #0
 8000558:	1a00001b 	bne	80005cc <strncmp+0x100>
 800055c:	e3520003 	cmp	r2, #3
 8000560:	e59f3080 	ldr	r3, [pc, #128]	; 80005e8 <strncmp+0x11c>
 8000564:	e59fe080 	ldr	lr, [pc, #128]	; 80005ec <strncmp+0x120>
 8000568:	e1a00005 	mov	r0, r5
 800056c:	e1a01004 	mov	r1, r4
 8000570:	8affffed 	bhi	800052c <strncmp+0x60>
 8000574:	e5d03000 	ldrb	r3, [r0]
 8000578:	e5d1c000 	ldrb	ip, [r1]
 800057c:	e15c0003 	cmp	ip, r3
 8000580:	e2422001 	sub	r2, r2, #1
 8000584:	1a00000b 	bne	80005b8 <strncmp+0xec>
 8000588:	e3520000 	cmp	r2, #0
 800058c:	135c0000 	cmpne	ip, #0
 8000590:	1a000003 	bne	80005a4 <strncmp+0xd8>
 8000594:	ea00000c 	b	80005cc <strncmp+0x100>
 8000598:	e3520000 	cmp	r2, #0
 800059c:	13530000 	cmpne	r3, #0
 80005a0:	0a000009 	beq	80005cc <strncmp+0x100>
 80005a4:	e5f03001 	ldrb	r3, [r0, #1]!
 80005a8:	e5f1c001 	ldrb	ip, [r1, #1]!
 80005ac:	e153000c 	cmp	r3, ip
 80005b0:	e2422001 	sub	r2, r2, #1
 80005b4:	0afffff7 	beq	8000598 <strncmp+0xcc>
 80005b8:	e06c0003 	rsb	r0, ip, r3
 80005bc:	e8bd4070 	pop	{r4, r5, r6, lr}
 80005c0:	e12fff1e 	bx	lr
 80005c4:	e1a00002 	mov	r0, r2
 80005c8:	e12fff1e 	bx	lr
 80005cc:	e3a00000 	mov	r0, #0
 80005d0:	e8bd4070 	pop	{r4, r5, r6, lr}
 80005d4:	e12fff1e 	bx	lr
 80005d8:	e1a00002 	mov	r0, r2
 80005dc:	eafffff6 	b	80005bc <strncmp+0xf0>
 80005e0:	e1a00003 	mov	r0, r3
 80005e4:	eafffff4 	b	80005bc <strncmp+0xf0>
 80005e8:	fefefeff 	.word	0xfefefeff
 80005ec:	80808080 	.word	0x80808080

080005f0 <strncpy>:
 80005f0:	e1803001 	orr	r3, r0, r1
 80005f4:	e3130003 	tst	r3, #3
 80005f8:	03a03001 	moveq	r3, #1
 80005fc:	13a03000 	movne	r3, #0
 8000600:	e3520003 	cmp	r2, #3
 8000604:	93a03000 	movls	r3, #0
 8000608:	82033001 	andhi	r3, r3, #1
 800060c:	e3530000 	cmp	r3, #0
 8000610:	e92d4030 	push	{r4, r5, lr}
 8000614:	01a03000 	moveq	r3, r0
 8000618:	0a00000f 	beq	800065c <strncpy+0x6c>
 800061c:	e1a0e001 	mov	lr, r1
 8000620:	e1a03000 	mov	r3, r0
 8000624:	e1a0100e 	mov	r1, lr
 8000628:	e59fc09c 	ldr	ip, [pc, #156]	; 80006cc <strncpy+0xdc>
 800062c:	e49e5004 	ldr	r5, [lr], #4
 8000630:	e59f4098 	ldr	r4, [pc, #152]	; 80006d0 <strncpy+0xe0>
 8000634:	e085c00c 	add	ip, r5, ip
 8000638:	e1ccc005 	bic	ip, ip, r5
 800063c:	e004400c 	and	r4, r4, ip
 8000640:	e3540000 	cmp	r4, #0
 8000644:	1a000006 	bne	8000664 <strncpy+0x74>
 8000648:	e2422004 	sub	r2, r2, #4
 800064c:	e3520003 	cmp	r2, #3
 8000650:	e4835004 	str	r5, [r3], #4
 8000654:	e1a0100e 	mov	r1, lr
 8000658:	8afffff1 	bhi	8000624 <strncpy+0x34>
 800065c:	e3520000 	cmp	r2, #0
 8000660:	0a00000e 	beq	80006a0 <strncpy+0xb0>
 8000664:	e5d1c000 	ldrb	ip, [r1]
 8000668:	e35c0000 	cmp	ip, #0
 800066c:	e5c3c000 	strb	ip, [r3]
 8000670:	e2422001 	sub	r2, r2, #1
 8000674:	e2833001 	add	r3, r3, #1
 8000678:	e2811001 	add	r1, r1, #1
 800067c:	1a000005 	bne	8000698 <strncpy+0xa8>
 8000680:	ea000008 	b	80006a8 <strncpy+0xb8>
 8000684:	e4d1c001 	ldrb	ip, [r1], #1
 8000688:	e35c0000 	cmp	ip, #0
 800068c:	e2422001 	sub	r2, r2, #1
 8000690:	e4c3c001 	strb	ip, [r3], #1
 8000694:	0a000003 	beq	80006a8 <strncpy+0xb8>
 8000698:	e3520000 	cmp	r2, #0
 800069c:	1afffff8 	bne	8000684 <strncpy+0x94>
 80006a0:	e8bd4030 	pop	{r4, r5, lr}
 80006a4:	e12fff1e 	bx	lr
 80006a8:	e3520000 	cmp	r2, #0
 80006ac:	13a01000 	movne	r1, #0
 80006b0:	10832002 	addne	r2, r3, r2
 80006b4:	0afffff9 	beq	80006a0 <strncpy+0xb0>
 80006b8:	e4c31001 	strb	r1, [r3], #1
 80006bc:	e1520003 	cmp	r2, r3
 80006c0:	1afffffc 	bne	80006b8 <strncpy+0xc8>
 80006c4:	e8bd4030 	pop	{r4, r5, lr}
 80006c8:	e12fff1e 	bx	lr
 80006cc:	fefefeff 	.word	0xfefefeff
 80006d0:	80808080 	.word	0x80808080
	...

080006e0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80006e0:	b4f0      	push	{r4, r5, r6, r7}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80006e2:	2320      	movs	r3, #32
 80006e4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80006e8:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <chCoreAllocAlignedWithOffset+0x40>)
 80006ea:	682f      	ldr	r7, [r5, #0]
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80006ec:	686c      	ldr	r4, [r5, #4]
 80006ee:	1e4e      	subs	r6, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80006f0:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
 80006f2:	1983      	adds	r3, r0, r6
 80006f4:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80006f6:	1990      	adds	r0, r2, r6
  size = MEM_ALIGN_NEXT(size, align);
 80006f8:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80006fa:	4008      	ands	r0, r1
  next = p + size;
 80006fc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d807      	bhi.n	8000712 <chCoreAllocAlignedWithOffset+0x32>
 8000702:	429f      	cmp	r7, r3
 8000704:	d805      	bhi.n	8000712 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8000706:	602b      	str	r3, [r5, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 800070e:	bcf0      	pop	{r4, r5, r6, r7}
 8000710:	4770      	bx	lr
    return NULL;
 8000712:	2000      	movs	r0, #0
 8000714:	2300      	movs	r3, #0
 8000716:	f383 8811 	msr	BASEPRI, r3
}
 800071a:	bcf0      	pop	{r4, r5, r6, r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000968 	.word	0x20000968
	...

08000730 <wakeup.lto_priv.205>:
 8000730:	2320      	movs	r3, #32
 8000732:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000736:	f890 3020 	ldrb.w	r3, [r0, #32]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d80e      	bhi.n	800075c <wakeup.lto_priv.205+0x2c>
 800073e:	e8df f003 	tbb	[pc, r3]
 8000742:	0d28      	.short	0x0d28
 8000744:	0408240d 	.word	0x0408240d
 8000748:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800074a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800074c:	6893      	ldr	r3, [r2, #8]
 800074e:	3301      	adds	r3, #1
 8000750:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000752:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000756:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000758:	6802      	ldr	r2, [r0, #0]
 800075a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800075c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800075e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000764:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <wakeup.lto_priv.205+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000768:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800076a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800076e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	428a      	cmp	r2, r1
 8000774:	d2fb      	bcs.n	800076e <wakeup.lto_priv.205+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	6042      	str	r2, [r0, #4]
  tp->queue.next             = cp;
 800077a:	6003      	str	r3, [r0, #0]
 800077c:	2100      	movs	r1, #0
  tp->queue.prev->queue.next = tp;
 800077e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000780:	6058      	str	r0, [r3, #4]
 8000782:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000786:	bc10      	pop	{r4}
 8000788:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800078a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e7e4      	b.n	800075c <wakeup.lto_priv.205+0x2c>
 8000792:	2300      	movs	r3, #0
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	2000122c 	.word	0x2000122c

080007a0 <_idle_thread.lto_priv.90>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80007a0:	e7fe      	b.n	80007a0 <_idle_thread.lto_priv.90>
 80007a2:	bf00      	nop
	...

080007b0 <notify2.lto_priv.89>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80007b0:	4a02      	ldr	r2, [pc, #8]	; (80007bc <notify2.lto_priv.89+0xc>)
 80007b2:	68d3      	ldr	r3, [r2, #12]
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	60d3      	str	r3, [r2, #12]
 80007ba:	4770      	bx	lr
 80007bc:	40004400 	.word	0x40004400

080007c0 <_ctl.lto_priv.99>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80007c0:	2000      	movs	r0, #0
 80007c2:	4770      	bx	lr
	...

080007d0 <chEvtAddEvents>:
 80007d0:	2320      	movs	r3, #32
 80007d2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <chEvtAddEvents+0x18>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007dc:	4310      	orrs	r0, r2
 80007de:	6358      	str	r0, [r3, #52]	; 0x34
 80007e0:	2300      	movs	r3, #0
 80007e2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  newevt = chEvtAddEventsI(events);
  chSysUnlock();

  return newevt;
}
 80007e6:	4770      	bx	lr
 80007e8:	2000122c 	.word	0x2000122c
 80007ec:	00000000 	.word	0x00000000

080007f0 <chEvtUnregister>:
 80007f0:	2320      	movs	r3, #32
 80007f2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80007f6:	4602      	mov	r2, r0
 80007f8:	e002      	b.n	8000800 <chEvtUnregister+0x10>
    if (p->next == elp) {
 80007fa:	428b      	cmp	r3, r1
 80007fc:	d007      	beq.n	800080e <chEvtUnregister+0x1e>
 80007fe:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8000800:	6813      	ldr	r3, [r2, #0]
 8000802:	4298      	cmp	r0, r3
 8000804:	d1f9      	bne.n	80007fa <chEvtUnregister+0xa>
 8000806:	2300      	movs	r3, #0
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	4770      	bx	lr
      p->next = elp->next;
 800080e:	680b      	ldr	r3, [r1, #0]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	f383 8811 	msr	BASEPRI, r3
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	0000      	movs	r0, r0
	...

08000820 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <chTMStopMeasurementX+0x40>)
 8000824:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000826:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000828:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800082a:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800082c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800082e:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8000830:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000834:	1bdb      	subs	r3, r3, r7
 8000836:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000838:	18e4      	adds	r4, r4, r3
 800083a:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 800083e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000840:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000842:	bf88      	it	hi
 8000844:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000846:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000848:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800084a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 800084e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000850:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000852:	bf38      	it	cc
 8000854:	6003      	strcc	r3, [r0, #0]
}
 8000856:	bcf0      	pop	{r4, r5, r6, r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e0001000 	.word	0xe0001000
 8000860:	2000122c 	.word	0x2000122c
	...

08000870 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	2320      	movs	r3, #32
 8000874:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <chThdYield+0x54>)
 800087a:	6810      	ldr	r0, [r2, #0]
 800087c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800087e:	6883      	ldr	r3, [r0, #8]
  return firstprio(&ch.rlist.queue) >= currp->prio;
 8000880:	68a1      	ldr	r1, [r4, #8]
  if (chSchCanYieldS()) {
 8000882:	428b      	cmp	r3, r1
 8000884:	d203      	bcs.n	800088e <chThdYield+0x1e>
 8000886:	2300      	movs	r3, #0
 8000888:	f383 8811 	msr	BASEPRI, r3
 800088c:	bd70      	pop	{r4, r5, r6, pc}
  tqp->next             = tp->queue.next;
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000892:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8000894:	2500      	movs	r5, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000896:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
 8000898:	f880 6020 	strb.w	r6, [r0, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800089c:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800089e:	f884 5020 	strb.w	r5, [r4, #32]
 80008a2:	e000      	b.n	80008a6 <chThdYield+0x36>
 80008a4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	4291      	cmp	r1, r2
 80008aa:	d9fb      	bls.n	80008a4 <chThdYield+0x34>
  tp->queue.prev             = cp->queue.prev;
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 80008b0:	6023      	str	r3, [r4, #0]

  /* Placing in ready list behind peers.*/
  otp = chSchReadyI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80008b2:	4621      	mov	r1, r4
  tp->queue.prev->queue.next = tp;
 80008b4:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80008b6:	605c      	str	r4, [r3, #4]
  chSysSwitch(currp, otp);
 80008b8:	f7ff fd02 	bl	80002c0 <_port_switch>
 80008bc:	2300      	movs	r3, #0
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	2000122c 	.word	0x2000122c
	...

080008d0 <chThdCreateSuspendedI>:
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80008d0:	6883      	ldr	r3, [r0, #8]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80008d2:	6941      	ldr	r1, [r0, #20]
  REG_INSERT(tp);
 80008d4:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <chThdCreateSuspendedI+0x80>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80008d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  tp->wabase = tdp->wbase;
 80008d8:	6845      	ldr	r5, [r0, #4]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80008da:	6906      	ldr	r6, [r0, #16]
  return _thread_init(tp, tdp->name, tdp->prio);
 80008dc:	6804      	ldr	r4, [r0, #0]
 80008de:	68c7      	ldr	r7, [r0, #12]
  REG_INSERT(tp);
 80008e0:	f843 2c38 	str.w	r2, [r3, #-56]
  tp->refs      = (trefs_t)1;
 80008e4:	2001      	movs	r0, #1
 80008e6:	f803 0c26 	strb.w	r0, [r3, #-38]
  tp->state     = CH_STATE_WTSTART;
 80008ea:	f04f 0e02 	mov.w	lr, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 80008ee:	2000      	movs	r0, #0
  tp->state     = CH_STATE_WTSTART;
 80008f0:	f803 ec28 	strb.w	lr, [r3, #-40]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80008f4:	f803 0c27 	strb.w	r0, [r3, #-39]
  return _thread_init(tp, tdp->name, tdp->prio);
 80008f8:	f843 4c30 	str.w	r4, [r3, #-48]
  tp->wabase = tdp->wbase;
 80008fc:	f843 5c2c 	str.w	r5, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000900:	f1a3 046c 	sub.w	r4, r3, #108	; 0x6c
  REG_INSERT(tp);
 8000904:	6955      	ldr	r5, [r2, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000906:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8000954 <chThdCreateSuspendedI+0x84>
 800090a:	f843 6c6c 	str.w	r6, [r3, #-108]
 800090e:	f843 1c68 	str.w	r1, [r3, #-104]
 8000912:	f843 4c3c 	str.w	r4, [r3, #-60]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8000916:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
  queue_init(&tp->msgqueue);
 800091a:	f1a3 041c 	sub.w	r4, r3, #28
  list_init(&tp->waiting);
 800091e:	f1a3 0620 	sub.w	r6, r3, #32
  tp->mtxlist   = NULL;
 8000922:	f843 0c10 	str.w	r0, [r3, #-16]
  tp->epending  = (eventmask_t)0;
 8000926:	f843 0c14 	str.w	r0, [r3, #-20]
  tp->prio      = prio;
 800092a:	f843 7c40 	str.w	r7, [r3, #-64]
  tp->realprio  = prio;
 800092e:	f843 7c0c 	str.w	r7, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000932:	f843 ec4c 	str.w	lr, [r3, #-76]
  REG_INSERT(tp);
 8000936:	f843 5c34 	str.w	r5, [r3, #-52]
}
 800093a:	4608      	mov	r0, r1
  REG_INSERT(tp);
 800093c:	6129      	str	r1, [r5, #16]
 800093e:	6151      	str	r1, [r2, #20]
  tlp->next = (thread_t *)tlp;
 8000940:	f843 6c20 	str.w	r6, [r3, #-32]
  tqp->next = (thread_t *)tqp;
 8000944:	f843 4c1c 	str.w	r4, [r3, #-28]
  tqp->prev = (thread_t *)tqp;
 8000948:	f843 4c18 	str.w	r4, [r3, #-24]
}
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	bf00      	nop
 8000950:	2000122c 	.word	0x2000122c
 8000954:	080002d1 	.word	0x080002d1
	...

08000960 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 8000962:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 8000964:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8000966:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000968:	2101      	movs	r1, #1
  thread_t *otp = currp;
 800096a:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 800096c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800096e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8000970:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8000974:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 8000976:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000978:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 800097a:	f884 5020 	strb.w	r5, [r4, #32]
 800097e:	e000      	b.n	8000982 <chSchDoReschedule+0x22>
 8000980:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	4291      	cmp	r1, r2
 8000986:	d3fb      	bcc.n	8000980 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 800098c:	6023      	str	r3, [r4, #0]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800098e:	4621      	mov	r1, r4
  tp->queue.prev->queue.next = tp;
 8000990:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000992:	605c      	str	r4, [r3, #4]
}
 8000994:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 8000996:	f7ff bc93 	b.w	80002c0 <_port_switch>
 800099a:	bf00      	nop
 800099c:	2000122c 	.word	0x2000122c

080009a0 <chSchRescheduleS>:
  return firstprio(&ch.rlist.queue) > currp->prio;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <chSchRescheduleS+0x14>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 80009a6:	6892      	ldr	r2, [r2, #8]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d800      	bhi.n	80009b0 <chSchRescheduleS+0x10>
 80009ae:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80009b0:	f7ff bfd6 	b.w	8000960 <chSchDoReschedule>
 80009b4:	2000122c 	.word	0x2000122c
	...

080009c0 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 80009c0:	b510      	push	{r4, lr}
 80009c2:	2320      	movs	r3, #32
 80009c4:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <chThdSetPriority+0x2c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 80009ce:	6899      	ldr	r1, [r3, #8]
 80009d0:	428c      	cmp	r4, r1
 80009d2:	d001      	beq.n	80009d8 <chThdSetPriority+0x18>
 80009d4:	4281      	cmp	r1, r0
 80009d6:	d200      	bcs.n	80009da <chThdSetPriority+0x1a>
    currp->prio = newprio;
 80009d8:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 80009da:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 80009dc:	f7ff ffe0 	bl	80009a0 <chSchRescheduleS>
 80009e0:	2300      	movs	r3, #0
 80009e2:	f383 8811 	msr	BASEPRI, r3
}
 80009e6:	4620      	mov	r0, r4
 80009e8:	bd10      	pop	{r4, pc}
 80009ea:	bf00      	nop
 80009ec:	2000122c 	.word	0x2000122c

080009f0 <chSchWakeupS>:
  thread_t *otp = currp;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80009f2:	b470      	push	{r4, r5, r6}
 80009f4:	4604      	mov	r4, r0
  thread_t *otp = currp;
 80009f6:	699d      	ldr	r5, [r3, #24]
  ntp->u.rdymsg = msg;
 80009f8:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80009fa:	68a8      	ldr	r0, [r5, #8]
 80009fc:	68a1      	ldr	r1, [r4, #8]
 80009fe:	4281      	cmp	r1, r0
  tp->state = CH_STATE_READY;
 8000a00:	f04f 0200 	mov.w	r2, #0
  if (ntp->prio <= otp->prio) {
 8000a04:	d80c      	bhi.n	8000a20 <chSchWakeupS+0x30>
  tp->state = CH_STATE_READY;
 8000a06:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 8000a0a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	4291      	cmp	r1, r2
 8000a10:	d9fb      	bls.n	8000a0a <chSchWakeupS+0x1a>
  tp->queue.prev             = cp->queue.prev;
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000a16:	6023      	str	r3, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000a18:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000a1a:	605c      	str	r4, [r3, #4]
}
 8000a1c:	bc70      	pop	{r4, r5, r6}
 8000a1e:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8000a20:	f885 2020 	strb.w	r2, [r5, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000a24:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8000a26:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8000a28:	6891      	ldr	r1, [r2, #8]
 8000a2a:	4288      	cmp	r0, r1
 8000a2c:	d9fb      	bls.n	8000a26 <chSchWakeupS+0x36>
  tp->queue.prev             = cp->queue.prev;
 8000a2e:	6850      	ldr	r0, [r2, #4]
 8000a30:	6068      	str	r0, [r5, #4]
    ntp->state = CH_STATE_CURRENT;
 8000a32:	2601      	movs	r6, #1
  tp->queue.next             = cp;
 8000a34:	602a      	str	r2, [r5, #0]
  tp->queue.prev->queue.next = tp;
 8000a36:	6005      	str	r5, [r0, #0]
  cp->queue.prev             = tp;
 8000a38:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8000a3a:	f884 6020 	strb.w	r6, [r4, #32]
    chSysSwitch(ntp, otp);
 8000a3e:	4629      	mov	r1, r5
 8000a40:	4620      	mov	r0, r4
    currp = ntp;
 8000a42:	619c      	str	r4, [r3, #24]
}
 8000a44:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 8000a46:	f7ff bc3b 	b.w	80002c0 <_port_switch>
 8000a4a:	bf00      	nop
 8000a4c:	2000122c 	.word	0x2000122c

08000a50 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8000a50:	b508      	push	{r3, lr}
 8000a52:	2320      	movs	r3, #32
 8000a54:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 8000a58:	6883      	ldr	r3, [r0, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	6083      	str	r3, [r0, #8]
 8000a60:	dd03      	ble.n	8000a6a <chSemSignal+0x1a>
 8000a62:	2300      	movs	r3, #0
 8000a64:	f383 8811 	msr	BASEPRI, r3
 8000a68:	bd08      	pop	{r3, pc}
 8000a6a:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 8000a6c:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 8000a6e:	6802      	ldr	r2, [r0, #0]
 8000a70:	601a      	str	r2, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 8000a72:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000a74:	6053      	str	r3, [r2, #4]
 8000a76:	f7ff ffbb 	bl	80009f0 <chSchWakeupS>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f383 8811 	msr	BASEPRI, r3
 8000a80:	bd08      	pop	{r3, pc}
 8000a82:	bf00      	nop
	...

08000a90 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <chSchGoSleepS+0x24>)
 8000a92:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000a94:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000a96:	b410      	push	{r4}
  otp->state = newstate;
 8000a98:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8000a9c:	6810      	ldr	r0, [r2, #0]
 8000a9e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000aa0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000aa2:	6043      	str	r3, [r0, #4]
 8000aa4:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8000aa8:	4610      	mov	r0, r2
}
 8000aaa:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000aac:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000aae:	f7ff bc07 	b.w	80002c0 <_port_switch>
 8000ab2:	bf00      	nop
 8000ab4:	2000122c 	.word	0x2000122c
	...

08000ac0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp)) {
 8000ac8:	4c0c      	ldr	r4, [pc, #48]	; (8000afc <chMsgWait+0x3c>)
 8000aca:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8000acc:	4613      	mov	r3, r2
 8000ace:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d009      	beq.n	8000aea <chMsgWait+0x2a>
  tqp->next             = tp->queue.next;
 8000ad6:	6801      	ldr	r1, [r0, #0]
 8000ad8:	62d1      	str	r1, [r2, #44]	; 0x2c
    chSchGoSleepS(CH_STATE_WTMSG);
  }
  tp = queue_fifo_remove(&currp->msgqueue);
  tp->state = CH_STATE_SNDMSG;
 8000ada:	220d      	movs	r2, #13
  tqp->next->queue.prev = (thread_t *)tqp;
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f880 2020 	strb.w	r2, [r0, #32]
 8000ae4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8000ae8:	bd10      	pop	{r4, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 8000aea:	200e      	movs	r0, #14
 8000aec:	f7ff ffd0 	bl	8000a90 <chSchGoSleepS>
 8000af0:	69a2      	ldr	r2, [r4, #24]
 8000af2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8000af4:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8000af8:	e7ed      	b.n	8000ad6 <chMsgWait+0x16>
 8000afa:	bf00      	nop
 8000afc:	2000122c 	.word	0x2000122c

08000b00 <chSemWait>:
 8000b00:	2320      	movs	r3, #32
 8000b02:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8000b06:	6883      	ldr	r3, [r0, #8]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	6083      	str	r3, [r0, #8]
 8000b0e:	db04      	blt.n	8000b1a <chSemWait+0x1a>
  return MSG_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	2300      	movs	r3, #0
 8000b14:	f383 8811 	msr	BASEPRI, r3
}
 8000b18:	4770      	bx	lr
msg_t chSemWait(semaphore_t *sp) {
 8000b1a:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8000b1c:	4c08      	ldr	r4, [pc, #32]	; (8000b40 <chSemWait+0x40>)
 8000b1e:	69a2      	ldr	r2, [r4, #24]
 8000b20:	6250      	str	r0, [r2, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8000b22:	6841      	ldr	r1, [r0, #4]
 8000b24:	6051      	str	r1, [r2, #4]
 8000b26:	4603      	mov	r3, r0
  tp->queue.next             = (thread_t *)tqp;
 8000b28:	6010      	str	r0, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000b2a:	600a      	str	r2, [r1, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 8000b2c:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	f7ff ffae 	bl	8000a90 <chSchGoSleepS>
    return currp->u.rdymsg;
 8000b34:	69a3      	ldr	r3, [r4, #24]
 8000b36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f383 8811 	msr	BASEPRI, r3
}
 8000b3e:	bd10      	pop	{r4, pc}
 8000b40:	2000122c 	.word	0x2000122c
	...

08000b50 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000b50:	2200      	movs	r2, #0
 8000b52:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <chSchReadyI+0x28>)
thread_t *chSchReadyI(thread_t *tp) {
 8000b56:	b410      	push	{r4}
 8000b58:	4604      	mov	r4, r0
  tp->state = CH_STATE_READY;
 8000b5a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000b5e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	428a      	cmp	r2, r1
 8000b64:	d2fb      	bcs.n	8000b5e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000b6a:	6023      	str	r3, [r4, #0]
}
 8000b6c:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
 8000b6e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000b70:	605c      	str	r4, [r3, #4]
}
 8000b72:	bc10      	pop	{r4}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000122c 	.word	0x2000122c
 8000b7c:	00000000 	.word	0x00000000

08000b80 <chMsgSend>:
  thread_t *ctp = currp;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <chMsgSend+0x3c>)
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8000b82:	b510      	push	{r4, lr}
 8000b84:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8000b86:	699c      	ldr	r4, [r3, #24]
 8000b88:	f382 8811 	msr	BASEPRI, r2
  ctp->u.sentmsg = msg;
 8000b8c:	6261      	str	r1, [r4, #36]	; 0x24
  tp->queue.prev             = tqp->prev;
 8000b8e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b90:	6062      	str	r2, [r4, #4]
  msg_insert(ctp, &tp->msgqueue);
 8000b92:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8000b96:	6021      	str	r1, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000b98:	6014      	str	r4, [r2, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8000b9a:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->prev                  = tp;
 8000b9e:	6304      	str	r4, [r0, #48]	; 0x30
 8000ba0:	2a0e      	cmp	r2, #14
 8000ba2:	d007      	beq.n	8000bb4 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f7ff ff73 	bl	8000a90 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8000baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bac:	2300      	movs	r3, #0
 8000bae:	f383 8811 	msr	BASEPRI, r3
}
 8000bb2:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8000bb4:	f7ff ffcc 	bl	8000b50 <chSchReadyI>
 8000bb8:	e7f4      	b.n	8000ba4 <chMsgSend+0x24>
 8000bba:	bf00      	nop
 8000bbc:	2000122c 	.word	0x2000122c

08000bc0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bc2:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000bc6:	4319      	orrs	r1, r3
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bc8:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000bca:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000bcc:	d009      	beq.n	8000be2 <chEvtSignalI+0x22>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000bce:	2a0b      	cmp	r2, #11
 8000bd0:	d000      	beq.n	8000bd4 <chEvtSignalI+0x14>
 8000bd2:	4770      	bx	lr
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000bd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000bd6:	438b      	bics	r3, r1
 8000bd8:	d1fb      	bne.n	8000bd2 <chEvtSignalI+0x12>
    tp->u.rdymsg = MSG_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000bde:	f7ff bfb7 	b.w	8000b50 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000be2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000be4:	4219      	tst	r1, r3
 8000be6:	d1f8      	bne.n	8000bda <chEvtSignalI+0x1a>
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	0000      	movs	r0, r0
	...

08000bf0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000bf0:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8000bf2:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d00f      	beq.n	8000c18 <chEvtBroadcastFlagsI+0x28>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	460d      	mov	r5, r1
    elp->flags |= flags;
 8000bfc:	68e3      	ldr	r3, [r4, #12]
 8000bfe:	432b      	orrs	r3, r5
 8000c00:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000c02:	b115      	cbz	r5, 8000c0a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8000c04:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000c06:	4213      	tst	r3, r2
 8000c08:	d003      	beq.n	8000c12 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 8000c0a:	68a1      	ldr	r1, [r4, #8]
 8000c0c:	6860      	ldr	r0, [r4, #4]
 8000c0e:	f7ff ffd7 	bl	8000bc0 <chEvtSignalI>
    elp = elp->next;
 8000c12:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d1f1      	bne.n	8000bfc <chEvtBroadcastFlagsI+0xc>
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0000      	movs	r0, r0
	...

08000c20 <chMtxUnlockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <chMtxUnlockS+0x4c>)
void chMtxUnlockS(mutex_t *mp) {
 8000c22:	b430      	push	{r4, r5}
 8000c24:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000c26:	6805      	ldr	r5, [r0, #0]
  thread_t *ctp = currp;
 8000c28:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000c2a:	68e3      	ldr	r3, [r4, #12]
 8000c2c:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	d017      	beq.n	8000c62 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000c32:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8000c34:	b14b      	cbz	r3, 8000c4a <chMtxUnlockS+0x2a>
 8000c36:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d003      	beq.n	8000c44 <chMtxUnlockS+0x24>
 8000c3c:	6892      	ldr	r2, [r2, #8]
 8000c3e:	4291      	cmp	r1, r2
 8000c40:	bf38      	it	cc
 8000c42:	4611      	movcc	r1, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000c44:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f5      	bne.n	8000c36 <chMtxUnlockS+0x16>
  tqp->next             = tp->queue.next;
 8000c4a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8000c4c:	6baa      	ldr	r2, [r5, #56]	; 0x38
      ctp->prio = newprio;
 8000c4e:	6081      	str	r1, [r0, #8]
 8000c50:	6023      	str	r3, [r4, #0]
      tp->mtxlist = mp;
      (void) chSchReadyI(tp);
 8000c52:	4628      	mov	r0, r5
  tqp->next->queue.prev = (thread_t *)tqp;
 8000c54:	605c      	str	r4, [r3, #4]
      mp->owner = tp;
 8000c56:	60a5      	str	r5, [r4, #8]
      mp->next = tp->mtxlist;
 8000c58:	60e2      	str	r2, [r4, #12]
      tp->mtxlist = mp;
 8000c5a:	63ac      	str	r4, [r5, #56]	; 0x38
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8000c5c:	bc30      	pop	{r4, r5}
      (void) chSchReadyI(tp);
 8000c5e:	f7ff bf77 	b.w	8000b50 <chSchReadyI>
      mp->owner = NULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60ab      	str	r3, [r5, #8]
}
 8000c66:	bc30      	pop	{r4, r5}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000122c 	.word	0x2000122c

08000c70 <chMtxUnlock>:
  thread_t *ctp = currp;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <chMtxUnlock+0x60>)
void chMtxUnlock(mutex_t *mp) {
 8000c72:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000c74:	699d      	ldr	r5, [r3, #24]
 8000c76:	2320      	movs	r3, #32
 8000c78:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000c7c:	6804      	ldr	r4, [r0, #0]
    ctp->mtxlist = mp->next;
 8000c7e:	68c3      	ldr	r3, [r0, #12]
 8000c80:	63ab      	str	r3, [r5, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8000c82:	4284      	cmp	r4, r0
 8000c84:	d01d      	beq.n	8000cc2 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8000c86:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8000c88:	b14b      	cbz	r3, 8000c9e <chMtxUnlock+0x2e>
 8000c8a:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <chMtxUnlock+0x28>
 8000c90:	6892      	ldr	r2, [r2, #8]
 8000c92:	4291      	cmp	r1, r2
 8000c94:	bf38      	it	cc
 8000c96:	4611      	movcc	r1, r2
        lmp = lmp->next;
 8000c98:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f5      	bne.n	8000c8a <chMtxUnlock+0x1a>
 8000c9e:	4603      	mov	r3, r0
  tqp->next             = tp->queue.next;
 8000ca0:	6822      	ldr	r2, [r4, #0]
      mp->next = tp->mtxlist;
 8000ca2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
      ctp->prio = newprio;
 8000ca4:	60a9      	str	r1, [r5, #8]
      (void) chSchReadyI(tp);
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000caa:	6053      	str	r3, [r2, #4]
      mp->owner = tp;
 8000cac:	609c      	str	r4, [r3, #8]
      mp->next = tp->mtxlist;
 8000cae:	60de      	str	r6, [r3, #12]
      tp->mtxlist = mp;
 8000cb0:	63a3      	str	r3, [r4, #56]	; 0x38
      (void) chSchReadyI(tp);
 8000cb2:	f7ff ff4d 	bl	8000b50 <chSchReadyI>
      chSchRescheduleS();
 8000cb6:	f7ff fe73 	bl	80009a0 <chSchRescheduleS>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
      mp->owner = NULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60a3      	str	r3, [r4, #8]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000122c 	.word	0x2000122c
	...

08000ce0 <chMtxLockS>:
  thread_t *ctp = currp;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <chMtxLockS+0xc4>)
  if (mp->owner != NULL) {
 8000ce2:	6882      	ldr	r2, [r0, #8]
void chMtxLockS(mutex_t *mp) {
 8000ce4:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000ce6:	699c      	ldr	r4, [r3, #24]
  if (mp->owner != NULL) {
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d056      	beq.n	8000d9a <chMtxLockS+0xba>
      while (tp->prio < ctp->prio) {
 8000cec:	68a1      	ldr	r1, [r4, #8]
 8000cee:	6893      	ldr	r3, [r2, #8]
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	4605      	mov	r5, r0
 8000cf4:	d907      	bls.n	8000d06 <chMtxLockS+0x26>
        switch (tp->state) {
 8000cf6:	f892 3020 	ldrb.w	r3, [r2, #32]
        tp->prio = ctp->prio;
 8000cfa:	6091      	str	r1, [r2, #8]
        switch (tp->state) {
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d033      	beq.n	8000d68 <chMtxLockS+0x88>
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d01d      	beq.n	8000d40 <chMtxLockS+0x60>
 8000d04:	b19b      	cbz	r3, 8000d2e <chMtxLockS+0x4e>
      queue_prio_insert(ctp, &mp->queue);
 8000d06:	462b      	mov	r3, r5
 8000d08:	e003      	b.n	8000d12 <chMtxLockS+0x32>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d0a:	6899      	ldr	r1, [r3, #8]
 8000d0c:	68a2      	ldr	r2, [r4, #8]
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d302      	bcc.n	8000d18 <chMtxLockS+0x38>
    cp = cp->queue.next;
 8000d12:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d14:	429d      	cmp	r5, r3
 8000d16:	d1f8      	bne.n	8000d0a <chMtxLockS+0x2a>
  tp->queue.prev             = cp->queue.prev;
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 8000d1c:	6023      	str	r3, [r4, #0]
  tp->queue.prev->queue.next = tp;
 8000d1e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000d20:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 8000d22:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8000d24:	2006      	movs	r0, #6
}
 8000d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8000d2a:	f7ff beb1 	b.w	8000a90 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 8000d2e:	e892 000a 	ldmia.w	r2, {r1, r3}
 8000d32:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000d34:	6811      	ldr	r1, [r2, #0]
          (void) chSchReadyI(queue_dequeue(tp));
 8000d36:	4610      	mov	r0, r2
 8000d38:	604b      	str	r3, [r1, #4]
 8000d3a:	f7ff ff09 	bl	8000b50 <chSchReadyI>
 8000d3e:	e7e2      	b.n	8000d06 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8000d40:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000d44:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000d46:	6810      	ldr	r0, [r2, #0]
 8000d48:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000d4a:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000d4c:	4633      	mov	r3, r6
 8000d4e:	e002      	b.n	8000d56 <chMtxLockS+0x76>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d50:	6898      	ldr	r0, [r3, #8]
 8000d52:	4281      	cmp	r1, r0
 8000d54:	d802      	bhi.n	8000d5c <chMtxLockS+0x7c>
    cp = cp->queue.next;
 8000d56:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d58:	429e      	cmp	r6, r3
 8000d5a:	d1f9      	bne.n	8000d50 <chMtxLockS+0x70>
  tp->queue.prev             = cp->queue.prev;
 8000d5c:	6859      	ldr	r1, [r3, #4]
 8000d5e:	6051      	str	r1, [r2, #4]
  tp->queue.next             = cp;
 8000d60:	6013      	str	r3, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000d62:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	e7ce      	b.n	8000d06 <chMtxLockS+0x26>
  tp->queue.prev->queue.next = tp->queue.next;
 8000d68:	e892 0009 	ldmia.w	r2, {r0, r3}
 8000d6c:	6018      	str	r0, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	6043      	str	r3, [r0, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000d72:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8000d74:	4633      	mov	r3, r6
 8000d76:	e002      	b.n	8000d7e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d78:	6898      	ldr	r0, [r3, #8]
 8000d7a:	4281      	cmp	r1, r0
 8000d7c:	d802      	bhi.n	8000d84 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 8000d7e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000d80:	429e      	cmp	r6, r3
 8000d82:	d1f9      	bne.n	8000d78 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8000d84:	6859      	ldr	r1, [r3, #4]
 8000d86:	6051      	str	r1, [r2, #4]
  tp->queue.next             = cp;
 8000d88:	6013      	str	r3, [r2, #0]
  tp->queue.prev->queue.next = tp;
 8000d8a:	600a      	str	r2, [r1, #0]
  cp->queue.prev             = tp;
 8000d8c:	605a      	str	r2, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8000d8e:	68b2      	ldr	r2, [r6, #8]
      while (tp->prio < ctp->prio) {
 8000d90:	68a1      	ldr	r1, [r4, #8]
 8000d92:	6893      	ldr	r3, [r2, #8]
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d3ae      	bcc.n	8000cf6 <chMtxLockS+0x16>
 8000d98:	e7b5      	b.n	8000d06 <chMtxLockS+0x26>
    mp->next = ctp->mtxlist;
 8000d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d9c:	60c3      	str	r3, [r0, #12]
    mp->owner = ctp;
 8000d9e:	6084      	str	r4, [r0, #8]
    ctp->mtxlist = mp;
 8000da0:	63a0      	str	r0, [r4, #56]	; 0x38
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	2000122c 	.word	0x2000122c
	...

08000db0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 8000db0:	b508      	push	{r3, lr}
 8000db2:	2320      	movs	r3, #32
 8000db4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 8000db8:	f7ff ff92 	bl	8000ce0 <chMtxLockS>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f383 8811 	msr	BASEPRI, r3
 8000dc2:	bd08      	pop	{r3, pc}
	...

08000dd0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000dd2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  heapp = H_HEAP(hp);
 8000dd6:	f850 5c08 	ldr.w	r5, [r0, #-8]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000dda:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8000ddc:	08db      	lsrs	r3, r3, #3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8000dde:	f105 070c 	add.w	r7, r5, #12
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000de2:	f840 3c04 	str.w	r3, [r0, #-4]
void chHeapFree(void *p) {
 8000de6:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8000de8:	f1a0 0408 	sub.w	r4, r0, #8
  qp = &heapp->header;
 8000dec:	3504      	adds	r5, #4
  H_LOCK(heapp);
 8000dee:	4638      	mov	r0, r7
 8000df0:	f7ff ffde 	bl	8000db0 <chMtxLock>
  qp = &heapp->header;
 8000df4:	462b      	mov	r3, r5

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8000df6:	42ab      	cmp	r3, r5
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8000df8:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8000dfa:	d001      	beq.n	8000e00 <chHeapFree+0x30>
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d202      	bcs.n	8000e06 <chHeapFree+0x36>
 8000e00:	b11a      	cbz	r2, 8000e0a <chHeapFree+0x3a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8000e02:	4294      	cmp	r4, r2
 8000e04:	d301      	bcc.n	8000e0a <chHeapFree+0x3a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8000e06:	4613      	mov	r3, r2
 8000e08:	e7f5      	b.n	8000df6 <chHeapFree+0x26>
      H_NEXT(hp) = H_NEXT(qp);
 8000e0a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8000e0e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8000e10:	e916 0005 	ldmdb	r6, {r0, r2}
 8000e14:	3201      	adds	r2, #1
 8000e16:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8000e1a:	4281      	cmp	r1, r0
 8000e1c:	d00a      	beq.n	8000e34 <chHeapFree+0x64>
      if ((H_LIMIT(qp) == hp)) {
 8000e1e:	6859      	ldr	r1, [r3, #4]
 8000e20:	1c4a      	adds	r2, r1, #1
 8000e22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000e26:	4294      	cmp	r4, r2
 8000e28:	d012      	beq.n	8000e50 <chHeapFree+0x80>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8000e2a:	4638      	mov	r0, r7

  return;
}
 8000e2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8000e30:	f7ff bf1e 	b.w	8000c70 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8000e34:	6849      	ldr	r1, [r1, #4]
 8000e36:	4411      	add	r1, r2
 8000e38:	f846 1c04 	str.w	r1, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8000e3c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8000e40:	f846 2c08 	str.w	r2, [r6, #-8]
      if ((H_LIMIT(qp) == hp)) {
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	1c4a      	adds	r2, r1, #1
 8000e48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000e4c:	4294      	cmp	r4, r2
 8000e4e:	d1ec      	bne.n	8000e2a <chHeapFree+0x5a>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8000e50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8000e54:	3201      	adds	r2, #1
 8000e56:	4411      	add	r1, r2
 8000e58:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8000e5a:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8000e5e:	601a      	str	r2, [r3, #0]
  H_UNLOCK(heapp);
 8000e60:	4638      	mov	r0, r7
}
 8000e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8000e66:	f7ff bf03 	b.w	8000c70 <chMtxUnlock>
 8000e6a:	bf00      	nop
 8000e6c:	0000      	movs	r0, r0
	...

08000e70 <chThdRelease>:
 8000e70:	2220      	movs	r2, #32
 8000e72:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8000e76:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8000e80:	6a03      	ldr	r3, [r0, #32]
 8000e82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d003      	beq.n	8000e92 <chThdRelease+0x22>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f383 8811 	msr	BASEPRI, r3
 8000e90:	4770      	bx	lr
    REG_REMOVE(tp);
 8000e92:	6943      	ldr	r3, [r0, #20]
 8000e94:	6901      	ldr	r1, [r0, #16]
void chThdRelease(thread_t *tp) {
 8000e96:	b410      	push	{r4}
    REG_REMOVE(tp);
 8000e98:	6119      	str	r1, [r3, #16]
 8000e9a:	6904      	ldr	r4, [r0, #16]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6163      	str	r3, [r4, #20]
 8000ea0:	f381 8811 	msr	BASEPRI, r1
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8000ea4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d00c      	beq.n	8000eca <chThdRelease+0x5a>
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d108      	bne.n	8000ec6 <chThdRelease+0x56>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8000eb4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000eb6:	69c0      	ldr	r0, [r0, #28]
 8000eb8:	f382 8811 	msr	BASEPRI, r2
  chDbgCheck((mp != NULL) && (objp != NULL));

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
              "unaligned object");

  php->next = mp->next;
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	6002      	str	r2, [r0, #0]
  mp->next = php;
 8000ec0:	6018      	str	r0, [r3, #0]
 8000ec2:	f381 8811 	msr	BASEPRI, r1
}
 8000ec6:	bc10      	pop	{r4}
 8000ec8:	4770      	bx	lr
      chHeapFree(chThdGetWorkingAreaX(tp));
 8000eca:	69c0      	ldr	r0, [r0, #28]
}
 8000ecc:	bc10      	pop	{r4}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8000ece:	f7ff bf7f 	b.w	8000dd0 <chHeapFree>
 8000ed2:	bf00      	nop
	...

08000ee0 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	2320      	movs	r3, #32
 8000ee6:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8000eea:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	d007      	beq.n	8000f02 <chThdWait+0x22>
    list_insert(currp, &tp->waiting);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <chThdWait+0x34>)
  tp->queue.next = tlp->next;
 8000ef4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000ef6:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8000ef8:	2009      	movs	r0, #9
 8000efa:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8000efc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000efe:	f7ff fdc7 	bl	8000a90 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8000f02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000f04:	2300      	movs	r3, #0
 8000f06:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f7ff ffb0 	bl	8000e70 <chThdRelease>
}
 8000f10:	4628      	mov	r0, r5
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	2000122c 	.word	0x2000122c
	...

08000f20 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8000f20:	6883      	ldr	r3, [r0, #8]
 8000f22:	3301      	adds	r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	6083      	str	r3, [r0, #8]
 8000f28:	dd00      	ble.n	8000f2c <chSemSignalI+0xc>
 8000f2a:	4770      	bx	lr
  thread_t *tp = tqp->next;
 8000f2c:	6803      	ldr	r3, [r0, #0]
  tqp->next             = tp->queue.next;
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	6002      	str	r2, [r0, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
 8000f32:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8000f34:	6050      	str	r0, [r2, #4]
    (void) chSchReadyI(tp);
 8000f36:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8000f38:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000f3a:	f7ff be09 	b.w	8000b50 <chSchReadyI>
 8000f3e:	bf00      	nop

08000f40 <chSemReset>:
void chSemReset(semaphore_t *sp, cnt_t n) {
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	2320      	movs	r3, #32
 8000f44:	f383 8811 	msr	BASEPRI, r3
  cnt = sp->cnt;
 8000f48:	6884      	ldr	r4, [r0, #8]
  sp->cnt = n;
 8000f4a:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 8000f4c:	3401      	adds	r4, #1
 8000f4e:	2c00      	cmp	r4, #0
 8000f50:	dc0c      	bgt.n	8000f6c <chSemReset+0x2c>
 8000f52:	4605      	mov	r5, r0
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8000f54:	f06f 0601 	mvn.w	r6, #1
  thread_t *tp = tqp->prev;
 8000f58:	6868      	ldr	r0, [r5, #4]
  tqp->prev             = tp->queue.prev;
 8000f5a:	6843      	ldr	r3, [r0, #4]
 8000f5c:	606b      	str	r3, [r5, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8000f5e:	601d      	str	r5, [r3, #0]
 8000f60:	f7ff fdf6 	bl	8000b50 <chSchReadyI>
  while (++cnt <= (cnt_t)0) {
 8000f64:	3401      	adds	r4, #1
 8000f66:	2c01      	cmp	r4, #1
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
 8000f68:	6246      	str	r6, [r0, #36]	; 0x24
  while (++cnt <= (cnt_t)0) {
 8000f6a:	d1f5      	bne.n	8000f58 <chSemReset+0x18>
  chSchRescheduleS();
 8000f6c:	f7ff fd18 	bl	80009a0 <chSchRescheduleS>
 8000f70:	2300      	movs	r3, #0
 8000f72:	f383 8811 	msr	BASEPRI, r3
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f80 <chThdExit>:
void chThdExit(msg_t msg) {
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	2220      	movs	r2, #32
 8000f84:	4603      	mov	r3, r0
 8000f86:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <chThdExit+0x4c>)
 8000f8c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8000f8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8000f90:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8000f92:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000f96:	4285      	cmp	r5, r0
 8000f98:	d006      	beq.n	8000fa8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8000f9a:	6803      	ldr	r3, [r0, #0]
 8000f9c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8000f9e:	f7ff fdd7 	bl	8000b50 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8000fa2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8000fa4:	42a8      	cmp	r0, r5
 8000fa6:	d1f8      	bne.n	8000f9a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8000fa8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000fac:	b943      	cbnz	r3, 8000fc0 <chThdExit+0x40>
 8000fae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000fb2:	079b      	lsls	r3, r3, #30
 8000fb4:	d104      	bne.n	8000fc0 <chThdExit+0x40>
    REG_REMOVE(tp);
 8000fb6:	6963      	ldr	r3, [r4, #20]
 8000fb8:	6922      	ldr	r2, [r4, #16]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	6922      	ldr	r2, [r4, #16]
 8000fbe:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8000fc0:	200f      	movs	r0, #15
}
 8000fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8000fc6:	f7ff bd63 	b.w	8000a90 <chSchGoSleepS>
 8000fca:	bf00      	nop
 8000fcc:	2000122c 	.word	0x2000122c

08000fd0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <chVTDoResetI+0x6c>)
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	4282      	cmp	r2, r0
void chVTDoResetI(virtual_timer_t *vtp) {
 8000fd6:	b410      	push	{r4}
  if (ch.vtlist.next != vtp) {
 8000fd8:	d00f      	beq.n	8000ffa <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000fda:	6841      	ldr	r1, [r0, #4]
 8000fdc:	6802      	ldr	r2, [r0, #0]
 8000fde:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8000fe0:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000fe2:	331c      	adds	r3, #28
    vtp->func = NULL;
 8000fe4:	2400      	movs	r4, #0
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000fe6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 8000fe8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8000fea:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000fec:	d003      	beq.n	8000ff6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 8000fee:	6881      	ldr	r1, [r0, #8]
 8000ff0:	6893      	ldr	r3, [r2, #8]
 8000ff2:	440b      	add	r3, r1
 8000ff4:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000ff6:	bc10      	pop	{r4}
 8000ff8:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	f840 1f1c 	str.w	r1, [r0, #28]!
  vtp->func = NULL;
 8001002:	2400      	movs	r4, #0
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001004:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001006:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8001008:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800100a:	d013      	beq.n	8001034 <chVTDoResetI+0x64>
  ch.vtlist.next->delta += vtp->delta;
 800100c:	6894      	ldr	r4, [r2, #8]
 800100e:	688a      	ldr	r2, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001012:	4414      	add	r4, r2
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	608c      	str	r4, [r1, #8]
 800101a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800101c:	1ad2      	subs	r2, r2, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 800101e:	4294      	cmp	r4, r2
 8001020:	d9e9      	bls.n	8000ff6 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8001022:	1aa1      	subs	r1, r4, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001024:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001026:	bf98      	it	ls
 8001028:	1c94      	addls	r4, r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800102a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800102e:	4423      	add	r3, r4
 8001030:	6353      	str	r3, [r2, #52]	; 0x34
 8001032:	e7e0      	b.n	8000ff6 <chVTDoResetI+0x26>
  STM32_ST_TIM->DIER = 0;
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	60dc      	str	r4, [r3, #12]
 800103a:	e7dc      	b.n	8000ff6 <chVTDoResetI+0x26>
 800103c:	2000122c 	.word	0x2000122c

08001040 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001040:	b4f0      	push	{r4, r5, r6, r7}
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001042:	4d1c      	ldr	r5, [pc, #112]	; (80010b4 <chVTDoSetI+0x74>)
 8001044:	462e      	mov	r6, r5
 8001046:	2902      	cmp	r1, #2
 8001048:	f856 4f1c 	ldr.w	r4, [r6, #28]!
  vtp->par = par;
 800104c:	6103      	str	r3, [r0, #16]
  return (systime_t)STM32_ST_TIM->CNT;
 800104e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001052:	bf38      	it	cc
 8001054:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001056:	42b4      	cmp	r4, r6
  vtp->func = vtfunc;
 8001058:	60c2      	str	r2, [r0, #12]
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800105c:	d01c      	beq.n	8001098 <chVTDoSetI+0x58>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800105e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001060:	1a9b      	subs	r3, r3, r2
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001062:	1859      	adds	r1, r3, r1
      delta -= p->delta;
 8001064:	68a3      	ldr	r3, [r4, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8001066:	d312      	bcc.n	800108e <chVTDoSetI+0x4e>
    p = p->next;
 8001068:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 800106a:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	428b      	cmp	r3, r1
 8001070:	d3fa      	bcc.n	8001068 <chVTDoSetI+0x28>
  vtp->prev = vtp->next->prev;
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	6043      	str	r3, [r0, #4]
  vtp->next = p;
 8001076:	6004      	str	r4, [r0, #0]
  vtp->prev->next = vtp;
 8001078:	6018      	str	r0, [r3, #0]
  p->prev = vtp;
 800107a:	6060      	str	r0, [r4, #4]
  vtp->delta = delta;
 800107c:	6081      	str	r1, [r0, #8]
  p->delta -= delta;
 800107e:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	60a1      	str	r1, [r4, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8001088:	626a      	str	r2, [r5, #36]	; 0x24
}
 800108a:	bcf0      	pop	{r4, r5, r6, r7}
 800108c:	4770      	bx	lr
    else if (delta < p->delta) {
 800108e:	4299      	cmp	r1, r3
 8001090:	d2ed      	bcs.n	800106e <chVTDoSetI+0x2e>
  return systime + (systime_t)interval;
 8001092:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001094:	637a      	str	r2, [r7, #52]	; 0x34
 8001096:	e7ea      	b.n	800106e <chVTDoSetI+0x2e>
      ch.vtlist.lasttime = now;
 8001098:	62ab      	str	r3, [r5, #40]	; 0x28
 800109a:	185e      	adds	r6, r3, r1
  STM32_ST_TIM->SR     = 0;
 800109c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800109e:	2302      	movs	r3, #2
      ch.vtlist.next = vtp;
 80010a0:	61e8      	str	r0, [r5, #28]
      ch.vtlist.prev = vtp;
 80010a2:	6228      	str	r0, [r5, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80010a4:	6004      	str	r4, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80010a6:	6044      	str	r4, [r0, #4]
      vtp->delta = delay;
 80010a8:	6081      	str	r1, [r0, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80010aa:	637e      	str	r6, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80010ac:	613a      	str	r2, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e7eb      	b.n	800108a <chVTDoSetI+0x4a>
 80010b2:	bf00      	nop
 80010b4:	2000122c 	.word	0x2000122c
	...

080010c0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80010c0:	b530      	push	{r4, r5, lr}
  if (TIME_INFINITE != timeout) {
 80010c2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80010c4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80010c6:	d012      	beq.n	80010ee <chSchGoSleepTimeoutS+0x2e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80010c8:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <chSchGoSleepTimeoutS+0x3c>)
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <chSchGoSleepTimeoutS+0x40>)
 80010cc:	69a3      	ldr	r3, [r4, #24]
 80010ce:	4605      	mov	r5, r0
 80010d0:	a801      	add	r0, sp, #4
 80010d2:	f7ff ffb5 	bl	8001040 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80010d6:	4628      	mov	r0, r5
 80010d8:	f7ff fcda 	bl	8000a90 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80010dc:	9b04      	ldr	r3, [sp, #16]
 80010de:	b113      	cbz	r3, 80010e6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80010e0:	a801      	add	r0, sp, #4
 80010e2:	f7ff ff75 	bl	8000fd0 <chVTDoResetI>
  return currp->u.rdymsg;
 80010e6:	69a3      	ldr	r3, [r4, #24]
}
 80010e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ea:	b007      	add	sp, #28
 80010ec:	bd30      	pop	{r4, r5, pc}
 80010ee:	4c03      	ldr	r4, [pc, #12]	; (80010fc <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 80010f0:	f7ff fcce 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 80010f4:	69a3      	ldr	r3, [r4, #24]
}
 80010f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010f8:	b007      	add	sp, #28
 80010fa:	bd30      	pop	{r4, r5, pc}
 80010fc:	2000122c 	.word	0x2000122c
 8001100:	08000731 	.word	0x08000731
	...

08001110 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001110:	b161      	cbz	r1, 800112c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8001114:	b410      	push	{r4}
 8001116:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8001118:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800111a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800111c:	2004      	movs	r0, #4
 800111e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8001122:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8001124:	6053      	str	r3, [r2, #4]
}
 8001126:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001128:	f7ff bfca 	b.w	80010c0 <chSchGoSleepTimeoutS>
}
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000122c 	.word	0x2000122c
	...

08001140 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001144:	b083      	sub	sp, #12
 8001146:	4617      	mov	r7, r2
 8001148:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800114a:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 800114e:	f04f 0b20 	mov.w	fp, #32
 8001152:	f38b 8811 	msr	BASEPRI, fp

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8001156:	2a00      	cmp	r2, #0
 8001158:	d051      	beq.n	80011fe <oqWriteTimeout+0xbe>
 800115a:	4604      	mov	r4, r0
 800115c:	460e      	mov	r6, r1
 800115e:	f04f 0800 	mov.w	r8, #0
 8001162:	e017      	b.n	8001194 <oqWriteTimeout+0x54>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001164:	462a      	mov	r2, r5
 8001166:	4631      	mov	r1, r6
 8001168:	f7ff f8be 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800116c:	68e3      	ldr	r3, [r4, #12]
 800116e:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8001170:	68a3      	ldr	r3, [r4, #8]
 8001172:	1b5b      	subs	r3, r3, r5
 8001174:	60a3      	str	r3, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8001176:	b36d      	cbz	r5, 80011d4 <oqWriteTimeout+0x94>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001178:	f1ba 0f00 	cmp.w	sl, #0
 800117c:	d001      	beq.n	8001182 <oqWriteTimeout+0x42>
        nfy(oqp);
 800117e:	4620      	mov	r0, r4
 8001180:	47d0      	blx	sl
 8001182:	2300      	movs	r3, #0
 8001184:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8001188:	44a8      	add	r8, r5
      bp += done;
 800118a:	442e      	add	r6, r5
 800118c:	f38b 8811 	msr	BASEPRI, fp
  while (wr < n) {
 8001190:	4547      	cmp	r7, r8
 8001192:	d925      	bls.n	80011e0 <oqWriteTimeout+0xa0>
  if (n > oqGetEmptyI(oqp)) {
 8001194:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001196:	6960      	ldr	r0, [r4, #20]
  if (n > oqGetEmptyI(oqp)) {
 8001198:	429f      	cmp	r7, r3
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800119a:	6923      	ldr	r3, [r4, #16]
    n = oqGetEmptyI(oqp);
 800119c:	bf8c      	ite	hi
 800119e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 80011a0:	463d      	movls	r5, r7
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80011a2:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	d822      	bhi.n	80011ee <oqWriteTimeout+0xae>
  else if (n > s1) {
 80011a8:	d2dc      	bcs.n	8001164 <oqWriteTimeout+0x24>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80011aa:	461a      	mov	r2, r3
 80011ac:	4631      	mov	r1, r6
    s2 = n - s1;
 80011ae:	eba5 0903 	sub.w	r9, r5, r3
 80011b2:	9300      	str	r3, [sp, #0]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80011b4:	f7ff f898 	bl	80002e8 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	68e0      	ldr	r0, [r4, #12]
 80011bc:	18f1      	adds	r1, r6, r3
 80011be:	464a      	mov	r2, r9
 80011c0:	f7ff f892 	bl	80002e8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80011c4:	68e3      	ldr	r3, [r4, #12]
 80011c6:	444b      	add	r3, r9
 80011c8:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80011ca:	68a3      	ldr	r3, [r4, #8]
 80011cc:	1b5b      	subs	r3, r3, r5
 80011ce:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 80011d0:	2d00      	cmp	r5, #0
 80011d2:	d1d1      	bne.n	8001178 <oqWriteTimeout+0x38>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80011d4:	9901      	ldr	r1, [sp, #4]
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff ff9a 	bl	8001110 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 80011dc:	2800      	cmp	r0, #0
 80011de:	d0d7      	beq.n	8001190 <oqWriteTimeout+0x50>
 80011e0:	2300      	movs	r3, #0
 80011e2:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 80011e6:	4640      	mov	r0, r8
 80011e8:	b003      	add	sp, #12
 80011ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80011ee:	462a      	mov	r2, r5
 80011f0:	4631      	mov	r1, r6
 80011f2:	f7ff f879 	bl	80002e8 <memcpy>
    oqp->q_wrptr += n;
 80011f6:	6963      	ldr	r3, [r4, #20]
 80011f8:	442b      	add	r3, r5
 80011fa:	6163      	str	r3, [r4, #20]
 80011fc:	e7b8      	b.n	8001170 <oqWriteTimeout+0x30>
  size_t wr = 0;
 80011fe:	4690      	mov	r8, r2
 8001200:	e7ee      	b.n	80011e0 <oqWriteTimeout+0xa0>
 8001202:	bf00      	nop
	...

08001210 <_writet.lto_priv.97>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001210:	3030      	adds	r0, #48	; 0x30
 8001212:	f7ff bf95 	b.w	8001140 <oqWriteTimeout>
 8001216:	bf00      	nop
	...

08001220 <_write.lto_priv.91>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001220:	3030      	adds	r0, #48	; 0x30
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	f7ff bf8b 	b.w	8001140 <oqWriteTimeout>
 800122a:	bf00      	nop
 800122c:	0000      	movs	r0, r0
	...

08001230 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	4604      	mov	r4, r0
 8001234:	460f      	mov	r7, r1
 8001236:	4616      	mov	r6, r2
 8001238:	2320      	movs	r3, #32
 800123a:	f383 8811 	msr	BASEPRI, r3
 800123e:	e003      	b.n	8001248 <oqPutTimeout+0x18>
 8001240:	f7ff ff66 	bl	8001110 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001244:	2800      	cmp	r0, #0
 8001246:	db19      	blt.n	800127c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 8001248:	68a5      	ldr	r5, [r4, #8]
 800124a:	4631      	mov	r1, r6
 800124c:	4620      	mov	r0, r4
 800124e:	2d00      	cmp	r5, #0
 8001250:	d0f6      	beq.n	8001240 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001252:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001254:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001256:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001258:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800125a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800125c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800125e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	6962      	ldr	r2, [r4, #20]
 8001264:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001266:	bf24      	itt	cs
 8001268:	68e3      	ldrcs	r3, [r4, #12]
 800126a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800126c:	69e3      	ldr	r3, [r4, #28]
 800126e:	b10b      	cbz	r3, 8001274 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001270:	4620      	mov	r0, r4
 8001272:	4798      	blx	r3
 8001274:	2000      	movs	r0, #0
 8001276:	f380 8811 	msr	BASEPRI, r0
}
 800127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127c:	f385 8811 	msr	BASEPRI, r5
 8001280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001282:	bf00      	nop
	...

08001290 <_putt.lto_priv.95>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001290:	3030      	adds	r0, #48	; 0x30
 8001292:	f7ff bfcd 	b.w	8001230 <oqPutTimeout>
 8001296:	bf00      	nop
	...

080012a0 <_put.lto_priv.93>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80012a0:	3030      	adds	r0, #48	; 0x30
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a6:	f7ff bfc3 	b.w	8001230 <oqPutTimeout>
 80012aa:	bf00      	nop
 80012ac:	0000      	movs	r0, r0
	...

080012b0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b4:	b083      	sub	sp, #12
 80012b6:	4617      	mov	r7, r2
 80012b8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 80012ba:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80012be:	f04f 0b20 	mov.w	fp, #32
 80012c2:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d051      	beq.n	800136e <iqReadTimeout+0xbe>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460e      	mov	r6, r1
 80012ce:	f04f 0800 	mov.w	r8, #0
 80012d2:	e017      	b.n	8001304 <iqReadTimeout+0x54>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80012d4:	462a      	mov	r2, r5
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff f806 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80012dc:	68e3      	ldr	r3, [r4, #12]
 80012de:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80012e0:	68a3      	ldr	r3, [r4, #8]
 80012e2:	1b5b      	subs	r3, r3, r5
 80012e4:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 80012e6:	b36d      	cbz	r5, 8001344 <iqReadTimeout+0x94>
      if (nfy != NULL) {
 80012e8:	f1ba 0f00 	cmp.w	sl, #0
 80012ec:	d001      	beq.n	80012f2 <iqReadTimeout+0x42>
        nfy(iqp);
 80012ee:	4620      	mov	r0, r4
 80012f0:	47d0      	blx	sl
 80012f2:	2300      	movs	r3, #0
 80012f4:	f383 8811 	msr	BASEPRI, r3
      rd += done;
 80012f8:	44a8      	add	r8, r5
      bp += done;
 80012fa:	442e      	add	r6, r5
 80012fc:	f38b 8811 	msr	BASEPRI, fp
  while (rd < n) {
 8001300:	4547      	cmp	r7, r8
 8001302:	d925      	bls.n	8001350 <iqReadTimeout+0xa0>
  if (n > iqGetFullI(iqp)) {
 8001304:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001306:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8001308:	429f      	cmp	r7, r3
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800130a:	6923      	ldr	r3, [r4, #16]
    n = iqGetFullI(iqp);
 800130c:	bf8c      	ite	hi
 800130e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8001310:	463d      	movls	r5, r7
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001312:	1a5b      	subs	r3, r3, r1
  if (n < s1) {
 8001314:	42ab      	cmp	r3, r5
 8001316:	d822      	bhi.n	800135e <iqReadTimeout+0xae>
  else if (n > s1) {
 8001318:	d2dc      	bcs.n	80012d4 <iqReadTimeout+0x24>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800131a:	461a      	mov	r2, r3
 800131c:	4630      	mov	r0, r6
    s2 = n - s1;
 800131e:	eba5 0903 	sub.w	r9, r5, r3
 8001322:	9300      	str	r3, [sp, #0]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001324:	f7fe ffe0 	bl	80002e8 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001328:	9b00      	ldr	r3, [sp, #0]
 800132a:	68e1      	ldr	r1, [r4, #12]
 800132c:	18f0      	adds	r0, r6, r3
 800132e:	464a      	mov	r2, r9
 8001330:	f7fe ffda 	bl	80002e8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001334:	68e3      	ldr	r3, [r4, #12]
 8001336:	444b      	add	r3, r9
 8001338:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 800133a:	68a3      	ldr	r3, [r4, #8]
 800133c:	1b5b      	subs	r3, r3, r5
 800133e:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 8001340:	2d00      	cmp	r5, #0
 8001342:	d1d1      	bne.n	80012e8 <iqReadTimeout+0x38>
 8001344:	9901      	ldr	r1, [sp, #4]
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fee2 	bl	8001110 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800134c:	2800      	cmp	r0, #0
 800134e:	d0d7      	beq.n	8001300 <iqReadTimeout+0x50>
 8001350:	2300      	movs	r3, #0
 8001352:	f383 8811 	msr	BASEPRI, r3
}
 8001356:	4640      	mov	r0, r8
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800135e:	462a      	mov	r2, r5
 8001360:	4630      	mov	r0, r6
 8001362:	f7fe ffc1 	bl	80002e8 <memcpy>
    iqp->q_rdptr += n;
 8001366:	69a3      	ldr	r3, [r4, #24]
 8001368:	442b      	add	r3, r5
 800136a:	61a3      	str	r3, [r4, #24]
 800136c:	e7b8      	b.n	80012e0 <iqReadTimeout+0x30>
  size_t rd = 0;
 800136e:	4690      	mov	r8, r2
 8001370:	e7ee      	b.n	8001350 <iqReadTimeout+0xa0>
 8001372:	bf00      	nop
	...

08001380 <_readt.lto_priv.98>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001380:	300c      	adds	r0, #12
 8001382:	f7ff bf95 	b.w	80012b0 <iqReadTimeout>
 8001386:	bf00      	nop
	...

08001390 <_read.lto_priv.92>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001390:	300c      	adds	r0, #12
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	f7ff bf8b 	b.w	80012b0 <iqReadTimeout>
 800139a:	bf00      	nop
 800139c:	0000      	movs	r0, r0
	...

080013a0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	2320      	movs	r3, #32
 80013a4:	4604      	mov	r4, r0
 80013a6:	460e      	mov	r6, r1
 80013a8:	f383 8811 	msr	BASEPRI, r3
 80013ac:	e003      	b.n	80013b6 <iqGetTimeout+0x16>
 80013ae:	f7ff feaf 	bl	8001110 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80013b2:	2800      	cmp	r0, #0
 80013b4:	db1a      	blt.n	80013ec <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80013b6:	68a5      	ldr	r5, [r4, #8]
 80013b8:	4631      	mov	r1, r6
 80013ba:	4620      	mov	r0, r4
 80013bc:	2d00      	cmp	r5, #0
 80013be:	d0f6      	beq.n	80013ae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80013c0:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80013c2:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80013c4:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 80013c6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80013c8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80013ca:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80013cc:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80013ce:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80013d0:	bf28      	it	cs
 80013d2:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80013d4:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80013d6:	bf28      	it	cs
 80013d8:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80013da:	69e3      	ldr	r3, [r4, #28]
 80013dc:	b10b      	cbz	r3, 80013e2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80013de:	4620      	mov	r0, r4
 80013e0:	4798      	blx	r3
 80013e2:	2300      	movs	r3, #0
 80013e4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80013e8:	4628      	mov	r0, r5
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	f385 8811 	msr	BASEPRI, r5
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
	...

08001400 <_gett.lto_priv.96>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001400:	300c      	adds	r0, #12
 8001402:	f7ff bfcd 	b.w	80013a0 <iqGetTimeout>
 8001406:	bf00      	nop
	...

08001410 <_get.lto_priv.94>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001410:	300c      	adds	r0, #12
 8001412:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001416:	f7ff bfc3 	b.w	80013a0 <iqGetTimeout>
 800141a:	bf00      	nop
 800141c:	0000      	movs	r0, r0
	...

08001420 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001420:	b508      	push	{r3, lr}
 8001422:	4601      	mov	r1, r0
 8001424:	2320      	movs	r3, #32
 8001426:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800142a:	2008      	movs	r0, #8
 800142c:	f7ff fe48 	bl	80010c0 <chSchGoSleepTimeoutS>
 8001430:	2300      	movs	r3, #0
 8001432:	f383 8811 	msr	BASEPRI, r3
 8001436:	bd08      	pop	{r3, pc}
	...

08001440 <chSysRestoreStatusX.part.2>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8001440:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001442:	f3ef 8405 	mrs	r4, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001446:	f3c4 0408 	ubfx	r4, r4, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800144a:	b11c      	cbz	r4, 8001454 <chSysRestoreStatusX.part.2+0x14>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800144c:	2300      	movs	r3, #0
 800144e:	f383 8811 	msr	BASEPRI, r3
 8001452:	bd10      	pop	{r4, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001454:	f7ff faa4 	bl	80009a0 <chSchRescheduleS>
 8001458:	f384 8811 	msr	BASEPRI, r4
 800145c:	bd10      	pop	{r4, pc}
 800145e:	bf00      	nop

08001460 <chSysGetStatusAndLockX.part.1>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001460:	f3ef 8305 	mrs	r3, IPSR
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001464:	2320      	movs	r3, #32
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	4770      	bx	lr
 800146c:	0000      	movs	r0, r0
	...

08001470 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001470:	07c2      	lsls	r2, r0, #31
bool chSysIntegrityCheckI(unsigned testmask) {
 8001472:	b410      	push	{r4}
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 8001474:	d512      	bpl.n	800149c <chSysIntegrityCheckI+0x2c>
    tp = ch.rlist.queue.next;
 8001476:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <chSysIntegrityCheckI+0xb8>)
 8001478:	6811      	ldr	r1, [r2, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800147a:	4291      	cmp	r1, r2
 800147c:	d042      	beq.n	8001504 <chSysIntegrityCheckI+0x94>
 800147e:	2300      	movs	r3, #0
      tp = tp->queue.next;
 8001480:	6809      	ldr	r1, [r1, #0]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001482:	4291      	cmp	r1, r2
      n++;
 8001484:	f103 0301 	add.w	r3, r3, #1
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001488:	d1fa      	bne.n	8001480 <chSysIntegrityCheckI+0x10>
    tp = ch.rlist.queue.prev;
 800148a:	684c      	ldr	r4, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800148c:	428c      	cmp	r4, r1
 800148e:	d036      	beq.n	80014fe <chSysIntegrityCheckI+0x8e>
      tp = tp->queue.prev;
 8001490:	6864      	ldr	r4, [r4, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001492:	4294      	cmp	r4, r2
      n--;
 8001494:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001498:	d1fa      	bne.n	8001490 <chSysIntegrityCheckI+0x20>
    if (n != (cnt_t)0) {
 800149a:	bb83      	cbnz	r3, 80014fe <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800149c:	0783      	lsls	r3, r0, #30
 800149e:	d514      	bpl.n	80014ca <chSysIntegrityCheckI+0x5a>
    vtp = ch.vtlist.next;
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <chSysIntegrityCheckI+0xb8>)
 80014a2:	4614      	mov	r4, r2
 80014a4:	f854 1f1c 	ldr.w	r1, [r4, #28]!
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014a8:	42a1      	cmp	r1, r4
 80014aa:	d031      	beq.n	8001510 <chSysIntegrityCheckI+0xa0>
 80014ac:	2300      	movs	r3, #0
      vtp = vtp->next;
 80014ae:	6809      	ldr	r1, [r1, #0]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014b0:	42a1      	cmp	r1, r4
      n++;
 80014b2:	f103 0301 	add.w	r3, r3, #1
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014b6:	d1fa      	bne.n	80014ae <chSysIntegrityCheckI+0x3e>
    vtp = ch.vtlist.prev;
 80014b8:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d01f      	beq.n	80014fe <chSysIntegrityCheckI+0x8e>
      vtp = vtp->prev;
 80014be:	6852      	ldr	r2, [r2, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014c0:	42a2      	cmp	r2, r4
      n--;
 80014c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 80014c6:	d1fa      	bne.n	80014be <chSysIntegrityCheckI+0x4e>
    if (n != (cnt_t)0) {
 80014c8:	b9cb      	cbnz	r3, 80014fe <chSysIntegrityCheckI+0x8e>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 80014ca:	f010 0004 	ands.w	r0, r0, #4
 80014ce:	d014      	beq.n	80014fa <chSysIntegrityCheckI+0x8a>
    tp = ch.rlist.newer;
 80014d0:	4a15      	ldr	r2, [pc, #84]	; (8001528 <chSysIntegrityCheckI+0xb8>)
 80014d2:	6913      	ldr	r3, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d021      	beq.n	800151c <chSysIntegrityCheckI+0xac>
 80014d8:	2000      	movs	r0, #0
      tp = tp->newer;
 80014da:	691b      	ldr	r3, [r3, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80014dc:	4293      	cmp	r3, r2
      n++;
 80014de:	f100 0001 	add.w	r0, r0, #1
    while (tp != (thread_t *)&ch.rlist) {
 80014e2:	d1fa      	bne.n	80014da <chSysIntegrityCheckI+0x6a>
    tp = ch.rlist.older;
 80014e4:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80014e6:	4299      	cmp	r1, r3
 80014e8:	d009      	beq.n	80014fe <chSysIntegrityCheckI+0x8e>
      tp = tp->older;
 80014ea:	6949      	ldr	r1, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80014ec:	4291      	cmp	r1, r2
      n--;
 80014ee:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    while (tp != (thread_t *)&ch.rlist) {
 80014f2:	d1fa      	bne.n	80014ea <chSysIntegrityCheckI+0x7a>
    if (n != (cnt_t)0) {
 80014f4:	3000      	adds	r0, #0
 80014f6:	bf18      	it	ne
 80014f8:	2001      	movne	r0, #1
}
 80014fa:	bc10      	pop	{r4}
 80014fc:	4770      	bx	lr
      return true;
 80014fe:	2001      	movs	r0, #1
}
 8001500:	bc10      	pop	{r4}
 8001502:	4770      	bx	lr
    tp = ch.rlist.queue.prev;
 8001504:	6854      	ldr	r4, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 8001506:	4294      	cmp	r4, r2
    n = (cnt_t)0;
 8001508:	bf18      	it	ne
 800150a:	2300      	movne	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800150c:	d1c0      	bne.n	8001490 <chSysIntegrityCheckI+0x20>
 800150e:	e7c5      	b.n	800149c <chSysIntegrityCheckI+0x2c>
    vtp = ch.vtlist.prev;
 8001510:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001512:	42a2      	cmp	r2, r4
    n = (cnt_t)0;
 8001514:	bf18      	it	ne
 8001516:	2300      	movne	r3, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 8001518:	d1d1      	bne.n	80014be <chSysIntegrityCheckI+0x4e>
 800151a:	e7d6      	b.n	80014ca <chSysIntegrityCheckI+0x5a>
    tp = ch.rlist.older;
 800151c:	6959      	ldr	r1, [r3, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800151e:	4299      	cmp	r1, r3
    n = (cnt_t)0;
 8001520:	f04f 0000 	mov.w	r0, #0
    while (tp != (thread_t *)&ch.rlist) {
 8001524:	d1e1      	bne.n	80014ea <chSysIntegrityCheckI+0x7a>
 8001526:	e7e8      	b.n	80014fa <chSysIntegrityCheckI+0x8a>
 8001528:	2000122c 	.word	0x2000122c
 800152c:	00000000 	.word	0x00000000

08001530 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001530:	4a86      	ldr	r2, [pc, #536]	; (800174c <__early_init+0x21c>)
  gpiop->OTYPER  = config->otyper;
 8001532:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8001780 <__early_init+0x250>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001536:	6911      	ldr	r1, [r2, #16]
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800153c:	f240 19ff 	movw	r9, #511	; 0x1ff
 8001540:	2300      	movs	r3, #0
 8001542:	ea41 0109 	orr.w	r1, r1, r9
 8001546:	6111      	str	r1, [r2, #16]
 8001548:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800154a:	6b11      	ldr	r1, [r2, #48]	; 0x30
  gpiop->OTYPER  = config->otyper;
 800154c:	4f80      	ldr	r7, [pc, #512]	; (8001750 <__early_init+0x220>)
 800154e:	4e81      	ldr	r6, [pc, #516]	; (8001754 <__early_init+0x224>)
 8001550:	4d81      	ldr	r5, [pc, #516]	; (8001758 <__early_init+0x228>)
 8001552:	f8df e230 	ldr.w	lr, [pc, #560]	; 8001784 <__early_init+0x254>
 8001556:	4c81      	ldr	r4, [pc, #516]	; (800175c <__early_init+0x22c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001558:	ea41 0109 	orr.w	r1, r1, r9
 800155c:	6311      	str	r1, [r2, #48]	; 0x30
 800155e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001560:	ea41 0909 	orr.w	r9, r1, r9
 8001564:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8001568:	f46f 49a8 	mvn.w	r9, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 800156c:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001570:	f8cc 9008 	str.w	r9, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8001574:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8001788 <__early_init+0x258>
 8001578:	f8cc 900c 	str.w	r9, [ip, #12]
  gpiop->ODR     = config->odr;
 800157c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8001580:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800178c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8001584:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8001588:	f8cc 9020 	str.w	r9, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800158c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8001790 <__early_init+0x260>
 8001590:	f8cc 9024 	str.w	r9, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001594:	f109 592a 	add.w	r9, r9, #713031680	; 0x2a800000
 8001598:	f509 19b0 	add.w	r9, r9, #1441792	; 0x160000
 800159c:	f8cc 9000 	str.w	r9, [ip]
  gpiop->OTYPER  = config->otyper;
 80015a0:	f44f 7c10 	mov.w	ip, #576	; 0x240
 80015a4:	f8c7 c004 	str.w	ip, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 80015ac:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8001794 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 80015b0:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80015b2:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->AFRL    = config->afrl;
 80015b6:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 80015ba:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80015bc:	f8c7 c020 	str.w	ip, [r7, #32]
  gpiop->MODER   = config->moder;
 80015c0:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8001798 <__early_init+0x268>
  gpiop->AFRH    = config->afrh;
 80015c4:	f04f 0840 	mov.w	r8, #64	; 0x40
 80015c8:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80015cc:	f8c7 c000 	str.w	ip, [r7]
  gpiop->PUPDR   = config->pupdr;
 80015d0:	f10c 4caa 	add.w	ip, ip, #1426063360	; 0x55000000
 80015d4:	f5ac 0c43 	sub.w	ip, ip, #12779520	; 0xc30000
 80015d8:	f6ac 3c2c 	subw	ip, ip, #2860	; 0xb2c
  gpiop->OTYPER  = config->otyper;
 80015dc:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80015de:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80015e0:	f8c6 c00c 	str.w	ip, [r6, #12]
  gpiop->AFRL    = config->afrl;
 80015e4:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 80015e8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80015ea:	f8c6 c020 	str.w	ip, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80015ee:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800179c <__early_init+0x26c>
 80015f2:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80015f6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80017a0 <__early_init+0x270>
 80015fa:	f8c6 c000 	str.w	ip, [r6]
  gpiop->PUPDR   = config->pupdr;
 80015fe:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80017a4 <__early_init+0x274>
  gpiop->OTYPER  = config->otyper;
 8001602:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001604:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001606:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->ODR     = config->odr;
 800160a:	f640 7cff 	movw	ip, #4095	; 0xfff
 800160e:	f8c5 c014 	str.w	ip, [r5, #20]
  gpiop->OTYPER  = config->otyper;
 8001612:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
  gpiop->MODER   = config->moder;
 8001616:	f8df c190 	ldr.w	ip, [pc, #400]	; 80017a8 <__early_init+0x278>
  gpiop->AFRL    = config->afrl;
 800161a:	622b      	str	r3, [r5, #32]
  gpiop->OTYPER  = config->otyper;
 800161c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
  gpiop->AFRH    = config->afrh;
 8001620:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001622:	f8c5 c000 	str.w	ip, [r5]
  gpiop->OTYPER  = config->otyper;
 8001626:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800162a:	f8df c138 	ldr.w	ip, [pc, #312]	; 8001764 <__early_init+0x234>
 800162e:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001632:	f8ce 0008 	str.w	r0, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8001636:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 800163a:	f8ce 1014 	str.w	r1, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800163e:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8001642:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001646:	f8ce 8000 	str.w	r8, [lr]
  gpiop->OTYPER  = config->otyper;
 800164a:	607b      	str	r3, [r7, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800164c:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 8001650:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8001652:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 8001654:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8001656:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800165a:	603b      	str	r3, [r7, #0]
  PWR->CR = STM32_VOS;
 800165c:	f44f 4740 	mov.w	r7, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8001660:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001662:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8001664:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 8001666:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8001668:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800166a:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800166c:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 800166e:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001670:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001672:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 8001674:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001676:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001678:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800167a:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 800167c:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800167e:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001680:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001682:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8001684:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8001686:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001688:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800168a:	f8c2 e040 	str.w	lr, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800168e:	f8cc 7000 	str.w	r7, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800169a:	4613      	mov	r3, r2
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	0794      	lsls	r4, r2, #30
 80016a0:	d5fc      	bpl.n	800169c <__early_init+0x16c>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80016a2:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <__early_init+0x21c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80016a6:	f021 0103 	bic.w	r1, r1, #3
 80016aa:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80016ac:	6893      	ldr	r3, [r2, #8]
 80016ae:	f013 030c 	ands.w	r3, r3, #12
 80016b2:	d1fb      	bne.n	80016ac <__early_init+0x17c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80016b4:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80016b6:	4925      	ldr	r1, [pc, #148]	; (800174c <__early_init+0x21c>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80016b8:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80016bc:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80016be:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80016c8:	680b      	ldr	r3, [r1, #0]
 80016ca:	0398      	lsls	r0, r3, #14
 80016cc:	d5fc      	bpl.n	80016c8 <__early_init+0x198>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80016ce:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80016d0:	4a1e      	ldr	r2, [pc, #120]	; (800174c <__early_init+0x21c>)
  RCC->CSR |= RCC_CSR_LSION;
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80016d8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80016da:	0799      	lsls	r1, r3, #30
 80016dc:	d5fc      	bpl.n	80016d8 <__early_init+0x1a8>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <__early_init+0x230>)
 80016e0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80016e2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80016e4:	491f      	ldr	r1, [pc, #124]	; (8001764 <__early_init+0x234>)
  RCC->CR |= RCC_CR_PLLON;
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80016ec:	684b      	ldr	r3, [r1, #4]
 80016ee:	045a      	lsls	r2, r3, #17
 80016f0:	d5fc      	bpl.n	80016ec <__early_init+0x1bc>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <__early_init+0x21c>)
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	d5fc      	bpl.n	80016f4 <__early_init+0x1c4>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <__early_init+0x238>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80016fc:	491b      	ldr	r1, [pc, #108]	; (800176c <__early_init+0x23c>)
 80016fe:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <__early_init+0x240>)
 8001704:	429a      	cmp	r2, r3
 8001706:	d017      	beq.n	8001738 <__early_init+0x208>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <__early_init+0x244>)
 800170a:	f240 7205 	movw	r2, #1797	; 0x705
 800170e:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <__early_init+0x21c>)
 8001712:	6893      	ldr	r3, [r2, #8]
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800171a:	6893      	ldr	r3, [r2, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d1fa      	bne.n	800171a <__early_init+0x1ea>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001724:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
 800172c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6653      	str	r3, [r2, #100]	; 0x64
 8001734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <__early_init+0x248>)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <__early_init+0x24c>)
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d1e2      	bne.n	8001708 <__early_init+0x1d8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__early_init+0x244>)
 8001744:	f240 1205 	movw	r2, #261	; 0x105
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e7e1      	b.n	8001710 <__early_init+0x1e0>
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40022000 	.word	0x40022000
 8001760:	07405408 	.word	0x07405408
 8001764:	40007000 	.word	0x40007000
 8001768:	e0042000 	.word	0xe0042000
 800176c:	38889400 	.word	0x38889400
 8001770:	20006411 	.word	0x20006411
 8001774:	40023c00 	.word	0x40023c00
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	410fc241 	.word	0x410fc241
 8001780:	40020000 	.word	0x40020000
 8001784:	40021000 	.word	0x40021000
 8001788:	40010054 	.word	0x40010054
 800178c:	55560000 	.word	0x55560000
 8001790:	000aaa00 	.word	0x000aaa00
 8001794:	55514515 	.word	0x55514515
 8001798:	00082080 	.word	0x00082080
 800179c:	00060600 	.word	0x00060600
 80017a0:	02208001 	.word	0x02208001
 80017a4:	00555055 	.word	0x00555055
 80017a8:	55000100 	.word	0x55000100
 80017ac:	00000000 	.word	0x00000000

080017b0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80017b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 80017b4:	4d62      	ldr	r5, [pc, #392]	; (8001940 <VectorD8+0x190>)
 80017b6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80017b8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80017bc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80017be:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80017c0:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 80017c2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80017c4:	d477      	bmi.n	80018b6 <VectorD8+0x106>
 80017c6:	2320      	movs	r3, #32
 80017c8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80017cc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80017d0:	d042      	beq.n	8001858 <VectorD8+0xa8>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80017d2:	4f5c      	ldr	r7, [pc, #368]	; (8001944 <VectorD8+0x194>)
  chThdDequeueNextI(tqp, msg);
 80017d4:	f107 0808 	add.w	r8, r7, #8
 80017d8:	e007      	b.n	80017ea <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80017da:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80017dc:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80017de:	d41d      	bmi.n	800181c <VectorD8+0x6c>
    sr = u->SR;
 80017e0:	6834      	ldr	r4, [r6, #0]
 80017e2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80017e4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80017e8:	d036      	beq.n	8001858 <VectorD8+0xa8>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80017ea:	0723      	lsls	r3, r4, #28
 80017ec:	d0f5      	beq.n	80017da <VectorD8+0x2a>
    sts |= SD_OVERRUN_ERROR;
 80017ee:	f014 0f08 	tst.w	r4, #8
 80017f2:	bf0c      	ite	eq
 80017f4:	2100      	moveq	r1, #0
 80017f6:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80017f8:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80017fa:	bf48      	it	mi
 80017fc:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001800:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001802:	bf48      	it	mi
 8001804:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001808:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800180a:	bf48      	it	mi
 800180c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chEvtBroadcastFlagsI(esp, flags);
 8001810:	4638      	mov	r0, r7
 8001812:	f7ff f9ed 	bl	8000bf0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001816:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001818:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 800181a:	d5e1      	bpl.n	80017e0 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800181c:	696a      	ldr	r2, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800181e:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 8001822:	2a00      	cmp	r2, #0
 8001824:	d034      	beq.n	8001890 <VectorD8+0xe0>
  if (!iqIsFullI(iqp)) {
 8001826:	6a2a      	ldr	r2, [r5, #32]
 8001828:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800182a:	428a      	cmp	r2, r1
 800182c:	d03a      	beq.n	80018a4 <VectorD8+0xf4>
    iqp->q_counter++;
 800182e:	6969      	ldr	r1, [r5, #20]
 8001830:	4023      	ands	r3, r4
    *iqp->q_wrptr++ = b;
 8001832:	1c50      	adds	r0, r2, #1
    iqp->q_counter++;
 8001834:	3101      	adds	r1, #1
    *iqp->q_wrptr++ = b;
 8001836:	6228      	str	r0, [r5, #32]
    iqp->q_counter++;
 8001838:	6169      	str	r1, [r5, #20]
    *iqp->q_wrptr++ = b;
 800183a:	7013      	strb	r3, [r2, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800183c:	6a2a      	ldr	r2, [r5, #32]
 800183e:	69eb      	ldr	r3, [r5, #28]
 8001840:	429a      	cmp	r2, r3
 8001842:	d301      	bcc.n	8001848 <VectorD8+0x98>
      iqp->q_wrptr = iqp->q_buffer;
 8001844:	69ab      	ldr	r3, [r5, #24]
 8001846:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8001848:	4640      	mov	r0, r8
 800184a:	f004 fda1 	bl	8006390 <chThdDequeueNextI.constprop.76>
    sr = u->SR;
 800184e:	6834      	ldr	r4, [r6, #0]
 8001850:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001852:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001856:	d1c8      	bne.n	80017ea <VectorD8+0x3a>
 8001858:	2300      	movs	r3, #0
 800185a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800185e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001862:	d001      	beq.n	8001868 <VectorD8+0xb8>
 8001864:	0622      	lsls	r2, r4, #24
 8001866:	d435      	bmi.n	80018d4 <VectorD8+0x124>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001868:	f019 0f40 	tst.w	r9, #64	; 0x40
 800186c:	d00b      	beq.n	8001886 <VectorD8+0xd6>
 800186e:	0663      	lsls	r3, r4, #25
 8001870:	d509      	bpl.n	8001886 <VectorD8+0xd6>
 8001872:	2320      	movs	r3, #32
 8001874:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001878:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800187a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800187c:	429a      	cmp	r2, r3
 800187e:	d043      	beq.n	8001908 <VectorD8+0x158>
 8001880:	2300      	movs	r3, #0
 8001882:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8001886:	b003      	add	sp, #12
 8001888:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800188c:	f001 bb28 	b.w	8002ee0 <_port_irq_epilogue>
  chEvtBroadcastFlagsI(esp, flags);
 8001890:	2104      	movs	r1, #4
 8001892:	4638      	mov	r0, r7
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	f7ff f9ab 	bl	8000bf0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 800189a:	6a2a      	ldr	r2, [r5, #32]
 800189c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	428a      	cmp	r2, r1
 80018a2:	d1c4      	bne.n	800182e <VectorD8+0x7e>
 80018a4:	6969      	ldr	r1, [r5, #20]
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d0c1      	beq.n	800182e <VectorD8+0x7e>
 80018aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ae:	4638      	mov	r0, r7
 80018b0:	f7ff f99e 	bl	8000bf0 <chEvtBroadcastFlagsI>
 80018b4:	e794      	b.n	80017e0 <VectorD8+0x30>
 80018b6:	2320      	movs	r3, #32
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	1d28      	adds	r0, r5, #4
 80018c2:	f7ff f995 	bl	8000bf0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80018c6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80018ca:	6033      	str	r3, [r6, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	e778      	b.n	80017c6 <VectorD8+0x16>
 80018d4:	2320      	movs	r3, #32
 80018d6:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80018da:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80018dc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80018de:	429a      	cmp	r2, r3
 80018e0:	d01f      	beq.n	8001922 <VectorD8+0x172>
    oqp->q_counter++;
 80018e2:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 80018e4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 80018e6:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 80018e8:	3201      	adds	r2, #1
 80018ea:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80018ec:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 80018ee:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 80018f0:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80018f2:	d301      	bcc.n	80018f8 <VectorD8+0x148>
      oqp->q_rdptr = oqp->q_buffer;
 80018f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80018f6:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <VectorD8+0x198>)
 80018fa:	f004 fd49 	bl	8006390 <chThdDequeueNextI.constprop.76>
      u->DR = b;
 80018fe:	6077      	str	r7, [r6, #4]
 8001900:	2300      	movs	r3, #0
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	e7af      	b.n	8001868 <VectorD8+0xb8>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001908:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0b8      	beq.n	8001880 <VectorD8+0xd0>
  chEvtBroadcastFlagsI(esp, flags);
 800190e:	2110      	movs	r1, #16
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <VectorD8+0x194>)
 8001912:	f7ff f96d 	bl	8000bf0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001916:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800191a:	ea09 0303 	and.w	r3, r9, r3
 800191e:	60f3      	str	r3, [r6, #12]
 8001920:	e7ae      	b.n	8001880 <VectorD8+0xd0>
  if (!oqIsEmptyI(oqp)) {
 8001922:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001924:	2a00      	cmp	r2, #0
 8001926:	d0dc      	beq.n	80018e2 <VectorD8+0x132>
 8001928:	2108      	movs	r1, #8
 800192a:	4806      	ldr	r0, [pc, #24]	; (8001944 <VectorD8+0x194>)
 800192c:	f7ff f960 	bl	8000bf0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001930:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001934:	ea09 0303 	and.w	r3, r9, r3
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	60f3      	str	r3, [r6, #12]
 800193e:	e7df      	b.n	8001900 <VectorD8+0x150>
 8001940:	20001358 	.word	0x20001358
 8001944:	2000135c 	.word	0x2000135c
 8001948:	20001388 	.word	0x20001388
 800194c:	00000000 	.word	0x00000000

08001950 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001954:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	079b      	lsls	r3, r3, #30
 800195c:	d403      	bmi.n	8001966 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800195e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001962:	f001 babd 	b.w	8002ee0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8001966:	2100      	movs	r1, #0
 8001968:	6139      	str	r1, [r7, #16]
 800196a:	2320      	movs	r3, #32
 800196c:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001970:	4c1e      	ldr	r4, [pc, #120]	; (80019ec <VectorB0+0x9c>)
 8001972:	46a1      	mov	r9, r4
  return (systime_t)STM32_ST_TIM->CNT;
 8001974:	46b8      	mov	r8, r7
 8001976:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 800197a:	689a      	ldr	r2, [r3, #8]
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800197c:	460f      	mov	r7, r1
 800197e:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001982:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001984:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8001986:	4295      	cmp	r5, r2
 8001988:	d31b      	bcc.n	80019c2 <VectorB0+0x72>
 800198a:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800198c:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 800198e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001992:	4411      	add	r1, r2

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001994:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8001996:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8001998:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800199c:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 80019a0:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 80019a2:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->DIER = 0;
 80019a4:	bf08      	it	eq
 80019a6:	f8c8 700c 	streq.w	r7, [r8, #12]
 80019aa:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80019ae:	6918      	ldr	r0, [r3, #16]
 80019b0:	47d0      	blx	sl
 80019b2:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80019b6:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4295      	cmp	r5, r2
 80019bc:	d3df      	bcc.n	800197e <VectorB0+0x2e>
 80019be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80019c0:	e7e4      	b.n	800198c <VectorB0+0x3c>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80019c2:	69e2      	ldr	r2, [r4, #28]
 80019c4:	454a      	cmp	r2, r9
 80019c6:	d00a      	beq.n	80019de <VectorB0+0x8e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80019c8:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 80019ca:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 80019cc:	1b4d      	subs	r5, r1, r5
 80019ce:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	bf2c      	ite	cs
 80019d6:	18c0      	addcs	r0, r0, r3
 80019d8:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80019da:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 80019de:	2300      	movs	r3, #0
 80019e0:	f383 8811 	msr	BASEPRI, r3
}
 80019e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80019e8:	f001 ba7a 	b.w	8002ee0 <_port_irq_epilogue>
 80019ec:	2000122c 	.word	0x2000122c

080019f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	4f13      	ldr	r7, [pc, #76]	; (8001a40 <__init_ram_areas+0x50>)
 80019f4:	4d13      	ldr	r5, [pc, #76]	; (8001a44 <__init_ram_areas+0x54>)
 80019f6:	4c14      	ldr	r4, [pc, #80]	; (8001a48 <__init_ram_areas+0x58>)
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <__init_ram_areas+0x5c>)
 80019fa:	4915      	ldr	r1, [pc, #84]	; (8001a50 <__init_ram_areas+0x60>)
 80019fc:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001a00:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8001a02:	429c      	cmp	r4, r3
 8001a04:	d911      	bls.n	8001a2a <__init_ram_areas+0x3a>
 8001a06:	3904      	subs	r1, #4
 8001a08:	461a      	mov	r2, r3
      *p = *tp;
 8001a0a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001a0e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001a12:	4294      	cmp	r4, r2
 8001a14:	d8f9      	bhi.n	8001a0a <__init_ram_areas+0x1a>
 8001a16:	43da      	mvns	r2, r3
 8001a18:	4414      	add	r4, r2
 8001a1a:	f024 0403 	bic.w	r4, r4, #3
 8001a1e:	3404      	adds	r4, #4
 8001a20:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001a22:	429d      	cmp	r5, r3
 8001a24:	d903      	bls.n	8001a2e <__init_ram_areas+0x3e>
      *p = 0;
 8001a26:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8001a2a:	429d      	cmp	r5, r3
 8001a2c:	d8fb      	bhi.n	8001a26 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001a2e:	4577      	cmp	r7, lr
 8001a30:	d004      	beq.n	8001a3c <__init_ram_areas+0x4c>
 8001a32:	f107 0110 	add.w	r1, r7, #16
 8001a36:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 8001a38:	3710      	adds	r7, #16
 8001a3a:	e7e2      	b.n	8001a02 <__init_ram_areas+0x12>
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	08007974 	.word	0x08007974
 8001a44:	200013f0 	.word	0x200013f0
 8001a48:	200013f0 	.word	0x200013f0
 8001a4c:	200013f0 	.word	0x200013f0
 8001a50:	08009bc4 	.word	0x08009bc4
	...

08001a60 <__default_exit>:
void __default_exit(void) {
 8001a60:	e7fe      	b.n	8001a60 <__default_exit>
 8001a62:	bf00      	nop
	...

08001a70 <__late_init>:
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
	...

08001a80 <__core_init>:
void __core_init(void) {
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
	...

08001a90 <rt_test_009_001_setup.lto_priv.154>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <rt_test_009_001_setup.lto_priv.154+0x30>)
  heapp->provider = NULL;
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <rt_test_009_001_setup.lto_priv.154+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001a94:	1dd9      	adds	r1, r3, #7
 8001a96:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8001a9a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001a9c:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
  heapp->provider = NULL;
 8001aa0:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001aa2:	08db      	lsrs	r3, r3, #3
 *   freeing memory.
 * - [9.1.7] Getting heap info again for verification.
 * .
 */

static void rt_test_009_001_setup(void) {
 8001aa4:	b410      	push	{r4}
 8001aa6:	604b      	str	r3, [r1, #4]
  tqp->next = (thread_t *)tqp;
 8001aa8:	f102 040c 	add.w	r4, r2, #12
  H_NEXT(&heapp->header) = hp;
 8001aac:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 8001aae:	6008      	str	r0, [r1, #0]
  H_PAGES(&heapp->header) = 0;
 8001ab0:	6090      	str	r0, [r2, #8]
 8001ab2:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 8001ab4:	6114      	str	r4, [r2, #16]
  heapp->provider = NULL;
 8001ab6:	6010      	str	r0, [r2, #0]
  mp->owner = NULL;
 8001ab8:	6150      	str	r0, [r2, #20]
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8001aba:	bc10      	pop	{r4}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000af8 	.word	0x20000af8
 8001ac4:	20001304 	.word	0x20001304
	...

08001ad0 <rt_test_006_009_setup.lto_priv.138>:
  tqp->next = (thread_t *)tqp;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <rt_test_006_009_setup.lto_priv.138+0x1c>)
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <rt_test_006_009_setup.lto_priv.138+0x20>)
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <rt_test_006_009_setup.lto_priv.138+0x24>)
 8001ad6:	6012      	str	r2, [r2, #0]
 8001ad8:	2000      	movs	r0, #0
 8001ada:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
 8001adc:	6049      	str	r1, [r1, #4]
 8001ade:	6052      	str	r2, [r2, #4]
 8001ae0:	6090      	str	r0, [r2, #8]
 8001ae2:	6098      	str	r0, [r3, #8]
  tqp->next = (thread_t *)tqp;
 8001ae4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8001ae6:	605b      	str	r3, [r3, #4]
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000854 	.word	0x20000854
 8001af0:	20000808 	.word	0x20000808
 8001af4:	20000830 	.word	0x20000830
	...

08001b00 <rt_test_006_008_setup.lto_priv.136>:
  tqp->next = (thread_t *)tqp;
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <rt_test_006_008_setup.lto_priv.136+0x14>)
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <rt_test_006_008_setup.lto_priv.136+0x18>)
 8001b04:	601b      	str	r3, [r3, #0]
 8001b06:	2100      	movs	r1, #0
 8001b08:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8001b0a:	6052      	str	r2, [r2, #4]
 8001b0c:	605b      	str	r3, [r3, #4]
 8001b0e:	6099      	str	r1, [r3, #8]
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000854 	.word	0x20000854
 8001b18:	20000830 	.word	0x20000830
 8001b1c:	00000000 	.word	0x00000000

08001b20 <rt_test_008_002_execute.lto_priv.143>:

static void rt_test_008_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_008_002_execute(void) {
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* [8.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <rt_test_008_002_execute.lto_priv.143+0x44>)
 8001b24:	4f10      	ldr	r7, [pc, #64]	; (8001b68 <rt_test_008_002_execute.lto_priv.143+0x48>)
 8001b26:	2601      	movs	r6, #1
 8001b28:	601e      	str	r6, [r3, #0]
 8001b2a:	2507      	movs	r5, #7
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8001b2c:	2400      	movs	r4, #0
  while (events != (eventmask_t)0) {
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001b2e:	fa25 f304 	lsr.w	r3, r5, r4
 8001b32:	07db      	lsls	r3, r3, #31
 8001b34:	d404      	bmi.n	8001b40 <rt_test_008_002_execute.lto_priv.143+0x20>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001b36:	3401      	adds	r4, #1
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001b38:	fa25 f304 	lsr.w	r3, r5, r4
 8001b3c:	07db      	lsls	r3, r3, #31
 8001b3e:	d5fa      	bpl.n	8001b36 <rt_test_008_002_execute.lto_priv.143+0x16>
      events &= ~EVENT_MASK(eid);
 8001b40:	fa06 f304 	lsl.w	r3, r6, r4
      handlers[eid](eid);
 8001b44:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 8001b46:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001b4a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8001b4e:	4798      	blx	r3
    eid++;
 8001b50:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8001b52:	2d00      	cmp	r5, #0
 8001b54:	d1eb      	bne.n	8001b2e <rt_test_008_002_execute.lto_priv.143+0xe>
  {
    chEvtDispatch(evhndl, 7);
    test_assert_sequence("ABC", "invalid sequence");
 8001b56:	4905      	ldr	r1, [pc, #20]	; (8001b6c <rt_test_008_002_execute.lto_priv.143+0x4c>)
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <rt_test_008_002_execute.lto_priv.143+0x50>)
  }
}
 8001b5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8001b5e:	f001 b967 	b.w	8002e30 <_test_assert_sequence>
 8001b62:	bf00      	nop
 8001b64:	200013d8 	.word	0x200013d8
 8001b68:	080079f4 	.word	0x080079f4
 8001b6c:	08007a30 	.word	0x08007a30
 8001b70:	08007a44 	.word	0x08007a44
	...

08001b80 <rt_test_009_001_execute.lto_priv.155>:

static void rt_test_009_001_execute(void) {
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <rt_test_009_001_execute.lto_priv.155+0x104>)
  {
    prio = chThdGetPriorityX();
  }

  /* [9.1.2] Getting heap info before the test.*/
  test_set_step(2);
 8001b84:	4c40      	ldr	r4, [pc, #256]	; (8001c88 <rt_test_009_001_execute.lto_priv.155+0x108>)
  return chThdGetSelfX()->prio;
 8001b86:	699b      	ldr	r3, [r3, #24]
  {
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8001b88:	4840      	ldr	r0, [pc, #256]	; (8001c8c <rt_test_009_001_execute.lto_priv.155+0x10c>)
 8001b8a:	689e      	ldr	r6, [r3, #8]
static void rt_test_009_001_execute(void) {
 8001b8c:	b085      	sub	sp, #20
  test_set_step(2);
 8001b8e:	2302      	movs	r3, #2
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8001b90:	a903      	add	r1, sp, #12
 8001b92:	aa02      	add	r2, sp, #8
  test_set_step(2);
 8001b94:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8001b96:	f001 fb23 	bl	80031e0 <chHeapStatus>
 8001b9a:	4605      	mov	r5, r0
    test_assert(n1 == 1, "heap fragmented");
 8001b9c:	f1a0 0001 	sub.w	r0, r0, #1
 8001ba0:	fab0 f080 	clz	r0, r0
 8001ba4:	0940      	lsrs	r0, r0, #5
 8001ba6:	493a      	ldr	r1, [pc, #232]	; (8001c90 <rt_test_009_001_execute.lto_priv.155+0x110>)
 8001ba8:	f001 f96a 	bl	8002e80 <_test_assert>
 8001bac:	b108      	cbz	r0, 8001bb2 <rt_test_009_001_execute.lto_priv.155+0x32>
    n2 = chHeapStatus(&heap1, &total2, &largest2);
    test_assert(n1 == n2, "fragmentation changed");
    test_assert(total1 == total2, "total free space changed");
    test_assert(largest1 == largest2, "largest fragment size changed");
  }
}
 8001bae:	b005      	add	sp, #20
 8001bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(3);
 8001bb2:	2203      	movs	r2, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8001bb4:	4937      	ldr	r1, [pc, #220]	; (8001c94 <rt_test_009_001_execute.lto_priv.155+0x114>)
  test_set_step(3);
 8001bb6:	6022      	str	r2, [r4, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <rt_test_009_001_execute.lto_priv.155+0x118>)
 8001bba:	4f38      	ldr	r7, [pc, #224]	; (8001c9c <rt_test_009_001_execute.lto_priv.155+0x11c>)
 8001bbc:	1e72      	subs	r2, r6, #1
 8001bbe:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8001bc2:	f004 fe3d 	bl	8006840 <chThdCreateFromHeap.constprop.32>
 8001bc6:	6038      	str	r0, [r7, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 8001bc8:	3000      	adds	r0, #0
 8001bca:	bf18      	it	ne
 8001bcc:	2001      	movne	r0, #1
 8001bce:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <rt_test_009_001_execute.lto_priv.155+0x120>)
 8001bd0:	f001 f956 	bl	8002e80 <_test_assert>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1ea      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
  test_set_step(4);
 8001bd8:	2204      	movs	r2, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <rt_test_009_001_execute.lto_priv.155+0x124>)
 8001bdc:	4932      	ldr	r1, [pc, #200]	; (8001ca8 <rt_test_009_001_execute.lto_priv.155+0x128>)
  test_set_step(4);
 8001bde:	6022      	str	r2, [r4, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8001be0:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8001be4:	1eb2      	subs	r2, r6, #2
 8001be6:	f004 fe2b 	bl	8006840 <chThdCreateFromHeap.constprop.32>
 8001bea:	4603      	mov	r3, r0
    test_assert(threads[1] != NULL, "thread creation failed");
 8001bec:	3000      	adds	r0, #0
 8001bee:	bf18      	it	ne
 8001bf0:	2001      	movne	r0, #1
 8001bf2:	492b      	ldr	r1, [pc, #172]	; (8001ca0 <rt_test_009_001_execute.lto_priv.155+0x120>)
    threads[1] = chThdCreateFromHeap(&heap1,
 8001bf4:	607b      	str	r3, [r7, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8001bf6:	f001 f943 	bl	8002e80 <_test_assert>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d1d7      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
  test_set_step(5);
 8001bfe:	2005      	movs	r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <rt_test_009_001_execute.lto_priv.155+0x12c>)
 8001c02:	492b      	ldr	r1, [pc, #172]	; (8001cb0 <rt_test_009_001_execute.lto_priv.155+0x130>)
  test_set_step(5);
 8001c04:	6020      	str	r0, [r4, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8001c06:	1ef2      	subs	r2, r6, #3
 8001c08:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001c0c:	f004 fe18 	bl	8006840 <chThdCreateFromHeap.constprop.32>
 8001c10:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8001c12:	fab0 f080 	clz	r0, r0
 8001c16:	0940      	lsrs	r0, r0, #5
 8001c18:	4926      	ldr	r1, [pc, #152]	; (8001cb4 <rt_test_009_001_execute.lto_priv.155+0x134>)
    threads[2] = chThdCreateFromHeap(&heap1,
 8001c1a:	60bb      	str	r3, [r7, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8001c1c:	f001 f930 	bl	8002e80 <_test_assert>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d1c4      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
  test_set_step(6);
 8001c24:	2306      	movs	r3, #6
 8001c26:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8001c28:	f000 fdfa 	bl	8002820 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8001c2c:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <rt_test_009_001_execute.lto_priv.155+0x138>)
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <rt_test_009_001_execute.lto_priv.155+0x13c>)
 8001c30:	f001 f8fe 	bl	8002e30 <_test_assert_sequence>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d1ba      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
  test_set_step(7);
 8001c38:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8001c3a:	a901      	add	r1, sp, #4
 8001c3c:	466a      	mov	r2, sp
 8001c3e:	4813      	ldr	r0, [pc, #76]	; (8001c8c <rt_test_009_001_execute.lto_priv.155+0x10c>)
  test_set_step(7);
 8001c40:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8001c42:	f001 facd 	bl	80031e0 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8001c46:	1a28      	subs	r0, r5, r0
 8001c48:	fab0 f080 	clz	r0, r0
 8001c4c:	491c      	ldr	r1, [pc, #112]	; (8001cc0 <rt_test_009_001_execute.lto_priv.155+0x140>)
 8001c4e:	0940      	lsrs	r0, r0, #5
 8001c50:	f001 f916 	bl	8002e80 <_test_assert>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d1aa      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
    test_assert(total1 == total2, "total free space changed");
 8001c58:	9803      	ldr	r0, [sp, #12]
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	4919      	ldr	r1, [pc, #100]	; (8001cc4 <rt_test_009_001_execute.lto_priv.155+0x144>)
 8001c5e:	1ac0      	subs	r0, r0, r3
 8001c60:	fab0 f080 	clz	r0, r0
 8001c64:	0940      	lsrs	r0, r0, #5
 8001c66:	f001 f90b 	bl	8002e80 <_test_assert>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d19f      	bne.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8001c6e:	9802      	ldr	r0, [sp, #8]
 8001c70:	9b00      	ldr	r3, [sp, #0]
 8001c72:	4915      	ldr	r1, [pc, #84]	; (8001cc8 <rt_test_009_001_execute.lto_priv.155+0x148>)
 8001c74:	1ac0      	subs	r0, r0, r3
 8001c76:	fab0 f080 	clz	r0, r0
 8001c7a:	0940      	lsrs	r0, r0, #5
 8001c7c:	f001 f900 	bl	8002e80 <_test_assert>
 8001c80:	e795      	b.n	8001bae <rt_test_009_001_execute.lto_priv.155+0x2e>
 8001c82:	bf00      	nop
 8001c84:	2000122c 	.word	0x2000122c
 8001c88:	200013d8 	.word	0x200013d8
 8001c8c:	20001304 	.word	0x20001304
 8001c90:	08007ab8 	.word	0x08007ab8
 8001c94:	08007acc 	.word	0x08007acc
 8001c98:	08007ac8 	.word	0x08007ac8
 8001c9c:	20001160 	.word	0x20001160
 8001ca0:	08007ad4 	.word	0x08007ad4
 8001ca4:	08007aec 	.word	0x08007aec
 8001ca8:	08007af0 	.word	0x08007af0
 8001cac:	08007af8 	.word	0x08007af8
 8001cb0:	08007afc 	.word	0x08007afc
 8001cb4:	08007b04 	.word	0x08007b04
 8001cb8:	08007a30 	.word	0x08007a30
 8001cbc:	08007b20 	.word	0x08007b20
 8001cc0:	08007b24 	.word	0x08007b24
 8001cc4:	08007b3c 	.word	0x08007b3c
 8001cc8:	08007b58 	.word	0x08007b58
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <dyn_thread1.lto_priv.80>:
 8001cd0:	f005 b946 	b.w	8006f60 <thread.lto_priv.201>
	...

08001ce0 <rt_test_008_001_execute.lto_priv.141>:
static void rt_test_008_001_execute(void) {
 8001ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  esp->next = (event_listener_t *)esp;
 8001ce4:	4c36      	ldr	r4, [pc, #216]	; (8001dc0 <rt_test_008_001_execute.lto_priv.141+0xe0>)
  test_set_step(2);
 8001ce6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001dd0 <rt_test_008_001_execute.lto_priv.141+0xf0>
 8001cea:	6024      	str	r4, [r4, #0]
 8001cec:	2102      	movs	r1, #2
static void rt_test_008_001_execute(void) {
 8001cee:	b08a      	sub	sp, #40	; 0x28
  test_set_step(2);
 8001cf0:	f8c9 1000 	str.w	r1, [r9]
 8001cf4:	2620      	movs	r6, #32
 8001cf6:	f386 8811 	msr	BASEPRI, r6
  elp->listener = currp;
 8001cfa:	4832      	ldr	r0, [pc, #200]	; (8001dc4 <rt_test_008_001_execute.lto_priv.141+0xe4>)
  elp->next     = esp->next;
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	af0a      	add	r7, sp, #40	; 0x28
  elp->events   = events;
 8001d00:	2201      	movs	r2, #1
  elp->next     = esp->next;
 8001d02:	f847 3d14 	str.w	r3, [r7, #-20]!
  elp->listener = currp;
 8001d06:	6983      	ldr	r3, [r0, #24]
 8001d08:	9306      	str	r3, [sp, #24]
  elp->flags    = (eventflags_t)0;
 8001d0a:	2500      	movs	r5, #0
  elp->wflags   = wflags;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->events   = events;
 8001d10:	9207      	str	r2, [sp, #28]
  esp->next     = elp;
 8001d12:	6027      	str	r7, [r4, #0]
  elp->flags    = (eventflags_t)0;
 8001d14:	9508      	str	r5, [sp, #32]
  elp->wflags   = wflags;
 8001d16:	9309      	str	r3, [sp, #36]	; 0x24
 8001d18:	f385 8811 	msr	BASEPRI, r5
 8001d1c:	f386 8811 	msr	BASEPRI, r6
  elp->next     = esp->next;
 8001d20:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	f848 2d28 	str.w	r2, [r8, #-40]!
  elp->listener = currp;
 8001d2a:	6982      	ldr	r2, [r0, #24]
 8001d2c:	9201      	str	r2, [sp, #4]
  elp->events   = events;
 8001d2e:	9102      	str	r1, [sp, #8]
  elp->flags    = (eventflags_t)0;
 8001d30:	9503      	str	r5, [sp, #12]
  elp->wflags   = wflags;
 8001d32:	9304      	str	r3, [sp, #16]
  esp->next     = elp;
 8001d34:	f8c4 8000 	str.w	r8, [r4]
 8001d38:	f385 8811 	msr	BASEPRI, r5
 8001d3c:	f386 8811 	msr	BASEPRI, r6
  return (bool)(esp != (event_source_t *)esp->next);
 8001d40:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <rt_test_008_001_execute.lto_priv.141+0xe8>)
 8001d44:	1b00      	subs	r0, r0, r4
 8001d46:	bf18      	it	ne
 8001d48:	2001      	movne	r0, #1
 8001d4a:	f001 f899 	bl	8002e80 <_test_assert>
 8001d4e:	b120      	cbz	r0, 8001d5a <rt_test_008_001_execute.lto_priv.141+0x7a>
 8001d50:	f385 8811 	msr	BASEPRI, r5
}
 8001d54:	b00a      	add	sp, #40	; 0x28
 8001d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d5a:	4682      	mov	sl, r0
 8001d5c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8001d60:	2303      	movs	r3, #3
    chEvtUnregister(&es1, &el1);
 8001d62:	4639      	mov	r1, r7
 8001d64:	4620      	mov	r0, r4
  test_set_step(3);
 8001d66:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el1);
 8001d6a:	f7fe fd41 	bl	80007f0 <chEvtUnregister>
 8001d6e:	f386 8811 	msr	BASEPRI, r6
 8001d72:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001d74:	4914      	ldr	r1, [pc, #80]	; (8001dc8 <rt_test_008_001_execute.lto_priv.141+0xe8>)
 8001d76:	1b00      	subs	r0, r0, r4
 8001d78:	bf18      	it	ne
 8001d7a:	2001      	movne	r0, #1
 8001d7c:	f001 f880 	bl	8002e80 <_test_assert>
 8001d80:	4605      	mov	r5, r0
 8001d82:	b120      	cbz	r0, 8001d8e <rt_test_008_001_execute.lto_priv.141+0xae>
 8001d84:	f38a 8811 	msr	BASEPRI, sl
}
 8001d88:	b00a      	add	sp, #40	; 0x28
 8001d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8e:	f380 8811 	msr	BASEPRI, r0
  test_set_step(4);
 8001d92:	2304      	movs	r3, #4
    chEvtUnregister(&es1, &el2);
 8001d94:	4641      	mov	r1, r8
 8001d96:	4620      	mov	r0, r4
  test_set_step(4);
 8001d98:	f8c9 3000 	str.w	r3, [r9]
    chEvtUnregister(&es1, &el2);
 8001d9c:	f7fe fd28 	bl	80007f0 <chEvtUnregister>
 8001da0:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	4909      	ldr	r1, [pc, #36]	; (8001dcc <rt_test_008_001_execute.lto_priv.141+0xec>)
 8001da8:	1b00      	subs	r0, r0, r4
 8001daa:	fab0 f080 	clz	r0, r0
 8001dae:	0940      	lsrs	r0, r0, #5
 8001db0:	f001 f866 	bl	8002e80 <_test_assert>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d1cb      	bne.n	8001d50 <rt_test_008_001_execute.lto_priv.141+0x70>
 8001db8:	f380 8811 	msr	BASEPRI, r0
 8001dbc:	e7ca      	b.n	8001d54 <rt_test_008_001_execute.lto_priv.141+0x74>
 8001dbe:	bf00      	nop
 8001dc0:	20000800 	.word	0x20000800
 8001dc4:	2000122c 	.word	0x2000122c
 8001dc8:	08007a14 	.word	0x08007a14
 8001dcc:	08007a20 	.word	0x08007a20
 8001dd0:	200013d8 	.word	0x200013d8
	...

08001de0 <rt_test_008_007_setup.lto_priv.152>:
 *   has been emptied.
 * - [8.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_008_007_setup(void) {
 8001de0:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001de2:	f004 fc4d 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
  esp->next = (event_listener_t *)esp;
 8001de6:	4a02      	ldr	r2, [pc, #8]	; (8001df0 <rt_test_008_007_setup.lto_priv.152+0x10>)
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <rt_test_008_007_setup.lto_priv.152+0x14>)
 8001dea:	6012      	str	r2, [r2, #0]
 8001dec:	601b      	str	r3, [r3, #0]
 8001dee:	bd08      	pop	{r3, pc}
 8001df0:	20000800 	.word	0x20000800
 8001df4:	20000804 	.word	0x20000804
	...

08001e00 <rt_test_008_006_setup.lto_priv.150>:
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001e00:	f004 bc3e 	b.w	8006680 <chEvtGetAndClearEvents.constprop.43>
	...

08001e10 <rt_test_008_005_setup.lto_priv.148>:
 8001e10:	f7ff bff6 	b.w	8001e00 <rt_test_008_006_setup.lto_priv.150>
	...

08001e20 <rt_test_008_004_setup.lto_priv.146>:
 8001e20:	f7ff bfee 	b.w	8001e00 <rt_test_008_006_setup.lto_priv.150>
	...

08001e30 <rt_test_008_003_setup.lto_priv.144>:
 8001e30:	f7ff bfe6 	b.w	8001e00 <rt_test_008_006_setup.lto_priv.150>
	...

08001e40 <rt_test_008_002_setup.lto_priv.142>:
 8001e40:	f7ff bfde 	b.w	8001e00 <rt_test_008_006_setup.lto_priv.150>
	...

08001e50 <rt_test_008_007_execute.lto_priv.153>:
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}

static void rt_test_008_007_execute(void) {
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [8.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8001e54:	4d3c      	ldr	r5, [pc, #240]	; (8001f48 <rt_test_008_007_execute.lto_priv.153+0xf8>)
 8001e56:	2301      	movs	r3, #1
static void rt_test_008_007_execute(void) {
 8001e58:	b08b      	sub	sp, #44	; 0x2c
  test_set_step(1);
 8001e5a:	602b      	str	r3, [r5, #0]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8001e62:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001f68 <rt_test_008_007_execute.lto_priv.153+0x118>
  elp->listener = currp;
 8001e66:	4f39      	ldr	r7, [pc, #228]	; (8001f4c <rt_test_008_007_execute.lto_priv.153+0xfc>)
  elp->next     = esp->next;
 8001e68:	f8d8 0000 	ldr.w	r0, [r8]
  elp->listener = currp;
 8001e6c:	69b9      	ldr	r1, [r7, #24]
  elp->events   = events;
 8001e6e:	9307      	str	r3, [sp, #28]
  elp->next     = esp->next;
 8001e70:	ae0a      	add	r6, sp, #40	; 0x28
  elp->flags    = (eventflags_t)0;
 8001e72:	2300      	movs	r3, #0
  elp->next     = esp->next;
 8001e74:	f846 0d14 	str.w	r0, [r6, #-20]!
  elp->wflags   = wflags;
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  elp->listener = currp;
 8001e7c:	9106      	str	r1, [sp, #24]
  esp->next     = elp;
 8001e7e:	f8c8 6000 	str.w	r6, [r8]
  elp->flags    = (eventflags_t)0;
 8001e82:	9308      	str	r3, [sp, #32]
  elp->wflags   = wflags;
 8001e84:	9009      	str	r0, [sp, #36]	; 0x24
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f382 8811 	msr	BASEPRI, r2
  elp->next     = esp->next;
 8001e8e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001f6c <rt_test_008_007_execute.lto_priv.153+0x11c>
  elp->listener = currp;
 8001e92:	69ba      	ldr	r2, [r7, #24]
  elp->next     = esp->next;
 8001e94:	f8d9 1000 	ldr.w	r1, [r9]
  elp->flags    = (eventflags_t)0;
 8001e98:	9303      	str	r3, [sp, #12]
  elp->next     = esp->next;
 8001e9a:	ac0a      	add	r4, sp, #40	; 0x28
  elp->events   = events;
 8001e9c:	f04f 0a04 	mov.w	sl, #4
  elp->next     = esp->next;
 8001ea0:	f844 1d28 	str.w	r1, [r4, #-40]!
  elp->wflags   = wflags;
 8001ea4:	9004      	str	r0, [sp, #16]
  elp->listener = currp;
 8001ea6:	9201      	str	r2, [sp, #4]
  esp->next     = elp;
 8001ea8:	f8c9 4000 	str.w	r4, [r9]
  elp->events   = events;
 8001eac:	f8cd a008 	str.w	sl, [sp, #8]
 8001eb0:	f383 8811 	msr	BASEPRI, r3
  }

  /* [8.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8001eb8:	f000 fca2 	bl	8002800 <test_wait_tick>
 8001ebc:	69ba      	ldr	r2, [r7, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <rt_test_008_007_execute.lto_priv.153+0x100>)
 8001ec0:	6891      	ldr	r1, [r2, #8]
 8001ec2:	4a24      	ldr	r2, [pc, #144]	; (8001f54 <rt_test_008_007_execute.lto_priv.153+0x104>)
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8001ec4:	4683      	mov	fp, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	4823      	ldr	r0, [pc, #140]	; (8001f58 <rt_test_008_007_execute.lto_priv.153+0x108>)
 8001eca:	f004 fac1 	bl	8006450 <chThdCreateStatic.constprop.62>
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <rt_test_008_007_execute.lto_priv.153+0x10c>)
  }

  /* [8.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 8001ed0:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001ed2:	6010      	str	r0, [r2, #0]
  test_set_step(3);
 8001ed4:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 8001ed6:	f004 fc1b 	bl	8006710 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
 8001eda:	f50b 7102 	add.w	r1, fp, #520	; 0x208
 8001ede:	f50b 70fa 	add.w	r0, fp, #500	; 0x1f4
 8001ee2:	f004 ffed 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 8001ee6:	b110      	cbz	r0, 8001eee <rt_test_008_007_execute.lto_priv.153+0x9e>
    chEvtUnregister(&es1, &el1);
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
}
 8001ee8:	b00b      	add	sp, #44	; 0x2c
 8001eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001eee:	f004 fbc7 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8001ef2:	fab0 f080 	clz	r0, r0
 8001ef6:	0940      	lsrs	r0, r0, #5
 8001ef8:	4919      	ldr	r1, [pc, #100]	; (8001f60 <rt_test_008_007_execute.lto_priv.153+0x110>)
 8001efa:	f000 ffc1 	bl	8002e80 <_test_assert>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d1f2      	bne.n	8001ee8 <rt_test_008_007_execute.lto_priv.153+0x98>
    test_wait_threads();
 8001f02:	f000 fc8d 	bl	8002820 <test_wait_threads>
    chEvtUnregister(&es1, &el1);
 8001f06:	4631      	mov	r1, r6
 8001f08:	4640      	mov	r0, r8
  test_set_step(4);
 8001f0a:	f8c5 a000 	str.w	sl, [r5]
    chEvtUnregister(&es1, &el1);
 8001f0e:	f7fe fc6f 	bl	80007f0 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8001f12:	4621      	mov	r1, r4
 8001f14:	4648      	mov	r0, r9
 8001f16:	f7fe fc6b 	bl	80007f0 <chEvtUnregister>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 8001f1a:	f8d8 0000 	ldr.w	r0, [r8]
 8001f1e:	4911      	ldr	r1, [pc, #68]	; (8001f64 <rt_test_008_007_execute.lto_priv.153+0x114>)
 8001f20:	eba0 0008 	sub.w	r0, r0, r8
 8001f24:	fab0 f080 	clz	r0, r0
 8001f28:	0940      	lsrs	r0, r0, #5
 8001f2a:	f000 ffa9 	bl	8002e80 <_test_assert>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d1da      	bne.n	8001ee8 <rt_test_008_007_execute.lto_priv.153+0x98>
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8001f32:	f8d9 0000 	ldr.w	r0, [r9]
 8001f36:	490b      	ldr	r1, [pc, #44]	; (8001f64 <rt_test_008_007_execute.lto_priv.153+0x114>)
 8001f38:	eba0 0009 	sub.w	r0, r0, r9
 8001f3c:	fab0 f080 	clz	r0, r0
 8001f40:	0940      	lsrs	r0, r0, #5
 8001f42:	f000 ff9d 	bl	8002e80 <_test_assert>
 8001f46:	e7cf      	b.n	8001ee8 <rt_test_008_007_execute.lto_priv.153+0x98>
 8001f48:	200013d8 	.word	0x200013d8
 8001f4c:	2000122c 	.word	0x2000122c
 8001f50:	08007ac8 	.word	0x08007ac8
 8001f54:	08002381 	.word	0x08002381
 8001f58:	20000af8 	.word	0x20000af8
 8001f5c:	20001160 	.word	0x20001160
 8001f60:	08007aac 	.word	0x08007aac
 8001f64:	08007a20 	.word	0x08007a20
 8001f68:	20000800 	.word	0x20000800
 8001f6c:	20000804 	.word	0x20000804

08001f70 <rt_test_008_006_execute.lto_priv.151>:
static void rt_test_008_006_execute(void) {
 8001f70:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8001f72:	4d57      	ldr	r5, [pc, #348]	; (80020d0 <rt_test_008_006_execute.lto_priv.151+0x160>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8001f74:	4c57      	ldr	r4, [pc, #348]	; (80020d4 <rt_test_008_006_execute.lto_priv.151+0x164>)
 8001f76:	2001      	movs	r0, #1
 8001f78:	6028      	str	r0, [r5, #0]
 8001f7a:	69a2      	ldr	r2, [r4, #24]
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8001f82:	6b53      	ldr	r3, [r2, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001f84:	b933      	cbnz	r3, 8001f94 <rt_test_008_006_execute.lto_priv.151+0x24>
 8001f86:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8001f8a:	4953      	ldr	r1, [pc, #332]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 8001f8c:	f000 ff78 	bl	8002e80 <_test_assert>
 8001f90:	b180      	cbz	r0, 8001fb4 <rt_test_008_006_execute.lto_priv.151+0x44>
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  m ^= m & (m - (eventmask_t)1);
 8001f94:	4258      	negs	r0, r3
 8001f96:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8001f98:	ea23 0300 	bic.w	r3, r3, r0
 8001f9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	fab0 f080 	clz	r0, r0
 8001fa8:	0940      	lsrs	r0, r0, #5
 8001faa:	494b      	ldr	r1, [pc, #300]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 8001fac:	f000 ff68 	bl	8002e80 <_test_assert>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d1ee      	bne.n	8001f92 <rt_test_008_006_execute.lto_priv.151+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8001fb4:	69a3      	ldr	r3, [r4, #24]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 8001fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d072      	beq.n	80020a8 <rt_test_008_006_execute.lto_priv.151+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8001fc2:	6358      	str	r0, [r3, #52]	; 0x34
 8001fc4:	f380 8811 	msr	BASEPRI, r0
    test_assert(m == 0, "spurious event");
 8001fc8:	4943      	ldr	r1, [pc, #268]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 8001fca:	f000 ff59 	bl	8002e80 <_test_assert>
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d1df      	bne.n	8001f92 <rt_test_008_006_execute.lto_priv.151+0x22>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8001fd2:	69a3      	ldr	r3, [r4, #24]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  if ((ctp->epending & events) != events) {
 8001fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fdc:	3201      	adds	r2, #1
 8001fde:	d067      	beq.n	80020b0 <rt_test_008_006_execute.lto_priv.151+0x140>
 8001fe0:	f380 8811 	msr	BASEPRI, r0
 8001fe4:	2001      	movs	r0, #1
    test_assert(m == 0, "spurious event");
 8001fe6:	493c      	ldr	r1, [pc, #240]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 8001fe8:	f000 ff4a 	bl	8002e80 <_test_assert>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d1d0      	bne.n	8001f92 <rt_test_008_006_execute.lto_priv.151+0x22>
  test_set_step(2);
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	602b      	str	r3, [r5, #0]
  thread_t *ctp = currp;
 8001ff4:	69a6      	ldr	r6, [r4, #24]
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 8001ffc:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8001ffe:	b955      	cbnz	r5, 8002016 <rt_test_008_006_execute.lto_priv.151+0xa6>
    ctp->u.ewmask = events;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002004:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002006:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800200a:	200a      	movs	r0, #10
 800200c:	f7ff f858 	bl	80010c0 <chSchGoSleepTimeoutS>
 8002010:	2800      	cmp	r0, #0
 8002012:	db51      	blt.n	80020b8 <rt_test_008_006_execute.lto_priv.151+0x148>
    m = ctp->epending & events;
 8002014:	6b75      	ldr	r5, [r6, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 8002016:	4268      	negs	r0, r5
 8002018:	4028      	ands	r0, r5
  ctp->epending &= ~m;
 800201a:	ea25 0500 	bic.w	r5, r5, r0
 800201e:	6375      	str	r5, [r6, #52]	; 0x34
 8002020:	2300      	movs	r3, #0
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	fab0 f080 	clz	r0, r0
 800202a:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 800202c:	492a      	ldr	r1, [pc, #168]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 800202e:	f000 ff27 	bl	8002e80 <_test_assert>
 8002032:	2800      	cmp	r0, #0
 8002034:	d1ad      	bne.n	8001f92 <rt_test_008_006_execute.lto_priv.151+0x22>
  thread_t *ctp = currp;
 8002036:	69a6      	ldr	r6, [r4, #24]
 8002038:	2320      	movs	r3, #32
 800203a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800203e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002040:	b955      	cbnz	r5, 8002058 <rt_test_008_006_execute.lto_priv.151+0xe8>
    ctp->u.ewmask = events;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002046:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8002048:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800204c:	200a      	movs	r0, #10
 800204e:	f7ff f837 	bl	80010c0 <chSchGoSleepTimeoutS>
 8002052:	2800      	cmp	r0, #0
 8002054:	db34      	blt.n	80020c0 <rt_test_008_006_execute.lto_priv.151+0x150>
    m = ctp->epending & events;
 8002056:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8002058:	2300      	movs	r3, #0
 800205a:	6373      	str	r3, [r6, #52]	; 0x34
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	fab5 f085 	clz	r0, r5
 8002064:	0940      	lsrs	r0, r0, #5
    test_assert(m == 0, "spurious event");
 8002066:	491c      	ldr	r1, [pc, #112]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
 8002068:	f000 ff0a 	bl	8002e80 <_test_assert>
 800206c:	4605      	mov	r5, r0
 800206e:	2800      	cmp	r0, #0
 8002070:	d18f      	bne.n	8001f92 <rt_test_008_006_execute.lto_priv.151+0x22>
  thread_t *ctp = currp;
 8002072:	69a4      	ldr	r4, [r4, #24]
 8002074:	2320      	movs	r3, #32
 8002076:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 800207a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800207c:	3301      	adds	r3, #1
 800207e:	d009      	beq.n	8002094 <rt_test_008_006_execute.lto_priv.151+0x124>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002084:	6263      	str	r3, [r4, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 8002086:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800208a:	200b      	movs	r0, #11
 800208c:	f7ff f818 	bl	80010c0 <chSchGoSleepTimeoutS>
 8002090:	2800      	cmp	r0, #0
 8002092:	db19      	blt.n	80020c8 <rt_test_008_006_execute.lto_priv.151+0x158>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 8002094:	2300      	movs	r3, #0
 8002096:	6363      	str	r3, [r4, #52]	; 0x34
 8002098:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800209c:	4628      	mov	r0, r5
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <rt_test_008_006_execute.lto_priv.151+0x168>)
}
 80020a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(m == 0, "spurious event");
 80020a4:	f000 beec 	b.w	8002e80 <_test_assert>
 80020a8:	f382 8811 	msr	BASEPRI, r2
 80020ac:	2001      	movs	r0, #1
 80020ae:	e78b      	b.n	8001fc8 <rt_test_008_006_execute.lto_priv.151+0x58>
 80020b0:	6358      	str	r0, [r3, #52]	; 0x34
 80020b2:	f380 8811 	msr	BASEPRI, r0
 80020b6:	e796      	b.n	8001fe6 <rt_test_008_006_execute.lto_priv.151+0x76>
 80020b8:	f385 8811 	msr	BASEPRI, r5
 80020bc:	2001      	movs	r0, #1
 80020be:	e7b5      	b.n	800202c <rt_test_008_006_execute.lto_priv.151+0xbc>
 80020c0:	f385 8811 	msr	BASEPRI, r5
 80020c4:	2001      	movs	r0, #1
 80020c6:	e7ce      	b.n	8002066 <rt_test_008_006_execute.lto_priv.151+0xf6>
 80020c8:	f385 8811 	msr	BASEPRI, r5
 80020cc:	2501      	movs	r5, #1
 80020ce:	e7e5      	b.n	800209c <rt_test_008_006_execute.lto_priv.151+0x12c>
 80020d0:	200013d8 	.word	0x200013d8
 80020d4:	2000122c 	.word	0x2000122c
 80020d8:	08007a9c 	.word	0x08007a9c
 80020dc:	00000000 	.word	0x00000000

080020e0 <rt_test_008_005_execute.lto_priv.149>:
static void rt_test_008_005_execute(void) {
 80020e0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80020e2:	4c2b      	ldr	r4, [pc, #172]	; (8002190 <rt_test_008_005_execute.lto_priv.149+0xb0>)
 80020e4:	2301      	movs	r3, #1
    chEvtAddEvents(5);
 80020e6:	2005      	movs	r0, #5
  test_set_step(1);
 80020e8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80020ea:	f7fe fb71 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 80020ee:	2302      	movs	r3, #2
 80020f0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 80020f2:	f004 fb0d 	bl	8006710 <chEvtWaitAll.constprop.37>
    test_assert(m == 5, "unexpected pending bit");
 80020f6:	f1a0 0005 	sub.w	r0, r0, #5
 80020fa:	fab0 f080 	clz	r0, r0
 80020fe:	4925      	ldr	r1, [pc, #148]	; (8002194 <rt_test_008_005_execute.lto_priv.149+0xb4>)
 8002100:	0940      	lsrs	r0, r0, #5
 8002102:	f000 febd 	bl	8002e80 <_test_assert>
 8002106:	b100      	cbz	r0, 800210a <rt_test_008_005_execute.lto_priv.149+0x2a>
 8002108:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800210a:	f004 fab9 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 800210e:	fab0 f080 	clz	r0, r0
 8002112:	0940      	lsrs	r0, r0, #5
 8002114:	4920      	ldr	r1, [pc, #128]	; (8002198 <rt_test_008_005_execute.lto_priv.149+0xb8>)
 8002116:	f000 feb3 	bl	8002e80 <_test_assert>
 800211a:	2800      	cmp	r0, #0
 800211c:	d1f4      	bne.n	8002108 <rt_test_008_005_execute.lto_priv.149+0x28>
  test_set_step(3);
 800211e:	2303      	movs	r3, #3
    chEvtAddEvents(4);
 8002120:	2004      	movs	r0, #4
  test_set_step(3);
 8002122:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(4);
 8002124:	f7fe fb54 	bl	80007d0 <chEvtAddEvents>
  test_set_step(4);
 8002128:	2304      	movs	r3, #4
 800212a:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800212c:	f000 fb68 	bl	8002800 <test_wait_tick>
  return ch.rlist.current;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <rt_test_008_005_execute.lto_priv.149+0xbc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002132:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <rt_test_008_005_execute.lto_priv.149+0xc0>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8002138:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800213a:	3901      	subs	r1, #1
 800213c:	4819      	ldr	r0, [pc, #100]	; (80021a4 <rt_test_008_005_execute.lto_priv.149+0xc4>)
 800213e:	f004 f987 	bl	8006450 <chThdCreateStatic.constprop.62>
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <rt_test_008_005_execute.lto_priv.149+0xc8>)
  test_set_step(5);
 8002144:	2305      	movs	r3, #5
 8002146:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002148:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAll(5);
 800214a:	f004 fae1 	bl	8006710 <chEvtWaitAll.constprop.37>
    test_assert_time_window(target_time,
 800214e:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAll(5);
 8002152:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 8002154:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 8002158:	f004 feb2 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 800215c:	2800      	cmp	r0, #0
 800215e:	d1d3      	bne.n	8002108 <rt_test_008_005_execute.lto_priv.149+0x28>
    test_assert(m == 5, "event flags error");
 8002160:	f1a4 0005 	sub.w	r0, r4, #5
 8002164:	fab0 f080 	clz	r0, r0
 8002168:	0940      	lsrs	r0, r0, #5
 800216a:	4910      	ldr	r1, [pc, #64]	; (80021ac <rt_test_008_005_execute.lto_priv.149+0xcc>)
 800216c:	f000 fe88 	bl	8002e80 <_test_assert>
 8002170:	2800      	cmp	r0, #0
 8002172:	d1c9      	bne.n	8002108 <rt_test_008_005_execute.lto_priv.149+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8002174:	f004 fa84 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 8002178:	fab0 f080 	clz	r0, r0
 800217c:	0940      	lsrs	r0, r0, #5
 800217e:	4906      	ldr	r1, [pc, #24]	; (8002198 <rt_test_008_005_execute.lto_priv.149+0xb8>)
 8002180:	f000 fe7e 	bl	8002e80 <_test_assert>
 8002184:	2800      	cmp	r0, #0
 8002186:	d1bf      	bne.n	8002108 <rt_test_008_005_execute.lto_priv.149+0x28>
}
 8002188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 800218c:	f000 bb48 	b.w	8002820 <test_wait_threads>
 8002190:	200013d8 	.word	0x200013d8
 8002194:	08007a70 	.word	0x08007a70
 8002198:	08007aac 	.word	0x08007aac
 800219c:	2000122c 	.word	0x2000122c
 80021a0:	080023c1 	.word	0x080023c1
 80021a4:	20000af8 	.word	0x20000af8
 80021a8:	20001160 	.word	0x20001160
 80021ac:	08007a88 	.word	0x08007a88

080021b0 <rt_test_008_004_execute.lto_priv.147>:
static void rt_test_008_004_execute(void) {
 80021b0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80021b2:	4c29      	ldr	r4, [pc, #164]	; (8002258 <rt_test_008_004_execute.lto_priv.147+0xa8>)
 80021b4:	2301      	movs	r3, #1
    chEvtAddEvents(5);
 80021b6:	2005      	movs	r0, #5
  test_set_step(1);
 80021b8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80021ba:	f7fe fb09 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 80021be:	2302      	movs	r3, #2
 80021c0:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80021c2:	f004 fa8d 	bl	80066e0 <chEvtWaitAny.constprop.38>
    test_assert(m == 5, "unexpected pending bit");
 80021c6:	f1a0 0005 	sub.w	r0, r0, #5
 80021ca:	fab0 f080 	clz	r0, r0
 80021ce:	4923      	ldr	r1, [pc, #140]	; (800225c <rt_test_008_004_execute.lto_priv.147+0xac>)
 80021d0:	0940      	lsrs	r0, r0, #5
 80021d2:	f000 fe55 	bl	8002e80 <_test_assert>
 80021d6:	b100      	cbz	r0, 80021da <rt_test_008_004_execute.lto_priv.147+0x2a>
 80021d8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80021da:	f004 fa51 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 80021de:	fab0 f080 	clz	r0, r0
 80021e2:	0940      	lsrs	r0, r0, #5
 80021e4:	491e      	ldr	r1, [pc, #120]	; (8002260 <rt_test_008_004_execute.lto_priv.147+0xb0>)
 80021e6:	f000 fe4b 	bl	8002e80 <_test_assert>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d1f4      	bne.n	80021d8 <rt_test_008_004_execute.lto_priv.147+0x28>
  test_set_step(3);
 80021ee:	2303      	movs	r3, #3
 80021f0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80021f2:	f000 fb05 	bl	8002800 <test_wait_tick>
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <rt_test_008_004_execute.lto_priv.147+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <rt_test_008_004_execute.lto_priv.147+0xb8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80021fe:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002200:	3901      	subs	r1, #1
 8002202:	481a      	ldr	r0, [pc, #104]	; (800226c <rt_test_008_004_execute.lto_priv.147+0xbc>)
 8002204:	f004 f924 	bl	8006450 <chThdCreateStatic.constprop.62>
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <rt_test_008_004_execute.lto_priv.147+0xc0>)
  test_set_step(4);
 800220a:	2304      	movs	r3, #4
 800220c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800220e:	6010      	str	r0, [r2, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8002210:	f004 fa66 	bl	80066e0 <chEvtWaitAny.constprop.38>
    test_assert_time_window(target_time,
 8002214:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitAny(ALL_EVENTS);
 8002218:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 800221a:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800221e:	f004 fe4f 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 8002222:	2800      	cmp	r0, #0
 8002224:	d1d8      	bne.n	80021d8 <rt_test_008_004_execute.lto_priv.147+0x28>
    test_assert(m == 1, "event flag error");
 8002226:	f1a4 0001 	sub.w	r0, r4, #1
 800222a:	fab0 f080 	clz	r0, r0
 800222e:	0940      	lsrs	r0, r0, #5
 8002230:	4910      	ldr	r1, [pc, #64]	; (8002274 <rt_test_008_004_execute.lto_priv.147+0xc4>)
 8002232:	f000 fe25 	bl	8002e80 <_test_assert>
 8002236:	2800      	cmp	r0, #0
 8002238:	d1ce      	bne.n	80021d8 <rt_test_008_004_execute.lto_priv.147+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800223a:	f004 fa21 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 800223e:	fab0 f080 	clz	r0, r0
 8002242:	0940      	lsrs	r0, r0, #5
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <rt_test_008_004_execute.lto_priv.147+0xb0>)
 8002246:	f000 fe1b 	bl	8002e80 <_test_assert>
 800224a:	2800      	cmp	r0, #0
 800224c:	d1c4      	bne.n	80021d8 <rt_test_008_004_execute.lto_priv.147+0x28>
}
 800224e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8002252:	f000 bae5 	b.w	8002820 <test_wait_threads>
 8002256:	bf00      	nop
 8002258:	200013d8 	.word	0x200013d8
 800225c:	08007a70 	.word	0x08007a70
 8002260:	08007aac 	.word	0x08007aac
 8002264:	2000122c 	.word	0x2000122c
 8002268:	080023c1 	.word	0x080023c1
 800226c:	20000af8 	.word	0x20000af8
 8002270:	20001160 	.word	0x20001160
 8002274:	08007a5c 	.word	0x08007a5c
	...

08002280 <rt_test_008_003_execute.lto_priv.145>:
static void rt_test_008_003_execute(void) {
 8002280:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002282:	4c35      	ldr	r4, [pc, #212]	; (8002358 <rt_test_008_003_execute.lto_priv.145+0xd8>)
 8002284:	2301      	movs	r3, #1
    chEvtAddEvents(7);
 8002286:	2007      	movs	r0, #7
  test_set_step(1);
 8002288:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(7);
 800228a:	f7fe faa1 	bl	80007d0 <chEvtAddEvents>
  test_set_step(2);
 800228e:	2302      	movs	r3, #2
 8002290:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002292:	f004 fa05 	bl	80066a0 <chEvtWaitOne.constprop.39>
    test_assert(m == 1, "single event error");
 8002296:	f1a0 0001 	sub.w	r0, r0, #1
 800229a:	fab0 f080 	clz	r0, r0
 800229e:	492f      	ldr	r1, [pc, #188]	; (800235c <rt_test_008_003_execute.lto_priv.145+0xdc>)
 80022a0:	0940      	lsrs	r0, r0, #5
 80022a2:	f000 fded 	bl	8002e80 <_test_assert>
 80022a6:	b100      	cbz	r0, 80022aa <rt_test_008_003_execute.lto_priv.145+0x2a>
 80022a8:	bd38      	pop	{r3, r4, r5, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 80022aa:	f004 f9f9 	bl	80066a0 <chEvtWaitOne.constprop.39>
    test_assert(m == 2, "single event error");
 80022ae:	f1a0 0002 	sub.w	r0, r0, #2
 80022b2:	fab0 f080 	clz	r0, r0
 80022b6:	4929      	ldr	r1, [pc, #164]	; (800235c <rt_test_008_003_execute.lto_priv.145+0xdc>)
 80022b8:	0940      	lsrs	r0, r0, #5
 80022ba:	f000 fde1 	bl	8002e80 <_test_assert>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d1f2      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
    m = chEvtWaitOne(ALL_EVENTS);
 80022c2:	f004 f9ed 	bl	80066a0 <chEvtWaitOne.constprop.39>
    test_assert(m == 4, "single event error");
 80022c6:	f1a0 0004 	sub.w	r0, r0, #4
 80022ca:	fab0 f080 	clz	r0, r0
 80022ce:	4923      	ldr	r1, [pc, #140]	; (800235c <rt_test_008_003_execute.lto_priv.145+0xdc>)
 80022d0:	0940      	lsrs	r0, r0, #5
 80022d2:	f000 fdd5 	bl	8002e80 <_test_assert>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d1e6      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80022da:	f004 f9d1 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 80022de:	fab0 f080 	clz	r0, r0
 80022e2:	0940      	lsrs	r0, r0, #5
 80022e4:	491e      	ldr	r1, [pc, #120]	; (8002360 <rt_test_008_003_execute.lto_priv.145+0xe0>)
 80022e6:	f000 fdcb 	bl	8002e80 <_test_assert>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d1dc      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
  test_set_step(3);
 80022ee:	2303      	movs	r3, #3
 80022f0:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80022f2:	f000 fa85 	bl	8002800 <test_wait_tick>
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <rt_test_008_003_execute.lto_priv.145+0xe4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <rt_test_008_003_execute.lto_priv.145+0xe8>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	6899      	ldr	r1, [r3, #8]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80022fe:	4605      	mov	r5, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002300:	3901      	subs	r1, #1
 8002302:	481a      	ldr	r0, [pc, #104]	; (800236c <rt_test_008_003_execute.lto_priv.145+0xec>)
 8002304:	f004 f8a4 	bl	8006450 <chThdCreateStatic.constprop.62>
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <rt_test_008_003_execute.lto_priv.145+0xf0>)
  test_set_step(4);
 800230a:	2304      	movs	r3, #4
 800230c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800230e:	6010      	str	r0, [r2, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8002310:	f004 f9c6 	bl	80066a0 <chEvtWaitOne.constprop.39>
    test_assert_time_window(target_time,
 8002314:	f505 7102 	add.w	r1, r5, #520	; 0x208
    m = chEvtWaitOne(ALL_EVENTS);
 8002318:	4604      	mov	r4, r0
    test_assert_time_window(target_time,
 800231a:	f505 70fa 	add.w	r0, r5, #500	; 0x1f4
 800231e:	f004 fdcf 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 8002322:	2800      	cmp	r0, #0
 8002324:	d1c0      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
    test_assert(m == 1, "event flag error");
 8002326:	f1a4 0001 	sub.w	r0, r4, #1
 800232a:	fab0 f080 	clz	r0, r0
 800232e:	0940      	lsrs	r0, r0, #5
 8002330:	4910      	ldr	r1, [pc, #64]	; (8002374 <rt_test_008_003_execute.lto_priv.145+0xf4>)
 8002332:	f000 fda5 	bl	8002e80 <_test_assert>
 8002336:	2800      	cmp	r0, #0
 8002338:	d1b6      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800233a:	f004 f9a1 	bl	8006680 <chEvtGetAndClearEvents.constprop.43>
    test_assert(m == 0, "stuck event");
 800233e:	fab0 f080 	clz	r0, r0
 8002342:	0940      	lsrs	r0, r0, #5
 8002344:	4906      	ldr	r1, [pc, #24]	; (8002360 <rt_test_008_003_execute.lto_priv.145+0xe0>)
 8002346:	f000 fd9b 	bl	8002e80 <_test_assert>
 800234a:	2800      	cmp	r0, #0
 800234c:	d1ac      	bne.n	80022a8 <rt_test_008_003_execute.lto_priv.145+0x28>
}
 800234e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_wait_threads();
 8002352:	f000 ba65 	b.w	8002820 <test_wait_threads>
 8002356:	bf00      	nop
 8002358:	200013d8 	.word	0x200013d8
 800235c:	08007a48 	.word	0x08007a48
 8002360:	08007aac 	.word	0x08007aac
 8002364:	2000122c 	.word	0x2000122c
 8002368:	080023c1 	.word	0x080023c1
 800236c:	20000af8 	.word	0x20000af8
 8002370:	20001160 	.word	0x20001160
 8002374:	08007a5c 	.word	0x08007a5c
	...

08002380 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	2520      	movs	r5, #32
 8002384:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 8002388:	2100      	movs	r1, #0
 800238a:	480b      	ldr	r0, [pc, #44]	; (80023b8 <evt_thread7+0x38>)
 800238c:	f7fe fc30 	bl	8000bf0 <chEvtBroadcastFlagsI>
 8002390:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002392:	f7fe fb05 	bl	80009a0 <chSchRescheduleS>
 8002396:	f384 8811 	msr	BASEPRI, r4
  chThdSleepMilliseconds(50);
 800239a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239e:	f7ff f83f 	bl	8001420 <chThdSleep>
 80023a2:	f385 8811 	msr	BASEPRI, r5
  chEvtBroadcastFlagsI(esp, flags);
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <evt_thread7+0x3c>)
 80023a8:	4621      	mov	r1, r4
 80023aa:	f7fe fc21 	bl	8000bf0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80023ae:	f7fe faf7 	bl	80009a0 <chSchRescheduleS>
 80023b2:	f384 8811 	msr	BASEPRI, r4
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
 80023b8:	20000800 	.word	0x20000800
 80023bc:	20000804 	.word	0x20000804

080023c0 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 80023c0:	b510      	push	{r4, lr}
 80023c2:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 80023c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023c8:	f7ff f82a 	bl	8001420 <chThdSleep>
 80023cc:	2320      	movs	r3, #32
 80023ce:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 80023d2:	2101      	movs	r1, #1
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7fe fbf3 	bl	8000bc0 <chEvtSignalI>
  chSchRescheduleS();
 80023da:	f7fe fae1 	bl	80009a0 <chSchRescheduleS>
 80023de:	2300      	movs	r3, #0
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	bd10      	pop	{r4, pc}
 80023e6:	bf00      	nop
	...

080023f0 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80023f0:	2043      	movs	r0, #67	; 0x43
 80023f2:	f000 ba45 	b.w	8002880 <test_emit_token>
 80023f6:	bf00      	nop
	...

08002400 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8002400:	2042      	movs	r0, #66	; 0x42
 8002402:	f000 ba3d 	b.w	8002880 <test_emit_token>
 8002406:	bf00      	nop
	...

08002410 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8002410:	2041      	movs	r0, #65	; 0x41
 8002412:	f000 ba35 	b.w	8002880 <test_emit_token>
 8002416:	bf00      	nop
	...

08002420 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8002420:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8002422:	2141      	movs	r1, #65	; 0x41
static THD_FUNCTION(msg_thread1, p) {
 8002424:	4604      	mov	r4, r0
  chMsgSend(p, 'A');
 8002426:	f7fe fbab 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'B');
 800242a:	4620      	mov	r0, r4
 800242c:	2142      	movs	r1, #66	; 0x42
 800242e:	f7fe fba7 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'C');
 8002432:	4620      	mov	r0, r4
 8002434:	2143      	movs	r1, #67	; 0x43
 8002436:	f7fe fba3 	bl	8000b80 <chMsgSend>
  chMsgSend(p, 'D');
 800243a:	4620      	mov	r0, r4
 800243c:	2144      	movs	r1, #68	; 0x44
}
 800243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8002442:	f7fe bb9d 	b.w	8000b80 <chMsgSend>
 8002446:	bf00      	nop
	...

08002450 <rt_test_007_001_execute.lto_priv.140>:
 * - [7.1.1] Starting the messenger thread.
 * - [7.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_007_001_execute(void) {
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <rt_test_007_001_execute.lto_priv.140+0x54>)
  thread_t *tp;
  msg_t msg;

  /* [7.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8002454:	4c14      	ldr	r4, [pc, #80]	; (80024a8 <rt_test_007_001_execute.lto_priv.140+0x58>)
 8002456:	699b      	ldr	r3, [r3, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8002458:	4a14      	ldr	r2, [pc, #80]	; (80024ac <rt_test_007_001_execute.lto_priv.140+0x5c>)
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	4814      	ldr	r0, [pc, #80]	; (80024b0 <rt_test_007_001_execute.lto_priv.140+0x60>)
 800245e:	3101      	adds	r1, #1
  test_set_step(1);
 8002460:	2501      	movs	r5, #1
 8002462:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8002464:	f003 fff4 	bl	8006450 <chThdCreateStatic.constprop.62>
 8002468:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <rt_test_007_001_execute.lto_priv.140+0x64>)
                                   msg_thread1, chThdGetSelfX());
  }

  /* [7.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800246a:	2302      	movs	r3, #2
 800246c:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800246e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8002470:	2404      	movs	r4, #4
 8002472:	2720      	movs	r7, #32
 8002474:	2600      	movs	r6, #0
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
 8002476:	f7fe fb23 	bl	8000ac0 <chMsgWait>
 800247a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800247c:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe fab5 	bl	80009f0 <chSchWakeupS>
 8002486:	f386 8811 	msr	BASEPRI, r6
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
      test_emit_token(msg);
 800248a:	b2e8      	uxtb	r0, r5
 800248c:	f000 f9f8 	bl	8002880 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8002490:	3c01      	subs	r4, #1
 8002492:	d1f0      	bne.n	8002476 <rt_test_007_001_execute.lto_priv.140+0x26>
    }
    test_wait_threads();
 8002494:	f000 f9c4 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <rt_test_007_001_execute.lto_priv.140+0x68>)
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <rt_test_007_001_execute.lto_priv.140+0x6c>)
  }
}
 800249c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80024a0:	f000 bcc6 	b.w	8002e30 <_test_assert_sequence>
 80024a4:	2000122c 	.word	0x2000122c
 80024a8:	200013d8 	.word	0x200013d8
 80024ac:	08002421 	.word	0x08002421
 80024b0:	20000af8 	.word	0x20000af8
 80024b4:	20001160 	.word	0x20001160
 80024b8:	08007a30 	.word	0x08007a30
 80024bc:	08007a0c 	.word	0x08007a0c

080024c0 <rt_test_006_009_execute.lto_priv.139>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void rt_test_006_009_execute(void) {
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <rt_test_006_009_execute.lto_priv.139+0x74>)

  /* [6.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80024c4:	4e1c      	ldr	r6, [pc, #112]	; (8002538 <rt_test_006_009_execute.lto_priv.139+0x78>)
  return chThdGetSelfX()->prio;
 80024c6:	699b      	ldr	r3, [r3, #24]
  test_set_step(2);
 80024c8:	4c1c      	ldr	r4, [pc, #112]	; (800253c <rt_test_006_009_execute.lto_priv.139+0x7c>)
 80024ca:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <rt_test_006_009_execute.lto_priv.139+0x80>)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <rt_test_006_009_execute.lto_priv.139+0x84>)
 80024d0:	4d1d      	ldr	r5, [pc, #116]	; (8002548 <rt_test_006_009_execute.lto_priv.139+0x88>)
 80024d2:	1c79      	adds	r1, r7, #1
  test_set_step(2);
 80024d4:	f04f 0e02 	mov.w	lr, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80024d8:	4630      	mov	r0, r6
  test_set_step(2);
 80024da:	f8c4 e000 	str.w	lr, [r4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80024de:	f003 ffb7 	bl	8006450 <chThdCreateStatic.constprop.62>
  }

  /* [6.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 80024e2:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 80024e6:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80024e8:	1cb9      	adds	r1, r7, #2
 80024ea:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <rt_test_006_009_execute.lto_priv.139+0x8c>)
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <rt_test_006_009_execute.lto_priv.139+0x90>)
  test_set_step(3);
 80024f2:	f8c4 e000 	str.w	lr, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80024f6:	f003 ffab 	bl	8006450 <chThdCreateStatic.constprop.62>

  /* [6.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 80024fa:	1cf9      	adds	r1, r7, #3
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <rt_test_006_009_execute.lto_priv.139+0x94>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 80024fe:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8002500:	2704      	movs	r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002502:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <rt_test_006_009_execute.lto_priv.139+0x98>)
  test_set_step(4);
 8002508:	6027      	str	r7, [r4, #0]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 800250a:	f003 ffa1 	bl	8006450 <chThdCreateStatic.constprop.62>
  }

  /* [6.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 800250e:	2305      	movs	r3, #5
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8002510:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 8002512:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8002514:	f004 f884 	bl	8006620 <chCondSignal.constprop.51>
  }

  /* [6.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8002518:	2306      	movs	r3, #6
 800251a:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 800251c:	f004 f880 	bl	8006620 <chCondSignal.constprop.51>
  }

  /* [6.9.7] Checking the order of operations.*/
  test_set_step(7);
 8002520:	2307      	movs	r3, #7
 8002522:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8002524:	f000 f97c 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8002528:	490c      	ldr	r1, [pc, #48]	; (800255c <rt_test_006_009_execute.lto_priv.139+0x9c>)
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <rt_test_006_009_execute.lto_priv.139+0xa0>)
  }
}
 800252c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8002530:	f000 bc7e 	b.w	8002e30 <_test_assert_sequence>
 8002534:	2000122c 	.word	0x2000122c
 8002538:	20000af8 	.word	0x20000af8
 800253c:	200013d8 	.word	0x200013d8
 8002540:	08005211 	.word	0x08005211
 8002544:	08007ac8 	.word	0x08007ac8
 8002548:	20001160 	.word	0x20001160
 800254c:	08007af8 	.word	0x08007af8
 8002550:	080052a1 	.word	0x080052a1
 8002554:	080051f1 	.word	0x080051f1
 8002558:	08007aec 	.word	0x08007aec
 800255c:	08007a30 	.word	0x08007a30
 8002560:	08007a44 	.word	0x08007a44
	...

08002570 <rt_test_006_008_execute.lto_priv.137>:
static void rt_test_006_008_execute(void) {
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <rt_test_006_008_execute.lto_priv.137+0x9c>)
  test_set_step(1);
 8002574:	4e26      	ldr	r6, [pc, #152]	; (8002610 <rt_test_006_008_execute.lto_priv.137+0xa0>)
  return chThdGetSelfX()->prio;
 8002576:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002578:	4826      	ldr	r0, [pc, #152]	; (8002614 <rt_test_006_008_execute.lto_priv.137+0xa4>)
 800257a:	6895      	ldr	r5, [r2, #8]
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <rt_test_006_008_execute.lto_priv.137+0xa8>)
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <rt_test_006_008_execute.lto_priv.137+0xac>)
 8002580:	4c27      	ldr	r4, [pc, #156]	; (8002620 <rt_test_006_008_execute.lto_priv.137+0xb0>)
 8002582:	1c69      	adds	r1, r5, #1
  test_set_step(1);
 8002584:	2701      	movs	r7, #1
 8002586:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002588:	f003 ff62 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800258c:	1ca9      	adds	r1, r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800258e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <rt_test_006_008_execute.lto_priv.137+0xb4>)
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <rt_test_006_008_execute.lto_priv.137+0xac>)
 8002594:	4824      	ldr	r0, [pc, #144]	; (8002628 <rt_test_006_008_execute.lto_priv.137+0xb8>)
 8002596:	f003 ff5b 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800259a:	1ce9      	adds	r1, r5, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800259c:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <rt_test_006_008_execute.lto_priv.137+0xbc>)
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <rt_test_006_008_execute.lto_priv.137+0xac>)
 80025a2:	4823      	ldr	r0, [pc, #140]	; (8002630 <rt_test_006_008_execute.lto_priv.137+0xc0>)
 80025a4:	f003 ff54 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80025a8:	1d29      	adds	r1, r5, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80025aa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <rt_test_006_008_execute.lto_priv.137+0xc4>)
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <rt_test_006_008_execute.lto_priv.137+0xac>)
 80025b0:	4821      	ldr	r0, [pc, #132]	; (8002638 <rt_test_006_008_execute.lto_priv.137+0xc8>)
 80025b2:	f003 ff4d 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80025b6:	1d69      	adds	r1, r5, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80025b8:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <rt_test_006_008_execute.lto_priv.137+0xcc>)
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <rt_test_006_008_execute.lto_priv.137+0xac>)
 80025be:	4820      	ldr	r0, [pc, #128]	; (8002640 <rt_test_006_008_execute.lto_priv.137+0xd0>)
 80025c0:	f003 ff46 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80025c4:	2302      	movs	r3, #2
 80025c6:	6033      	str	r3, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80025c8:	6120      	str	r0, [r4, #16]
 80025ca:	2320      	movs	r3, #32
 80025cc:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 80025d0:	4c1c      	ldr	r4, [pc, #112]	; (8002644 <rt_test_006_008_execute.lto_priv.137+0xd4>)
 80025d2:	6823      	ldr	r3, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 80025d4:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80025d6:	bf18      	it	ne
 80025d8:	f06f 0501 	mvnne.w	r5, #1
  while (queue_notempty(&cp->queue)) {
 80025dc:	d009      	beq.n	80025f2 <rt_test_006_008_execute.lto_priv.137+0x82>
  tqp->next             = tp->queue.next;
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	6022      	str	r2, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 80025e2:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 80025e4:	6054      	str	r4, [r2, #4]
 80025e6:	f7fe fab3 	bl	8000b50 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	6245      	str	r5, [r0, #36]	; 0x24
  while (queue_notempty(&cp->queue)) {
 80025ee:	42a3      	cmp	r3, r4
 80025f0:	d1f5      	bne.n	80025de <rt_test_006_008_execute.lto_priv.137+0x6e>
  chSchRescheduleS();
 80025f2:	f7fe f9d5 	bl	80009a0 <chSchRescheduleS>
 80025f6:	2300      	movs	r3, #0
 80025f8:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80025fc:	f000 f910 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8002600:	4911      	ldr	r1, [pc, #68]	; (8002648 <rt_test_006_008_execute.lto_priv.137+0xd8>)
 8002602:	4812      	ldr	r0, [pc, #72]	; (800264c <rt_test_006_008_execute.lto_priv.137+0xdc>)
}
 8002604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8002608:	f000 bc12 	b.w	8002e30 <_test_assert_sequence>
 800260c:	2000122c 	.word	0x2000122c
 8002610:	200013d8 	.word	0x200013d8
 8002614:	20000af8 	.word	0x20000af8
 8002618:	08007a08 	.word	0x08007a08
 800261c:	080052a1 	.word	0x080052a1
 8002620:	20001160 	.word	0x20001160
 8002624:	08007a00 	.word	0x08007a00
 8002628:	20000c40 	.word	0x20000c40
 800262c:	08007af8 	.word	0x08007af8
 8002630:	20000d88 	.word	0x20000d88
 8002634:	08007aec 	.word	0x08007aec
 8002638:	20000ed0 	.word	0x20000ed0
 800263c:	08007ac8 	.word	0x08007ac8
 8002640:	20001018 	.word	0x20001018
 8002644:	20000830 	.word	0x20000830
 8002648:	08007a30 	.word	0x08007a30
 800264c:	08007a04 	.word	0x08007a04

08002650 <rt_test_006_007_execute.lto_priv.135>:
  return ch.rlist.current;
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <rt_test_006_007_execute.lto_priv.135+0xa4>)
  return chThdGetSelfX()->prio;
 8002652:	699b      	ldr	r3, [r3, #24]
static void rt_test_006_007_execute(void) {
 8002654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002658:	689f      	ldr	r7, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800265a:	4e27      	ldr	r6, [pc, #156]	; (80026f8 <rt_test_006_007_execute.lto_priv.135+0xa8>)
 800265c:	4d27      	ldr	r5, [pc, #156]	; (80026fc <rt_test_006_007_execute.lto_priv.135+0xac>)
  test_set_step(1);
 800265e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002720 <rt_test_006_007_execute.lto_priv.135+0xd0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <rt_test_006_007_execute.lto_priv.135+0xb0>)
 8002664:	4c27      	ldr	r4, [pc, #156]	; (8002704 <rt_test_006_007_execute.lto_priv.135+0xb4>)
  test_set_step(1);
 8002666:	f04f 0e01 	mov.w	lr, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800266a:	1c79      	adds	r1, r7, #1
 800266c:	4632      	mov	r2, r6
 800266e:	4628      	mov	r0, r5
  test_set_step(1);
 8002670:	f8c8 e000 	str.w	lr, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8002674:	f003 feec 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8002678:	1cb9      	adds	r1, r7, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800267a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800267c:	4632      	mov	r2, r6
 800267e:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8002682:	4b21      	ldr	r3, [pc, #132]	; (8002708 <rt_test_006_007_execute.lto_priv.135+0xb8>)
 8002684:	f003 fee4 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8002688:	1cf9      	adds	r1, r7, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800268a:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800268c:	4632      	mov	r2, r6
 800268e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <rt_test_006_007_execute.lto_priv.135+0xbc>)
 8002694:	f003 fedc 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8002698:	1d39      	adds	r1, r7, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 800269a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 800269c:	4632      	mov	r2, r6
 800269e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <rt_test_006_007_execute.lto_priv.135+0xc0>)
 80026a4:	f003 fed4 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80026a8:	1d79      	adds	r1, r7, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80026aa:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80026ac:	4632      	mov	r2, r6
 80026ae:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <rt_test_006_007_execute.lto_priv.135+0xc4>)
 80026b4:	f003 fecc 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c8 3000 	str.w	r3, [r8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80026be:	6120      	str	r0, [r4, #16]
 80026c0:	2320      	movs	r3, #32
 80026c2:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 80026c6:	f003 ffc3 	bl	8006650 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80026ca:	f003 ffc1 	bl	8006650 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80026ce:	f003 ffbf 	bl	8006650 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80026d2:	f003 ffbd 	bl	8006650 <chCondSignalI.constprop.50>
    chCondSignalI(&c1);
 80026d6:	f003 ffbb 	bl	8006650 <chCondSignalI.constprop.50>
    chSchRescheduleS();
 80026da:	f7fe f961 	bl	80009a0 <chSchRescheduleS>
 80026de:	2300      	movs	r3, #0
 80026e0:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80026e4:	f000 f89c 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80026e8:	490b      	ldr	r1, [pc, #44]	; (8002718 <rt_test_006_007_execute.lto_priv.135+0xc8>)
 80026ea:	480c      	ldr	r0, [pc, #48]	; (800271c <rt_test_006_007_execute.lto_priv.135+0xcc>)
}
 80026ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80026f0:	f000 bb9e 	b.w	8002e30 <_test_assert_sequence>
 80026f4:	2000122c 	.word	0x2000122c
 80026f8:	080052a1 	.word	0x080052a1
 80026fc:	20000af8 	.word	0x20000af8
 8002700:	08007a08 	.word	0x08007a08
 8002704:	20001160 	.word	0x20001160
 8002708:	08007a00 	.word	0x08007a00
 800270c:	08007af8 	.word	0x08007af8
 8002710:	08007aec 	.word	0x08007aec
 8002714:	08007ac8 	.word	0x08007ac8
 8002718:	08007a30 	.word	0x08007a30
 800271c:	08007a04 	.word	0x08007a04
 8002720:	200013d8 	.word	0x200013d8
	...

08002730 <test_printn.part.0>:
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    streamPut(test_chp, '0');
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <test_printn.part.0+0xc>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	6803      	ldr	r3, [r0, #0]
 8002736:	2130      	movs	r1, #48	; 0x30
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4718      	bx	r3
 800273c:	200013d4 	.word	0x200013d4

08002740 <chCoreAllocAlignedI.lto_priv.87>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8002740:	b4f0      	push	{r4, r5, r6, r7}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002742:	4e0b      	ldr	r6, [pc, #44]	; (8002770 <chCoreAllocAlignedI.lto_priv.87+0x30>)
 8002744:	6837      	ldr	r7, [r6, #0]
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002746:	6872      	ldr	r2, [r6, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002748:	1e7c      	subs	r4, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
 800274a:	1e4b      	subs	r3, r1, #1
 800274c:	424d      	negs	r5, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 800274e:	440c      	add	r4, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002750:	1819      	adds	r1, r3, r0
 8002752:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002754:	ea04 0005 	and.w	r0, r4, r5
  next = p + size;
 8002758:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 800275a:	4291      	cmp	r1, r2
 800275c:	d804      	bhi.n	8002768 <chCoreAllocAlignedI.lto_priv.87+0x28>
 800275e:	428f      	cmp	r7, r1
 8002760:	d802      	bhi.n	8002768 <chCoreAllocAlignedI.lto_priv.87+0x28>
  ch_memcore.nextmem = next;
 8002762:	6031      	str	r1, [r6, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8002764:	bcf0      	pop	{r4, r5, r6, r7}
 8002766:	4770      	bx	lr
    return NULL;
 8002768:	2000      	movs	r0, #0
 800276a:	bcf0      	pop	{r4, r5, r6, r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000968 	.word	0x20000968
	...

08002780 <dyn_release_object_heap.part.3>:
                                      dyn_list_t *dlp) {
  dyn_element_t *prev = (dyn_element_t *)dlp;

  /* Scanning the list.*/
  while (prev->next != (dyn_element_t *)dlp) {
    if (prev->next == element) {
 8002780:	460a      	mov	r2, r1
 8002782:	e002      	b.n	800278a <dyn_release_object_heap.part.3+0xa>
 8002784:	4298      	cmp	r0, r3
 8002786:	d006      	beq.n	8002796 <dyn_release_object_heap.part.3+0x16>
 8002788:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	428b      	cmp	r3, r1
 800278e:	d1f9      	bne.n	8002784 <dyn_release_object_heap.part.3+0x4>

    /* Next element in the list.*/
    prev = prev->next;
  }

  return NULL;
 8002790:	2000      	movs	r0, #0


  dep->refs--;
  if (dep->refs == (ucnt_t)0) {
    dep = dyn_list_unlink(dep, dlp);
    chHeapFree((void *)dep);
 8002792:	f7fe bb1d 	b.w	8000dd0 <chHeapFree>
      prev->next = element->next;
 8002796:	6803      	ldr	r3, [r0, #0]
 8002798:	6013      	str	r3, [r2, #0]
    chHeapFree((void *)dep);
 800279a:	f7fe bb19 	b.w	8000dd0 <chHeapFree>
 800279e:	bf00      	nop

080027a0 <test_printn>:
  if (!n)
 80027a0:	b320      	cbz	r0, 80027ec <test_printn+0x4c>
void test_printn(uint32_t n) {
 80027a2:	b570      	push	{r4, r5, r6, lr}
 80027a4:	b084      	sub	sp, #16
  if (!n)
 80027a6:	466d      	mov	r5, sp
 80027a8:	466c      	mov	r4, sp
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 80027aa:	4e11      	ldr	r6, [pc, #68]	; (80027f0 <test_printn+0x50>)
 80027ac:	e000      	b.n	80027b0 <test_printn+0x10>
    while (n)
 80027ae:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 80027b0:	fba6 2300 	umull	r2, r3, r6, r0
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80027ba:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80027be:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80027c2:	4622      	mov	r2, r4
 80027c4:	b2c9      	uxtb	r1, r1
 80027c6:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 80027ca:	4618      	mov	r0, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ee      	bne.n	80027ae <test_printn+0xe>
    while (p > buf)
 80027d0:	42aa      	cmp	r2, r5
 80027d2:	d909      	bls.n	80027e8 <test_printn+0x48>
 80027d4:	4e07      	ldr	r6, [pc, #28]	; (80027f4 <test_printn+0x54>)
 80027d6:	e001      	b.n	80027dc <test_printn+0x3c>
 80027d8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      streamPut(test_chp, *--p);
 80027dc:	6830      	ldr	r0, [r6, #0]
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4798      	blx	r3
    while (p > buf)
 80027e4:	42ac      	cmp	r4, r5
 80027e6:	d1f7      	bne.n	80027d8 <test_printn+0x38>
  }
}
 80027e8:	b004      	add	sp, #16
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f7ff bfa0 	b.w	8002730 <test_printn.part.0>
 80027f0:	cccccccd 	.word	0xcccccccd
 80027f4:	200013d4 	.word	0x200013d4
	...

08002800 <test_wait_tick>:
}

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8002800:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f7fe fe0c 	bl	8001420 <chThdSleep>
 8002808:	2320      	movs	r3, #32
 800280a:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 800280e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002812:	2300      	movs	r3, #0
 8002814:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8002816:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800281a:	bd08      	pop	{r3, pc}
 800281c:	0000      	movs	r0, r0
	...

08002820 <test_wait_threads>:
void test_wait_threads(void) {
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	4c06      	ldr	r4, [pc, #24]	; (800283c <test_wait_threads+0x1c>)
      threads[i] = NULL;
 8002824:	2600      	movs	r6, #0
 8002826:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	b110      	cbz	r0, 8002834 <test_wait_threads+0x14>
      chThdWait(threads[i]);
 800282e:	f7fe fb57 	bl	8000ee0 <chThdWait>
      threads[i] = NULL;
 8002832:	6026      	str	r6, [r4, #0]
 8002834:	3404      	adds	r4, #4
  for (i = 0; i < MAX_THREADS; i++)
 8002836:	42ac      	cmp	r4, r5
 8002838:	d1f7      	bne.n	800282a <test_wait_threads+0xa>
}
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	20001160 	.word	0x20001160

08002840 <test_terminate_threads>:
void test_terminate_threads(void) {
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <test_terminate_threads+0x30>)
 8002842:	b430      	push	{r4, r5}
 8002844:	f103 0014 	add.w	r0, r3, #20
 8002848:	2520      	movs	r5, #32
 800284a:	2400      	movs	r4, #0
    if (threads[i])
 800284c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002850:	b14a      	cbz	r2, 8002866 <test_terminate_threads+0x26>
 8002852:	f385 8811 	msr	BASEPRI, r5
  tp->flags |= CH_FLAG_TERMINATE;
 8002856:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800285a:	f041 0104 	orr.w	r1, r1, #4
 800285e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8002862:	f384 8811 	msr	BASEPRI, r4
  for (i = 0; i < MAX_THREADS; i++)
 8002866:	4283      	cmp	r3, r0
 8002868:	d1f0      	bne.n	800284c <test_terminate_threads+0xc>
}
 800286a:	bc30      	pop	{r4, r5}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20001160 	.word	0x20001160
	...

08002880 <test_emit_token>:
 8002880:	2320      	movs	r3, #32
 8002882:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_MAX_TOKENS])
 8002886:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <test_emit_token+0x20>)
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <test_emit_token+0x24>)
 800288a:	6813      	ldr	r3, [r2, #0]
 800288c:	428b      	cmp	r3, r1
 800288e:	d202      	bcs.n	8002896 <test_emit_token+0x16>
    *test_tokp++ = token;
 8002890:	1c59      	adds	r1, r3, #1
 8002892:	6011      	str	r1, [r2, #0]
 8002894:	7018      	strb	r0, [r3, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200013ec 	.word	0x200013ec
 80028a4:	200013ec 	.word	0x200013ec
	...

080028b0 <test_println>:
void test_println(const char *msgp) {
 80028b0:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 80028b2:	7801      	ldrb	r1, [r0, #0]
 80028b4:	b189      	cbz	r1, 80028da <test_println+0x2a>
 80028b6:	4d0a      	ldr	r5, [pc, #40]	; (80028e0 <test_println+0x30>)
 80028b8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 80028ba:	6828      	ldr	r0, [r5, #0]
 80028bc:	6803      	ldr	r3, [r0, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4798      	blx	r3
  while (*msgp)
 80028c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d1f7      	bne.n	80028ba <test_println+0xa>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80028ca:	6828      	ldr	r0, [r5, #0]
 80028cc:	4905      	ldr	r1, [pc, #20]	; (80028e4 <test_println+0x34>)
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	685b      	ldr	r3, [r3, #4]
}
 80028d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80028d8:	4718      	bx	r3
 80028da:	4d01      	ldr	r5, [pc, #4]	; (80028e0 <test_println+0x30>)
 80028dc:	e7f5      	b.n	80028ca <test_println+0x1a>
 80028de:	bf00      	nop
 80028e0:	200013d4 	.word	0x200013d4
 80028e4:	08008598 	.word	0x08008598
	...

080028f0 <test_print>:
  while (*msgp)
 80028f0:	7801      	ldrb	r1, [r0, #0]
 80028f2:	b159      	cbz	r1, 800290c <test_print+0x1c>
void test_print(const char *msgp) {
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4d06      	ldr	r5, [pc, #24]	; (8002910 <test_print+0x20>)
 80028f8:	4604      	mov	r4, r0
    streamPut(test_chp, *msgp++);
 80028fa:	6828      	ldr	r0, [r5, #0]
 80028fc:	6803      	ldr	r3, [r0, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4798      	blx	r3
  while (*msgp)
 8002902:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002906:	2900      	cmp	r1, #0
 8002908:	d1f7      	bne.n	80028fa <test_print+0xa>
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200013d4 	.word	0x200013d4
	...

08002920 <rt_test_001_003_execute.lto_priv.102>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8002920:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8002922:	4bc3      	ldr	r3, [pc, #780]	; (8002c30 <rt_test_001_003_execute.lto_priv.102+0x310>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8002924:	4cc3      	ldr	r4, [pc, #780]	; (8002c34 <rt_test_001_003_execute.lto_priv.102+0x314>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8002926:	48c4      	ldr	r0, [pc, #784]	; (8002c38 <rt_test_001_003_execute.lto_priv.102+0x318>)
  test_set_step(1);
 8002928:	2501      	movs	r5, #1
 800292a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 800292c:	f7ff ffe0 	bl	80028f0 <test_print>
    test_printn(CH_CFG_ST_RESOLUTION);
 8002930:	2020      	movs	r0, #32
 8002932:	f7ff ff35 	bl	80027a0 <test_printn>
    test_println("");
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff ffba 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 800293c:	48bf      	ldr	r0, [pc, #764]	; (8002c3c <rt_test_001_003_execute.lto_priv.102+0x31c>)
 800293e:	f7ff ffd7 	bl	80028f0 <test_print>
    test_printn(CH_CFG_ST_FREQUENCY);
 8002942:	f242 7010 	movw	r0, #10000	; 0x2710
 8002946:	f7ff ff2b 	bl	80027a0 <test_printn>
    test_println("");
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff ffb0 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8002950:	48bb      	ldr	r0, [pc, #748]	; (8002c40 <rt_test_001_003_execute.lto_priv.102+0x320>)
 8002952:	f7ff ffcd 	bl	80028f0 <test_print>
    test_printn(CH_CFG_INTERVALS_SIZE);
 8002956:	2020      	movs	r0, #32
 8002958:	f7ff ff22 	bl	80027a0 <test_printn>
    test_println("");
 800295c:	4620      	mov	r0, r4
 800295e:	f7ff ffa7 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8002962:	48b8      	ldr	r0, [pc, #736]	; (8002c44 <rt_test_001_003_execute.lto_priv.102+0x324>)
 8002964:	f7ff ffc4 	bl	80028f0 <test_print>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
 8002968:	2020      	movs	r0, #32
 800296a:	f7ff ff19 	bl	80027a0 <test_printn>
    test_println("");
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ff9e 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8002974:	48b4      	ldr	r0, [pc, #720]	; (8002c48 <rt_test_001_003_execute.lto_priv.102+0x328>)
 8002976:	f7ff ffbb 	bl	80028f0 <test_print>
    test_printn(CH_CFG_ST_TIMEDELTA);
 800297a:	2002      	movs	r0, #2
 800297c:	f7ff ff10 	bl	80027a0 <test_printn>
    test_println("");
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff ff95 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8002986:	48b1      	ldr	r0, [pc, #708]	; (8002c4c <rt_test_001_003_execute.lto_priv.102+0x32c>)
 8002988:	f7ff ffb2 	bl	80028f0 <test_print>
 800298c:	f7ff fed0 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_TIME_QUANTUM);
    test_println("");
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff8d 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8002996:	48ae      	ldr	r0, [pc, #696]	; (8002c50 <rt_test_001_003_execute.lto_priv.102+0x330>)
 8002998:	f7ff ffaa 	bl	80028f0 <test_print>
 800299c:	f7ff fec8 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_MEMCORE_SIZE);
    test_println("");
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7ff ff85 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 80029a6:	48ab      	ldr	r0, [pc, #684]	; (8002c54 <rt_test_001_003_execute.lto_priv.102+0x334>)
 80029a8:	f7ff ffa2 	bl	80028f0 <test_print>
 80029ac:	f7ff fec0 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_NO_IDLE_THREAD);
    test_println("");
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff7d 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 80029b6:	48a8      	ldr	r0, [pc, #672]	; (8002c58 <rt_test_001_003_execute.lto_priv.102+0x338>)
 80029b8:	f7ff ff9a 	bl	80028f0 <test_print>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
 80029bc:	4628      	mov	r0, r5
 80029be:	f7ff feef 	bl	80027a0 <test_printn>
    test_println("");
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ff74 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 80029c8:	48a4      	ldr	r0, [pc, #656]	; (8002c5c <rt_test_001_003_execute.lto_priv.102+0x33c>)
 80029ca:	f7ff ff91 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_TM);
 80029ce:	4628      	mov	r0, r5
 80029d0:	f7ff fee6 	bl	80027a0 <test_printn>
    test_println("");
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff ff6b 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 80029da:	48a1      	ldr	r0, [pc, #644]	; (8002c60 <rt_test_001_003_execute.lto_priv.102+0x340>)
 80029dc:	f7ff ff88 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_REGISTRY);
 80029e0:	4628      	mov	r0, r5
 80029e2:	f7ff fedd 	bl	80027a0 <test_printn>
    test_println("");
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff ff62 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 80029ec:	489d      	ldr	r0, [pc, #628]	; (8002c64 <rt_test_001_003_execute.lto_priv.102+0x344>)
 80029ee:	f7ff ff7f 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_WAITEXIT);
 80029f2:	4628      	mov	r0, r5
 80029f4:	f7ff fed4 	bl	80027a0 <test_printn>
    test_println("");
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff ff59 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 80029fe:	489a      	ldr	r0, [pc, #616]	; (8002c68 <rt_test_001_003_execute.lto_priv.102+0x348>)
 8002a00:	f7ff ff76 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES);
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7ff fecb 	bl	80027a0 <test_printn>
    test_println("");
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7ff ff50 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRI:          ");
 8002a10:	4896      	ldr	r0, [pc, #600]	; (8002c6c <rt_test_001_003_execute.lto_priv.102+0x34c>)
 8002a12:	f7ff ff6d 	bl	80028f0 <test_print>
 8002a16:	f7ff fe8b 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
    test_println("");
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f7ff ff48 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8002a20:	4893      	ldr	r0, [pc, #588]	; (8002c70 <rt_test_001_003_execute.lto_priv.102+0x350>)
 8002a22:	f7ff ff65 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_MUTEXES);
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7ff feba 	bl	80027a0 <test_printn>
    test_println("");
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff ff3f 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURS:          ");
 8002a32:	4890      	ldr	r0, [pc, #576]	; (8002c74 <rt_test_001_003_execute.lto_priv.102+0x354>)
 8002a34:	f7ff ff5c 	bl	80028f0 <test_print>
 8002a38:	f7ff fe7a 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
    test_println("");   
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff ff37 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8002a42:	488d      	ldr	r0, [pc, #564]	; (8002c78 <rt_test_001_003_execute.lto_priv.102+0x358>)
 8002a44:	f7ff ff54 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_CONDVARS);
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f7ff fea9 	bl	80027a0 <test_printn>
    test_println("");
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7ff ff2e 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEO:          ");
 8002a54:	4889      	ldr	r0, [pc, #548]	; (8002c7c <rt_test_001_003_execute.lto_priv.102+0x35c>)
 8002a56:	f7ff ff4b 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7ff fea0 	bl	80027a0 <test_printn>
    test_println("");
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff ff25 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8002a66:	4886      	ldr	r0, [pc, #536]	; (8002c80 <rt_test_001_003_execute.lto_priv.102+0x360>)
 8002a68:	f7ff ff42 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_EVENTS);
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f7ff fe97 	bl	80027a0 <test_printn>
    test_println("");
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ff1c 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8002a78:	4882      	ldr	r0, [pc, #520]	; (8002c84 <rt_test_001_003_execute.lto_priv.102+0x364>)
 8002a7a:	f7ff ff39 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f7ff fe8e 	bl	80027a0 <test_printn>
    test_println("");
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff ff13 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8002a8a:	487f      	ldr	r0, [pc, #508]	; (8002c88 <rt_test_001_003_execute.lto_priv.102+0x368>)
 8002a8c:	f7ff ff30 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_MESSAGES);
 8002a90:	4628      	mov	r0, r5
 8002a92:	f7ff fe85 	bl	80027a0 <test_printn>
    test_println("");
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ff0a 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRI:            ");
 8002a9c:	487b      	ldr	r0, [pc, #492]	; (8002c8c <rt_test_001_003_execute.lto_priv.102+0x36c>)
 8002a9e:	f7ff ff27 	bl	80028f0 <test_print>
 8002aa2:	f7ff fe45 	bl	8002730 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
    test_println("");
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7ff ff02 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 8002aac:	4878      	ldr	r0, [pc, #480]	; (8002c90 <rt_test_001_003_execute.lto_priv.102+0x370>)
 8002aae:	f7ff ff1f 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_MAILBOXES);
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7ff fe74 	bl	80027a0 <test_printn>
    test_println("");
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fef9 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8002abe:	4875      	ldr	r0, [pc, #468]	; (8002c94 <rt_test_001_003_execute.lto_priv.102+0x374>)
 8002ac0:	f7ff ff16 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_MEMCORE);
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7ff fe6b 	bl	80027a0 <test_printn>
    test_println("");
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7ff fef0 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8002ad0:	4871      	ldr	r0, [pc, #452]	; (8002c98 <rt_test_001_003_execute.lto_priv.102+0x378>)
 8002ad2:	f7ff ff0d 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_HEAP);
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7ff fe62 	bl	80027a0 <test_printn>
    test_println("");
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fee7 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8002ae2:	486e      	ldr	r0, [pc, #440]	; (8002c9c <rt_test_001_003_execute.lto_priv.102+0x37c>)
 8002ae4:	f7ff ff04 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_MEMPOOLS);
 8002ae8:	4628      	mov	r0, r5
 8002aea:	f7ff fe59 	bl	80027a0 <test_printn>
    test_println("");
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7ff fede 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8002af4:	486a      	ldr	r0, [pc, #424]	; (8002ca0 <rt_test_001_003_execute.lto_priv.102+0x380>)
 8002af6:	f7ff fefb 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
 8002afa:	4628      	mov	r0, r5
 8002afc:	f7ff fe50 	bl	80027a0 <test_printn>
    test_println("");
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fed5 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8002b06:	4867      	ldr	r0, [pc, #412]	; (8002ca4 <rt_test_001_003_execute.lto_priv.102+0x384>)
 8002b08:	f7ff fef2 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_DYNAMIC);
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f7ff fe47 	bl	80027a0 <test_printn>
    test_println("");
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7ff fecc 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8002b18:	4863      	ldr	r0, [pc, #396]	; (8002ca8 <rt_test_001_003_execute.lto_priv.102+0x388>)
 8002b1a:	f7ff fee9 	bl	80028f0 <test_print>
    test_printn(CH_CFG_USE_FACTORY);
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f7ff fe3e 	bl	80027a0 <test_printn>
    test_println("");
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff fec3 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8002b2a:	4860      	ldr	r0, [pc, #384]	; (8002cac <rt_test_001_003_execute.lto_priv.102+0x38c>)
 8002b2c:	f7ff fee0 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002b30:	2008      	movs	r0, #8
 8002b32:	f7ff fe35 	bl	80027a0 <test_printn>
    test_println("");
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff feba 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8002b3c:	485c      	ldr	r0, [pc, #368]	; (8002cb0 <rt_test_001_003_execute.lto_priv.102+0x390>)
 8002b3e:	f7ff fed7 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
 8002b42:	4628      	mov	r0, r5
 8002b44:	f7ff fe2c 	bl	80027a0 <test_printn>
    test_println("");
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff feb1 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8002b4e:	4859      	ldr	r0, [pc, #356]	; (8002cb4 <rt_test_001_003_execute.lto_priv.102+0x394>)
 8002b50:	f7ff fece 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
 8002b54:	4628      	mov	r0, r5
 8002b56:	f7ff fe23 	bl	80027a0 <test_printn>
    test_println("");
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7ff fea8 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8002b60:	4855      	ldr	r0, [pc, #340]	; (8002cb8 <rt_test_001_003_execute.lto_priv.102+0x398>)
 8002b62:	f7ff fec5 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
 8002b66:	4628      	mov	r0, r5
 8002b68:	f7ff fe1a 	bl	80027a0 <test_printn>
    test_println("");
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fe9f 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8002b72:	4852      	ldr	r0, [pc, #328]	; (8002cbc <rt_test_001_003_execute.lto_priv.102+0x39c>)
 8002b74:	f7ff febc 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f7ff fe11 	bl	80027a0 <test_printn>
    test_println("");
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7ff fe96 	bl	80028b0 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8002b84:	484e      	ldr	r0, [pc, #312]	; (8002cc0 <rt_test_001_003_execute.lto_priv.102+0x3a0>)
 8002b86:	f7ff feb3 	bl	80028f0 <test_print>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f7ff fe08 	bl	80027a0 <test_printn>
    test_println("");
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff fe8d 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8002b96:	484b      	ldr	r0, [pc, #300]	; (8002cc4 <rt_test_001_003_execute.lto_priv.102+0x3a4>)
 8002b98:	f7ff feaa 	bl	80028f0 <test_print>
 8002b9c:	f7ff fdc8 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_STATISTICS);
    test_println("");
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff fe85 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8002ba6:	4848      	ldr	r0, [pc, #288]	; (8002cc8 <rt_test_001_003_execute.lto_priv.102+0x3a8>)
 8002ba8:	f7ff fea2 	bl	80028f0 <test_print>
 8002bac:	f7ff fdc0 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
    test_println("");
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fe7d 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8002bb6:	4845      	ldr	r0, [pc, #276]	; (8002ccc <rt_test_001_003_execute.lto_priv.102+0x3ac>)
 8002bb8:	f7ff fe9a 	bl	80028f0 <test_print>
 8002bbc:	f7ff fdb8 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_CHECKS);
    test_println("");
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff fe75 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8002bc6:	4842      	ldr	r0, [pc, #264]	; (8002cd0 <rt_test_001_003_execute.lto_priv.102+0x3b0>)
 8002bc8:	f7ff fe92 	bl	80028f0 <test_print>
 8002bcc:	f7ff fdb0 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_ASSERTS);
    test_println("");
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff fe6d 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8002bd6:	483f      	ldr	r0, [pc, #252]	; (8002cd4 <rt_test_001_003_execute.lto_priv.102+0x3b4>)
 8002bd8:	f7ff fe8a 	bl	80028f0 <test_print>
    test_printn(CH_DBG_TRACE_MASK);
 8002bdc:	20ff      	movs	r0, #255	; 0xff
 8002bde:	f7ff fddf 	bl	80027a0 <test_printn>
    test_println("");
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff fe64 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8002be8:	483b      	ldr	r0, [pc, #236]	; (8002cd8 <rt_test_001_003_execute.lto_priv.102+0x3b8>)
 8002bea:	f7ff fe81 	bl	80028f0 <test_print>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
 8002bee:	2080      	movs	r0, #128	; 0x80
 8002bf0:	f7ff fdd6 	bl	80027a0 <test_printn>
    test_println("");
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff fe5b 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8002bfa:	4838      	ldr	r0, [pc, #224]	; (8002cdc <rt_test_001_003_execute.lto_priv.102+0x3bc>)
 8002bfc:	f7ff fe78 	bl	80028f0 <test_print>
 8002c00:	f7ff fd96 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
    test_println("");
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fe53 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8002c0a:	4835      	ldr	r0, [pc, #212]	; (8002ce0 <rt_test_001_003_execute.lto_priv.102+0x3c0>)
 8002c0c:	f7ff fe70 	bl	80028f0 <test_print>
 8002c10:	f7ff fd8e 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_FILL_THREADS);
    test_println("");
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff fe4b 	bl	80028b0 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8002c1a:	4832      	ldr	r0, [pc, #200]	; (8002ce4 <rt_test_001_003_execute.lto_priv.102+0x3c4>)
 8002c1c:	f7ff fe68 	bl	80028f0 <test_print>
 8002c20:	f7ff fd86 	bl	8002730 <test_printn.part.0>
    test_printn(CH_DBG_THREADS_PROFILING);
    test_println("");
 8002c24:	4620      	mov	r0, r4
  }
}
 8002c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002c2a:	f7ff be41 	b.w	80028b0 <test_println>
 8002c2e:	bf00      	nop
 8002c30:	200013d8 	.word	0x200013d8
 8002c34:	08007c10 	.word	0x08007c10
 8002c38:	08007e08 	.word	0x08007e08
 8002c3c:	08007e34 	.word	0x08007e34
 8002c40:	08007e60 	.word	0x08007e60
 8002c44:	08007e8c 	.word	0x08007e8c
 8002c48:	08007eb8 	.word	0x08007eb8
 8002c4c:	08007ee4 	.word	0x08007ee4
 8002c50:	08007f10 	.word	0x08007f10
 8002c54:	08007f3c 	.word	0x08007f3c
 8002c58:	08007f68 	.word	0x08007f68
 8002c5c:	08007f94 	.word	0x08007f94
 8002c60:	08007fc0 	.word	0x08007fc0
 8002c64:	08007fec 	.word	0x08007fec
 8002c68:	08008018 	.word	0x08008018
 8002c6c:	08008044 	.word	0x08008044
 8002c70:	08008070 	.word	0x08008070
 8002c74:	0800809c 	.word	0x0800809c
 8002c78:	080080c8 	.word	0x080080c8
 8002c7c:	080080f4 	.word	0x080080f4
 8002c80:	08008120 	.word	0x08008120
 8002c84:	0800814c 	.word	0x0800814c
 8002c88:	08008178 	.word	0x08008178
 8002c8c:	080081a4 	.word	0x080081a4
 8002c90:	080081d0 	.word	0x080081d0
 8002c94:	080081fc 	.word	0x080081fc
 8002c98:	08008228 	.word	0x08008228
 8002c9c:	08008254 	.word	0x08008254
 8002ca0:	08008280 	.word	0x08008280
 8002ca4:	080082ac 	.word	0x080082ac
 8002ca8:	080082d8 	.word	0x080082d8
 8002cac:	08008304 	.word	0x08008304
 8002cb0:	08008330 	.word	0x08008330
 8002cb4:	0800835c 	.word	0x0800835c
 8002cb8:	08008388 	.word	0x08008388
 8002cbc:	080083b4 	.word	0x080083b4
 8002cc0:	080083e0 	.word	0x080083e0
 8002cc4:	0800840c 	.word	0x0800840c
 8002cc8:	08008438 	.word	0x08008438
 8002ccc:	08008464 	.word	0x08008464
 8002cd0:	08008490 	.word	0x08008490
 8002cd4:	080084bc 	.word	0x080084bc
 8002cd8:	080084e8 	.word	0x080084e8
 8002cdc:	08008514 	.word	0x08008514
 8002ce0:	08008540 	.word	0x08008540
 8002ce4:	0800856c 	.word	0x0800856c
	...

08002cf0 <rt_test_001_002_execute.lto_priv.101>:
static void rt_test_001_002_execute(void) {
 8002cf0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <rt_test_001_002_execute.lto_priv.101+0x64>)
    test_println("--- Product:                            ChibiOS/RT");
 8002cf4:	4818      	ldr	r0, [pc, #96]	; (8002d58 <rt_test_001_002_execute.lto_priv.101+0x68>)
    test_println("");
 8002cf6:	4c19      	ldr	r4, [pc, #100]	; (8002d5c <rt_test_001_002_execute.lto_priv.101+0x6c>)
  test_set_step(1);
 8002cf8:	2501      	movs	r5, #1
 8002cfa:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8002cfc:	f7ff fdd8 	bl	80028b0 <test_println>
    test_print("--- Stable Flag:                        ");
 8002d00:	4817      	ldr	r0, [pc, #92]	; (8002d60 <rt_test_001_002_execute.lto_priv.101+0x70>)
 8002d02:	f7ff fdf5 	bl	80028f0 <test_print>
    test_printn(CH_KERNEL_STABLE);
 8002d06:	4628      	mov	r0, r5
 8002d08:	f7ff fd4a 	bl	80027a0 <test_printn>
    test_println("");
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff fdcf 	bl	80028b0 <test_println>
    test_print("--- Version String:                     ");
 8002d12:	4814      	ldr	r0, [pc, #80]	; (8002d64 <rt_test_001_002_execute.lto_priv.101+0x74>)
 8002d14:	f7ff fdec 	bl	80028f0 <test_print>
    test_println(CH_KERNEL_VERSION);
 8002d18:	4813      	ldr	r0, [pc, #76]	; (8002d68 <rt_test_001_002_execute.lto_priv.101+0x78>)
 8002d1a:	f7ff fdc9 	bl	80028b0 <test_println>
    test_print("--- Major Number:                       ");
 8002d1e:	4813      	ldr	r0, [pc, #76]	; (8002d6c <rt_test_001_002_execute.lto_priv.101+0x7c>)
 8002d20:	f7ff fde6 	bl	80028f0 <test_print>
    test_printn(CH_KERNEL_MAJOR);
 8002d24:	2005      	movs	r0, #5
 8002d26:	f7ff fd3b 	bl	80027a0 <test_printn>
    test_println("");
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff fdc0 	bl	80028b0 <test_println>
    test_print("--- Minor Number:                       ");
 8002d30:	480f      	ldr	r0, [pc, #60]	; (8002d70 <rt_test_001_002_execute.lto_priv.101+0x80>)
 8002d32:	f7ff fddd 	bl	80028f0 <test_print>
 8002d36:	f7ff fcfb 	bl	8002730 <test_printn.part.0>
    test_println("");
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7ff fdb8 	bl	80028b0 <test_println>
    test_print("--- Patch Number:                       ");
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <rt_test_001_002_execute.lto_priv.101+0x84>)
 8002d42:	f7ff fdd5 	bl	80028f0 <test_print>
 8002d46:	f7ff fcf3 	bl	8002730 <test_printn.part.0>
    test_println("");
 8002d4a:	4620      	mov	r0, r4
}
 8002d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8002d50:	f7ff bdae 	b.w	80028b0 <test_println>
 8002d54:	200013d8 	.word	0x200013d8
 8002d58:	08007cf0 	.word	0x08007cf0
 8002d5c:	08007c10 	.word	0x08007c10
 8002d60:	08007d24 	.word	0x08007d24
 8002d64:	08007d50 	.word	0x08007d50
 8002d68:	08007d7c 	.word	0x08007d7c
 8002d6c:	08007d84 	.word	0x08007d84
 8002d70:	08007db0 	.word	0x08007db0
 8002d74:	08007ddc 	.word	0x08007ddc
	...

08002d80 <rt_test_001_001_execute.lto_priv.100>:
  test_set_step(1);
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <rt_test_001_001_execute.lto_priv.100+0x74>)
    test_print("--- Architecture:                       ");
 8002d82:	481d      	ldr	r0, [pc, #116]	; (8002df8 <rt_test_001_001_execute.lto_priv.100+0x78>)
static void rt_test_001_001_execute(void) {
 8002d84:	b510      	push	{r4, lr}
  test_set_step(1);
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8002d8a:	f7ff fdb1 	bl	80028f0 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8002d8e:	481b      	ldr	r0, [pc, #108]	; (8002dfc <rt_test_001_001_execute.lto_priv.100+0x7c>)
    test_println("");
 8002d90:	4c1b      	ldr	r4, [pc, #108]	; (8002e00 <rt_test_001_001_execute.lto_priv.100+0x80>)
    test_println(PORT_ARCHITECTURE_NAME);
 8002d92:	f7ff fd8d 	bl	80028b0 <test_println>
    test_print("--- Core Variant:                       ");
 8002d96:	481b      	ldr	r0, [pc, #108]	; (8002e04 <rt_test_001_001_execute.lto_priv.100+0x84>)
 8002d98:	f7ff fdaa 	bl	80028f0 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8002d9c:	481a      	ldr	r0, [pc, #104]	; (8002e08 <rt_test_001_001_execute.lto_priv.100+0x88>)
 8002d9e:	f7ff fd87 	bl	80028b0 <test_println>
    test_print("--- Compiler:                           ");
 8002da2:	481a      	ldr	r0, [pc, #104]	; (8002e0c <rt_test_001_001_execute.lto_priv.100+0x8c>)
 8002da4:	f7ff fda4 	bl	80028f0 <test_print>
    test_println(PORT_COMPILER_NAME);
 8002da8:	4819      	ldr	r0, [pc, #100]	; (8002e10 <rt_test_001_001_execute.lto_priv.100+0x90>)
 8002daa:	f7ff fd81 	bl	80028b0 <test_println>
    test_print("--- Port Info:                          ");
 8002dae:	4819      	ldr	r0, [pc, #100]	; (8002e14 <rt_test_001_001_execute.lto_priv.100+0x94>)
 8002db0:	f7ff fd9e 	bl	80028f0 <test_print>
    test_println(PORT_INFO);
 8002db4:	4818      	ldr	r0, [pc, #96]	; (8002e18 <rt_test_001_001_execute.lto_priv.100+0x98>)
 8002db6:	f7ff fd7b 	bl	80028b0 <test_println>
    test_print("--- Natural alignment:                  ");
 8002dba:	4818      	ldr	r0, [pc, #96]	; (8002e1c <rt_test_001_001_execute.lto_priv.100+0x9c>)
 8002dbc:	f7ff fd98 	bl	80028f0 <test_print>
    test_printn(PORT_NATURAL_ALIGN);
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	f7ff fced 	bl	80027a0 <test_printn>
    test_println("");
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff fd72 	bl	80028b0 <test_println>
    test_print("--- Stack alignment:                    ");
 8002dcc:	4814      	ldr	r0, [pc, #80]	; (8002e20 <rt_test_001_001_execute.lto_priv.100+0xa0>)
 8002dce:	f7ff fd8f 	bl	80028f0 <test_print>
    test_printn(PORT_STACK_ALIGN);
 8002dd2:	2008      	movs	r0, #8
 8002dd4:	f7ff fce4 	bl	80027a0 <test_printn>
    test_println("");
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff fd69 	bl	80028b0 <test_println>
    test_print("--- Working area alignment:             ");
 8002dde:	4811      	ldr	r0, [pc, #68]	; (8002e24 <rt_test_001_001_execute.lto_priv.100+0xa4>)
 8002de0:	f7ff fd86 	bl	80028f0 <test_print>
    test_printn(PORT_WORKING_AREA_ALIGN);
 8002de4:	2008      	movs	r0, #8
 8002de6:	f7ff fcdb 	bl	80027a0 <test_printn>
    test_println("");
 8002dea:	4620      	mov	r0, r4
}
 8002dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8002df0:	f7ff bd5e 	b.w	80028b0 <test_println>
 8002df4:	200013d8 	.word	0x200013d8
 8002df8:	08007b78 	.word	0x08007b78
 8002dfc:	08007ba4 	.word	0x08007ba4
 8002e00:	08007c10 	.word	0x08007c10
 8002e04:	08007bb0 	.word	0x08007bb0
 8002e08:	08007bdc 	.word	0x08007bdc
 8002e0c:	08007be8 	.word	0x08007be8
 8002e10:	08007c14 	.word	0x08007c14
 8002e14:	08007c28 	.word	0x08007c28
 8002e18:	08007c54 	.word	0x08007c54
 8002e1c:	08007c6c 	.word	0x08007c6c
 8002e20:	08007c98 	.word	0x08007c98
 8002e24:	08007cc4 	.word	0x08007cc4
	...

08002e30 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8002e30:	b4f0      	push	{r4, r5, r6, r7}
 8002e32:	4e0d      	ldr	r6, [pc, #52]	; (8002e68 <_test_assert_sequence+0x38>)
  char *cp = test_tokens_buffer;
 8002e34:	4f0d      	ldr	r7, [pc, #52]	; (8002e6c <_test_assert_sequence+0x3c>)
 8002e36:	6835      	ldr	r5, [r6, #0]
 8002e38:	463b      	mov	r3, r7
 8002e3a:	e005      	b.n	8002e48 <_test_assert_sequence+0x18>
    if (*cp++ != *expected++)
 8002e3c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e44:	4294      	cmp	r4, r2
 8002e46:	d106      	bne.n	8002e56 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 8002e48:	42ab      	cmp	r3, r5
 8002e4a:	d3f7      	bcc.n	8002e3c <_test_assert_sequence+0xc>
  if (*expected)
 8002e4c:	7800      	ldrb	r0, [r0, #0]
 8002e4e:	b910      	cbnz	r0, 8002e56 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 8002e50:	6037      	str	r7, [r6, #0]
}
 8002e52:	bcf0      	pop	{r4, r5, r6, r7}
 8002e54:	4770      	bx	lr
  test_local_fail      = true;
 8002e56:	4c06      	ldr	r4, [pc, #24]	; (8002e70 <_test_assert_sequence+0x40>)
  test_global_fail     = true;
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <_test_assert_sequence+0x48>)
  test_local_fail      = true;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8002e60:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8002e62:	6019      	str	r1, [r3, #0]
}
 8002e64:	bcf0      	pop	{r4, r5, r6, r7}
 8002e66:	4770      	bx	lr
 8002e68:	200013ec 	.word	0x200013ec
 8002e6c:	200013dc 	.word	0x200013dc
 8002e70:	20001351 	.word	0x20001351
 8002e74:	20001350 	.word	0x20001350
 8002e78:	2000134c 	.word	0x2000134c
 8002e7c:	00000000 	.word	0x00000000

08002e80 <_test_assert>:
  if (!condition)
 8002e80:	b948      	cbnz	r0, 8002e96 <_test_assert+0x16>
bool _test_assert(bool condition, const char *msg) {
 8002e82:	b410      	push	{r4}
  test_global_fail     = true;
 8002e84:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <_test_assert+0x1c>)
  test_local_fail      = true;
 8002e86:	4c06      	ldr	r4, [pc, #24]	; (8002ea0 <_test_assert+0x20>)
  test_failure_message = msg;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <_test_assert+0x24>)
  test_local_fail      = true;
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	7020      	strb	r0, [r4, #0]
  test_global_fail     = true;
 8002e8e:	7010      	strb	r0, [r2, #0]
  test_failure_message = msg;
 8002e90:	6019      	str	r1, [r3, #0]
}
 8002e92:	bc10      	pop	{r4}
 8002e94:	4770      	bx	lr
  return false;
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20001350 	.word	0x20001350
 8002ea0:	20001351 	.word	0x20001351
 8002ea4:	2000134c 	.word	0x2000134c
	...

08002eb0 <print_line.lto_priv.86>:
static void print_line(void) {
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4d08      	ldr	r5, [pc, #32]	; (8002ed4 <print_line.lto_priv.86+0x24>)
 8002eb4:	244c      	movs	r4, #76	; 0x4c
    streamPut(test_chp, '-');
 8002eb6:	6828      	ldr	r0, [r5, #0]
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	212d      	movs	r1, #45	; 0x2d
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 8002ec0:	3c01      	subs	r4, #1
 8002ec2:	d1f8      	bne.n	8002eb6 <print_line.lto_priv.86+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002ec4:	6828      	ldr	r0, [r5, #0]
 8002ec6:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <print_line.lto_priv.86+0x28>)
 8002ec8:	6803      	ldr	r3, [r0, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	685b      	ldr	r3, [r3, #4]
}
 8002ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8002ed2:	4718      	bx	r3
 8002ed4:	200013d4 	.word	0x200013d4
 8002ed8:	08008598 	.word	0x08008598
 8002edc:	00000000 	.word	0x00000000

08002ee0 <_port_irq_epilogue>:
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <_port_irq_epilogue+0x44>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002eee:	d102      	bne.n	8002ef6 <_port_irq_epilogue+0x16>
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002ef6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002efe:	f843 2c04 	str.w	r2, [r3, #-4]
    ctxp--;
 8002f02:	f1a3 0220 	sub.w	r2, r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002f06:	f382 8809 	msr	PSP, r2
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <_port_irq_epilogue+0x48>)
 8002f0c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8002f0e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002f10:	6889      	ldr	r1, [r1, #8]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002f16:	bf8c      	ite	hi
 8002f18:	4a04      	ldrhi	r2, [pc, #16]	; (8002f2c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002f1a:	4a05      	ldrls	r2, [pc, #20]	; (8002f30 <_port_irq_epilogue+0x50>)
 8002f1c:	f843 2c08 	str.w	r2, [r3, #-8]
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	2000122c 	.word	0x2000122c
 8002f2c:	080002e1 	.word	0x080002e1
 8002f30:	080002e4 	.word	0x080002e4
	...

08002f40 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002f40:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 8002f44:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002f46:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
	...

08002f60 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4604      	mov	r4, r0

  F_LOCK();
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <chFactoryReleaseObjectsFIFO+0x24>)
 8002f66:	f7fd ff23 	bl	8000db0 <chMtxLock>
  dep->refs--;
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8002f70:	b91b      	cbnz	r3, 8002f7a <chFactoryReleaseObjectsFIFO+0x1a>
 8002f72:	4620      	mov	r0, r4
 8002f74:	4904      	ldr	r1, [pc, #16]	; (8002f88 <chFactoryReleaseObjectsFIFO+0x28>)
 8002f76:	f7ff fc03 	bl	8002780 <dyn_release_object_heap.part.3>

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);

  F_UNLOCK();
 8002f7a:	4802      	ldr	r0, [pc, #8]	; (8002f84 <chFactoryReleaseObjectsFIFO+0x24>)
}
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8002f80:	f7fd be76 	b.w	8000c70 <chMtxUnlock>
 8002f84:	200012a4 	.word	0x200012a4
 8002f88:	200012e4 	.word	0x200012e4
 8002f8c:	00000000 	.word	0x00000000

08002f90 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4604      	mov	r4, r0
  F_LOCK();
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <chFactoryReleaseMailbox+0x24>)
 8002f96:	f7fd ff0b 	bl	8000db0 <chMtxLock>
  dep->refs--;
 8002f9a:	6863      	ldr	r3, [r4, #4]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8002fa0:	b91b      	cbnz	r3, 8002faa <chFactoryReleaseMailbox+0x1a>
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <chFactoryReleaseMailbox+0x28>)
 8002fa6:	f7ff fbeb 	bl	8002780 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 8002faa:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <chFactoryReleaseMailbox+0x24>)
}
 8002fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8002fb0:	f7fd be5e 	b.w	8000c70 <chMtxUnlock>
 8002fb4:	200012a4 	.word	0x200012a4
 8002fb8:	200012e0 	.word	0x200012e0
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8002fc0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8002fc2:	4d17      	ldr	r5, [pc, #92]	; (8003020 <chFactoryReleaseSemaphore+0x60>)
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8002fc4:	4604      	mov	r4, r0
  F_LOCK();
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f7fd fef2 	bl	8000db0 <chMtxLock>
  dep->refs--;
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8002fd2:	b123      	cbz	r3, 8002fde <chFactoryReleaseSemaphore+0x1e>
  F_UNLOCK();
 8002fd4:	4812      	ldr	r0, [pc, #72]	; (8003020 <chFactoryReleaseSemaphore+0x60>)
}
 8002fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8002fda:	f7fd be49 	b.w	8000c70 <chMtxUnlock>
  if (dep->refs == (ucnt_t)0) {
 8002fde:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8002fe2:	460a      	mov	r2, r1
 8002fe4:	e002      	b.n	8002fec <chFactoryReleaseSemaphore+0x2c>
    if (prev->next == element) {
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d00a      	beq.n	8003000 <chFactoryReleaseSemaphore+0x40>
 8002fea:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	428b      	cmp	r3, r1
 8002ff0:	d1f9      	bne.n	8002fe6 <chFactoryReleaseSemaphore+0x26>
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	2320      	movs	r3, #32
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	2300      	movs	r3, #0
  mp->next = php;
 8003010:	62ec      	str	r4, [r5, #44]	; 0x2c
 8003012:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 8003016:	4802      	ldr	r0, [pc, #8]	; (8003020 <chFactoryReleaseSemaphore+0x60>)
}
 8003018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800301c:	f7fd be28 	b.w	8000c70 <chMtxUnlock>
 8003020:	200012a4 	.word	0x200012a4
	...

08003030 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
  F_LOCK();
 8003034:	4807      	ldr	r0, [pc, #28]	; (8003054 <chFactoryReleaseBuffer+0x24>)
 8003036:	f7fd febb 	bl	8000db0 <chMtxLock>
  dep->refs--;
 800303a:	6863      	ldr	r3, [r4, #4]
 800303c:	3b01      	subs	r3, #1
 800303e:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8003040:	b91b      	cbnz	r3, 800304a <chFactoryReleaseBuffer+0x1a>
 8003042:	4620      	mov	r0, r4
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <chFactoryReleaseBuffer+0x28>)
 8003046:	f7ff fb9b 	bl	8002780 <dyn_release_object_heap.part.3>
  F_UNLOCK();
 800304a:	4802      	ldr	r0, [pc, #8]	; (8003054 <chFactoryReleaseBuffer+0x24>)
}
 800304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  F_UNLOCK();
 8003050:	f7fd be0e 	b.w	8000c70 <chMtxUnlock>
 8003054:	200012a4 	.word	0x200012a4
 8003058:	200012c8 	.word	0x200012c8
 800305c:	00000000 	.word	0x00000000

08003060 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop){
 8003060:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8003062:	4d17      	ldr	r5, [pc, #92]	; (80030c0 <chFactoryReleaseObject+0x60>)
void chFactoryReleaseObject(registered_object_t *rop){
 8003064:	4604      	mov	r4, r0
  F_LOCK();
 8003066:	4628      	mov	r0, r5
 8003068:	f7fd fea2 	bl	8000db0 <chMtxLock>
  dep->refs--;
 800306c:	6863      	ldr	r3, [r4, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	6063      	str	r3, [r4, #4]
  if (dep->refs == (ucnt_t)0) {
 8003072:	b123      	cbz	r3, 800307e <chFactoryReleaseObject+0x1e>
  F_UNLOCK();
 8003074:	4812      	ldr	r0, [pc, #72]	; (80030c0 <chFactoryReleaseObject+0x60>)
}
 8003076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 800307a:	f7fd bdf9 	b.w	8000c70 <chMtxUnlock>
  if (dep->refs == (ucnt_t)0) {
 800307e:	f105 0110 	add.w	r1, r5, #16
 8003082:	460a      	mov	r2, r1
 8003084:	e002      	b.n	800308c <chFactoryReleaseObject+0x2c>
    if (prev->next == element) {
 8003086:	429c      	cmp	r4, r3
 8003088:	d00a      	beq.n	80030a0 <chFactoryReleaseObject+0x40>
 800308a:	461a      	mov	r2, r3
  while (prev->next != (dyn_element_t *)dlp) {
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	428b      	cmp	r3, r1
 8003090:	d1f9      	bne.n	8003086 <chFactoryReleaseObject+0x26>
 8003092:	2320      	movs	r3, #32
 8003094:	f383 8811 	msr	BASEPRI, r3
  php->next = mp->next;
 8003098:	2300      	movs	r3, #0
 800309a:	696a      	ldr	r2, [r5, #20]
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	deff      	udf	#255	; 0xff
      prev->next = element->next;
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	2320      	movs	r3, #32
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	696b      	ldr	r3, [r5, #20]
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	2300      	movs	r3, #0
  mp->next = php;
 80030b0:	616c      	str	r4, [r5, #20]
 80030b2:	f383 8811 	msr	BASEPRI, r3
  F_UNLOCK();
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <chFactoryReleaseObject+0x60>)
}
 80030b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 80030bc:	f7fd bdd8 	b.w	8000c70 <chMtxUnlock>
 80030c0:	200012a4 	.word	0x200012a4
	...

080030d0 <dyn_find_object.lto_priv.82>:
static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 80030d0:	b570      	push	{r4, r5, r6, lr}
  dyn_element_t *p = dlp->next;
 80030d2:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 80030d4:	42a1      	cmp	r1, r4
 80030d6:	d012      	beq.n	80030fe <dyn_find_object.lto_priv.82+0x2e>
 80030d8:	460d      	mov	r5, r1
 80030da:	4606      	mov	r6, r0
 80030dc:	e002      	b.n	80030e4 <dyn_find_object.lto_priv.82+0x14>
    p = p->next;
 80030de:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80030e0:	42a5      	cmp	r5, r4
 80030e2:	d00c      	beq.n	80030fe <dyn_find_object.lto_priv.82+0x2e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80030e4:	2208      	movs	r2, #8
 80030e6:	4631      	mov	r1, r6
 80030e8:	18a0      	adds	r0, r4, r2
 80030ea:	f7fd f9ef 	bl	80004cc <strncmp>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1f5      	bne.n	80030de <dyn_find_object.lto_priv.82+0xe>
  if (dep != NULL) {
 80030f2:	b12c      	cbz	r4, 8003100 <dyn_find_object.lto_priv.82+0x30>
    dep->refs++;
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	3301      	adds	r3, #1
 80030f8:	6063      	str	r3, [r4, #4]
}
 80030fa:	4620      	mov	r0, r4
 80030fc:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 80030fe:	2400      	movs	r4, #0
}
 8003100:	4620      	mov	r0, r4
 8003102:	bd70      	pop	{r4, r5, r6, pc}
	...

08003110 <dyn_create_object_heap.lto_priv.83>:
                                             size_t size) {
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8003112:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8003114:	42a1      	cmp	r1, r4
                                             size_t size) {
 8003116:	460d      	mov	r5, r1
 8003118:	4606      	mov	r6, r0
 800311a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800311c:	d103      	bne.n	8003126 <dyn_create_object_heap.lto_priv.83+0x16>
 800311e:	e00b      	b.n	8003138 <dyn_create_object_heap.lto_priv.83+0x28>
    p = p->next;
 8003120:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 8003122:	42a5      	cmp	r5, r4
 8003124:	d008      	beq.n	8003138 <dyn_create_object_heap.lto_priv.83+0x28>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8003126:	2208      	movs	r2, #8
 8003128:	4631      	mov	r1, r6
 800312a:	18a0      	adds	r0, r4, r2
 800312c:	f7fd f9ce 	bl	80004cc <strncmp>
 8003130:	2800      	cmp	r0, #0
 8003132:	d1f5      	bne.n	8003120 <dyn_create_object_heap.lto_priv.83+0x10>
  if (dep != NULL) {
 8003134:	b104      	cbz	r4, 8003138 <dyn_create_object_heap.lto_priv.83+0x28>
}
 8003136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8003138:	4639      	mov	r1, r7
 800313a:	2000      	movs	r0, #0
 800313c:	f003 fb08 	bl	8006750 <chHeapAllocAligned.constprop.33>
  if (dep == NULL) {
 8003140:	4604      	mov	r4, r0
 8003142:	b158      	cbz	r0, 800315c <dyn_create_object_heap.lto_priv.83+0x4c>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8003144:	2208      	movs	r2, #8
 8003146:	4631      	mov	r1, r6
 8003148:	4410      	add	r0, r2
 800314a:	f7fd fa51 	bl	80005f0 <strncpy>
  dep->next = dlp->next;
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	6023      	str	r3, [r4, #0]
  dep->refs = (ucnt_t)1;
 8003152:	2201      	movs	r2, #1
 8003154:	6062      	str	r2, [r4, #4]
  dlp->next = dep;
 8003156:	4620      	mov	r0, r4
 8003158:	602c      	str	r4, [r5, #0]
 800315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800315c:	e7eb      	b.n	8003136 <dyn_create_object_heap.lto_priv.83+0x26>
 800315e:	bf00      	nop

08003160 <chPoolAlloc>:
void *chPoolAlloc(memory_pool_t *mp) {
 8003160:	b508      	push	{r3, lr}
 8003162:	2220      	movs	r2, #32
 8003164:	4603      	mov	r3, r0
 8003166:	f382 8811 	msr	BASEPRI, r2
  objp = mp->next;
 800316a:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 800316c:	b128      	cbz	r0, 800317a <chPoolAlloc+0x1a>
    mp->next = mp->next->next;
 800316e:	6802      	ldr	r2, [r0, #0]
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	f383 8811 	msr	BASEPRI, r3
}
 8003178:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	2a00      	cmp	r2, #0
 800317e:	d0f8      	beq.n	8003172 <chPoolAlloc+0x12>
    objp = mp->provider(mp->object_size, mp->align);
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	6858      	ldr	r0, [r3, #4]
 8003184:	4790      	blx	r2
 8003186:	2300      	movs	r3, #0
 8003188:	f383 8811 	msr	BASEPRI, r3
}
 800318c:	bd08      	pop	{r3, pc}
 800318e:	bf00      	nop

08003190 <dyn_create_object_pool.lto_priv.81>:
                                             memory_pool_t *mp) {
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_element_t *p = dlp->next;
 8003192:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8003194:	42a1      	cmp	r1, r4
                                             memory_pool_t *mp) {
 8003196:	460d      	mov	r5, r1
 8003198:	4606      	mov	r6, r0
 800319a:	4617      	mov	r7, r2
  while (p != (dyn_element_t *)dlp) {
 800319c:	d103      	bne.n	80031a6 <dyn_create_object_pool.lto_priv.81+0x16>
 800319e:	e00d      	b.n	80031bc <dyn_create_object_pool.lto_priv.81+0x2c>
    p = p->next;
 80031a0:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80031a2:	42a5      	cmp	r5, r4
 80031a4:	d00a      	beq.n	80031bc <dyn_create_object_pool.lto_priv.81+0x2c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80031a6:	2208      	movs	r2, #8
 80031a8:	4631      	mov	r1, r6
 80031aa:	18a0      	adds	r0, r4, r2
 80031ac:	f7fd f98e 	bl	80004cc <strncmp>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d1f5      	bne.n	80031a0 <dyn_create_object_pool.lto_priv.81+0x10>
  if (dep != NULL) {
 80031b4:	b114      	cbz	r4, 80031bc <dyn_create_object_pool.lto_priv.81+0x2c>
    return NULL;
 80031b6:	4604      	mov	r4, r0
}
 80031b8:	4620      	mov	r0, r4
 80031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dep = (dyn_element_t *)chPoolAlloc(mp);
 80031bc:	4638      	mov	r0, r7
 80031be:	f7ff ffcf 	bl	8003160 <chPoolAlloc>
  if (dep == NULL) {
 80031c2:	4604      	mov	r4, r0
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d0f7      	beq.n	80031b8 <dyn_create_object_pool.lto_priv.81+0x28>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 80031c8:	2208      	movs	r2, #8
 80031ca:	4631      	mov	r1, r6
 80031cc:	4410      	add	r0, r2
 80031ce:	f7fd fa0f 	bl	80005f0 <strncpy>
  dep->next = dlp->next;
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	6023      	str	r3, [r4, #0]
  dep->refs = (ucnt_t)1;
 80031d6:	2201      	movs	r2, #1
 80031d8:	6062      	str	r2, [r4, #4]
}
 80031da:	4620      	mov	r0, r4
  dlp->next = (dyn_element_t *)dep;
 80031dc:	602c      	str	r4, [r5, #0]
}
 80031de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031e0 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 80031e4:	4c17      	ldr	r4, [pc, #92]	; (8003244 <chHeapStatus+0x64>)
 80031e6:	2800      	cmp	r0, #0
 80031e8:	bf18      	it	ne
 80031ea:	4604      	movne	r4, r0
  }

  H_LOCK(heapp);
 80031ec:	f104 070c 	add.w	r7, r4, #12
 80031f0:	4638      	mov	r0, r7
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 80031f2:	4689      	mov	r9, r1
 80031f4:	4690      	mov	r8, r2
  H_LOCK(heapp);
 80031f6:	f7fd fddb 	bl	8000db0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	b1f3      	cbz	r3, 800323c <chHeapStatus+0x5c>
 80031fe:	2400      	movs	r4, #0
 8003200:	4625      	mov	r5, r4
 8003202:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 8003204:	6858      	ldr	r0, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4284      	cmp	r4, r0

    /* Updating counters.*/
    n++;
 800320a:	f106 0601 	add.w	r6, r6, #1
    tpages += pages;
 800320e:	4405      	add	r5, r0
 8003210:	bf38      	it	cc
 8003212:	4604      	movcc	r4, r0
  while (H_NEXT(qp) != NULL) {
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f5      	bne.n	8003204 <chHeapStatus+0x24>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8003218:	f1b9 0f00 	cmp.w	r9, #0
 800321c:	d002      	beq.n	8003224 <chHeapStatus+0x44>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 800321e:	00ed      	lsls	r5, r5, #3
 8003220:	f8c9 5000 	str.w	r5, [r9]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8003224:	f1b8 0f00 	cmp.w	r8, #0
 8003228:	d002      	beq.n	8003230 <chHeapStatus+0x50>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 800322a:	00e4      	lsls	r4, r4, #3
 800322c:	f8c8 4000 	str.w	r4, [r8]
  }
  H_UNLOCK(heapp);
 8003230:	4638      	mov	r0, r7
 8003232:	f7fd fd1d 	bl	8000c70 <chMtxUnlock>

  return n;
}
 8003236:	4630      	mov	r0, r6
 8003238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  lpages = 0U;
 800323c:	461c      	mov	r4, r3
  tpages = 0U;
 800323e:	461d      	mov	r5, r3
  n = 0U;
 8003240:	461e      	mov	r6, r3
 8003242:	e7e9      	b.n	8003218 <chHeapStatus+0x38>
 8003244:	200012e8 	.word	0x200012e8
	...

08003250 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <Thread1+0x30>)
 8003252:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <Thread1+0x34>)
 8003254:	699b      	ldr	r3, [r3, #24]
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <Thread1+0x38>)
 8003258:	f44f 5600 	mov.w	r6, #8192	; 0x2000
static THD_FUNCTION(Thread1, arg) {
 800325c:	b580      	push	{r7, lr}
 800325e:	619a      	str	r2, [r3, #24]
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8003260:	4637      	mov	r7, r6
    palSetPad(GPIOD, GPIOD_LED4);
 8003262:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    palSetPad(GPIOD, GPIOD_LED3);       /* Orange.  */
 8003266:	8327      	strh	r7, [r4, #24]
    chThdSleepMilliseconds(500);
 8003268:	f241 3088 	movw	r0, #5000	; 0x1388
    palSetPad(GPIOD, GPIOD_LED4);
 800326c:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 800326e:	f7fe f8d7 	bl	8001420 <chThdSleep>
    palClearPad(GPIOD, GPIOD_LED3);     /* Orange.  */
 8003272:	8366      	strh	r6, [r4, #26]
    palClearPad(GPIOD, GPIOD_LED4);
    chThdSleepMilliseconds(500);
 8003274:	f241 3088 	movw	r0, #5000	; 0x1388
    palClearPad(GPIOD, GPIOD_LED4);
 8003278:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 800327a:	f7fe f8d1 	bl	8001420 <chThdSleep>
 800327e:	e7f0      	b.n	8003262 <Thread1+0x12>
 8003280:	2000122c 	.word	0x2000122c
 8003284:	0800859c 	.word	0x0800859c
 8003288:	40020c00 	.word	0x40020c00
 800328c:	00000000 	.word	0x00000000

08003290 <oslib_test_004_005_execute>:
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}

static void oslib_test_004_005_execute(void) {
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dyn_objects_fifo_t *dofp;

  /* [4.5.1] Retrieving a dynamic objects FIFO by name, must not
     exist.*/
  test_set_step(1);
 8003292:	4c42      	ldr	r4, [pc, #264]	; (800339c <oslib_test_004_005_execute+0x10c>)
 8003294:	2501      	movs	r5, #1
 8003296:	6025      	str	r5, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8003298:	f003 fdfa 	bl	8006e90 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
 800329c:	fab0 f080 	clz	r0, r0
 80032a0:	0940      	lsrs	r0, r0, #5
 80032a2:	493f      	ldr	r1, [pc, #252]	; (80033a0 <oslib_test_004_005_execute+0x110>)
 80032a4:	f7ff fdec 	bl	8002e80 <_test_assert>
 80032a8:	b100      	cbz	r0, 80032ac <oslib_test_004_005_execute+0x1c>
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /* [4.5.2] Creating a dynamic objects FIFO it must not exists, must
     succeed.*/
  test_set_step(2);
 80032ac:	2302      	movs	r3, #2
 80032ae:	6023      	str	r3, [r4, #0]
  {
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 80032b0:	f003 fd96 	bl	8006de0 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp != NULL, "cannot create");
 80032b4:	4606      	mov	r6, r0
 80032b6:	3000      	adds	r0, #0
 80032b8:	bf18      	it	ne
 80032ba:	2001      	movne	r0, #1
 80032bc:	4939      	ldr	r1, [pc, #228]	; (80033a4 <oslib_test_004_005_execute+0x114>)
 80032be:	f7ff fddf 	bl	8002e80 <_test_assert>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1f1      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
  }

  /* [4.5.3] Creating a dynamic objects FIFO with the same name, must
     fail.*/
  test_set_step(3);
 80032c6:	2303      	movs	r3, #3
 80032c8:	6023      	str	r3, [r4, #0]
  {
    dyn_objects_fifo_t *dofp1;

    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 80032ca:	f003 fd89 	bl	8006de0 <chFactoryCreateObjectsFIFO.constprop.4>
    test_assert(dofp1 == NULL, "can create");
 80032ce:	fab0 f080 	clz	r0, r0
 80032d2:	0940      	lsrs	r0, r0, #5
 80032d4:	4934      	ldr	r1, [pc, #208]	; (80033a8 <oslib_test_004_005_execute+0x118>)
 80032d6:	f7ff fdd3 	bl	8002e80 <_test_assert>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d1e5      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
  }

  /* [4.5.4] Retrieving the dynamic objects FIFO by name, must exist,
     then increasing the reference counter, finally releasing both
     references.*/
  test_set_step(4);
 80032de:	2304      	movs	r3, #4
 80032e0:	6023      	str	r3, [r4, #0]
  {
    dyn_objects_fifo_t *dofp1, *dofp2;

    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 80032e2:	f003 fdd5 	bl	8006e90 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp1 != NULL, "not found");
 80032e6:	4607      	mov	r7, r0
 80032e8:	3000      	adds	r0, #0
 80032ea:	bf18      	it	ne
 80032ec:	2001      	movne	r0, #1
 80032ee:	492f      	ldr	r1, [pc, #188]	; (80033ac <oslib_test_004_005_execute+0x11c>)
 80032f0:	f7ff fdc6 	bl	8002e80 <_test_assert>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d1d8      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
    test_assert(dofp == dofp1, "object reference mismatch");
 80032f8:	1bf0      	subs	r0, r6, r7
 80032fa:	fab0 f080 	clz	r0, r0
 80032fe:	492c      	ldr	r1, [pc, #176]	; (80033b0 <oslib_test_004_005_execute+0x120>)
 8003300:	0940      	lsrs	r0, r0, #5
 8003302:	f7ff fdbd 	bl	8002e80 <_test_assert>
 8003306:	2800      	cmp	r0, #0
 8003308:	d1cf      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4928      	ldr	r1, [pc, #160]	; (80033b0 <oslib_test_004_005_execute+0x120>)
 800330e:	f1a0 0002 	sub.w	r0, r0, #2
 8003312:	fab0 f080 	clz	r0, r0
 8003316:	0940      	lsrs	r0, r0, #5
 8003318:	f7ff fdb2 	bl	8002e80 <_test_assert>
 800331c:	2800      	cmp	r0, #0
 800331e:	d1c4      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8003320:	687b      	ldr	r3, [r7, #4]

    dofp2 = (dyn_objects_fifo_t *)chFactoryDuplicateReference(&dofp1->element);
    test_assert(dofp1 == dofp2, "object reference mismatch");
 8003322:	4923      	ldr	r1, [pc, #140]	; (80033b0 <oslib_test_004_005_execute+0x120>)
 8003324:	442b      	add	r3, r5
 8003326:	4628      	mov	r0, r5
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	f7ff fda9 	bl	8002e80 <_test_assert>
 800332e:	2800      	cmp	r0, #0
 8003330:	d1bb      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	491e      	ldr	r1, [pc, #120]	; (80033b0 <oslib_test_004_005_execute+0x120>)
 8003336:	f1a0 0003 	sub.w	r0, r0, #3
 800333a:	fab0 f080 	clz	r0, r0
 800333e:	0940      	lsrs	r0, r0, #5
 8003340:	f7ff fd9e 	bl	8002e80 <_test_assert>
 8003344:	2800      	cmp	r0, #0
 8003346:	d1b0      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>

    chFactoryReleaseObjectsFIFO(dofp2);
 8003348:	4638      	mov	r0, r7
 800334a:	f7ff fe09 	bl	8002f60 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4918      	ldr	r1, [pc, #96]	; (80033b4 <oslib_test_004_005_execute+0x124>)
 8003352:	1e82      	subs	r2, r0, #2
 8003354:	4250      	negs	r0, r2
 8003356:	4150      	adcs	r0, r2
 8003358:	f7ff fd92 	bl	8002e80 <_test_assert>
 800335c:	2800      	cmp	r0, #0
 800335e:	d1a4      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>

    chFactoryReleaseObjectsFIFO(dofp1);
 8003360:	4638      	mov	r0, r7
 8003362:	f7ff fdfd 	bl	8002f60 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 8003366:	6870      	ldr	r0, [r6, #4]
 8003368:	4912      	ldr	r1, [pc, #72]	; (80033b4 <oslib_test_004_005_execute+0x124>)
 800336a:	1b43      	subs	r3, r0, r5
 800336c:	4258      	negs	r0, r3
 800336e:	4158      	adcs	r0, r3
 8003370:	f7ff fd86 	bl	8002e80 <_test_assert>
 8003374:	2800      	cmp	r0, #0
 8003376:	d198      	bne.n	80032aa <oslib_test_004_005_execute+0x1a>

  /* [4.5.5] Releasing the first reference to the dynamic objects FIFO
     must not trigger an assertion.*/
  test_set_step(5);
  {
    chFactoryReleaseObjectsFIFO(dofp);
 8003378:	4630      	mov	r0, r6
  test_set_step(5);
 800337a:	2305      	movs	r3, #5
 800337c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800337e:	f7ff fdef 	bl	8002f60 <chFactoryReleaseObjectsFIFO>
  }

  /* [4.5.6] Retrieving the dynamic objects FIFO by name again, must
     not exist.*/
  test_set_step(6);
 8003382:	2306      	movs	r3, #6
 8003384:	6023      	str	r3, [r4, #0]
  {
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8003386:	f003 fd83 	bl	8006e90 <chFactoryFindObjectsFIFO.constprop.3>
    test_assert(dofp == NULL, "found");
 800338a:	fab0 f080 	clz	r0, r0
 800338e:	0940      	lsrs	r0, r0, #5
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <oslib_test_004_005_execute+0x110>)
  }
}
 8003392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 8003396:	f7ff bd73 	b.w	8002e80 <_test_assert>
 800339a:	bf00      	nop
 800339c:	200013d8 	.word	0x200013d8
 80033a0:	08008720 	.word	0x08008720
 80033a4:	08008700 	.word	0x08008700
 80033a8:	08008710 	.word	0x08008710
 80033ac:	0800871c 	.word	0x0800871c
 80033b0:	08008728 	.word	0x08008728
 80033b4:	08008744 	.word	0x08008744
	...

080033c0 <oslib_test_004_005_teardown>:
static void oslib_test_004_005_teardown(void) {
 80033c0:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 80033c2:	f003 fd65 	bl	8006e90 <chFactoryFindObjectsFIFO.constprop.3>
  if (dofp != NULL) {
 80033c6:	b140      	cbz	r0, 80033da <oslib_test_004_005_teardown+0x1a>
    while (dofp->element.refs > 0U) {
 80033c8:	6843      	ldr	r3, [r0, #4]
 80033ca:	4604      	mov	r4, r0
 80033cc:	b12b      	cbz	r3, 80033da <oslib_test_004_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff fdc6 	bl	8002f60 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f9      	bne.n	80033ce <oslib_test_004_005_teardown+0xe>
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	0000      	movs	r0, r0
	...

080033e0 <oslib_test_004_004_execute>:
static void oslib_test_004_004_execute(void) {
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80033e2:	4c42      	ldr	r4, [pc, #264]	; (80034ec <oslib_test_004_004_execute+0x10c>)
 80033e4:	2501      	movs	r5, #1
 80033e6:	6025      	str	r5, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80033e8:	f003 fce2 	bl	8006db0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
 80033ec:	fab0 f080 	clz	r0, r0
 80033f0:	0940      	lsrs	r0, r0, #5
 80033f2:	493f      	ldr	r1, [pc, #252]	; (80034f0 <oslib_test_004_004_execute+0x110>)
 80033f4:	f7ff fd44 	bl	8002e80 <_test_assert>
 80033f8:	b100      	cbz	r0, 80033fc <oslib_test_004_004_execute+0x1c>
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 80033fc:	2302      	movs	r3, #2
 80033fe:	6023      	str	r3, [r4, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 8003400:	f003 fca6 	bl	8006d50 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp != NULL, "cannot create");
 8003404:	4606      	mov	r6, r0
 8003406:	3000      	adds	r0, #0
 8003408:	bf18      	it	ne
 800340a:	2001      	movne	r0, #1
 800340c:	4939      	ldr	r1, [pc, #228]	; (80034f4 <oslib_test_004_004_execute+0x114>)
 800340e:	f7ff fd37 	bl	8002e80 <_test_assert>
 8003412:	2800      	cmp	r0, #0
 8003414:	d1f1      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
  test_set_step(3);
 8003416:	2303      	movs	r3, #3
 8003418:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800341a:	f003 fc99 	bl	8006d50 <chFactoryCreateMailbox.constprop.6>
    test_assert(dmp1 == NULL, "can create");
 800341e:	fab0 f080 	clz	r0, r0
 8003422:	0940      	lsrs	r0, r0, #5
 8003424:	4934      	ldr	r1, [pc, #208]	; (80034f8 <oslib_test_004_004_execute+0x118>)
 8003426:	f7ff fd2b 	bl	8002e80 <_test_assert>
 800342a:	2800      	cmp	r0, #0
 800342c:	d1e5      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
  test_set_step(4);
 800342e:	2304      	movs	r3, #4
 8003430:	6023      	str	r3, [r4, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 8003432:	f003 fcbd 	bl	8006db0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp1 != NULL, "not found");
 8003436:	4607      	mov	r7, r0
 8003438:	3000      	adds	r0, #0
 800343a:	bf18      	it	ne
 800343c:	2001      	movne	r0, #1
 800343e:	492f      	ldr	r1, [pc, #188]	; (80034fc <oslib_test_004_004_execute+0x11c>)
 8003440:	f7ff fd1e 	bl	8002e80 <_test_assert>
 8003444:	2800      	cmp	r0, #0
 8003446:	d1d8      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp == dmp1, "object reference mismatch");
 8003448:	1bf0      	subs	r0, r6, r7
 800344a:	fab0 f080 	clz	r0, r0
 800344e:	492c      	ldr	r1, [pc, #176]	; (8003500 <oslib_test_004_004_execute+0x120>)
 8003450:	0940      	lsrs	r0, r0, #5
 8003452:	f7ff fd15 	bl	8002e80 <_test_assert>
 8003456:	2800      	cmp	r0, #0
 8003458:	d1cf      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4928      	ldr	r1, [pc, #160]	; (8003500 <oslib_test_004_004_execute+0x120>)
 800345e:	f1a0 0002 	sub.w	r0, r0, #2
 8003462:	fab0 f080 	clz	r0, r0
 8003466:	0940      	lsrs	r0, r0, #5
 8003468:	f7ff fd0a 	bl	8002e80 <_test_assert>
 800346c:	2800      	cmp	r0, #0
 800346e:	d1c4      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
 8003470:	687b      	ldr	r3, [r7, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8003472:	4923      	ldr	r1, [pc, #140]	; (8003500 <oslib_test_004_004_execute+0x120>)
 8003474:	442b      	add	r3, r5
 8003476:	4628      	mov	r0, r5
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f7ff fd01 	bl	8002e80 <_test_assert>
 800347e:	2800      	cmp	r0, #0
 8003480:	d1bb      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	491e      	ldr	r1, [pc, #120]	; (8003500 <oslib_test_004_004_execute+0x120>)
 8003486:	f1a0 0003 	sub.w	r0, r0, #3
 800348a:	fab0 f080 	clz	r0, r0
 800348e:	0940      	lsrs	r0, r0, #5
 8003490:	f7ff fcf6 	bl	8002e80 <_test_assert>
 8003494:	2800      	cmp	r0, #0
 8003496:	d1b0      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp2);
 8003498:	4638      	mov	r0, r7
 800349a:	f7ff fd79 	bl	8002f90 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4918      	ldr	r1, [pc, #96]	; (8003504 <oslib_test_004_004_execute+0x124>)
 80034a2:	1e82      	subs	r2, r0, #2
 80034a4:	4250      	negs	r0, r2
 80034a6:	4150      	adcs	r0, r2
 80034a8:	f7ff fcea 	bl	8002e80 <_test_assert>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d1a4      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp1);
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7ff fd6d 	bl	8002f90 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 80034b6:	6870      	ldr	r0, [r6, #4]
 80034b8:	4912      	ldr	r1, [pc, #72]	; (8003504 <oslib_test_004_004_execute+0x124>)
 80034ba:	1b43      	subs	r3, r0, r5
 80034bc:	4258      	negs	r0, r3
 80034be:	4158      	adcs	r0, r3
 80034c0:	f7ff fcde 	bl	8002e80 <_test_assert>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d198      	bne.n	80033fa <oslib_test_004_004_execute+0x1a>
    chFactoryReleaseMailbox(dmp);
 80034c8:	4630      	mov	r0, r6
  test_set_step(5);
 80034ca:	2305      	movs	r3, #5
 80034cc:	6023      	str	r3, [r4, #0]
    chFactoryReleaseMailbox(dmp);
 80034ce:	f7ff fd5f 	bl	8002f90 <chFactoryReleaseMailbox>
  test_set_step(6);
 80034d2:	2306      	movs	r3, #6
 80034d4:	6023      	str	r3, [r4, #0]
    dmp = chFactoryFindMailbox("mymbx");
 80034d6:	f003 fc6b 	bl	8006db0 <chFactoryFindMailbox.constprop.5>
    test_assert(dmp == NULL, "found");
 80034da:	fab0 f080 	clz	r0, r0
 80034de:	0940      	lsrs	r0, r0, #5
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <oslib_test_004_004_execute+0x110>)
}
 80034e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 80034e6:	f7ff bccb 	b.w	8002e80 <_test_assert>
 80034ea:	bf00      	nop
 80034ec:	200013d8 	.word	0x200013d8
 80034f0:	08008720 	.word	0x08008720
 80034f4:	08008700 	.word	0x08008700
 80034f8:	08008710 	.word	0x08008710
 80034fc:	0800871c 	.word	0x0800871c
 8003500:	08008728 	.word	0x08008728
 8003504:	08008744 	.word	0x08008744
	...

08003510 <oslib_test_004_004_teardown>:
static void oslib_test_004_004_teardown(void) {
 8003510:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8003512:	f003 fc4d 	bl	8006db0 <chFactoryFindMailbox.constprop.5>
  if (dmp != NULL) {
 8003516:	b140      	cbz	r0, 800352a <oslib_test_004_004_teardown+0x1a>
    while (dmp->element.refs > 0U) {
 8003518:	6843      	ldr	r3, [r0, #4]
 800351a:	4604      	mov	r4, r0
 800351c:	b12b      	cbz	r3, 800352a <oslib_test_004_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff fd36 	bl	8002f90 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <oslib_test_004_004_teardown+0xe>
 800352a:	bd10      	pop	{r4, pc}
 800352c:	0000      	movs	r0, r0
	...

08003530 <oslib_test_004_003_execute>:
static void oslib_test_004_003_execute(void) {
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003532:	4c42      	ldr	r4, [pc, #264]	; (800363c <oslib_test_004_003_execute+0x10c>)
 8003534:	2501      	movs	r5, #1
 8003536:	6025      	str	r5, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8003538:	f003 fbf2 	bl	8006d20 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
 800353c:	fab0 f080 	clz	r0, r0
 8003540:	0940      	lsrs	r0, r0, #5
 8003542:	493f      	ldr	r1, [pc, #252]	; (8003640 <oslib_test_004_003_execute+0x110>)
 8003544:	f7ff fc9c 	bl	8002e80 <_test_assert>
 8003548:	b100      	cbz	r0, 800354c <oslib_test_004_003_execute+0x1c>
 800354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800354c:	2302      	movs	r3, #2
 800354e:	6023      	str	r3, [r4, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 8003550:	f003 fbc6 	bl	8006ce0 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp != NULL, "cannot create");
 8003554:	4606      	mov	r6, r0
 8003556:	3000      	adds	r0, #0
 8003558:	bf18      	it	ne
 800355a:	2001      	movne	r0, #1
 800355c:	4939      	ldr	r1, [pc, #228]	; (8003644 <oslib_test_004_003_execute+0x114>)
 800355e:	f7ff fc8f 	bl	8002e80 <_test_assert>
 8003562:	2800      	cmp	r0, #0
 8003564:	d1f1      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
  test_set_step(3);
 8003566:	2303      	movs	r3, #3
 8003568:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800356a:	f003 fbb9 	bl	8006ce0 <chFactoryCreateSemaphore.constprop.8>
    test_assert(dsp1 == NULL, "can create");
 800356e:	fab0 f080 	clz	r0, r0
 8003572:	0940      	lsrs	r0, r0, #5
 8003574:	4934      	ldr	r1, [pc, #208]	; (8003648 <oslib_test_004_003_execute+0x118>)
 8003576:	f7ff fc83 	bl	8002e80 <_test_assert>
 800357a:	2800      	cmp	r0, #0
 800357c:	d1e5      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
  test_set_step(4);
 800357e:	2304      	movs	r3, #4
 8003580:	6023      	str	r3, [r4, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8003582:	f003 fbcd 	bl	8006d20 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp1 != NULL, "not found");
 8003586:	4607      	mov	r7, r0
 8003588:	3000      	adds	r0, #0
 800358a:	bf18      	it	ne
 800358c:	2001      	movne	r0, #1
 800358e:	492f      	ldr	r1, [pc, #188]	; (800364c <oslib_test_004_003_execute+0x11c>)
 8003590:	f7ff fc76 	bl	8002e80 <_test_assert>
 8003594:	2800      	cmp	r0, #0
 8003596:	d1d8      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp == dsp1, "object reference mismatch");
 8003598:	1bf0      	subs	r0, r6, r7
 800359a:	fab0 f080 	clz	r0, r0
 800359e:	492c      	ldr	r1, [pc, #176]	; (8003650 <oslib_test_004_003_execute+0x120>)
 80035a0:	0940      	lsrs	r0, r0, #5
 80035a2:	f7ff fc6d 	bl	8002e80 <_test_assert>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d1cf      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4928      	ldr	r1, [pc, #160]	; (8003650 <oslib_test_004_003_execute+0x120>)
 80035ae:	f1a0 0002 	sub.w	r0, r0, #2
 80035b2:	fab0 f080 	clz	r0, r0
 80035b6:	0940      	lsrs	r0, r0, #5
 80035b8:	f7ff fc62 	bl	8002e80 <_test_assert>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d1c4      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
 80035c0:	687b      	ldr	r3, [r7, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 80035c2:	4923      	ldr	r1, [pc, #140]	; (8003650 <oslib_test_004_003_execute+0x120>)
 80035c4:	442b      	add	r3, r5
 80035c6:	4628      	mov	r0, r5
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	f7ff fc59 	bl	8002e80 <_test_assert>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d1bb      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	491e      	ldr	r1, [pc, #120]	; (8003650 <oslib_test_004_003_execute+0x120>)
 80035d6:	f1a0 0003 	sub.w	r0, r0, #3
 80035da:	fab0 f080 	clz	r0, r0
 80035de:	0940      	lsrs	r0, r0, #5
 80035e0:	f7ff fc4e 	bl	8002e80 <_test_assert>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1b0      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp2);
 80035e8:	4638      	mov	r0, r7
 80035ea:	f7ff fce9 	bl	8002fc0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4918      	ldr	r1, [pc, #96]	; (8003654 <oslib_test_004_003_execute+0x124>)
 80035f2:	1e82      	subs	r2, r0, #2
 80035f4:	4250      	negs	r0, r2
 80035f6:	4150      	adcs	r0, r2
 80035f8:	f7ff fc42 	bl	8002e80 <_test_assert>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1a4      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp1);
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff fcdd 	bl	8002fc0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8003606:	6870      	ldr	r0, [r6, #4]
 8003608:	4912      	ldr	r1, [pc, #72]	; (8003654 <oslib_test_004_003_execute+0x124>)
 800360a:	1b43      	subs	r3, r0, r5
 800360c:	4258      	negs	r0, r3
 800360e:	4158      	adcs	r0, r3
 8003610:	f7ff fc36 	bl	8002e80 <_test_assert>
 8003614:	2800      	cmp	r0, #0
 8003616:	d198      	bne.n	800354a <oslib_test_004_003_execute+0x1a>
    chFactoryReleaseSemaphore(dsp);
 8003618:	4630      	mov	r0, r6
  test_set_step(5);
 800361a:	2305      	movs	r3, #5
 800361c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseSemaphore(dsp);
 800361e:	f7ff fccf 	bl	8002fc0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 8003622:	2306      	movs	r3, #6
 8003624:	6023      	str	r3, [r4, #0]
    dsp = chFactoryFindSemaphore("mysem");
 8003626:	f003 fb7b 	bl	8006d20 <chFactoryFindSemaphore.constprop.7>
    test_assert(dsp == NULL, "found");
 800362a:	fab0 f080 	clz	r0, r0
 800362e:	0940      	lsrs	r0, r0, #5
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <oslib_test_004_003_execute+0x110>)
}
 8003632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 8003636:	f7ff bc23 	b.w	8002e80 <_test_assert>
 800363a:	bf00      	nop
 800363c:	200013d8 	.word	0x200013d8
 8003640:	08008720 	.word	0x08008720
 8003644:	08008700 	.word	0x08008700
 8003648:	08008710 	.word	0x08008710
 800364c:	0800871c 	.word	0x0800871c
 8003650:	08008728 	.word	0x08008728
 8003654:	08008744 	.word	0x08008744
	...

08003660 <oslib_test_004_003_teardown>:
static void oslib_test_004_003_teardown(void) {
 8003660:	b510      	push	{r4, lr}
  dsp = chFactoryFindSemaphore("mysem");
 8003662:	f003 fb5d 	bl	8006d20 <chFactoryFindSemaphore.constprop.7>
  if (dsp != NULL) {
 8003666:	b140      	cbz	r0, 800367a <oslib_test_004_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
 8003668:	6843      	ldr	r3, [r0, #4]
 800366a:	4604      	mov	r4, r0
 800366c:	b12b      	cbz	r3, 800367a <oslib_test_004_003_teardown+0x1a>
      chFactoryReleaseSemaphore(dsp);
 800366e:	4620      	mov	r0, r4
 8003670:	f7ff fca6 	bl	8002fc0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f9      	bne.n	800366e <oslib_test_004_003_teardown+0xe>
 800367a:	bd10      	pop	{r4, pc}
 800367c:	0000      	movs	r0, r0
	...

08003680 <oslib_test_004_002_execute>:
static void oslib_test_004_002_execute(void) {
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003682:	4c42      	ldr	r4, [pc, #264]	; (800378c <oslib_test_004_002_execute+0x10c>)
 8003684:	2501      	movs	r5, #1
 8003686:	6025      	str	r5, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8003688:	f003 fb12 	bl	8006cb0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
 800368c:	fab0 f080 	clz	r0, r0
 8003690:	0940      	lsrs	r0, r0, #5
 8003692:	493f      	ldr	r1, [pc, #252]	; (8003790 <oslib_test_004_002_execute+0x110>)
 8003694:	f7ff fbf4 	bl	8002e80 <_test_assert>
 8003698:	b100      	cbz	r0, 800369c <oslib_test_004_002_execute+0x1c>
 800369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 800369c:	2302      	movs	r3, #2
 800369e:	6023      	str	r3, [r4, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 80036a0:	f003 fae6 	bl	8006c70 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp != NULL, "cannot create");
 80036a4:	4606      	mov	r6, r0
 80036a6:	3000      	adds	r0, #0
 80036a8:	bf18      	it	ne
 80036aa:	2001      	movne	r0, #1
 80036ac:	4939      	ldr	r1, [pc, #228]	; (8003794 <oslib_test_004_002_execute+0x114>)
 80036ae:	f7ff fbe7 	bl	8002e80 <_test_assert>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d1f1      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
  test_set_step(3);
 80036b6:	2303      	movs	r3, #3
 80036b8:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 80036ba:	f003 fad9 	bl	8006c70 <chFactoryCreateBuffer.constprop.10>
    test_assert(dbp1 == NULL, "can create");
 80036be:	fab0 f080 	clz	r0, r0
 80036c2:	0940      	lsrs	r0, r0, #5
 80036c4:	4934      	ldr	r1, [pc, #208]	; (8003798 <oslib_test_004_002_execute+0x118>)
 80036c6:	f7ff fbdb 	bl	8002e80 <_test_assert>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1e5      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
  test_set_step(4);
 80036ce:	2304      	movs	r3, #4
 80036d0:	6023      	str	r3, [r4, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 80036d2:	f003 faed 	bl	8006cb0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp1 != NULL, "not found");
 80036d6:	4607      	mov	r7, r0
 80036d8:	3000      	adds	r0, #0
 80036da:	bf18      	it	ne
 80036dc:	2001      	movne	r0, #1
 80036de:	492f      	ldr	r1, [pc, #188]	; (800379c <oslib_test_004_002_execute+0x11c>)
 80036e0:	f7ff fbce 	bl	8002e80 <_test_assert>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d1d8      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp == dbp1, "object reference mismatch");
 80036e8:	1bf0      	subs	r0, r6, r7
 80036ea:	fab0 f080 	clz	r0, r0
 80036ee:	492c      	ldr	r1, [pc, #176]	; (80037a0 <oslib_test_004_002_execute+0x120>)
 80036f0:	0940      	lsrs	r0, r0, #5
 80036f2:	f7ff fbc5 	bl	8002e80 <_test_assert>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d1cf      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4928      	ldr	r1, [pc, #160]	; (80037a0 <oslib_test_004_002_execute+0x120>)
 80036fe:	f1a0 0002 	sub.w	r0, r0, #2
 8003702:	fab0 f080 	clz	r0, r0
 8003706:	0940      	lsrs	r0, r0, #5
 8003708:	f7ff fbba 	bl	8002e80 <_test_assert>
 800370c:	2800      	cmp	r0, #0
 800370e:	d1c4      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
 8003710:	687b      	ldr	r3, [r7, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 8003712:	4923      	ldr	r1, [pc, #140]	; (80037a0 <oslib_test_004_002_execute+0x120>)
 8003714:	442b      	add	r3, r5
 8003716:	4628      	mov	r0, r5
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	f7ff fbb1 	bl	8002e80 <_test_assert>
 800371e:	2800      	cmp	r0, #0
 8003720:	d1bb      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	491e      	ldr	r1, [pc, #120]	; (80037a0 <oslib_test_004_002_execute+0x120>)
 8003726:	f1a0 0003 	sub.w	r0, r0, #3
 800372a:	fab0 f080 	clz	r0, r0
 800372e:	0940      	lsrs	r0, r0, #5
 8003730:	f7ff fba6 	bl	8002e80 <_test_assert>
 8003734:	2800      	cmp	r0, #0
 8003736:	d1b0      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp2);
 8003738:	4638      	mov	r0, r7
 800373a:	f7ff fc79 	bl	8003030 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4918      	ldr	r1, [pc, #96]	; (80037a4 <oslib_test_004_002_execute+0x124>)
 8003742:	1e82      	subs	r2, r0, #2
 8003744:	4250      	negs	r0, r2
 8003746:	4150      	adcs	r0, r2
 8003748:	f7ff fb9a 	bl	8002e80 <_test_assert>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1a4      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp1);
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff fc6d 	bl	8003030 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 8003756:	6870      	ldr	r0, [r6, #4]
 8003758:	4912      	ldr	r1, [pc, #72]	; (80037a4 <oslib_test_004_002_execute+0x124>)
 800375a:	1b43      	subs	r3, r0, r5
 800375c:	4258      	negs	r0, r3
 800375e:	4158      	adcs	r0, r3
 8003760:	f7ff fb8e 	bl	8002e80 <_test_assert>
 8003764:	2800      	cmp	r0, #0
 8003766:	d198      	bne.n	800369a <oslib_test_004_002_execute+0x1a>
    chFactoryReleaseBuffer(dbp);
 8003768:	4630      	mov	r0, r6
  test_set_step(5);
 800376a:	2305      	movs	r3, #5
 800376c:	6023      	str	r3, [r4, #0]
    chFactoryReleaseBuffer(dbp);
 800376e:	f7ff fc5f 	bl	8003030 <chFactoryReleaseBuffer>
  test_set_step(6);
 8003772:	2306      	movs	r3, #6
 8003774:	6023      	str	r3, [r4, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8003776:	f003 fa9b 	bl	8006cb0 <chFactoryFindBuffer.constprop.9>
    test_assert(dbp == NULL, "found");
 800377a:	fab0 f080 	clz	r0, r0
 800377e:	0940      	lsrs	r0, r0, #5
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <oslib_test_004_002_execute+0x110>)
}
 8003782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 8003786:	f7ff bb7b 	b.w	8002e80 <_test_assert>
 800378a:	bf00      	nop
 800378c:	200013d8 	.word	0x200013d8
 8003790:	08008720 	.word	0x08008720
 8003794:	08008700 	.word	0x08008700
 8003798:	08008710 	.word	0x08008710
 800379c:	0800871c 	.word	0x0800871c
 80037a0:	08008728 	.word	0x08008728
 80037a4:	08008744 	.word	0x08008744
	...

080037b0 <oslib_test_004_002_teardown>:
static void oslib_test_004_002_teardown(void) {
 80037b0:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 80037b2:	f003 fa7d 	bl	8006cb0 <chFactoryFindBuffer.constprop.9>
  if (dbp != NULL) {
 80037b6:	b140      	cbz	r0, 80037ca <oslib_test_004_002_teardown+0x1a>
    while (dbp->element.refs > 0U) {
 80037b8:	6843      	ldr	r3, [r0, #4]
 80037ba:	4604      	mov	r4, r0
 80037bc:	b12b      	cbz	r3, 80037ca <oslib_test_004_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff fc36 	bl	8003030 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f9      	bne.n	80037be <oslib_test_004_002_teardown+0xe>
 80037ca:	bd10      	pop	{r4, pc}
 80037cc:	0000      	movs	r0, r0
	...

080037d0 <oslib_test_004_001_execute>:
static void oslib_test_004_001_execute(void) {
 80037d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 80037d4:	4c51      	ldr	r4, [pc, #324]	; (800391c <oslib_test_004_001_execute+0x14c>)
 80037d6:	2501      	movs	r5, #1
 80037d8:	6025      	str	r5, [r4, #0]
    rop = chFactoryFindObject("myobj");
 80037da:	f003 fa31 	bl	8006c40 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
 80037de:	fab0 f080 	clz	r0, r0
 80037e2:	0940      	lsrs	r0, r0, #5
 80037e4:	494e      	ldr	r1, [pc, #312]	; (8003920 <oslib_test_004_001_execute+0x150>)
 80037e6:	f7ff fb4b 	bl	8002e80 <_test_assert>
 80037ea:	b108      	cbz	r0, 80037f0 <oslib_test_004_001_execute+0x20>
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 80037f0:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80037f2:	484c      	ldr	r0, [pc, #304]	; (8003924 <oslib_test_004_001_execute+0x154>)
  test_set_step(2);
 80037f4:	6023      	str	r3, [r4, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80037f6:	f003 fa0b 	bl	8006c10 <chFactoryRegisterObject.constprop.12>
    test_assert(rop != NULL, "cannot register");
 80037fa:	4606      	mov	r6, r0
 80037fc:	3000      	adds	r0, #0
 80037fe:	bf18      	it	ne
 8003800:	2001      	movne	r0, #1
 8003802:	4949      	ldr	r1, [pc, #292]	; (8003928 <oslib_test_004_001_execute+0x158>)
 8003804:	f7ff fb3c 	bl	8002e80 <_test_assert>
 8003808:	2800      	cmp	r0, #0
 800380a:	d1ef      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
  test_set_step(3);
 800380c:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800380e:	4847      	ldr	r0, [pc, #284]	; (800392c <oslib_test_004_001_execute+0x15c>)
  test_set_step(3);
 8003810:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003812:	f003 f9fd 	bl	8006c10 <chFactoryRegisterObject.constprop.12>
    test_assert(rop1 == NULL, "can register");
 8003816:	fab0 f080 	clz	r0, r0
 800381a:	0940      	lsrs	r0, r0, #5
 800381c:	4944      	ldr	r1, [pc, #272]	; (8003930 <oslib_test_004_001_execute+0x160>)
 800381e:	f7ff fb2f 	bl	8002e80 <_test_assert>
 8003822:	2800      	cmp	r0, #0
 8003824:	d1e2      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
  test_set_step(4);
 8003826:	2304      	movs	r3, #4
 8003828:	6023      	str	r3, [r4, #0]
    rop1 = chFactoryFindObject("myobj");
 800382a:	f003 fa09 	bl	8006c40 <chFactoryFindObject.constprop.11>
    test_assert(rop1 != NULL, "not found");
 800382e:	4607      	mov	r7, r0
 8003830:	3000      	adds	r0, #0
 8003832:	bf18      	it	ne
 8003834:	2001      	movne	r0, #1
 8003836:	493f      	ldr	r1, [pc, #252]	; (8003934 <oslib_test_004_001_execute+0x164>)
 8003838:	f7ff fb22 	bl	8002e80 <_test_assert>
 800383c:	2800      	cmp	r0, #0
 800383e:	d1d5      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	493d      	ldr	r1, [pc, #244]	; (8003938 <oslib_test_004_001_execute+0x168>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f245 58aa 	movw	r8, #21930	; 0x55aa
 800384a:	eba0 0008 	sub.w	r0, r0, r8
 800384e:	fab0 f080 	clz	r0, r0
 8003852:	0940      	lsrs	r0, r0, #5
 8003854:	f7ff fb14 	bl	8002e80 <_test_assert>
 8003858:	2800      	cmp	r0, #0
 800385a:	d1c7      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 800385c:	1bf0      	subs	r0, r6, r7
 800385e:	fab0 f080 	clz	r0, r0
 8003862:	4936      	ldr	r1, [pc, #216]	; (800393c <oslib_test_004_001_execute+0x16c>)
 8003864:	0940      	lsrs	r0, r0, #5
 8003866:	f7ff fb0b 	bl	8002e80 <_test_assert>
 800386a:	2800      	cmp	r0, #0
 800386c:	d1be      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4932      	ldr	r1, [pc, #200]	; (800393c <oslib_test_004_001_execute+0x16c>)
 8003872:	f1a0 0002 	sub.w	r0, r0, #2
 8003876:	fab0 f080 	clz	r0, r0
 800387a:	0940      	lsrs	r0, r0, #5
 800387c:	f7ff fb00 	bl	8002e80 <_test_assert>
 8003880:	2800      	cmp	r0, #0
 8003882:	d1b3      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
 8003884:	687b      	ldr	r3, [r7, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8003886:	492d      	ldr	r1, [pc, #180]	; (800393c <oslib_test_004_001_execute+0x16c>)
 8003888:	442b      	add	r3, r5
 800388a:	4628      	mov	r0, r5
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	f7ff faf7 	bl	8002e80 <_test_assert>
 8003892:	2800      	cmp	r0, #0
 8003894:	d1aa      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4927      	ldr	r1, [pc, #156]	; (8003938 <oslib_test_004_001_execute+0x168>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	eba0 0c08 	sub.w	ip, r0, r8
 80038a0:	f1dc 0000 	rsbs	r0, ip, #0
 80038a4:	eb40 000c 	adc.w	r0, r0, ip
 80038a8:	f7ff faea 	bl	8002e80 <_test_assert>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d19d      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4922      	ldr	r1, [pc, #136]	; (800393c <oslib_test_004_001_execute+0x16c>)
 80038b4:	f1a0 0e03 	sub.w	lr, r0, #3
 80038b8:	f1de 0000 	rsbs	r0, lr, #0
 80038bc:	eb40 000e 	adc.w	r0, r0, lr
 80038c0:	f7ff fade 	bl	8002e80 <_test_assert>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d191      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80038c8:	4638      	mov	r0, r7
 80038ca:	f7ff fbc9 	bl	8003060 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	491b      	ldr	r1, [pc, #108]	; (8003940 <oslib_test_004_001_execute+0x170>)
 80038d2:	1e82      	subs	r2, r0, #2
 80038d4:	4250      	negs	r0, r2
 80038d6:	4150      	adcs	r0, r2
 80038d8:	f7ff fad2 	bl	8002e80 <_test_assert>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d185      	bne.n	80037ec <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 80038e0:	4638      	mov	r0, r7
 80038e2:	f7ff fbbd 	bl	8003060 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80038e6:	6870      	ldr	r0, [r6, #4]
 80038e8:	4915      	ldr	r1, [pc, #84]	; (8003940 <oslib_test_004_001_execute+0x170>)
 80038ea:	1b43      	subs	r3, r0, r5
 80038ec:	4258      	negs	r0, r3
 80038ee:	4158      	adcs	r0, r3
 80038f0:	f7ff fac6 	bl	8002e80 <_test_assert>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	f47f af79 	bne.w	80037ec <oslib_test_004_001_execute+0x1c>
    chFactoryReleaseObject(rop);
 80038fa:	4630      	mov	r0, r6
  test_set_step(5);
 80038fc:	2305      	movs	r3, #5
 80038fe:	6023      	str	r3, [r4, #0]
    chFactoryReleaseObject(rop);
 8003900:	f7ff fbae 	bl	8003060 <chFactoryReleaseObject>
  test_set_step(6);
 8003904:	2306      	movs	r3, #6
 8003906:	6023      	str	r3, [r4, #0]
    rop = chFactoryFindObject("myobj");
 8003908:	f003 f99a 	bl	8006c40 <chFactoryFindObject.constprop.11>
    test_assert(rop == NULL, "found");
 800390c:	fab0 f080 	clz	r0, r0
 8003910:	0940      	lsrs	r0, r0, #5
 8003912:	4903      	ldr	r1, [pc, #12]	; (8003920 <oslib_test_004_001_execute+0x150>)
}
 8003914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(rop == NULL, "found");
 8003918:	f7ff bab2 	b.w	8002e80 <_test_assert>
 800391c:	200013d8 	.word	0x200013d8
 8003920:	08008720 	.word	0x08008720
 8003924:	20000818 	.word	0x20000818
 8003928:	08008690 	.word	0x08008690
 800392c:	2000081c 	.word	0x2000081c
 8003930:	080086a0 	.word	0x080086a0
 8003934:	0800871c 	.word	0x0800871c
 8003938:	080086b0 	.word	0x080086b0
 800393c:	08008728 	.word	0x08008728
 8003940:	08008744 	.word	0x08008744
	...

08003950 <oslib_test_004_001_teardown>:
static void oslib_test_004_001_teardown(void) {
 8003950:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8003952:	f003 f975 	bl	8006c40 <chFactoryFindObject.constprop.11>
  if (rop != NULL) {
 8003956:	b140      	cbz	r0, 800396a <oslib_test_004_001_teardown+0x1a>
    while (rop->element.refs > 0U) {
 8003958:	6843      	ldr	r3, [r0, #4]
 800395a:	4604      	mov	r4, r0
 800395c:	b12b      	cbz	r3, 800396a <oslib_test_004_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fb7e 	bl	8003060 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <oslib_test_004_001_teardown+0xe>
 800396a:	bd10      	pop	{r4, pc}
 800396c:	0000      	movs	r0, r0
	...

08003970 <oslib_test_003_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [3.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_003_002_execute(void) {
 8003970:	b570      	push	{r4, r5, r6, lr}
  void *p1;
  size_t total_size, largest_size;

  /* [3.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8003972:	4c14      	ldr	r4, [pc, #80]	; (80039c4 <oslib_test_003_002_execute+0x54>)
static void oslib_test_003_002_execute(void) {
 8003974:	b082      	sub	sp, #8
  test_set_step(1);
 8003976:	2301      	movs	r3, #1
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8003978:	466a      	mov	r2, sp
 800397a:	a901      	add	r1, sp, #4
 800397c:	2000      	movs	r0, #0
  test_set_step(1);
 800397e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 8003980:	f7ff fc2e 	bl	80031e0 <chHeapStatus>
 8003984:	2110      	movs	r1, #16
 8003986:	4810      	ldr	r0, [pc, #64]	; (80039c8 <oslib_test_003_002_execute+0x58>)
 8003988:	f002 fee2 	bl	8006750 <chHeapAllocAligned.constprop.33>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800398c:	4606      	mov	r6, r0
 800398e:	3000      	adds	r0, #0
 8003990:	bf18      	it	ne
 8003992:	2001      	movne	r0, #1
 8003994:	490d      	ldr	r1, [pc, #52]	; (80039cc <oslib_test_003_002_execute+0x5c>)
 8003996:	f7ff fa73 	bl	8002e80 <_test_assert>
 800399a:	b980      	cbnz	r0, 80039be <oslib_test_003_002_execute+0x4e>
 800399c:	4605      	mov	r5, r0
    chHeapFree(p1);
 800399e:	4630      	mov	r0, r6
 80039a0:	f7fd fa16 	bl	8000dd0 <chHeapFree>
  }

  /* [3.2.2] Testing allocation failure.*/
  test_set_step(2);
 80039a4:	2302      	movs	r3, #2
 80039a6:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80039aa:	4628      	mov	r0, r5
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	f002 fecf 	bl	8006750 <chHeapAllocAligned.constprop.33>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
 80039b2:	fab0 f080 	clz	r0, r0
 80039b6:	0940      	lsrs	r0, r0, #5
 80039b8:	4905      	ldr	r1, [pc, #20]	; (80039d0 <oslib_test_003_002_execute+0x60>)
 80039ba:	f7ff fa61 	bl	8002e80 <_test_assert>
  }
}
 80039be:	b002      	add	sp, #8
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
 80039c2:	bf00      	nop
 80039c4:	200013d8 	.word	0x200013d8
 80039c8:	20000970 	.word	0x20000970
 80039cc:	08008654 	.word	0x08008654
 80039d0:	08008668 	.word	0x08008668
	...

080039e0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80039e0:	4bbf      	ldr	r3, [pc, #764]	; (8003ce0 <main+0x300>)
  PWR->CR |= PWR_CR_DBP;
 80039e2:	48c0      	ldr	r0, [pc, #768]	; (8003ce4 <main+0x304>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80039e4:	6919      	ldr	r1, [r3, #16]
 80039e6:	ea6f 51c1 	mvn.w	r1, r1, lsl #23
 80039ea:	2200      	movs	r2, #0
 80039ec:	ea6f 51d1 	mvn.w	r1, r1, lsr #23
}

/*
 * Application entry point.
 */
int main(void) {
 80039f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  rccResetAHB2(~0);
 80039f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80039f8:	6119      	str	r1, [r3, #16]
 80039fa:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	615c      	str	r4, [r3, #20]
 8003a00:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003a02:	6a19      	ldr	r1, [r3, #32]
 8003a04:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8003a08:	6219      	str	r1, [r3, #32]
 8003a0a:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8003a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a0e:	625c      	str	r4, [r3, #36]	; 0x24
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8003a12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a14:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003a18:	6419      	str	r1, [r3, #64]	; 0x40
 8003a1a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003a1c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003a20:	6619      	str	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8003a22:	6801      	ldr	r1, [r0, #0]
 8003a24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003a28:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003a2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003a2c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003a30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a34:	b089      	sub	sp, #36	; 0x24
 8003a36:	d003      	beq.n	8003a40 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003a38:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003a3c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003a3e:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8003a40:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8003ce4 <main+0x304>
  sdp->vmt = &vmt;
 8003a44:	4da8      	ldr	r5, [pc, #672]	; (8003ce8 <main+0x308>)
 8003a46:	f8d9 1004 	ldr.w	r1, [r9, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a4a:	4ea8      	ldr	r6, [pc, #672]	; (8003cec <main+0x30c>)
 8003a4c:	4fa8      	ldr	r7, [pc, #672]	; (8003cf0 <main+0x310>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003a4e:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8003ce0 <main+0x300>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003a52:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8003d20 <main+0x340>
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8003a56:	48a7      	ldr	r0, [pc, #668]	; (8003cf4 <main+0x314>)
  tqp->next = (thread_t *)tqp;
 8003a58:	4ca7      	ldr	r4, [pc, #668]	; (8003cf8 <main+0x318>)
  oqp->q_notify  = onfy;
 8003a5a:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8003d24 <main+0x344>
 8003a5e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003a62:	f8c9 1004 	str.w	r1, [r9, #4]
 8003a66:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a68:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8003a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a70:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8003a74:	f44f 7900 	mov.w	r9, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a78:	f886 3306 	strb.w	r3, [r6, #774]	; 0x306
 8003a7c:	462a      	mov	r2, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a7e:	f8c6 b180 	str.w	fp, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003a82:	f8c6 b000 	str.w	fp, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a86:	f886 3307 	strb.w	r3, [r6, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a8a:	f8c6 a180 	str.w	sl, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003a8e:	f8c6 a000 	str.w	sl, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a92:	f886 3308 	strb.w	r3, [r6, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003a96:	f8c6 1180 	str.w	r1, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003a9a:	6031      	str	r1, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003a9c:	f886 3309 	strb.w	r3, [r6, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003aa0:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003aa4:	f8c6 9000 	str.w	r9, [r6]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003aa8:	f44f 6980 	mov.w	r9, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003aac:	f886 330a 	strb.w	r3, [r6, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003ab0:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003ab4:	f8c6 9000 	str.w	r9, [r6]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003ab8:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003abc:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003ac0:	f8c6 9180 	str.w	r9, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003ac4:	f8c6 9000 	str.w	r9, [r6]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003ac8:	f886 3328 	strb.w	r3, [r6, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003acc:	f8c6 1184 	str.w	r1, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003ad0:	6071      	str	r1, [r6, #4]
 8003ad2:	f842 7b04 	str.w	r7, [r2], #4
 8003ad6:	f105 010c 	add.w	r1, r5, #12
  iqp->q_counter = 0;
 8003ada:	2700      	movs	r7, #0
  sdp->state = SD_STOP;
 8003adc:	f04f 0901 	mov.w	r9, #1
  iqp->q_top     = bp + size;
 8003ae0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8003ae4:	606a      	str	r2, [r5, #4]
 8003ae6:	60e9      	str	r1, [r5, #12]
  iqp->q_buffer  = bp;
 8003ae8:	f105 0254 	add.w	r2, r5, #84	; 0x54
  tqp->prev = (thread_t *)tqp;
 8003aec:	6129      	str	r1, [r5, #16]
  oqp->q_counter = size;
 8003aee:	2110      	movs	r1, #16
  iqp->q_buffer  = bp;
 8003af0:	61aa      	str	r2, [r5, #24]
  iqp->q_rdptr   = bp;
 8003af2:	626a      	str	r2, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8003af4:	622a      	str	r2, [r5, #32]
 8003af6:	f885 9008 	strb.w	r9, [r5, #8]
  iqp->q_counter = 0;
 8003afa:	616f      	str	r7, [r5, #20]
  iqp->q_top     = bp + size;
 8003afc:	61eb      	str	r3, [r5, #28]
  oqp->q_counter = size;
 8003afe:	63a9      	str	r1, [r5, #56]	; 0x38
  ST_ENABLE_CLOCK();
 8003b00:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8003b04:	9101      	str	r1, [sp, #4]
 8003b06:	ea42 0209 	orr.w	r2, r2, r9
  oqp->q_buffer  = bp;
 8003b0a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8003b0c:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
 8003b10:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
  oqp->q_rdptr   = bp;
 8003b14:	64ab      	str	r3, [r5, #72]	; 0x48
 8003b16:	ea42 0209 	orr.w	r2, r2, r9
 8003b1a:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
  ST_ENABLE_STOP();
 8003b1e:	f8de 2008 	ldr.w	r2, [lr, #8]
  oqp->q_wrptr   = bp;
 8003b22:	646b      	str	r3, [r5, #68]	; 0x44
  oqp->q_top     = bp + size;
 8003b24:	f105 0374 	add.w	r3, r5, #116	; 0x74
 8003b28:	642b      	str	r3, [r5, #64]	; 0x40

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b2e:	6768      	str	r0, [r5, #116]	; 0x74
  ST_ENABLE_STOP();
 8003b30:	ea42 0209 	orr.w	r2, r2, r9
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003b34:	f242 00cf 	movw	r0, #8399	; 0x20cf
  oqp->q_notify  = onfy;
 8003b38:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
  iqp->q_notify  = infy;
 8003b3c:	62af      	str	r7, [r5, #40]	; 0x28
  iqp->q_link    = link;
 8003b3e:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 8003b40:	652d      	str	r5, [r5, #80]	; 0x50
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003b42:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  ST_ENABLE_STOP();
 8003b46:	f8ce 2008 	str.w	r2, [lr, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003b4a:	6298      	str	r0, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  tqp->next = (thread_t *)tqp;
 8003b50:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003b56:	f104 0e1c 	add.w	lr, r4, #28
 8003b5a:	6328      	str	r0, [r5, #48]	; 0x30
  STM32_ST_TIM->CCMR1  = 0;
 8003b5c:	619f      	str	r7, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 8003b5e:	6368      	str	r0, [r5, #52]	; 0x34
  STM32_ST_TIM->CCR[0] = 0;
 8003b60:	635f      	str	r7, [r3, #52]	; 0x34
  chTMStartMeasurementX(&tm);
 8003b62:	a802      	add	r0, sp, #8
  ch.rlist.prio = NOPRIO;
 8003b64:	60a7      	str	r7, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 8003b66:	60df      	str	r7, [r3, #12]
 8003b68:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CR2    = 0;
 8003b6a:	605f      	str	r7, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003b6c:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003b70:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003b74:	f886 a31c 	strb.w	sl, [r6, #796]	; 0x31c
  tmp->cumulative = (rttime_t)0;
 8003b78:	2300      	movs	r3, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003b7a:	f8c6 c180 	str.w	ip, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003b7e:	f8c6 c000 	str.w	ip, [r6]
  tqp->next = (thread_t *)tqp;
 8003b82:	6024      	str	r4, [r4, #0]
  ch.vtlist.delta = (sysinterval_t)-1;
 8003b84:	6262      	str	r2, [r4, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 8003b86:	9202      	str	r2, [sp, #8]
  tmp->cumulative = (rttime_t)0;
 8003b88:	2200      	movs	r2, #0
 8003b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003b8e:	f8c4 e01c 	str.w	lr, [r4, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8003b92:	f8c4 e020 	str.w	lr, [r4, #32]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8003b96:	6124      	str	r4, [r4, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003b98:	6164      	str	r4, [r4, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8003b9a:	62a7      	str	r7, [r4, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8003b9c:	6767      	str	r7, [r4, #116]	; 0x74
  tmp->worst      = (rtcnt_t)0;
 8003b9e:	9703      	str	r7, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8003ba0:	9704      	str	r7, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8003ba2:	9705      	str	r7, [sp, #20]
  chTMStartMeasurementX(&tm);
 8003ba4:	f002 fc4c 	bl	8006440 <chTMStartMeasurementX.constprop.63>
  chTMStopMeasurementX(&tm);
 8003ba8:	a802      	add	r0, sp, #8
 8003baa:	f7fc fe39 	bl	8000820 <chTMStopMeasurementX>
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003bae:	4853      	ldr	r0, [pc, #332]	; (8003cfc <main+0x31c>)
 8003bb0:	4a53      	ldr	r2, [pc, #332]	; (8003d00 <main+0x320>)
  ch.tm.offset = tm.last;
 8003bb2:	9b04      	ldr	r3, [sp, #16]
  tp->prio      = prio;
 8003bb4:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  tp->realprio  = prio;
 8003bb8:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
 8003bbc:	6763      	str	r3, [r4, #116]	; 0x74
 8003bbe:	f8df a168 	ldr.w	sl, [pc, #360]	; 8003d28 <main+0x348>
  H_NEXT(&default_heap.header) = NULL;
 8003bc2:	6047      	str	r7, [r0, #4]
 8003bc4:	f100 030c 	add.w	r3, r0, #12
  H_PAGES(&default_heap.header) = 0;
 8003bc8:	6087      	str	r7, [r0, #8]
 8003bca:	6147      	str	r7, [r0, #20]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003bcc:	f8c0 a000 	str.w	sl, [r0]
 8003bd0:	60c3      	str	r3, [r0, #12]
  dlp->next = (dyn_element_t *)dlp;
 8003bd2:	f102 0a10 	add.w	sl, r2, #16
  tqp->prev = (thread_t *)tqp;
 8003bd6:	6103      	str	r3, [r0, #16]
 8003bd8:	f102 0324 	add.w	r3, r2, #36	; 0x24
  mp->object_size = size;
 8003bdc:	2014      	movs	r0, #20
 8003bde:	f8c2 a010 	str.w	sl, [r2, #16]
 8003be2:	6190      	str	r0, [r2, #24]
 8003be4:	f102 0a28 	add.w	sl, r2, #40	; 0x28
 8003be8:	6253      	str	r3, [r2, #36]	; 0x24
 8003bea:	201c      	movs	r0, #28
 8003bec:	f102 033c 	add.w	r3, r2, #60	; 0x3c
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	f8df e138 	ldr.w	lr, [pc, #312]	; 8003d2c <main+0x34c>
  ch_memcore.nextmem = __heap_base__;
 8003bf4:	f8df c138 	ldr.w	ip, [pc, #312]	; 8003d30 <main+0x350>
 8003bf8:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
 8003bfc:	6310      	str	r0, [r2, #48]	; 0x30
 8003bfe:	eb02 0a0b 	add.w	sl, r2, fp
  mp->align = align;
 8003c02:	2004      	movs	r0, #4
 8003c04:	63d3      	str	r3, [r2, #60]	; 0x3c
  mp->provider = provider;
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <main+0x324>)
 8003c08:	f8c2 a040 	str.w	sl, [r2, #64]	; 0x40
  mp->align = align;
 8003c0c:	61d0      	str	r0, [r2, #28]
 8003c0e:	6350      	str	r0, [r2, #52]	; 0x34
  mp->provider = provider;
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	6393      	str	r3, [r2, #56]	; 0x38
 8003c14:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8003d34 <main+0x354>
  ch_memcore.endmem  = __heap_end__;
 8003c18:	483b      	ldr	r0, [pc, #236]	; (8003d08 <main+0x328>)
  tp->name      = name;
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <main+0x32c>)
 8003c1c:	6097      	str	r7, [r2, #8]
  mp->next = NULL;
 8003c1e:	6157      	str	r7, [r2, #20]
 8003c20:	62d7      	str	r7, [r2, #44]	; 0x2c
  ch_memcore.nextmem = __heap_base__;
 8003c22:	f8cc a000 	str.w	sl, [ip]
  ch_memcore.endmem  = __heap_end__;
 8003c26:	f8cc 0004 	str.w	r0, [ip, #4]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003c2a:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  tp->mtxlist   = NULL;
 8003c2e:	66a7      	str	r7, [r4, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
 8003c30:	6667      	str	r7, [r4, #100]	; 0x64
  tp->refs      = (trefs_t)1;
 8003c32:	f884 9052 	strb.w	r9, [r4, #82]	; 0x52
  tqp->next = (thread_t *)tqp;
 8003c36:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8003c38:	6052      	str	r2, [r2, #4]
  tp->name      = name;
 8003c3a:	64a3      	str	r3, [r4, #72]	; 0x48
 8003c3c:	f8de 000c 	ldr.w	r0, [lr, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <main+0x330>)
  REG_INSERT(tp);
 8003c42:	f8d4 a014 	ldr.w	sl, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003c46:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8003d38 <main+0x358>
 8003c4a:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8003c52:	4010      	ands	r0, r2
  reg_value  =  (reg_value                                   |
 8003c54:	4303      	orrs	r3, r0
 8003c56:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8003c5a:	6424      	str	r4, [r4, #64]	; 0x40
 8003c5c:	f8ca 2010 	str.w	r2, [sl, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003c60:	f8ce 300c 	str.w	r3, [lr, #12]
 8003c64:	f8dc 300c 	ldr.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c68:	482a      	ldr	r0, [pc, #168]	; (8003d14 <main+0x334>)
 8003c6a:	6162      	str	r2, [r4, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c70:	f8cc 300c 	str.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c74:	6803      	ldr	r3, [r0, #0]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	9901      	ldr	r1, [sp, #4]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003c78:	61a2      	str	r2, [r4, #24]
 8003c7a:	ea43 0309 	orr.w	r3, r3, r9
  tqp->next = (thread_t *)tqp;
 8003c7e:	f104 025c 	add.w	r2, r4, #92	; 0x5c
  tlp->next = (thread_t *)tlp;
 8003c82:	f104 0c58 	add.w	ip, r4, #88	; 0x58
 8003c86:	f04f 0a20 	mov.w	sl, #32
  currp->wabase = NULL;
 8003c8a:	64e7      	str	r7, [r4, #76]	; 0x4c
  currp->state = CH_STATE_CURRENT;
 8003c8c:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
 8003c90:	6003      	str	r3, [r0, #0]
 8003c92:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
 8003c96:	f88e 101f 	strb.w	r1, [lr, #31]
  tqp->next = (thread_t *)tqp;
 8003c9a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8003c9c:	f88e a022 	strb.w	sl, [lr, #34]	; 0x22
  tqp->prev = (thread_t *)tqp;
 8003ca0:	6622      	str	r2, [r4, #96]	; 0x60
 8003ca2:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8003ca6:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003ca8:	f38a 8811 	msr	BASEPRI, sl
  tp = chThdCreateSuspendedI(tdp);
 8003cac:	481a      	ldr	r0, [pc, #104]	; (8003d18 <main+0x338>)
 8003cae:	f7fc fe0f 	bl	80008d0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	f7fc fe9c 	bl	80009f0 <chSchWakeupS>
 8003cb8:	f387 8811 	msr	BASEPRI, r7
 8003cbc:	f38a 8811 	msr	BASEPRI, sl
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003cc0:	7a2b      	ldrb	r3, [r5, #8]
 8003cc2:	454b      	cmp	r3, r9
 8003cc4:	d06e      	beq.n	8003da4 <main+0x3c4>
  USART_TypeDef *u = sdp->usart;
 8003cc6:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <main+0x33c>)
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d066      	beq.n	8003d9c <main+0x3bc>
 8003cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d062      	beq.n	8003d9c <main+0x3bc>
    u->BRR = STM32_PCLK1 / config->speed;
 8003cd6:	f240 4345 	movw	r3, #1093	; 0x445
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	e02e      	b.n	8003d3c <main+0x35c>
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	20001358 	.word	0x20001358
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	080094e0 	.word	0x080094e0
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	2000122c 	.word	0x2000122c
 8003cfc:	200012e8 	.word	0x200012e8
 8003d00:	200012a4 	.word	0x200012a4
 8003d04:	08002741 	.word	0x08002741
 8003d08:	20020000 	.word	0x20020000
 8003d0c:	080085a4 	.word	0x080085a4
 8003d10:	05fa0300 	.word	0x05fa0300
 8003d14:	e0001000 	.word	0xe0001000
 8003d18:	080085bc 	.word	0x080085bc
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	e0042000 	.word	0xe0042000
 8003d24:	080007b1 	.word	0x080007b1
 8003d28:	080006e1 	.word	0x080006e1
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	20000968 	.word	0x20000968
 8003d34:	200013f0 	.word	0x200013f0
 8003d38:	e000edf0 	.word	0xe000edf0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003d3c:	2140      	movs	r1, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003d3e:	2301      	movs	r3, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003d40:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 8003d44:	2400      	movs	r4, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003d46:	6111      	str	r1, [r2, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003d48:	6153      	str	r3, [r2, #20]
    sdp->rxmask = 0xFF;
 8003d4a:	21ff      	movs	r1, #255	; 0xff
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003d4c:	60d0      	str	r0, [r2, #12]
  sdp->state = SD_READY;
 8003d4e:	2302      	movs	r3, #2
  u->SR = 0;
 8003d50:	6014      	str	r4, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8003d52:	6810      	ldr	r0, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8003d54:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 8003d56:	f885 1078 	strb.w	r1, [r5, #120]	; 0x78
 8003d5a:	722b      	strb	r3, [r5, #8]
 8003d5c:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the serial driver 2 using the driver default configuration.
   * PA2(TX) and PA3(RX) are routed to USART2.
   */
  sdStart(&SD2, NULL);
  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8003d60:	2004      	movs	r0, #4
 8003d62:	f002 fb25 	bl	80063b0 <_pal_lld_setgroupmode.constprop.69>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8003d66:	2008      	movs	r0, #8
 8003d68:	f002 fb22 	bl	80063b0 <_pal_lld_setgroupmode.constprop.69>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <main+0x3ec>)
 8003d70:	4817      	ldr	r0, [pc, #92]	; (8003dd0 <main+0x3f0>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 8003d72:	4c18      	ldr	r4, [pc, #96]	; (8003dd4 <main+0x3f4>)
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 8003d74:	4e18      	ldr	r6, [pc, #96]	; (8003dd8 <main+0x3f8>)
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 8003d76:	4d19      	ldr	r5, [pc, #100]	; (8003ddc <main+0x3fc>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	f002 fb69 	bl	8006450 <chThdCreateStatic.constprop.62>
 8003d7e:	e003      	b.n	8003d88 <main+0x3a8>
    }
    chThdSleepMilliseconds(500);
 8003d80:	f241 3088 	movw	r0, #5000	; 0x1388
 8003d84:	f7fd fb4c 	bl	8001420 <chThdSleep>
    if (palReadPad(GPIOA, GPIOA_BUTTON)) {
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	07db      	lsls	r3, r3, #31
 8003d8c:	d5f8      	bpl.n	8003d80 <main+0x3a0>
      test_execute((BaseSequentialStream *)&SD2, &rt_test_suite);
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f003 fc4e 	bl	8007630 <test_execute.constprop.1>
      test_execute((BaseSequentialStream *)&SD2, &oslib_test_suite);
 8003d94:	4628      	mov	r0, r5
 8003d96:	f003 fc4b 	bl	8007630 <test_execute.constprop.1>
 8003d9a:	e7f1      	b.n	8003d80 <main+0x3a0>
    u->BRR = STM32_PCLK2 / config->speed;
 8003d9c:	f640 038b 	movw	r3, #2187	; 0x88b
 8003da0:	6093      	str	r3, [r2, #8]
 8003da2:	e7cb      	b.n	8003d3c <main+0x35c>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8003da4:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8003db0:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003db4:	22c0      	movs	r2, #192	; 0xc0
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	f8c8 3060 	str.w	r3, [r8, #96]	; 0x60
 8003dbe:	f886 2326 	strb.w	r2, [r6, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003dc2:	f8c6 b184 	str.w	fp, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003dc6:	f8c6 b004 	str.w	fp, [r6, #4]
 8003dca:	e77c      	b.n	8003cc6 <main+0x2e6>
 8003dcc:	08003251 	.word	0x08003251
 8003dd0:	20000990 	.word	0x20000990
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	08008be8 	.word	0x08008be8
 8003ddc:	080087bc 	.word	0x080087bc

08003de0 <rt_test_010_011_setup.lto_priv.170>:
  tqp->next = (thread_t *)tqp;
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <rt_test_010_011_setup.lto_priv.170+0xc>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003de6:	605b      	str	r3, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	4770      	bx	lr
 8003dec:	20000ad8 	.word	0x20000ad8

08003df0 <rt_test_010_010_setup.lto_priv.168>:
  tqp->next = (thread_t *)tqp;
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <rt_test_010_010_setup.lto_priv.168+0xc>)
  sp->cnt = n;
 8003df2:	2201      	movs	r2, #1
 8003df4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003df6:	605b      	str	r3, [r3, #4]
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	4770      	bx	lr
 8003dfc:	20000ae8 	.word	0x20000ae8

08003e00 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
	...

08003e10 <rt_test_010_007_setup.lto_priv.164>:
  tqp->next = (thread_t *)tqp;
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <rt_test_010_007_setup.lto_priv.164+0xc>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003e16:	605b      	str	r3, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	4770      	bx	lr
 8003e1c:	20000ae8 	.word	0x20000ae8

08003e20 <rt_test_009_002_setup.lto_priv.156>:
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <rt_test_009_002_setup.lto_priv.156+0x14>)
 8003e22:	2200      	movs	r2, #0
  mp->object_size = size;
 8003e24:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8003e28:	2104      	movs	r1, #4
  mp->object_size = size;
 8003e2a:	6058      	str	r0, [r3, #4]
  mp->align = align;
 8003e2c:	6099      	str	r1, [r3, #8]
  mp->next = NULL;
 8003e2e:	601a      	str	r2, [r3, #0]
  mp->provider = provider;
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	4770      	bx	lr
 8003e34:	20001330 	.word	0x20001330
	...

08003e40 <oslib_test_001_002_teardown.lto_priv.177>:
 8003e40:	f002 b89e 	b.w	8005f80 <oslib_test_001_003_teardown.lto_priv.180>
	...

08003e50 <oslib_test_001_001_teardown.lto_priv.174>:
 8003e50:	f002 b896 	b.w	8005f80 <oslib_test_001_003_teardown.lto_priv.180>
	...

08003e60 <oslib_test_001_002_setup.lto_priv.176>:
 8003e60:	f001 bdb6 	b.w	80059d0 <oslib_test_001_003_setup.lto_priv.179>
	...

08003e70 <oslib_test_001_001_setup.lto_priv.173>:
 8003e70:	f001 bdae 	b.w	80059d0 <oslib_test_001_003_setup.lto_priv.179>
	...

08003e80 <oslib_test_001_001_execute.lto_priv.175>:

static void oslib_test_001_001_teardown(void) {
  chMBReset(&mb1);
}

static void oslib_test_001_001_execute(void) {
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.1.1] Testing the mailbox size.*/
  test_set_step(1);
 8003e84:	4fb6      	ldr	r7, [pc, #728]	; (8004160 <oslib_test_001_001_execute.lto_priv.175+0x2e0>)
 8003e86:	2301      	movs	r3, #1
static void oslib_test_001_001_execute(void) {
 8003e88:	b082      	sub	sp, #8
  test_set_step(1);
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	2620      	movs	r6, #32
 8003e8e:	f386 8811 	msr	BASEPRI, r6
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8003e92:	4cb4      	ldr	r4, [pc, #720]	; (8004164 <oslib_test_001_001_execute.lto_priv.175+0x2e4>)
  {
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8003e94:	49b4      	ldr	r1, [pc, #720]	; (8004168 <oslib_test_001_001_execute.lto_priv.175+0x2e8>)
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003e96:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8003e98:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003e9c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003e9e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003ea2:	f1a0 0004 	sub.w	r0, r0, #4
 8003ea6:	fab0 f080 	clz	r0, r0
 8003eaa:	0940      	lsrs	r0, r0, #5
 8003eac:	f7fe ffe8 	bl	8002e80 <_test_assert>
 8003eb0:	b128      	cbz	r0, 8003ebe <oslib_test_001_001_execute.lto_priv.175+0x3e>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
  }
}
 8003eb8:	b002      	add	sp, #8
 8003eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	603b      	str	r3, [r7, #0]
    chMBReset(&mb1);
 8003ec8:	f002 fd1a 	bl	8006900 <chMBReset.constprop.29>
 8003ecc:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8003ed0:	e894 000c 	ldmia.w	r4, {r2, r3}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003ed4:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003ed6:	49a5      	ldr	r1, [pc, #660]	; (800416c <oslib_test_001_001_execute.lto_priv.175+0x2ec>)
  return (size_t)(mbp->top - mbp->buffer);
 8003ed8:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8003eda:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8003ede:	f1a0 0004 	sub.w	r0, r0, #4
 8003ee2:	fab0 f080 	clz	r0, r0
 8003ee6:	0940      	lsrs	r0, r0, #5
 8003ee8:	f7fe ffca 	bl	8002e80 <_test_assert>
 8003eec:	4680      	mov	r8, r0
 8003eee:	b120      	cbz	r0, 8003efa <oslib_test_001_001_execute.lto_priv.175+0x7a>
 8003ef0:	f385 8811 	msr	BASEPRI, r5
}
 8003ef4:	b002      	add	sp, #8
 8003ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003efa:	f380 8811 	msr	BASEPRI, r0
 8003efe:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8003f02:	6920      	ldr	r0, [r4, #16]
 8003f04:	499a      	ldr	r1, [pc, #616]	; (8004170 <oslib_test_001_001_execute.lto_priv.175+0x2f0>)
 8003f06:	fab0 f080 	clz	r0, r0
 8003f0a:	0940      	lsrs	r0, r0, #5
 8003f0c:	f7fe ffb8 	bl	8002e80 <_test_assert>
 8003f10:	4605      	mov	r5, r0
 8003f12:	b120      	cbz	r0, 8003f1e <oslib_test_001_001_execute.lto_priv.175+0x9e>
 8003f14:	f388 8811 	msr	BASEPRI, r8
}
 8003f18:	b002      	add	sp, #8
 8003f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f1e:	f380 8811 	msr	BASEPRI, r0
 8003f22:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8003f26:	6820      	ldr	r0, [r4, #0]
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	4992      	ldr	r1, [pc, #584]	; (8004174 <oslib_test_001_001_execute.lto_priv.175+0x2f4>)
 8003f2c:	1ac0      	subs	r0, r0, r3
 8003f2e:	fab0 f080 	clz	r0, r0
 8003f32:	0940      	lsrs	r0, r0, #5
 8003f34:	f7fe ffa4 	bl	8002e80 <_test_assert>
 8003f38:	4680      	mov	r8, r0
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d1d8      	bne.n	8003ef0 <oslib_test_001_001_execute.lto_priv.175+0x70>
 8003f3e:	f380 8811 	msr	BASEPRI, r0
 8003f42:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	68e3      	ldr	r3, [r4, #12]
 8003f4a:	498b      	ldr	r1, [pc, #556]	; (8004178 <oslib_test_001_001_execute.lto_priv.175+0x2f8>)
 8003f4c:	1ac0      	subs	r0, r0, r3
 8003f4e:	fab0 f080 	clz	r0, r0
 8003f52:	0940      	lsrs	r0, r0, #5
 8003f54:	f7fe ff94 	bl	8002e80 <_test_assert>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1db      	bne.n	8003f14 <oslib_test_001_001_execute.lto_priv.175+0x94>
 8003f5c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8003f60:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003f62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  test_set_step(3);
 8003f66:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003f68:	f002 fcea 	bl	8006940 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003f6c:	1c85      	adds	r5, r0, #2
 8003f6e:	bf14      	ite	ne
 8003f70:	2000      	movne	r0, #0
 8003f72:	2001      	moveq	r0, #1
 8003f74:	4981      	ldr	r1, [pc, #516]	; (800417c <oslib_test_001_001_execute.lto_priv.175+0x2fc>)
 8003f76:	f7fe ff83 	bl	8002e80 <_test_assert>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d19c      	bne.n	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 8003f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f82:	f002 fd45 	bl	8006a10 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003f86:	1c82      	adds	r2, r0, #2
 8003f88:	bf14      	ite	ne
 8003f8a:	2000      	movne	r0, #0
 8003f8c:	2001      	moveq	r0, #1
 8003f8e:	497b      	ldr	r1, [pc, #492]	; (800417c <oslib_test_001_001_execute.lto_priv.175+0x2fc>)
 8003f90:	f7fe ff76 	bl	8002e80 <_test_assert>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d18f      	bne.n	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f9c:	a801      	add	r0, sp, #4
 8003f9e:	f002 fd9f 	bl	8006ae0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8003fa2:	1c83      	adds	r3, r0, #2
 8003fa4:	bf14      	ite	ne
 8003fa6:	2000      	movne	r0, #0
 8003fa8:	2001      	moveq	r0, #1
 8003faa:	4974      	ldr	r1, [pc, #464]	; (800417c <oslib_test_001_001_execute.lto_priv.175+0x2fc>)
 8003fac:	f7fe ff68 	bl	8002e80 <_test_assert>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d181      	bne.n	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
  test_set_step(4);
 8003fb4:	2304      	movs	r3, #4
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003fb6:	4e72      	ldr	r6, [pc, #456]	; (8004180 <oslib_test_001_001_execute.lto_priv.175+0x300>)
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8003fb8:	7520      	strb	r0, [r4, #20]
  test_set_step(4);
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8003fbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f002 fcbc 	bl	8006940 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003fc8:	fab0 f080 	clz	r0, r0
 8003fcc:	4631      	mov	r1, r6
 8003fce:	0940      	lsrs	r0, r0, #5
 8003fd0:	f7fe ff56 	bl	8002e80 <_test_assert>
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	f47f af6e 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8003fdc:	2d45      	cmp	r5, #69	; 0x45
 8003fde:	d1ee      	bne.n	8003fbe <oslib_test_001_001_execute.lto_priv.175+0x13e>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fe4:	2041      	movs	r0, #65	; 0x41
 8003fe6:	f002 fd13 	bl	8006a10 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8003fea:	fab0 f080 	clz	r0, r0
 8003fee:	0940      	lsrs	r0, r0, #5
 8003ff0:	4963      	ldr	r1, [pc, #396]	; (8004180 <oslib_test_001_001_execute.lto_priv.175+0x300>)
 8003ff2:	f7fe ff45 	bl	8002e80 <_test_assert>
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f47f af5d 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
  test_set_step(5);
 8003ffe:	2305      	movs	r3, #5
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	2620      	movs	r6, #32
 8004004:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8004008:	e894 000a 	ldmia.w	r4, {r1, r3}
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	1a5b      	subs	r3, r3, r1
 8004010:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8004014:	bf0c      	ite	eq
 8004016:	2001      	moveq	r0, #1
 8004018:	2000      	movne	r0, #0
 800401a:	495a      	ldr	r1, [pc, #360]	; (8004184 <oslib_test_001_001_execute.lto_priv.175+0x304>)
 800401c:	f7fe ff30 	bl	8002e80 <_test_assert>
 8004020:	4680      	mov	r8, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	f47f af64 	bne.w	8003ef0 <oslib_test_001_001_execute.lto_priv.175+0x70>
 8004028:	f380 8811 	msr	BASEPRI, r0
 800402c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004030:	6920      	ldr	r0, [r4, #16]
 8004032:	4955      	ldr	r1, [pc, #340]	; (8004188 <oslib_test_001_001_execute.lto_priv.175+0x308>)
 8004034:	f1a0 0c04 	sub.w	ip, r0, #4
 8004038:	f1dc 0000 	rsbs	r0, ip, #0
 800403c:	eb40 000c 	adc.w	r0, r0, ip
 8004040:	f7fe ff1e 	bl	8002e80 <_test_assert>
 8004044:	4605      	mov	r5, r0
 8004046:	2800      	cmp	r0, #0
 8004048:	f47f af64 	bne.w	8003f14 <oslib_test_001_001_execute.lto_priv.175+0x94>
 800404c:	f380 8811 	msr	BASEPRI, r0
 8004050:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8004054:	68e0      	ldr	r0, [r4, #12]
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	494c      	ldr	r1, [pc, #304]	; (800418c <oslib_test_001_001_execute.lto_priv.175+0x30c>)
 800405a:	eba0 0e03 	sub.w	lr, r0, r3
 800405e:	f1de 0000 	rsbs	r0, lr, #0
 8004062:	eb40 000e 	adc.w	r0, r0, lr
 8004066:	f7fe ff0b 	bl	8002e80 <_test_assert>
 800406a:	2800      	cmp	r0, #0
 800406c:	f47f af40 	bne.w	8003ef0 <oslib_test_001_001_execute.lto_priv.175+0x70>
 8004070:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8004074:	2306      	movs	r3, #6
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004076:	4e42      	ldr	r6, [pc, #264]	; (8004180 <oslib_test_001_001_execute.lto_priv.175+0x300>)
  test_set_step(6);
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	2504      	movs	r5, #4
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800407c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004080:	a801      	add	r0, sp, #4
 8004082:	f002 fd2d 	bl	8006ae0 <chMBFetchTimeout.constprop.21>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8004086:	fab0 f080 	clz	r0, r0
 800408a:	4631      	mov	r1, r6
 800408c:	0940      	lsrs	r0, r0, #5
 800408e:	f7fe fef7 	bl	8002e80 <_test_assert>
 8004092:	2800      	cmp	r0, #0
 8004094:	f47f af10 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
      test_emit_token(msg2);
 8004098:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800409c:	f7fe fbf0 	bl	8002880 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 80040a0:	3d01      	subs	r5, #1
 80040a2:	d1eb      	bne.n	800407c <oslib_test_001_001_execute.lto_priv.175+0x1fc>
    test_assert_sequence("ABCD", "wrong get sequence");
 80040a4:	493a      	ldr	r1, [pc, #232]	; (8004190 <oslib_test_001_001_execute.lto_priv.175+0x310>)
 80040a6:	483b      	ldr	r0, [pc, #236]	; (8004194 <oslib_test_001_001_execute.lto_priv.175+0x314>)
 80040a8:	f7fe fec2 	bl	8002e30 <_test_assert_sequence>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	f47f af03 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
  test_set_step(7);
 80040b2:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040b8:	2046      	movs	r0, #70	; 0x46
  test_set_step(7);
 80040ba:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80040bc:	f002 fc40 	bl	8006940 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80040c0:	fab0 f080 	clz	r0, r0
 80040c4:	0940      	lsrs	r0, r0, #5
 80040c6:	492e      	ldr	r1, [pc, #184]	; (8004180 <oslib_test_001_001_execute.lto_priv.175+0x300>)
 80040c8:	f7fe feda 	bl	8002e80 <_test_assert>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	f47f aef3 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80040d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040d6:	a801      	add	r0, sp, #4
 80040d8:	f002 fd02 	bl	8006ae0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80040dc:	fab0 f080 	clz	r0, r0
 80040e0:	0940      	lsrs	r0, r0, #5
 80040e2:	4927      	ldr	r1, [pc, #156]	; (8004180 <oslib_test_001_001_execute.lto_priv.175+0x300>)
 80040e4:	f7fe fecc 	bl	8002e80 <_test_assert>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f47f aee5 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
  test_set_step(8);
 80040ee:	2308      	movs	r3, #8
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	2620      	movs	r6, #32
 80040f4:	f386 8811 	msr	BASEPRI, r6
 80040f8:	e894 0005 	ldmia.w	r4, {r0, r2}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80040fc:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80040fe:	491b      	ldr	r1, [pc, #108]	; (800416c <oslib_test_001_001_execute.lto_priv.175+0x2ec>)
  return (size_t)(mbp->top - mbp->buffer);
 8004100:	1a12      	subs	r2, r2, r0
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004102:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004106:	1f1f      	subs	r7, r3, #4
 8004108:	4278      	negs	r0, r7
 800410a:	4178      	adcs	r0, r7
 800410c:	f7fe feb8 	bl	8002e80 <_test_assert>
 8004110:	2800      	cmp	r0, #0
 8004112:	f47f aeed 	bne.w	8003ef0 <oslib_test_001_001_execute.lto_priv.175+0x70>
 8004116:	f385 8811 	msr	BASEPRI, r5
 800411a:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800411e:	6920      	ldr	r0, [r4, #16]
 8004120:	4913      	ldr	r1, [pc, #76]	; (8004170 <oslib_test_001_001_execute.lto_priv.175+0x2f0>)
 8004122:	fab0 f080 	clz	r0, r0
 8004126:	0940      	lsrs	r0, r0, #5
 8004128:	f7fe feaa 	bl	8002e80 <_test_assert>
 800412c:	2800      	cmp	r0, #0
 800412e:	f47f aedf 	bne.w	8003ef0 <oslib_test_001_001_execute.lto_priv.175+0x70>
 8004132:	f385 8811 	msr	BASEPRI, r5
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	68a3      	ldr	r3, [r4, #8]
 800413a:	490e      	ldr	r1, [pc, #56]	; (8004174 <oslib_test_001_001_execute.lto_priv.175+0x2f4>)
 800413c:	1ac2      	subs	r2, r0, r3
 800413e:	4250      	negs	r0, r2
 8004140:	4150      	adcs	r0, r2
 8004142:	f7fe fe9d 	bl	8002e80 <_test_assert>
 8004146:	2800      	cmp	r0, #0
 8004148:	f47f aeb6 	bne.w	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	4909      	ldr	r1, [pc, #36]	; (8004178 <oslib_test_001_001_execute.lto_priv.175+0x2f8>)
 8004152:	1ac3      	subs	r3, r0, r3
 8004154:	4258      	negs	r0, r3
 8004156:	4158      	adcs	r0, r3
 8004158:	f7fe fe92 	bl	8002e80 <_test_assert>
 800415c:	e6ac      	b.n	8003eb8 <oslib_test_001_001_execute.lto_priv.175+0x38>
 800415e:	bf00      	nop
 8004160:	200013d8 	.word	0x200013d8
 8004164:	20000864 	.word	0x20000864
 8004168:	08009508 	.word	0x08009508
 800416c:	08009514 	.word	0x08009514
 8004170:	08009520 	.word	0x08009520
 8004174:	0800952c 	.word	0x0800952c
 8004178:	08009550 	.word	0x08009550
 800417c:	08009574 	.word	0x08009574
 8004180:	08009588 	.word	0x08009588
 8004184:	080095a0 	.word	0x080095a0
 8004188:	080095ac 	.word	0x080095ac
 800418c:	080095b8 	.word	0x080095b8
 8004190:	080095d0 	.word	0x080095d0
 8004194:	08007a0c 	.word	0x08007a0c
	...

080041a0 <rt_test_010_012_execute.lto_priv.172>:
 * - [10.12.8] The size of an event listener is printed.
 * - [10.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_010_012_execute(void) {
 80041a0:	b570      	push	{r4, r5, r6, lr}

  /* [10.12.1] The size of the system area is printed.*/
  test_set_step(1);
 80041a2:	4d33      	ldr	r5, [pc, #204]	; (8004270 <rt_test_010_012_execute.lto_priv.172+0xd0>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 80041a4:	4c33      	ldr	r4, [pc, #204]	; (8004274 <rt_test_010_012_execute.lto_priv.172+0xd4>)
    test_print("--- System: ");
 80041a6:	4834      	ldr	r0, [pc, #208]	; (8004278 <rt_test_010_012_execute.lto_priv.172+0xd8>)
  test_set_step(1);
 80041a8:	2301      	movs	r3, #1
 80041aa:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 80041ac:	f7fe fba0 	bl	80028f0 <test_print>
    test_printn(sizeof(ch_system_t));
 80041b0:	2078      	movs	r0, #120	; 0x78
 80041b2:	f7fe faf5 	bl	80027a0 <test_printn>
    test_println(" bytes");
 80041b6:	4620      	mov	r0, r4
 80041b8:	f7fe fb7a 	bl	80028b0 <test_println>
  }

  /* [10.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 80041bc:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 80041be:	482f      	ldr	r0, [pc, #188]	; (800427c <rt_test_010_012_execute.lto_priv.172+0xdc>)
  test_set_step(2);
 80041c0:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 80041c2:	f7fe fb95 	bl	80028f0 <test_print>
    test_printn(sizeof(thread_t));
 80041c6:	2044      	movs	r0, #68	; 0x44
 80041c8:	f7fe faea 	bl	80027a0 <test_printn>
    test_println(" bytes");
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fe fb6f 	bl	80028b0 <test_println>
  }

  /* [10.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 80041d2:	2303      	movs	r3, #3
  {
    test_print("--- Timer : ");
 80041d4:	482a      	ldr	r0, [pc, #168]	; (8004280 <rt_test_010_012_execute.lto_priv.172+0xe0>)
  test_set_step(3);
 80041d6:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 80041d8:	f7fe fb8a 	bl	80028f0 <test_print>
    test_printn(sizeof(virtual_timer_t));
 80041dc:	2014      	movs	r0, #20
 80041de:	f7fe fadf 	bl	80027a0 <test_printn>
    test_println(" bytes");
 80041e2:	4620      	mov	r0, r4
 80041e4:	f7fe fb64 	bl	80028b0 <test_println>
  }

  /* [10.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 80041e8:	2604      	movs	r6, #4
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 80041ea:	4826      	ldr	r0, [pc, #152]	; (8004284 <rt_test_010_012_execute.lto_priv.172+0xe4>)
  test_set_step(4);
 80041ec:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 80041ee:	f7fe fb7f 	bl	80028f0 <test_print>
    test_printn(sizeof(semaphore_t));
 80041f2:	200c      	movs	r0, #12
 80041f4:	f7fe fad4 	bl	80027a0 <test_printn>
    test_println(" bytes");
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7fe fb59 	bl	80028b0 <test_println>
#endif
  }

  /* [10.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 80041fe:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8004200:	4821      	ldr	r0, [pc, #132]	; (8004288 <rt_test_010_012_execute.lto_priv.172+0xe8>)
  test_set_step(5);
 8004202:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8004204:	f7fe fb74 	bl	80028f0 <test_print>
    test_printn(sizeof(mutex_t));
 8004208:	2010      	movs	r0, #16
 800420a:	f7fe fac9 	bl	80027a0 <test_printn>
    test_println(" bytes");
 800420e:	4620      	mov	r0, r4
 8004210:	f7fe fb4e 	bl	80028b0 <test_println>
#endif
  }

  /* [10.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8004214:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8004216:	481d      	ldr	r0, [pc, #116]	; (800428c <rt_test_010_012_execute.lto_priv.172+0xec>)
  test_set_step(6);
 8004218:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 800421a:	f7fe fb69 	bl	80028f0 <test_print>
    test_printn(sizeof(condition_variable_t));
 800421e:	2008      	movs	r0, #8
 8004220:	f7fe fabe 	bl	80027a0 <test_printn>
    test_println(" bytes");
 8004224:	4620      	mov	r0, r4
 8004226:	f7fe fb43 	bl	80028b0 <test_println>
#endif
  }

  /* [10.12.7] The size of an event source is printed.*/
  test_set_step(7);
 800422a:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 800422c:	4818      	ldr	r0, [pc, #96]	; (8004290 <rt_test_010_012_execute.lto_priv.172+0xf0>)
  test_set_step(7);
 800422e:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8004230:	f7fe fb5e 	bl	80028f0 <test_print>
    test_printn(sizeof(event_source_t));
 8004234:	4630      	mov	r0, r6
 8004236:	f7fe fab3 	bl	80027a0 <test_printn>
    test_println(" bytes");
 800423a:	4620      	mov	r0, r4
 800423c:	f7fe fb38 	bl	80028b0 <test_println>
#endif
  }

  /* [10.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8004240:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8004242:	4814      	ldr	r0, [pc, #80]	; (8004294 <rt_test_010_012_execute.lto_priv.172+0xf4>)
  test_set_step(8);
 8004244:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8004246:	f7fe fb53 	bl	80028f0 <test_print>
    test_printn(sizeof(event_listener_t));
 800424a:	2014      	movs	r0, #20
 800424c:	f7fe faa8 	bl	80027a0 <test_printn>
    test_println(" bytes");
 8004250:	4620      	mov	r0, r4
 8004252:	f7fe fb2d 	bl	80028b0 <test_println>
#endif
  }

  /* [10.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8004256:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8004258:	480f      	ldr	r0, [pc, #60]	; (8004298 <rt_test_010_012_execute.lto_priv.172+0xf8>)
  test_set_step(9);
 800425a:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 800425c:	f7fe fb48 	bl	80028f0 <test_print>
    test_printn(sizeof(mailbox_t));
 8004260:	2028      	movs	r0, #40	; 0x28
 8004262:	f7fe fa9d 	bl	80027a0 <test_printn>
    test_println(" bytes");
 8004266:	4620      	mov	r0, r4
#endif
  }
}
 8004268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 800426c:	f7fe bb20 	b.w	80028b0 <test_println>
 8004270:	200013d8 	.word	0x200013d8
 8004274:	0800969c 	.word	0x0800969c
 8004278:	0800968c 	.word	0x0800968c
 800427c:	080096a4 	.word	0x080096a4
 8004280:	080096b4 	.word	0x080096b4
 8004284:	080096c4 	.word	0x080096c4
 8004288:	080096d4 	.word	0x080096d4
 800428c:	080096e4 	.word	0x080096e4
 8004290:	080096f4 	.word	0x080096f4
 8004294:	08009704 	.word	0x08009704
 8004298:	08009714 	.word	0x08009714
 800429c:	00000000 	.word	0x00000000

080042a0 <rt_test_010_011_execute.lto_priv.171>:
static void rt_test_010_011_execute(void) {
 80042a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80042a4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004328 <rt_test_010_011_execute.lto_priv.171+0x88>
      chMtxLock(&mtx1);
 80042a8:	4c1c      	ldr	r4, [pc, #112]	; (800431c <rt_test_010_011_execute.lto_priv.171+0x7c>)
  test_set_step(1);
 80042aa:	2301      	movs	r3, #1
 80042ac:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80042b0:	f7fe faa6 	bl	8002800 <test_wait_tick>
    n = 0;
 80042b4:	2500      	movs	r5, #0
    start = test_wait_tick();
 80042b6:	4680      	mov	r8, r0
 80042b8:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80042bc:	f242 760f 	movw	r6, #9999	; 0x270f
      chMtxLock(&mtx1);
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7fc fd75 	bl	8000db0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7fc fcd2 	bl	8000c70 <chMtxUnlock>
      chMtxLock(&mtx1);
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fc fd6f 	bl	8000db0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7fc fccc 	bl	8000c70 <chMtxUnlock>
      chMtxLock(&mtx1);
 80042d8:	4620      	mov	r0, r4
 80042da:	f7fc fd69 	bl	8000db0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80042de:	4620      	mov	r0, r4
 80042e0:	f7fc fcc6 	bl	8000c70 <chMtxUnlock>
      chMtxLock(&mtx1);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7fc fd63 	bl	8000db0 <chMtxLock>
      chMtxUnlock(&mtx1);
 80042ea:	4620      	mov	r0, r4
 80042ec:	f7fc fcc0 	bl	8000c70 <chMtxUnlock>
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((time - start) < (end - start));
 80042f2:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 80042f6:	42b3      	cmp	r3, r6
      n++;
 80042f8:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 80042fc:	d9e0      	bls.n	80042c0 <rt_test_010_011_execute.lto_priv.171+0x20>
  test_set_step(2);
 80042fe:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004300:	4807      	ldr	r0, [pc, #28]	; (8004320 <rt_test_010_011_execute.lto_priv.171+0x80>)
  test_set_step(2);
 8004302:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004306:	f7fe faf3 	bl	80028f0 <test_print>
    test_printn(n * 4);
 800430a:	00a8      	lsls	r0, r5, #2
 800430c:	f7fe fa48 	bl	80027a0 <test_printn>
    test_println(" lock+unlock/S");
 8004310:	4804      	ldr	r0, [pc, #16]	; (8004324 <rt_test_010_011_execute.lto_priv.171+0x84>)
}
 8004312:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" lock+unlock/S");
 8004316:	f7fe bacb 	b.w	80028b0 <test_println>
 800431a:	bf00      	nop
 800431c:	20000ad8 	.word	0x20000ad8
 8004320:	0800966c 	.word	0x0800966c
 8004324:	0800967c 	.word	0x0800967c
 8004328:	200013d8 	.word	0x200013d8
 800432c:	00000000 	.word	0x00000000

08004330 <rt_test_010_010_execute.lto_priv.169>:
static void rt_test_010_010_execute(void) {
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 8004334:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80043b8 <rt_test_010_010_execute.lto_priv.169+0x88>
      chSemWait(&sem1);
 8004338:	4c1c      	ldr	r4, [pc, #112]	; (80043ac <rt_test_010_010_execute.lto_priv.169+0x7c>)
  test_set_step(1);
 800433a:	2301      	movs	r3, #1
 800433c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8004340:	f7fe fa5e 	bl	8002800 <test_wait_tick>
    n = 0;
 8004344:	2500      	movs	r5, #0
    start = test_wait_tick();
 8004346:	4680      	mov	r8, r0
 8004348:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800434c:	f242 760f 	movw	r6, #9999	; 0x270f
      chSemWait(&sem1);
 8004350:	4620      	mov	r0, r4
 8004352:	f7fc fbd5 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 8004356:	4620      	mov	r0, r4
 8004358:	f7fc fb7a 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 800435c:	4620      	mov	r0, r4
 800435e:	f7fc fbcf 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 8004362:	4620      	mov	r0, r4
 8004364:	f7fc fb74 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 8004368:	4620      	mov	r0, r4
 800436a:	f7fc fbc9 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 800436e:	4620      	mov	r0, r4
 8004370:	f7fc fb6e 	bl	8000a50 <chSemSignal>
      chSemWait(&sem1);
 8004374:	4620      	mov	r0, r4
 8004376:	f7fc fbc3 	bl	8000b00 <chSemWait>
      chSemSignal(&sem1);
 800437a:	4620      	mov	r0, r4
 800437c:	f7fc fb68 	bl	8000a50 <chSemSignal>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	eba3 0308 	sub.w	r3, r3, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8004386:	42b3      	cmp	r3, r6
      n++;
 8004388:	f105 0501 	add.w	r5, r5, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 800438c:	d9e0      	bls.n	8004350 <rt_test_010_010_execute.lto_priv.169+0x20>
  test_set_step(2);
 800438e:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004390:	4807      	ldr	r0, [pc, #28]	; (80043b0 <rt_test_010_010_execute.lto_priv.169+0x80>)
  test_set_step(2);
 8004392:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004396:	f7fe faab 	bl	80028f0 <test_print>
    test_printn(n * 4);
 800439a:	00a8      	lsls	r0, r5, #2
 800439c:	f7fe fa00 	bl	80027a0 <test_printn>
    test_println(" wait+signal/S");
 80043a0:	4804      	ldr	r0, [pc, #16]	; (80043b4 <rt_test_010_010_execute.lto_priv.169+0x84>)
}
 80043a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" wait+signal/S");
 80043a6:	f7fe ba83 	b.w	80028b0 <test_println>
 80043aa:	bf00      	nop
 80043ac:	20000ae8 	.word	0x20000ae8
 80043b0:	0800966c 	.word	0x0800966c
 80043b4:	0800965c 	.word	0x0800965c
 80043b8:	200013d8 	.word	0x200013d8
 80043bc:	00000000 	.word	0x00000000

080043c0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80043c0:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 80043c2:	4c08      	ldr	r4, [pc, #32]	; (80043e4 <bmk_thread7+0x24>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80043c4:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80043c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ca:	075a      	lsls	r2, r3, #29
 80043cc:	d408      	bmi.n	80043e0 <bmk_thread7+0x20>
    chSemWait(&sem1);
 80043ce:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <bmk_thread7+0x28>)
 80043d0:	4628      	mov	r0, r5
 80043d2:	f7fc fb95 	bl	8000b00 <chSemWait>
 80043d6:	69a3      	ldr	r3, [r4, #24]
  while (!chThdShouldTerminateX())
 80043d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043dc:	075b      	lsls	r3, r3, #29
 80043de:	d5f7      	bpl.n	80043d0 <bmk_thread7+0x10>
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	2000122c 	.word	0x2000122c
 80043e8:	20000ae8 	.word	0x20000ae8
 80043ec:	00000000 	.word	0x00000000

080043f0 <rt_test_010_009_execute.lto_priv.167>:
static void rt_test_010_009_execute(void) {
 80043f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 80043f4:	f8df b090 	ldr.w	fp, [pc, #144]	; 8004488 <rt_test_010_009_execute.lto_priv.167+0x98>
      chVTDoSetI(&vt1, 1, tmo, NULL);
 80043f8:	4f1e      	ldr	r7, [pc, #120]	; (8004474 <rt_test_010_009_execute.lto_priv.167+0x84>)
 80043fa:	4e1f      	ldr	r6, [pc, #124]	; (8004478 <rt_test_010_009_execute.lto_priv.167+0x88>)
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 80043fc:	4d1f      	ldr	r5, [pc, #124]	; (800447c <rt_test_010_009_execute.lto_priv.167+0x8c>)
  test_set_step(1);
 80043fe:	2301      	movs	r3, #1
 8004400:	f8cb 3000 	str.w	r3, [fp]
    start = test_wait_tick();
 8004404:	f7fe f9fc 	bl	8002800 <test_wait_tick>
    n = 0;
 8004408:	2400      	movs	r4, #0
      chVTDoSetI(&vt1, 1, tmo, NULL);
 800440a:	46a2      	mov	sl, r4
    start = test_wait_tick();
 800440c:	4681      	mov	r9, r0
 800440e:	f04f 0820 	mov.w	r8, #32
 8004412:	f388 8811 	msr	BASEPRI, r8
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8004416:	2300      	movs	r3, #0
 8004418:	463a      	mov	r2, r7
 800441a:	4630      	mov	r0, r6
 800441c:	2101      	movs	r1, #1
 800441e:	f7fc fe0f 	bl	8001040 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8004422:	463a      	mov	r2, r7
 8004424:	2300      	movs	r3, #0
 8004426:	f242 7110 	movw	r1, #10000	; 0x2710
 800442a:	4628      	mov	r0, r5
 800442c:	f7fc fe08 	bl	8001040 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8004430:	4630      	mov	r0, r6
 8004432:	f7fc fdcd 	bl	8000fd0 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8004436:	4628      	mov	r0, r5
 8004438:	f7fc fdca 	bl	8000fd0 <chVTDoResetI>
 800443c:	f38a 8811 	msr	BASEPRI, sl
 8004440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8004444:	f242 720f 	movw	r2, #9999	; 0x270f
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	eba3 0309 	sub.w	r3, r3, r9
 800444e:	4293      	cmp	r3, r2
      n++;
 8004450:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004454:	d9dd      	bls.n	8004412 <rt_test_010_009_execute.lto_priv.167+0x22>
  test_set_step(2);
 8004456:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8004458:	4809      	ldr	r0, [pc, #36]	; (8004480 <rt_test_010_009_execute.lto_priv.167+0x90>)
  test_set_step(2);
 800445a:	f8cb 3000 	str.w	r3, [fp]
    test_print("--- Score : ");
 800445e:	f7fe fa47 	bl	80028f0 <test_print>
    test_printn(n * 2);
 8004462:	0060      	lsls	r0, r4, #1
 8004464:	f7fe f99c 	bl	80027a0 <test_printn>
    test_println(" timers/S");
 8004468:	4806      	ldr	r0, [pc, #24]	; (8004484 <rt_test_010_009_execute.lto_priv.167+0x94>)
}
 800446a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 800446e:	f7fe ba1f 	b.w	80028b0 <test_println>
 8004472:	bf00      	nop
 8004474:	08003e01 	.word	0x08003e01
 8004478:	20001174 	.word	0x20001174
 800447c:	20001188 	.word	0x20001188
 8004480:	0800966c 	.word	0x0800966c
 8004484:	08009650 	.word	0x08009650
 8004488:	200013d8 	.word	0x200013d8
 800448c:	00000000 	.word	0x00000000

08004490 <rt_test_010_008_execute.lto_priv.166>:
static void rt_test_010_008_execute(void) {
 8004490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004494:	b083      	sub	sp, #12
    n = 0;
 8004496:	ac02      	add	r4, sp, #8
  return ch.rlist.current;
 8004498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800456c <rt_test_010_008_execute.lto_priv.166+0xdc>
  test_set_step(1);
 800449c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004570 <rt_test_010_008_execute.lto_priv.166+0xe0>
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80044a0:	4f2d      	ldr	r7, [pc, #180]	; (8004558 <rt_test_010_008_execute.lto_priv.166+0xc8>)
 80044a2:	4e2e      	ldr	r6, [pc, #184]	; (800455c <rt_test_010_008_execute.lto_priv.166+0xcc>)
 80044a4:	4d2e      	ldr	r5, [pc, #184]	; (8004560 <rt_test_010_008_execute.lto_priv.166+0xd0>)
  test_set_step(1);
 80044a6:	2201      	movs	r2, #1
    n = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_set_step(1);
 80044ae:	f8c9 2000 	str.w	r2, [r9]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80044b2:	f7fe f9a5 	bl	8002800 <test_wait_tick>
  return chThdGetSelfX()->prio;
 80044b6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	463a      	mov	r2, r7
 80044be:	4623      	mov	r3, r4
 80044c0:	3901      	subs	r1, #1
 80044c2:	4630      	mov	r0, r6
 80044c4:	f001 ffc4 	bl	8006450 <chThdCreateStatic.constprop.62>
 80044c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80044cc:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	463a      	mov	r2, r7
 80044d2:	4623      	mov	r3, r4
 80044d4:	3901      	subs	r1, #1
 80044d6:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80044da:	f001 ffb9 	bl	8006450 <chThdCreateStatic.constprop.62>
 80044de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80044e2:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	463a      	mov	r2, r7
 80044e8:	4623      	mov	r3, r4
 80044ea:	3901      	subs	r1, #1
 80044ec:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80044f0:	f001 ffae 	bl	8006450 <chThdCreateStatic.constprop.62>
 80044f4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80044f8:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80044fa:	6899      	ldr	r1, [r3, #8]
 80044fc:	463a      	mov	r2, r7
 80044fe:	4623      	mov	r3, r4
 8004500:	3901      	subs	r1, #1
 8004502:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004506:	f001 ffa3 	bl	8006450 <chThdCreateStatic.constprop.62>
 800450a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800450e:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	463a      	mov	r2, r7
 8004514:	3901      	subs	r1, #1
 8004516:	4623      	mov	r3, r4
 8004518:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800451c:	f001 ff98 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 8004520:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8004522:	6128      	str	r0, [r5, #16]
    chThdSleepSeconds(1);
 8004524:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 8004528:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 800452c:	f7fc ff78 	bl	8001420 <chThdSleep>
    test_terminate_threads();
 8004530:	f7fe f986 	bl	8002840 <test_terminate_threads>
    test_wait_threads();
 8004534:	f7fe f974 	bl	8002820 <test_wait_threads>
  test_set_step(3);
 8004538:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800453a:	480a      	ldr	r0, [pc, #40]	; (8004564 <rt_test_010_008_execute.lto_priv.166+0xd4>)
  test_set_step(3);
 800453c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004540:	f7fe f9d6 	bl	80028f0 <test_print>
    test_printn(n);
 8004544:	9801      	ldr	r0, [sp, #4]
 8004546:	f7fe f92b 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 800454a:	4807      	ldr	r0, [pc, #28]	; (8004568 <rt_test_010_008_execute.lto_priv.166+0xd8>)
 800454c:	f7fe f9b0 	bl	80028b0 <test_println>
}
 8004550:	b003      	add	sp, #12
 8004552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004556:	bf00      	nop
 8004558:	08004581 	.word	0x08004581
 800455c:	20000af8 	.word	0x20000af8
 8004560:	20001160 	.word	0x20001160
 8004564:	0800966c 	.word	0x0800966c
 8004568:	08009644 	.word	0x08009644
 800456c:	2000122c 	.word	0x2000122c
 8004570:	200013d8 	.word	0x200013d8
	...

08004580 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d09      	ldr	r5, [pc, #36]	; (80045a8 <bmk_thread8+0x28>)
 8004584:	4604      	mov	r4, r0
    chThdYield();
 8004586:	f7fc f973 	bl	8000870 <chThdYield>
    chThdYield();
 800458a:	f7fc f971 	bl	8000870 <chThdYield>
    chThdYield();
 800458e:	f7fc f96f 	bl	8000870 <chThdYield>
    chThdYield();
 8004592:	f7fc f96d 	bl	8000870 <chThdYield>
    (*(uint32_t *)p) += 4;
 8004596:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8004598:	69aa      	ldr	r2, [r5, #24]
 800459a:	3304      	adds	r3, #4
 800459c:	6023      	str	r3, [r4, #0]
  } while(!chThdShouldTerminateX());
 800459e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80045a2:	075b      	lsls	r3, r3, #29
 80045a4:	d5ef      	bpl.n	8004586 <bmk_thread8+0x6>
}
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	2000122c 	.word	0x2000122c
 80045ac:	00000000 	.word	0x00000000

080045b0 <rt_test_010_007_execute.lto_priv.165>:
static void rt_test_010_007_execute(void) {
 80045b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 80045b4:	4d35      	ldr	r5, [pc, #212]	; (800468c <rt_test_010_007_execute.lto_priv.165+0xdc>)
  test_set_step(1);
 80045b6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80046bc <rt_test_010_007_execute.lto_priv.165+0x10c>
  return chThdGetSelfX()->prio;
 80045ba:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80045bc:	4a34      	ldr	r2, [pc, #208]	; (8004690 <rt_test_010_007_execute.lto_priv.165+0xe0>)
 80045be:	6899      	ldr	r1, [r3, #8]
 80045c0:	4834      	ldr	r0, [pc, #208]	; (8004694 <rt_test_010_007_execute.lto_priv.165+0xe4>)
 80045c2:	4c35      	ldr	r4, [pc, #212]	; (8004698 <rt_test_010_007_execute.lto_priv.165+0xe8>)
      chSemReset(&sem1, 0);
 80045c4:	4f35      	ldr	r7, [pc, #212]	; (800469c <rt_test_010_007_execute.lto_priv.165+0xec>)
  test_set_step(1);
 80045c6:	2301      	movs	r3, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80045c8:	3105      	adds	r1, #5
  test_set_step(1);
 80045ca:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80045ce:	2300      	movs	r3, #0
 80045d0:	f001 ff3e 	bl	8006450 <chThdCreateStatic.constprop.62>
 80045d4:	69ab      	ldr	r3, [r5, #24]
 80045d6:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	4a2d      	ldr	r2, [pc, #180]	; (8004690 <rt_test_010_007_execute.lto_priv.165+0xe0>)
 80045dc:	4830      	ldr	r0, [pc, #192]	; (80046a0 <rt_test_010_007_execute.lto_priv.165+0xf0>)
 80045de:	3104      	adds	r1, #4
 80045e0:	2300      	movs	r3, #0
 80045e2:	f001 ff35 	bl	8006450 <chThdCreateStatic.constprop.62>
 80045e6:	69ab      	ldr	r3, [r5, #24]
 80045e8:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 80045ea:	6899      	ldr	r1, [r3, #8]
 80045ec:	4a28      	ldr	r2, [pc, #160]	; (8004690 <rt_test_010_007_execute.lto_priv.165+0xe0>)
 80045ee:	482d      	ldr	r0, [pc, #180]	; (80046a4 <rt_test_010_007_execute.lto_priv.165+0xf4>)
 80045f0:	3103      	adds	r1, #3
 80045f2:	2300      	movs	r3, #0
 80045f4:	f001 ff2c 	bl	8006450 <chThdCreateStatic.constprop.62>
 80045f8:	69ab      	ldr	r3, [r5, #24]
 80045fa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	4a24      	ldr	r2, [pc, #144]	; (8004690 <rt_test_010_007_execute.lto_priv.165+0xe0>)
 8004600:	4829      	ldr	r0, [pc, #164]	; (80046a8 <rt_test_010_007_execute.lto_priv.165+0xf8>)
 8004602:	3102      	adds	r1, #2
 8004604:	2300      	movs	r3, #0
 8004606:	f001 ff23 	bl	8006450 <chThdCreateStatic.constprop.62>
 800460a:	69ab      	ldr	r3, [r5, #24]
 800460c:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <rt_test_010_007_execute.lto_priv.165+0xe0>)
 8004612:	4826      	ldr	r0, [pc, #152]	; (80046ac <rt_test_010_007_execute.lto_priv.165+0xfc>)
 8004614:	3101      	adds	r1, #1
 8004616:	2300      	movs	r3, #0
 8004618:	f001 ff1a 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 800461c:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800461e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8004620:	f8c8 3000 	str.w	r3, [r8]
    start = test_wait_tick();
 8004624:	f7fe f8ec 	bl	8002800 <test_wait_tick>
    n = 0;
 8004628:	2400      	movs	r4, #0
    start = test_wait_tick();
 800462a:	4606      	mov	r6, r0
 800462c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      chSemReset(&sem1, 0);
 8004630:	2100      	movs	r1, #0
 8004632:	4638      	mov	r0, r7
 8004634:	f7fc fc84 	bl	8000f40 <chSemReset>
 8004638:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 800463a:	f242 720f 	movw	r2, #9999	; 0x270f
 800463e:	1b9b      	subs	r3, r3, r6
 8004640:	4293      	cmp	r3, r2
      n++;
 8004642:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004646:	d9f3      	bls.n	8004630 <rt_test_010_007_execute.lto_priv.165+0x80>
  test_set_step(3);
 8004648:	2303      	movs	r3, #3
 800464a:	f8c8 3000 	str.w	r3, [r8]
    test_terminate_threads();
 800464e:	f7fe f8f7 	bl	8002840 <test_terminate_threads>
    chSemReset(&sem1, 0);
 8004652:	2100      	movs	r1, #0
 8004654:	4811      	ldr	r0, [pc, #68]	; (800469c <rt_test_010_007_execute.lto_priv.165+0xec>)
 8004656:	f7fc fc73 	bl	8000f40 <chSemReset>
    test_wait_threads();
 800465a:	f7fe f8e1 	bl	8002820 <test_wait_threads>
  test_set_step(4);
 800465e:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8004660:	4813      	ldr	r0, [pc, #76]	; (80046b0 <rt_test_010_007_execute.lto_priv.165+0x100>)
  test_set_step(4);
 8004662:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 8004666:	f7fe f943 	bl	80028f0 <test_print>
    test_printn(n);
 800466a:	4620      	mov	r0, r4
 800466c:	f7fe f898 	bl	80027a0 <test_printn>
    test_printn(n * 6);
 8004670:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 8004674:	480f      	ldr	r0, [pc, #60]	; (80046b4 <rt_test_010_007_execute.lto_priv.165+0x104>)
 8004676:	f7fe f93b 	bl	80028f0 <test_print>
    test_printn(n * 6);
 800467a:	0060      	lsls	r0, r4, #1
 800467c:	f7fe f890 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 8004680:	480d      	ldr	r0, [pc, #52]	; (80046b8 <rt_test_010_007_execute.lto_priv.165+0x108>)
}
 8004682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 8004686:	f7fe b913 	b.w	80028b0 <test_println>
 800468a:	bf00      	nop
 800468c:	2000122c 	.word	0x2000122c
 8004690:	080043c1 	.word	0x080043c1
 8004694:	20000af8 	.word	0x20000af8
 8004698:	20001160 	.word	0x20001160
 800469c:	20000ae8 	.word	0x20000ae8
 80046a0:	20000c40 	.word	0x20000c40
 80046a4:	20000d88 	.word	0x20000d88
 80046a8:	20000ed0 	.word	0x20000ed0
 80046ac:	20001018 	.word	0x20001018
 80046b0:	0800966c 	.word	0x0800966c
 80046b4:	08009630 	.word	0x08009630
 80046b8:	08009644 	.word	0x08009644
 80046bc:	200013d8 	.word	0x200013d8

080046c0 <rt_test_010_006_execute.lto_priv.163>:
static void rt_test_010_006_execute(void) {
 80046c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 80046c4:	4b17      	ldr	r3, [pc, #92]	; (8004724 <rt_test_010_006_execute.lto_priv.163+0x64>)
  test_set_step(1);
 80046c6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004734 <rt_test_010_006_execute.lto_priv.163+0x74>
  return chThdGetSelfX()->prio;
 80046ca:	699b      	ldr	r3, [r3, #24]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80046cc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004738 <rt_test_010_006_execute.lto_priv.163+0x78>
  tprio_t prio = chThdGetPriorityX() + 1;
 80046d0:	689d      	ldr	r5, [r3, #8]
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80046d2:	4f15      	ldr	r7, [pc, #84]	; (8004728 <rt_test_010_006_execute.lto_priv.163+0x68>)
  test_set_step(1);
 80046d4:	2301      	movs	r3, #1
  tprio_t prio = chThdGetPriorityX() + 1;
 80046d6:	441d      	add	r5, r3
  test_set_step(1);
 80046d8:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 80046dc:	f7fe f890 	bl	8002800 <test_wait_tick>
    n = 0;
 80046e0:	2400      	movs	r4, #0
    start = test_wait_tick();
 80046e2:	4606      	mov	r6, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 80046e4:	2300      	movs	r3, #0
 80046e6:	4642      	mov	r2, r8
 80046e8:	4629      	mov	r1, r5
 80046ea:	4638      	mov	r0, r7
 80046ec:	f001 feb0 	bl	8006450 <chThdCreateStatic.constprop.62>
 80046f0:	f7fc fbbe 	bl	8000e70 <chThdRelease>
 80046f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 80046f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	1b9b      	subs	r3, r3, r6
 8004700:	4293      	cmp	r3, r2
      n++;
 8004702:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004706:	d9ed      	bls.n	80046e4 <rt_test_010_006_execute.lto_priv.163+0x24>
  test_set_step(2);
 8004708:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800470a:	4808      	ldr	r0, [pc, #32]	; (800472c <rt_test_010_006_execute.lto_priv.163+0x6c>)
  test_set_step(2);
 800470c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004710:	f7fe f8ee 	bl	80028f0 <test_print>
    test_printn(n);
 8004714:	4620      	mov	r0, r4
 8004716:	f7fe f843 	bl	80027a0 <test_printn>
    test_println(" threads/S");
 800471a:	4805      	ldr	r0, [pc, #20]	; (8004730 <rt_test_010_006_execute.lto_priv.163+0x70>)
}
 800471c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 8004720:	f7fe b8c6 	b.w	80028b0 <test_println>
 8004724:	2000122c 	.word	0x2000122c
 8004728:	20000af8 	.word	0x20000af8
 800472c:	0800966c 	.word	0x0800966c
 8004730:	08009624 	.word	0x08009624
 8004734:	200013d8 	.word	0x200013d8
 8004738:	08004c61 	.word	0x08004c61
 800473c:	00000000 	.word	0x00000000

08004740 <rt_test_010_005_execute.lto_priv.162>:
static void rt_test_010_005_execute(void) {
 8004740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <rt_test_010_005_execute.lto_priv.162+0x64>)
  test_set_step(1);
 8004746:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80047b4 <rt_test_010_005_execute.lto_priv.162+0x74>
  return chThdGetSelfX()->prio;
 800474a:	699b      	ldr	r3, [r3, #24]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800474c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80047b8 <rt_test_010_005_execute.lto_priv.162+0x78>
  tprio_t prio = chThdGetPriorityX() - 1;
 8004750:	689d      	ldr	r5, [r3, #8]
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004752:	4f15      	ldr	r7, [pc, #84]	; (80047a8 <rt_test_010_005_execute.lto_priv.162+0x68>)
  test_set_step(1);
 8004754:	2301      	movs	r3, #1
 8004756:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800475a:	f7fe f851 	bl	8002800 <test_wait_tick>
  tprio_t prio = chThdGetPriorityX() - 1;
 800475e:	3d01      	subs	r5, #1
    n = 0;
 8004760:	2400      	movs	r4, #0
    start = test_wait_tick();
 8004762:	4606      	mov	r6, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 8004764:	2300      	movs	r3, #0
 8004766:	4642      	mov	r2, r8
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
 800476c:	f001 fe70 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004770:	f7fc fbb6 	bl	8000ee0 <chThdWait>
 8004774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8004778:	f242 720f 	movw	r2, #9999	; 0x270f
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	1b9b      	subs	r3, r3, r6
 8004780:	4293      	cmp	r3, r2
      n++;
 8004782:	f104 0401 	add.w	r4, r4, #1
    } while (chVTIsSystemTimeWithinX(start, end));
 8004786:	d9ed      	bls.n	8004764 <rt_test_010_005_execute.lto_priv.162+0x24>
  test_set_step(2);
 8004788:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800478a:	4808      	ldr	r0, [pc, #32]	; (80047ac <rt_test_010_005_execute.lto_priv.162+0x6c>)
  test_set_step(2);
 800478c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 8004790:	f7fe f8ae 	bl	80028f0 <test_print>
    test_printn(n);
 8004794:	4620      	mov	r0, r4
 8004796:	f7fe f803 	bl	80027a0 <test_printn>
    test_println(" threads/S");
 800479a:	4805      	ldr	r0, [pc, #20]	; (80047b0 <rt_test_010_005_execute.lto_priv.162+0x70>)
}
 800479c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 80047a0:	f7fe b886 	b.w	80028b0 <test_println>
 80047a4:	2000122c 	.word	0x2000122c
 80047a8:	20000af8 	.word	0x20000af8
 80047ac:	0800966c 	.word	0x0800966c
 80047b0:	08009624 	.word	0x08009624
 80047b4:	200013d8 	.word	0x200013d8
 80047b8:	08004c61 	.word	0x08004c61
 80047bc:	00000000 	.word	0x00000000

080047c0 <rt_test_010_004_execute.lto_priv.161>:
  return ch.rlist.current;
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <rt_test_010_004_execute.lto_priv.161+0xb0>)
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80047c2:	4a2c      	ldr	r2, [pc, #176]	; (8004874 <rt_test_010_004_execute.lto_priv.161+0xb4>)
  return chThdGetSelfX()->prio;
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	482c      	ldr	r0, [pc, #176]	; (8004878 <rt_test_010_004_execute.lto_priv.161+0xb8>)
 80047c8:	6899      	ldr	r1, [r3, #8]
static void rt_test_010_004_execute(void) {
 80047ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80047ce:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004888 <rt_test_010_004_execute.lto_priv.161+0xc8>
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80047d2:	3101      	adds	r1, #1
  test_set_step(1);
 80047d4:	2401      	movs	r4, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80047d6:	2300      	movs	r3, #0
  test_set_step(1);
 80047d8:	f8ca 4000 	str.w	r4, [sl]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80047dc:	f001 fe38 	bl	8006450 <chThdCreateStatic.constprop.62>
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <rt_test_010_004_execute.lto_priv.161+0xbc>)
  test_set_step(2);
 80047e2:	2302      	movs	r3, #2
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80047e4:	4604      	mov	r4, r0
 80047e6:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 80047e8:	f8ca 3000 	str.w	r3, [sl]
    start = test_wait_tick();
 80047ec:	f7fe f808 	bl	8002800 <test_wait_tick>
    n = 0;
 80047f0:	2500      	movs	r5, #0
      chSchWakeupS(tp, MSG_OK);
 80047f2:	462e      	mov	r6, r5
    start = test_wait_tick();
 80047f4:	4681      	mov	r9, r0
 80047f6:	2720      	movs	r7, #32
 80047f8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80047fc:	f387 8811 	msr	BASEPRI, r7
      chSchWakeupS(tp, MSG_OK);
 8004800:	2100      	movs	r1, #0
 8004802:	4620      	mov	r0, r4
 8004804:	f7fc f8f4 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8004808:	4620      	mov	r0, r4
 800480a:	2100      	movs	r1, #0
 800480c:	f7fc f8f0 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8004810:	4620      	mov	r0, r4
 8004812:	2100      	movs	r1, #0
 8004814:	f7fc f8ec 	bl	80009f0 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8004818:	4620      	mov	r0, r4
 800481a:	2100      	movs	r1, #0
 800481c:	f7fc f8e8 	bl	80009f0 <chSchWakeupS>
 8004820:	f386 8811 	msr	BASEPRI, r6
 8004824:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    } while (chVTIsSystemTimeWithinX(start, end));
 8004828:	f242 720f 	movw	r2, #9999	; 0x270f
 800482c:	eba3 0309 	sub.w	r3, r3, r9
 8004830:	4293      	cmp	r3, r2
      n += 4;
 8004832:	f105 0504 	add.w	r5, r5, #4
    } while (chVTIsSystemTimeWithinX(start, end));
 8004836:	d9e1      	bls.n	80047fc <rt_test_010_004_execute.lto_priv.161+0x3c>
  test_set_step(3);
 8004838:	2303      	movs	r3, #3
 800483a:	f8ca 3000 	str.w	r3, [sl]
 800483e:	f387 8811 	msr	BASEPRI, r7
    chSchWakeupS(tp, MSG_TIMEOUT);
 8004842:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004846:	4620      	mov	r0, r4
 8004848:	f7fc f8d2 	bl	80009f0 <chSchWakeupS>
 800484c:	f386 8811 	msr	BASEPRI, r6
    test_wait_threads();
 8004850:	f7fd ffe6 	bl	8002820 <test_wait_threads>
  test_set_step(4);
 8004854:	2304      	movs	r3, #4
    test_print("--- Score : ");
 8004856:	480a      	ldr	r0, [pc, #40]	; (8004880 <rt_test_010_004_execute.lto_priv.161+0xc0>)
  test_set_step(4);
 8004858:	f8ca 3000 	str.w	r3, [sl]
    test_print("--- Score : ");
 800485c:	f7fe f848 	bl	80028f0 <test_print>
    test_printn(n * 2);
 8004860:	0068      	lsls	r0, r5, #1
 8004862:	f7fd ff9d 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 8004866:	4807      	ldr	r0, [pc, #28]	; (8004884 <rt_test_010_004_execute.lto_priv.161+0xc4>)
}
 8004868:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" ctxswc/S");
 800486c:	f7fe b820 	b.w	80028b0 <test_println>
 8004870:	2000122c 	.word	0x2000122c
 8004874:	08004891 	.word	0x08004891
 8004878:	20000af8 	.word	0x20000af8
 800487c:	20001160 	.word	0x20001160
 8004880:	0800966c 	.word	0x0800966c
 8004884:	08009644 	.word	0x08009644
 8004888:	200013d8 	.word	0x200013d8
 800488c:	00000000 	.word	0x00000000

08004890 <bmk_thread4>:
  return ch.rlist.current;
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <bmk_thread4+0x20>)
static THD_FUNCTION(bmk_thread4, p) {
 8004892:	b510      	push	{r4, lr}
 8004894:	2320      	movs	r3, #32
 8004896:	6994      	ldr	r4, [r2, #24]
 8004898:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800489c:	2003      	movs	r0, #3
 800489e:	f7fc f8f7 	bl	8000a90 <chSchGoSleepS>
  } while (msg == MSG_OK);
 80048a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f9      	beq.n	800489c <bmk_thread4+0xc>
 80048a8:	2300      	movs	r3, #0
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	2000122c 	.word	0x2000122c
	...

080048c0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	2620      	movs	r6, #32
 80048c4:	2500      	movs	r5, #0
    tp = chMsgWait();
 80048c6:	f7fc f8fb 	bl	8000ac0 <chMsgWait>
 80048ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80048cc:	f386 8811 	msr	BASEPRI, r6
 80048d0:	4621      	mov	r1, r4
 80048d2:	f7fc f88d 	bl	80009f0 <chSchWakeupS>
 80048d6:	f385 8811 	msr	BASEPRI, r5
  } while (msg);
 80048da:	2c00      	cmp	r4, #0
 80048dc:	d1f3      	bne.n	80048c6 <bmk_thread1+0x6>
}
 80048de:	bd70      	pop	{r4, r5, r6, pc}

080048e0 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	4605      	mov	r5, r0
  start = test_wait_tick();
 80048e6:	f7fd ff8b 	bl	8002800 <test_wait_tick>
  uint32_t n = 0;
 80048ea:	2400      	movs	r4, #0
  start = test_wait_tick();
 80048ec:	4680      	mov	r8, r0
 80048ee:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 80048f2:	f242 760f 	movw	r6, #9999	; 0x270f
    (void)chMsgSend(tp, 1);
 80048f6:	2101      	movs	r1, #1
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7fc f941 	bl	8000b80 <chMsgSend>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	eba3 0308 	sub.w	r3, r3, r8
  } while (chVTIsSystemTimeWithinX(start, end));
 8004904:	42b3      	cmp	r3, r6
    n++;
 8004906:	f104 0401 	add.w	r4, r4, #1
  } while (chVTIsSystemTimeWithinX(start, end));
 800490a:	d9f4      	bls.n	80048f6 <msg_loop_test+0x16>
  (void)chMsgSend(tp, 0);
 800490c:	4628      	mov	r0, r5
 800490e:	2100      	movs	r1, #0
 8004910:	f7fc f936 	bl	8000b80 <chMsgSend>
}
 8004914:	4620      	mov	r0, r4
 8004916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491a:	bf00      	nop
 800491c:	0000      	movs	r0, r0
	...

08004920 <rt_test_010_003_execute.lto_priv.160>:
static void rt_test_010_003_execute(void) {
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	4e2c      	ldr	r6, [pc, #176]	; (80049d8 <rt_test_010_003_execute.lto_priv.160+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004926:	4d2d      	ldr	r5, [pc, #180]	; (80049dc <rt_test_010_003_execute.lto_priv.160+0xbc>)
  return chThdGetSelfX()->prio;
 8004928:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 800492a:	4f2d      	ldr	r7, [pc, #180]	; (80049e0 <rt_test_010_003_execute.lto_priv.160+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800492c:	6899      	ldr	r1, [r3, #8]
 800492e:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <rt_test_010_003_execute.lto_priv.160+0xc4>)
 8004930:	4c2d      	ldr	r4, [pc, #180]	; (80049e8 <rt_test_010_003_execute.lto_priv.160+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004932:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80049f8 <rt_test_010_003_execute.lto_priv.160+0xd8>
  test_set_step(1);
 8004936:	f04f 0e01 	mov.w	lr, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800493a:	3101      	adds	r1, #1
 800493c:	4628      	mov	r0, r5
 800493e:	2300      	movs	r3, #0
  test_set_step(1);
 8004940:	f8c7 e000 	str.w	lr, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004944:	f001 fd84 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004948:	69b3      	ldr	r3, [r6, #24]
 800494a:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800494c:	6899      	ldr	r1, [r3, #8]
  test_set_step(2);
 800494e:	f04f 0e02 	mov.w	lr, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004952:	4642      	mov	r2, r8
 8004954:	3902      	subs	r1, #2
 8004956:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800495a:	2300      	movs	r3, #0
  test_set_step(2);
 800495c:	f8c7 e000 	str.w	lr, [r7]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 8004960:	f001 fd76 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004964:	69b3      	ldr	r3, [r6, #24]
 8004966:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	4642      	mov	r2, r8
 800496c:	3903      	subs	r1, #3
 800496e:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004972:	2300      	movs	r3, #0
 8004974:	f001 fd6c 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004978:	69b3      	ldr	r3, [r6, #24]
 800497a:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	4642      	mov	r2, r8
 8004980:	3904      	subs	r1, #4
 8004982:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8004986:	2300      	movs	r3, #0
 8004988:	f001 fd62 	bl	8006450 <chThdCreateStatic.constprop.62>
 800498c:	69b3      	ldr	r3, [r6, #24]
 800498e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8004990:	6899      	ldr	r1, [r3, #8]
 8004992:	4642      	mov	r2, r8
 8004994:	3905      	subs	r1, #5
 8004996:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800499a:	2300      	movs	r3, #0
 800499c:	f001 fd58 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(3);
 80049a0:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 80049a2:	6120      	str	r0, [r4, #16]
    n = msg_loop_test(threads[0]);
 80049a4:	6820      	ldr	r0, [r4, #0]
  test_set_step(3);
 80049a6:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 80049a8:	f7ff ff9a 	bl	80048e0 <msg_loop_test>
 80049ac:	4604      	mov	r4, r0
    test_wait_threads();
 80049ae:	f7fd ff37 	bl	8002820 <test_wait_threads>
  test_set_step(4);
 80049b2:	2304      	movs	r3, #4
    test_print("--- Score : ");
 80049b4:	480d      	ldr	r0, [pc, #52]	; (80049ec <rt_test_010_003_execute.lto_priv.160+0xcc>)
  test_set_step(4);
 80049b6:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 80049b8:	f7fd ff9a 	bl	80028f0 <test_print>
    test_printn(n);
 80049bc:	4620      	mov	r0, r4
 80049be:	f7fd feef 	bl	80027a0 <test_printn>
    test_print(" msgs/S, ");
 80049c2:	480b      	ldr	r0, [pc, #44]	; (80049f0 <rt_test_010_003_execute.lto_priv.160+0xd0>)
 80049c4:	f7fd ff94 	bl	80028f0 <test_print>
    test_printn(n << 1);
 80049c8:	0060      	lsls	r0, r4, #1
 80049ca:	f7fd fee9 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 80049ce:	4809      	ldr	r0, [pc, #36]	; (80049f4 <rt_test_010_003_execute.lto_priv.160+0xd4>)
}
 80049d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 80049d4:	f7fd bf6c 	b.w	80028b0 <test_println>
 80049d8:	2000122c 	.word	0x2000122c
 80049dc:	20000af8 	.word	0x20000af8
 80049e0:	200013d8 	.word	0x200013d8
 80049e4:	080048c1 	.word	0x080048c1
 80049e8:	20001160 	.word	0x20001160
 80049ec:	0800966c 	.word	0x0800966c
 80049f0:	08009618 	.word	0x08009618
 80049f4:	08009644 	.word	0x08009644
 80049f8:	08004c61 	.word	0x08004c61
 80049fc:	00000000 	.word	0x00000000

08004a00 <rt_test_010_002_execute.lto_priv.159>:
static void rt_test_010_002_execute(void) {
 8004a00:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <rt_test_010_002_execute.lto_priv.159+0x54>)
  test_set_step(1);
 8004a04:	4c14      	ldr	r4, [pc, #80]	; (8004a58 <rt_test_010_002_execute.lto_priv.159+0x58>)
  return chThdGetSelfX()->prio;
 8004a06:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <rt_test_010_002_execute.lto_priv.159+0x5c>)
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	4814      	ldr	r0, [pc, #80]	; (8004a60 <rt_test_010_002_execute.lto_priv.159+0x60>)
 8004a0e:	3101      	adds	r1, #1
  test_set_step(1);
 8004a10:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004a12:	2300      	movs	r3, #0
  test_set_step(1);
 8004a14:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004a16:	f001 fd1b 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004a1a:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <rt_test_010_002_execute.lto_priv.159+0x64>)
  test_set_step(2);
 8004a1c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 8004a1e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8004a20:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8004a22:	f7ff ff5d 	bl	80048e0 <msg_loop_test>
 8004a26:	4605      	mov	r5, r0
    test_wait_threads();
 8004a28:	f7fd fefa 	bl	8002820 <test_wait_threads>
  test_set_step(3);
 8004a2c:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8004a2e:	480e      	ldr	r0, [pc, #56]	; (8004a68 <rt_test_010_002_execute.lto_priv.159+0x68>)
  test_set_step(3);
 8004a30:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8004a32:	f7fd ff5d 	bl	80028f0 <test_print>
    test_printn(n);
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7fd feb2 	bl	80027a0 <test_printn>
    test_print(" msgs/S, ");
 8004a3c:	480b      	ldr	r0, [pc, #44]	; (8004a6c <rt_test_010_002_execute.lto_priv.159+0x6c>)
 8004a3e:	f7fd ff57 	bl	80028f0 <test_print>
    test_printn(n << 1);
 8004a42:	0068      	lsls	r0, r5, #1
 8004a44:	f7fd feac 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 8004a48:	4809      	ldr	r0, [pc, #36]	; (8004a70 <rt_test_010_002_execute.lto_priv.159+0x70>)
}
 8004a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 8004a4e:	f7fd bf2f 	b.w	80028b0 <test_println>
 8004a52:	bf00      	nop
 8004a54:	2000122c 	.word	0x2000122c
 8004a58:	200013d8 	.word	0x200013d8
 8004a5c:	080048c1 	.word	0x080048c1
 8004a60:	20000af8 	.word	0x20000af8
 8004a64:	20001160 	.word	0x20001160
 8004a68:	0800966c 	.word	0x0800966c
 8004a6c:	08009618 	.word	0x08009618
 8004a70:	08009644 	.word	0x08009644
	...

08004a80 <rt_test_010_001_execute.lto_priv.158>:
static void rt_test_010_001_execute(void) {
 8004a80:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <rt_test_010_001_execute.lto_priv.158+0x54>)
  test_set_step(1);
 8004a84:	4c14      	ldr	r4, [pc, #80]	; (8004ad8 <rt_test_010_001_execute.lto_priv.158+0x58>)
  return chThdGetSelfX()->prio;
 8004a86:	699b      	ldr	r3, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <rt_test_010_001_execute.lto_priv.158+0x5c>)
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	4814      	ldr	r0, [pc, #80]	; (8004ae0 <rt_test_010_001_execute.lto_priv.158+0x60>)
 8004a8e:	3901      	subs	r1, #1
  test_set_step(1);
 8004a90:	2501      	movs	r5, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8004a92:	2300      	movs	r3, #0
  test_set_step(1);
 8004a94:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8004a96:	f001 fcdb 	bl	8006450 <chThdCreateStatic.constprop.62>
 8004a9a:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <rt_test_010_001_execute.lto_priv.158+0x64>)
  test_set_step(2);
 8004a9c:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8004a9e:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8004aa0:	6023      	str	r3, [r4, #0]
    n = msg_loop_test(threads[0]);
 8004aa2:	f7ff ff1d 	bl	80048e0 <msg_loop_test>
 8004aa6:	4605      	mov	r5, r0
    test_wait_threads();
 8004aa8:	f7fd feba 	bl	8002820 <test_wait_threads>
  test_set_step(3);
 8004aac:	2303      	movs	r3, #3
    test_print("--- Score : ");
 8004aae:	480e      	ldr	r0, [pc, #56]	; (8004ae8 <rt_test_010_001_execute.lto_priv.158+0x68>)
  test_set_step(3);
 8004ab0:	6023      	str	r3, [r4, #0]
    test_print("--- Score : ");
 8004ab2:	f7fd ff1d 	bl	80028f0 <test_print>
    test_printn(n);
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f7fd fe72 	bl	80027a0 <test_printn>
    test_print(" msgs/S, ");
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <rt_test_010_001_execute.lto_priv.158+0x6c>)
 8004abe:	f7fd ff17 	bl	80028f0 <test_print>
    test_printn(n << 1);
 8004ac2:	0068      	lsls	r0, r5, #1
 8004ac4:	f7fd fe6c 	bl	80027a0 <test_printn>
    test_println(" ctxswc/S");
 8004ac8:	4809      	ldr	r0, [pc, #36]	; (8004af0 <rt_test_010_001_execute.lto_priv.158+0x70>)
}
 8004aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println(" ctxswc/S");
 8004ace:	f7fd beef 	b.w	80028b0 <test_println>
 8004ad2:	bf00      	nop
 8004ad4:	2000122c 	.word	0x2000122c
 8004ad8:	200013d8 	.word	0x200013d8
 8004adc:	080048c1 	.word	0x080048c1
 8004ae0:	20000af8 	.word	0x20000af8
 8004ae4:	20001160 	.word	0x20001160
 8004ae8:	0800966c 	.word	0x0800966c
 8004aec:	08009618 	.word	0x08009618
 8004af0:	08009644 	.word	0x08009644
	...

08004b00 <rt_test_009_002_execute.lto_priv.157>:

static void rt_test_009_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void rt_test_009_002_execute(void) {
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  tprio_t prio;

  /* [9.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8004b02:	4d3f      	ldr	r5, [pc, #252]	; (8004c00 <rt_test_009_002_execute.lto_priv.157+0x100>)
 8004b04:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <rt_test_009_002_execute.lto_priv.157+0x104>)
 8004b06:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <rt_test_009_002_execute.lto_priv.157+0x108>)
 8004b08:	4940      	ldr	r1, [pc, #256]	; (8004c0c <rt_test_009_002_execute.lto_priv.157+0x10c>)
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	6028      	str	r0, [r5, #0]
 8004b0e:	f103 070c 	add.w	r7, r3, #12
 8004b12:	2620      	movs	r6, #32
 8004b14:	2400      	movs	r4, #0
 8004b16:	f386 8811 	msr	BASEPRI, r6
  php->next = mp->next;
 8004b1a:	6808      	ldr	r0, [r1, #0]
 8004b1c:	6010      	str	r0, [r2, #0]
  mp->next = php;
 8004b1e:	600a      	str	r2, [r1, #0]
 8004b20:	f384 8811 	msr	BASEPRI, r4
  {
    for (i = 0; i < 4; i++)
 8004b24:	429f      	cmp	r7, r3
 8004b26:	d002      	beq.n	8004b2e <rt_test_009_002_execute.lto_priv.157+0x2e>
 8004b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b2c:	e7f3      	b.n	8004b16 <rt_test_009_002_execute.lto_priv.157+0x16>
  return ch.rlist.current;
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <rt_test_009_002_execute.lto_priv.157+0x110>)
  }

  /* [9.2.3] Creating the five threads.*/
  test_set_step(3);
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8004b30:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <rt_test_009_002_execute.lto_priv.157+0x114>)
  return chThdGetSelfX()->prio;
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4838      	ldr	r0, [pc, #224]	; (8004c18 <rt_test_009_002_execute.lto_priv.157+0x118>)
 8004b36:	689e      	ldr	r6, [r3, #8]
 8004b38:	4c38      	ldr	r4, [pc, #224]	; (8004c1c <rt_test_009_002_execute.lto_priv.157+0x11c>)
  test_set_step(3);
 8004b3a:	2303      	movs	r3, #3
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8004b3c:	1e71      	subs	r1, r6, #1
  test_set_step(3);
 8004b3e:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8004b40:	f001 feae 	bl	80068a0 <chThdCreateFromMemoryPool.constprop.31>
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8004b44:	1eb1      	subs	r1, r6, #2
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8004b46:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8004b48:	4a35      	ldr	r2, [pc, #212]	; (8004c20 <rt_test_009_002_execute.lto_priv.157+0x120>)
 8004b4a:	4836      	ldr	r0, [pc, #216]	; (8004c24 <rt_test_009_002_execute.lto_priv.157+0x124>)
 8004b4c:	f001 fea8 	bl	80068a0 <chThdCreateFromMemoryPool.constprop.31>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8004b50:	1ef1      	subs	r1, r6, #3
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8004b52:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8004b54:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <rt_test_009_002_execute.lto_priv.157+0x128>)
 8004b56:	4835      	ldr	r0, [pc, #212]	; (8004c2c <rt_test_009_002_execute.lto_priv.157+0x12c>)
 8004b58:	f001 fea2 	bl	80068a0 <chThdCreateFromMemoryPool.constprop.31>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8004b5c:	1f31      	subs	r1, r6, #4
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8004b5e:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8004b60:	4a33      	ldr	r2, [pc, #204]	; (8004c30 <rt_test_009_002_execute.lto_priv.157+0x130>)
 8004b62:	4834      	ldr	r0, [pc, #208]	; (8004c34 <rt_test_009_002_execute.lto_priv.157+0x134>)
 8004b64:	f001 fe9c 	bl	80068a0 <chThdCreateFromMemoryPool.constprop.31>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <rt_test_009_002_execute.lto_priv.157+0x138>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8004b6a:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8004b6c:	1f71      	subs	r1, r6, #5
 8004b6e:	4833      	ldr	r0, [pc, #204]	; (8004c3c <rt_test_009_002_execute.lto_priv.157+0x13c>)
 8004b70:	f001 fe96 	bl	80068a0 <chThdCreateFromMemoryPool.constprop.31>
  }

  /* [9.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
  {
    test_assert((threads[0] != NULL) &&
 8004b74:	6823      	ldr	r3, [r4, #0]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8004b76:	6120      	str	r0, [r4, #16]
  test_set_step(4);
 8004b78:	2204      	movs	r2, #4
 8004b7a:	602a      	str	r2, [r5, #0]
    test_assert((threads[0] != NULL) &&
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03c      	beq.n	8004bfa <rt_test_009_002_execute.lto_priv.157+0xfa>
 8004b80:	6860      	ldr	r0, [r4, #4]
 8004b82:	b128      	cbz	r0, 8004b90 <rt_test_009_002_execute.lto_priv.157+0x90>
 8004b84:	68a0      	ldr	r0, [r4, #8]
 8004b86:	b118      	cbz	r0, 8004b90 <rt_test_009_002_execute.lto_priv.157+0x90>
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	3000      	adds	r0, #0
 8004b8c:	bf18      	it	ne
 8004b8e:	2001      	movne	r0, #1
 8004b90:	492b      	ldr	r1, [pc, #172]	; (8004c40 <rt_test_009_002_execute.lto_priv.157+0x140>)
 8004b92:	f7fe f975 	bl	8002e80 <_test_assert>
 8004b96:	b100      	cbz	r0, 8004b9a <rt_test_009_002_execute.lto_priv.157+0x9a>
 8004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                (threads[1] != NULL) &&
                (threads[2] != NULL) &&
                (threads[3] != NULL),
                "thread creation failed");
    test_assert(threads[4] == NULL,
 8004b9a:	6920      	ldr	r0, [r4, #16]
 8004b9c:	4929      	ldr	r1, [pc, #164]	; (8004c44 <rt_test_009_002_execute.lto_priv.157+0x144>)
 8004b9e:	fab0 f080 	clz	r0, r0
 8004ba2:	0940      	lsrs	r0, r0, #5
 8004ba4:	f7fe f96c 	bl	8002e80 <_test_assert>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1f5      	bne.n	8004b98 <rt_test_009_002_execute.lto_priv.157+0x98>
                "thread creation not failed");
  }

  /* [9.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8004bac:	2305      	movs	r3, #5
 8004bae:	602b      	str	r3, [r5, #0]
  {
    test_wait_threads();
 8004bb0:	f7fd fe36 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8004bb4:	4924      	ldr	r1, [pc, #144]	; (8004c48 <rt_test_009_002_execute.lto_priv.157+0x148>)
 8004bb6:	4825      	ldr	r0, [pc, #148]	; (8004c4c <rt_test_009_002_execute.lto_priv.157+0x14c>)
 8004bb8:	f7fe f93a 	bl	8002e30 <_test_assert_sequence>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1eb      	bne.n	8004b98 <rt_test_009_002_execute.lto_priv.157+0x98>
  }

  /* [9.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 8004bc0:	2306      	movs	r3, #6
  {
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8004bc2:	4f12      	ldr	r7, [pc, #72]	; (8004c0c <rt_test_009_002_execute.lto_priv.157+0x10c>)
 8004bc4:	4e22      	ldr	r6, [pc, #136]	; (8004c50 <rt_test_009_002_execute.lto_priv.157+0x150>)
  test_set_step(6);
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	2404      	movs	r4, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8004bca:	4638      	mov	r0, r7
 8004bcc:	f7fe fac8 	bl	8003160 <chPoolAlloc>
 8004bd0:	3000      	adds	r0, #0
 8004bd2:	bf18      	it	ne
 8004bd4:	2001      	movne	r0, #1
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	f7fe f952 	bl	8002e80 <_test_assert>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d1db      	bne.n	8004b98 <rt_test_009_002_execute.lto_priv.157+0x98>
    for (i = 0; i < 4; i++)
 8004be0:	3c01      	subs	r4, #1
 8004be2:	d1f2      	bne.n	8004bca <rt_test_009_002_execute.lto_priv.157+0xca>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004be4:	4809      	ldr	r0, [pc, #36]	; (8004c0c <rt_test_009_002_execute.lto_priv.157+0x10c>)
 8004be6:	f7fe fabb 	bl	8003160 <chPoolAlloc>
 8004bea:	fab0 f080 	clz	r0, r0
 8004bee:	0940      	lsrs	r0, r0, #5
 8004bf0:	4918      	ldr	r1, [pc, #96]	; (8004c54 <rt_test_009_002_execute.lto_priv.157+0x154>)
  }
}
 8004bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004bf6:	f7fe b943 	b.w	8002e80 <_test_assert>
    test_assert((threads[0] != NULL) &&
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	e7c8      	b.n	8004b90 <rt_test_009_002_execute.lto_priv.157+0x90>
 8004bfe:	bf00      	nop
 8004c00:	200013d8 	.word	0x200013d8
 8004c04:	08009728 	.word	0x08009728
 8004c08:	20000af8 	.word	0x20000af8
 8004c0c:	20001330 	.word	0x20001330
 8004c10:	2000122c 	.word	0x2000122c
 8004c14:	08007ac8 	.word	0x08007ac8
 8004c18:	08007acc 	.word	0x08007acc
 8004c1c:	20001160 	.word	0x20001160
 8004c20:	08007aec 	.word	0x08007aec
 8004c24:	08007af0 	.word	0x08007af0
 8004c28:	08007af8 	.word	0x08007af8
 8004c2c:	08007afc 	.word	0x08007afc
 8004c30:	08007a00 	.word	0x08007a00
 8004c34:	080095e4 	.word	0x080095e4
 8004c38:	08007a08 	.word	0x08007a08
 8004c3c:	080095ec 	.word	0x080095ec
 8004c40:	08007ad4 	.word	0x08007ad4
 8004c44:	08007b04 	.word	0x08007b04
 8004c48:	08007a30 	.word	0x08007a30
 8004c4c:	08007a0c 	.word	0x08007a0c
 8004c50:	080095f4 	.word	0x080095f4
 8004c54:	08009604 	.word	0x08009604
	...

08004c60 <bmk_thread3>:
  chThdExit((msg_t)p);
 8004c60:	f7fc b98e 	b.w	8000f80 <chThdExit>
	...

08004c70 <rt_test_006_005_setup.lto_priv.132>:
  tqp->next = (thread_t *)tqp;
 8004c70:	4b02      	ldr	r3, [pc, #8]	; (8004c7c <rt_test_006_005_setup.lto_priv.132+0xc>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004c76:	605b      	str	r3, [r3, #4]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	4770      	bx	lr
 8004c7c:	20000854 	.word	0x20000854

08004c80 <rt_test_006_004_setup.lto_priv.129>:
  tqp->next = (thread_t *)tqp;
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <rt_test_006_004_setup.lto_priv.129+0x14>)
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <rt_test_006_004_setup.lto_priv.129+0x18>)
 8004c84:	6012      	str	r2, [r2, #0]
 8004c86:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
 8004c88:	6052      	str	r2, [r2, #4]
 8004c8a:	6091      	str	r1, [r2, #8]
 8004c8c:	6099      	str	r1, [r3, #8]
  tqp->next = (thread_t *)tqp;
 8004c8e:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004c90:	605b      	str	r3, [r3, #4]
 8004c92:	4770      	bx	lr
 8004c94:	20000854 	.word	0x20000854
 8004c98:	20000808 	.word	0x20000808
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <rt_test_006_001_setup.lto_priv.127>:
 8004ca0:	f7ff bfe6 	b.w	8004c70 <rt_test_006_005_setup.lto_priv.132>
	...

08004cb0 <rt_test_005_005_setup.lto_priv.122>:
  tqp->next = (thread_t *)tqp;
 8004cb0:	4b02      	ldr	r3, [pc, #8]	; (8004cbc <rt_test_005_005_setup.lto_priv.122+0xc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004cb6:	605b      	str	r3, [r3, #4]
 8004cb8:	609a      	str	r2, [r3, #8]
 8004cba:	4770      	bx	lr
 8004cbc:	20001340 	.word	0x20001340

08004cc0 <rt_test_005_004_setup.lto_priv.120>:
 8004cc0:	f7ff bff6 	b.w	8004cb0 <rt_test_005_005_setup.lto_priv.122>
	...

08004cd0 <rt_test_005_003_setup.lto_priv.118>:
 8004cd0:	f7ff bfee 	b.w	8004cb0 <rt_test_005_005_setup.lto_priv.122>
	...

08004ce0 <rt_test_005_002_setup.lto_priv.116>:
 8004ce0:	f7ff bfe6 	b.w	8004cb0 <rt_test_005_005_setup.lto_priv.122>
	...

08004cf0 <rt_test_005_001_setup.lto_priv.113>:
  tqp->next = (thread_t *)tqp;
 8004cf0:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <rt_test_005_001_setup.lto_priv.113+0xc>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8004cf6:	605b      	str	r3, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	4770      	bx	lr
 8004cfc:	20001340 	.word	0x20001340

08004d00 <rt_test_006_007_setup.lto_priv.134>:
 8004d00:	f7fc befe 	b.w	8001b00 <rt_test_006_008_setup.lto_priv.136>
	...

08004d10 <rt_test_006_005_execute.lto_priv.133>:
static void rt_test_006_005_execute(void) {
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8004d14:	4d4e      	ldr	r5, [pc, #312]	; (8004e50 <rt_test_006_005_execute.lto_priv.133+0x140>)
  test_set_step(2);
 8004d16:	4c4f      	ldr	r4, [pc, #316]	; (8004e54 <rt_test_006_005_execute.lto_priv.133+0x144>)
  return chThdGetSelfX()->prio;
 8004d18:	69aa      	ldr	r2, [r5, #24]
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	6896      	ldr	r6, [r2, #8]
 8004d1e:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8004d20:	f001 fc5e 	bl	80065e0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
 8004d24:	494c      	ldr	r1, [pc, #304]	; (8004e58 <rt_test_006_005_execute.lto_priv.133+0x148>)
 8004d26:	f7fe f8ab 	bl	8002e80 <_test_assert>
 8004d2a:	b108      	cbz	r0, 8004d30 <rt_test_006_005_execute.lto_priv.133+0x20>
 8004d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(3);
 8004d30:	2303      	movs	r3, #3
 8004d32:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8004d34:	f001 fc54 	bl	80065e0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
 8004d38:	f080 0001 	eor.w	r0, r0, #1
 8004d3c:	b2c0      	uxtb	r0, r0
 8004d3e:	4947      	ldr	r1, [pc, #284]	; (8004e5c <rt_test_006_005_execute.lto_priv.133+0x14c>)
 8004d40:	f7fe f89e 	bl	8002e80 <_test_assert>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d1f1      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
    chMtxUnlock(&m1);
 8004d48:	4f45      	ldr	r7, [pc, #276]	; (8004e60 <rt_test_006_005_execute.lto_priv.133+0x150>)
  test_set_step(4);
 8004d4a:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 8004d4c:	4638      	mov	r0, r7
  test_set_step(4);
 8004d4e:	6023      	str	r3, [r4, #0]
    chMtxUnlock(&m1);
 8004d50:	f7fb ff8e 	bl	8000c70 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 8004d54:	68b8      	ldr	r0, [r7, #8]
 8004d56:	4943      	ldr	r1, [pc, #268]	; (8004e64 <rt_test_006_005_execute.lto_priv.133+0x154>)
 8004d58:	fab0 f080 	clz	r0, r0
 8004d5c:	0940      	lsrs	r0, r0, #5
 8004d5e:	f7fe f88f 	bl	8002e80 <_test_assert>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d1e2      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8004d66:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8004d68:	493f      	ldr	r1, [pc, #252]	; (8004e68 <rt_test_006_005_execute.lto_priv.133+0x158>)
 8004d6a:	1bc0      	subs	r0, r0, r7
 8004d6c:	fab0 f080 	clz	r0, r0
 8004d70:	0940      	lsrs	r0, r0, #5
 8004d72:	f7fe f885 	bl	8002e80 <_test_assert>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d1d8      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
 8004d7a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004d7c:	493b      	ldr	r1, [pc, #236]	; (8004e6c <rt_test_006_005_execute.lto_priv.133+0x15c>)
 8004d7e:	6898      	ldr	r0, [r3, #8]
 8004d80:	1b80      	subs	r0, r0, r6
 8004d82:	fab0 f080 	clz	r0, r0
  test_set_step(5);
 8004d86:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004d88:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 8004d8a:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004d8c:	f7fe f878 	bl	8002e80 <_test_assert>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1cb      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
  test_set_step(6);
 8004d94:	2306      	movs	r3, #6
 8004d96:	6023      	str	r3, [r4, #0]
    b = chMtxTryLock(&m1);
 8004d98:	f001 fc22 	bl	80065e0 <chMtxTryLock.constprop.53>
    test_assert(b, "already locked");
 8004d9c:	492e      	ldr	r1, [pc, #184]	; (8004e58 <rt_test_006_005_execute.lto_priv.133+0x148>)
 8004d9e:	f7fe f86f 	bl	8002e80 <_test_assert>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d1c2      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
    b = chMtxTryLock(&m1);
 8004da6:	f001 fc1b 	bl	80065e0 <chMtxTryLock.constprop.53>
    test_assert(!b, "not locked");
 8004daa:	f080 0001 	eor.w	r0, r0, #1
 8004dae:	b2c0      	uxtb	r0, r0
 8004db0:	492a      	ldr	r1, [pc, #168]	; (8004e5c <rt_test_006_005_execute.lto_priv.133+0x14c>)
 8004db2:	f7fe f865 	bl	8002e80 <_test_assert>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1b8      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8004dba:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 8004dc4:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8004dc8:	b1e3      	cbz	r3, 8004e04 <rt_test_006_005_execute.lto_priv.133+0xf4>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
 8004dca:	4680      	mov	r8, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8004dcc:	681a      	ldr	r2, [r3, #0]
      ctp->mtxlist = mp->next;
 8004dce:	68d9      	ldr	r1, [r3, #12]
 8004dd0:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8004dd4:	4293      	cmp	r3, r2
        (void) chSchReadyI(tp);
 8004dd6:	4610      	mov	r0, r2
      if (chMtxQueueNotEmptyS(mp)) {
 8004dd8:	d036      	beq.n	8004e48 <rt_test_006_005_execute.lto_priv.133+0x138>
  tqp->next             = tp->queue.next;
 8004dda:	6811      	ldr	r1, [r2, #0]
        mp->next = tp->mtxlist;
 8004ddc:	f8d2 e038 	ldr.w	lr, [r2, #56]	; 0x38
 8004de0:	6019      	str	r1, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004de2:	604b      	str	r3, [r1, #4]
        mp->owner = tp;
 8004de4:	609a      	str	r2, [r3, #8]
        mp->next = tp->mtxlist;
 8004de6:	f8c3 e00c 	str.w	lr, [r3, #12]
        tp->mtxlist = mp;
 8004dea:	6393      	str	r3, [r2, #56]	; 0x38
        (void) chSchReadyI(tp);
 8004dec:	f7fb feb0 	bl	8000b50 <chSchReadyI>
 8004df0:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
      }
    } while (ctp->mtxlist != NULL);
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e9      	bne.n	8004dcc <rt_test_006_005_execute.lto_priv.133+0xbc>
    ctp->prio = ctp->realprio;
 8004df8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004dfc:	f8c9 3008 	str.w	r3, [r9, #8]
    chSchRescheduleS();
 8004e00:	f7fb fdce 	bl	80009a0 <chSchRescheduleS>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8004e0a:	68b8      	ldr	r0, [r7, #8]
 8004e0c:	4915      	ldr	r1, [pc, #84]	; (8004e64 <rt_test_006_005_execute.lto_priv.133+0x154>)
 8004e0e:	fab0 f080 	clz	r0, r0
 8004e12:	0940      	lsrs	r0, r0, #5
 8004e14:	f7fe f834 	bl	8002e80 <_test_assert>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d187      	bne.n	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8004e1c:	6838      	ldr	r0, [r7, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8004e1e:	4912      	ldr	r1, [pc, #72]	; (8004e68 <rt_test_006_005_execute.lto_priv.133+0x158>)
 8004e20:	1bc7      	subs	r7, r0, r7
 8004e22:	4278      	negs	r0, r7
 8004e24:	4178      	adcs	r0, r7
 8004e26:	f7fe f82b 	bl	8002e80 <_test_assert>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	f47f af7e 	bne.w	8004d2c <rt_test_006_005_execute.lto_priv.133+0x1c>
 8004e30:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004e32:	490e      	ldr	r1, [pc, #56]	; (8004e6c <rt_test_006_005_execute.lto_priv.133+0x15c>)
 8004e34:	6898      	ldr	r0, [r3, #8]
 8004e36:	1b82      	subs	r2, r0, r6
  test_set_step(7);
 8004e38:	2307      	movs	r3, #7
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004e3a:	4250      	negs	r0, r2
  test_set_step(7);
 8004e3c:	6023      	str	r3, [r4, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004e3e:	4150      	adcs	r0, r2
}
 8004e40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 8004e44:	f7fe b81c 	b.w	8002e80 <_test_assert>
        mp->owner = NULL;
 8004e48:	f8c3 8008 	str.w	r8, [r3, #8]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	e7d1      	b.n	8004df4 <rt_test_006_005_execute.lto_priv.133+0xe4>
 8004e50:	2000122c 	.word	0x2000122c
 8004e54:	200013d8 	.word	0x200013d8
 8004e58:	080097c8 	.word	0x080097c8
 8004e5c:	080097d8 	.word	0x080097d8
 8004e60:	20000854 	.word	0x20000854
 8004e64:	080097e4 	.word	0x080097e4
 8004e68:	080097f0 	.word	0x080097f0
 8004e6c:	08009800 	.word	0x08009800

08004e70 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8004e70:	b510      	push	{r4, lr}
  chMtxLock(&m1);
 8004e72:	4c06      	ldr	r4, [pc, #24]	; (8004e8c <thread4A+0x1c>)
  chThdSleepMilliseconds(50);
 8004e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e78:	f7fc fad2 	bl	8001420 <chThdSleep>
  chMtxLock(&m1);
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7fb ff97 	bl	8000db0 <chMtxLock>
  chMtxUnlock(&m1);
 8004e82:	4620      	mov	r0, r4
}
 8004e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8004e88:	f7fb bef2 	b.w	8000c70 <chMtxUnlock>
 8004e8c:	20000854 	.word	0x20000854

08004e90 <rt_test_006_004_execute.lto_priv.131>:
static void rt_test_006_004_execute(void) {
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8004e94:	4d40      	ldr	r5, [pc, #256]	; (8004f98 <rt_test_006_004_execute.lto_priv.131+0x108>)
  test_set_step(2);
 8004e96:	4e41      	ldr	r6, [pc, #260]	; (8004f9c <rt_test_006_004_execute.lto_priv.131+0x10c>)
  return chThdGetSelfX()->prio;
 8004e98:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <rt_test_006_004_execute.lto_priv.131+0x110>)
 8004e9c:	6894      	ldr	r4, [r2, #8]
 8004e9e:	4841      	ldr	r0, [pc, #260]	; (8004fa4 <rt_test_006_004_execute.lto_priv.131+0x114>)
 8004ea0:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <rt_test_006_004_execute.lto_priv.131+0x118>)
 8004ea2:	4f42      	ldr	r7, [pc, #264]	; (8004fac <rt_test_006_004_execute.lto_priv.131+0x11c>)
    pa = p + 1;
 8004ea4:	f104 0801 	add.w	r8, r4, #1
  test_set_step(2);
 8004ea8:	f04f 0e02 	mov.w	lr, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004eac:	4641      	mov	r1, r8
  test_set_step(2);
 8004eae:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004eb2:	f001 facd 	bl	8006450 <chThdCreateStatic.constprop.62>
    pb = p + 2;
 8004eb6:	f104 0902 	add.w	r9, r4, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004eba:	4649      	mov	r1, r9
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8004ebc:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004ebe:	4b3c      	ldr	r3, [pc, #240]	; (8004fb0 <rt_test_006_004_execute.lto_priv.131+0x120>)
 8004ec0:	4a3c      	ldr	r2, [pc, #240]	; (8004fb4 <rt_test_006_004_execute.lto_priv.131+0x124>)
 8004ec2:	483d      	ldr	r0, [pc, #244]	; (8004fb8 <rt_test_006_004_execute.lto_priv.131+0x128>)
 8004ec4:	f001 fac4 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(3);
 8004ec8:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8004eca:	6078      	str	r0, [r7, #4]
    chMtxLock(&m1);
 8004ecc:	483b      	ldr	r0, [pc, #236]	; (8004fbc <rt_test_006_004_execute.lto_priv.131+0x12c>)
  test_set_step(3);
 8004ece:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8004ed0:	f7fb ff6e 	bl	8000db0 <chMtxLock>
 8004ed4:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8004ed6:	493a      	ldr	r1, [pc, #232]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004ed8:	6898      	ldr	r0, [r3, #8]
 8004eda:	1b00      	subs	r0, r0, r4
 8004edc:	fab0 f080 	clz	r0, r0
 8004ee0:	0940      	lsrs	r0, r0, #5
 8004ee2:	f7fd ffcd 	bl	8002e80 <_test_assert>
 8004ee6:	b108      	cbz	r0, 8004eec <rt_test_006_004_execute.lto_priv.131+0x5c>
 8004ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(4);
 8004eec:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8004eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8004ef2:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8004ef4:	f7fc fa94 	bl	8001420 <chThdSleep>
 8004ef8:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8004efa:	4931      	ldr	r1, [pc, #196]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004efc:	6898      	ldr	r0, [r3, #8]
 8004efe:	eba0 0008 	sub.w	r0, r0, r8
 8004f02:	fab0 f080 	clz	r0, r0
 8004f06:	0940      	lsrs	r0, r0, #5
 8004f08:	f7fd ffba 	bl	8002e80 <_test_assert>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1eb      	bne.n	8004ee8 <rt_test_006_004_execute.lto_priv.131+0x58>
  test_set_step(5);
 8004f10:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8004f12:	482c      	ldr	r0, [pc, #176]	; (8004fc4 <rt_test_006_004_execute.lto_priv.131+0x134>)
  test_set_step(5);
 8004f14:	6033      	str	r3, [r6, #0]
    chMtxLock(&m2);
 8004f16:	f7fb ff4b 	bl	8000db0 <chMtxLock>
 8004f1a:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8004f1c:	4928      	ldr	r1, [pc, #160]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004f1e:	6898      	ldr	r0, [r3, #8]
 8004f20:	eba0 0008 	sub.w	r0, r0, r8
 8004f24:	fab0 f080 	clz	r0, r0
 8004f28:	0940      	lsrs	r0, r0, #5
 8004f2a:	f7fd ffa9 	bl	8002e80 <_test_assert>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d1da      	bne.n	8004ee8 <rt_test_006_004_execute.lto_priv.131+0x58>
  test_set_step(6);
 8004f32:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8004f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8004f38:	6033      	str	r3, [r6, #0]
    chThdSleepMilliseconds(100);
 8004f3a:	f7fc fa71 	bl	8001420 <chThdSleep>
 8004f3e:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8004f40:	491f      	ldr	r1, [pc, #124]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004f42:	6898      	ldr	r0, [r3, #8]
 8004f44:	eba0 0009 	sub.w	r0, r0, r9
 8004f48:	fab0 f080 	clz	r0, r0
 8004f4c:	0940      	lsrs	r0, r0, #5
 8004f4e:	f7fd ff97 	bl	8002e80 <_test_assert>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d1c8      	bne.n	8004ee8 <rt_test_006_004_execute.lto_priv.131+0x58>
  test_set_step(7);
 8004f56:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8004f58:	481a      	ldr	r0, [pc, #104]	; (8004fc4 <rt_test_006_004_execute.lto_priv.131+0x134>)
  test_set_step(7);
 8004f5a:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m2);
 8004f5c:	f7fb fe88 	bl	8000c70 <chMtxUnlock>
 8004f60:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8004f62:	4917      	ldr	r1, [pc, #92]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004f64:	6898      	ldr	r0, [r3, #8]
 8004f66:	eba0 0008 	sub.w	r0, r0, r8
 8004f6a:	fab0 f080 	clz	r0, r0
 8004f6e:	0940      	lsrs	r0, r0, #5
 8004f70:	f7fd ff86 	bl	8002e80 <_test_assert>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1b7      	bne.n	8004ee8 <rt_test_006_004_execute.lto_priv.131+0x58>
  test_set_step(8);
 8004f78:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8004f7a:	4810      	ldr	r0, [pc, #64]	; (8004fbc <rt_test_006_004_execute.lto_priv.131+0x12c>)
  test_set_step(8);
 8004f7c:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 8004f7e:	f7fb fe77 	bl	8000c70 <chMtxUnlock>
 8004f82:	69ab      	ldr	r3, [r5, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8004f84:	490e      	ldr	r1, [pc, #56]	; (8004fc0 <rt_test_006_004_execute.lto_priv.131+0x130>)
 8004f86:	6898      	ldr	r0, [r3, #8]
 8004f88:	1b00      	subs	r0, r0, r4
 8004f8a:	fab0 f080 	clz	r0, r0
 8004f8e:	0940      	lsrs	r0, r0, #5
}
 8004f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8004f94:	f7fd bf74 	b.w	8002e80 <_test_assert>
 8004f98:	2000122c 	.word	0x2000122c
 8004f9c:	200013d8 	.word	0x200013d8
 8004fa0:	08007ac8 	.word	0x08007ac8
 8004fa4:	20000af8 	.word	0x20000af8
 8004fa8:	08004e71 	.word	0x08004e71
 8004fac:	20001160 	.word	0x20001160
 8004fb0:	08007aec 	.word	0x08007aec
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	20000c40 	.word	0x20000c40
 8004fbc:	20000854 	.word	0x20000854
 8004fc0:	08009800 	.word	0x08009800
 8004fc4:	20000808 	.word	0x20000808
	...

08004fd0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 8004fd0:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8004fd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fd6:	f7fc fa23 	bl	8001420 <chThdSleep>
 8004fda:	2320      	movs	r3, #32
 8004fdc:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8004fe0:	4c06      	ldr	r4, [pc, #24]	; (8004ffc <thread4B+0x2c>)
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7fb fe7c 	bl	8000ce0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7fb fe19 	bl	8000c20 <chMtxUnlockS>
  chSchRescheduleS();
 8004fee:	f7fb fcd7 	bl	80009a0 <chSchRescheduleS>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000808 	.word	0x20000808

08005000 <rt_test_005_006_teardown.lto_priv.125>:
 *   must not change from "not taken".
 * .
 */

static void rt_test_005_006_teardown(void) {
  test_wait_threads();
 8005000:	f7fd bc0e 	b.w	8002820 <test_wait_threads>
	...

08005010 <rt_test_006_004_teardown.lto_priv.130>:
 8005010:	f7fd bc06 	b.w	8002820 <test_wait_threads>
	...

08005020 <rt_test_005_005_teardown.lto_priv.123>:
 8005020:	f7fd bbfe 	b.w	8002820 <test_wait_threads>
	...

08005030 <rt_test_006_001_execute.lto_priv.128>:
static void rt_test_006_001_execute(void) {
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8005032:	4f24      	ldr	r7, [pc, #144]	; (80050c4 <rt_test_006_001_execute.lto_priv.128+0x94>)
  test_set_step(2);
 8005034:	4e24      	ldr	r6, [pc, #144]	; (80050c8 <rt_test_006_001_execute.lto_priv.128+0x98>)
  return chThdGetSelfX()->prio;
 8005036:	69bb      	ldr	r3, [r7, #24]
    chMtxLock(&m1);
 8005038:	4824      	ldr	r0, [pc, #144]	; (80050cc <rt_test_006_001_execute.lto_priv.128+0x9c>)
 800503a:	689c      	ldr	r4, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800503c:	4d24      	ldr	r5, [pc, #144]	; (80050d0 <rt_test_006_001_execute.lto_priv.128+0xa0>)
  test_set_step(2);
 800503e:	2302      	movs	r3, #2
 8005040:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8005042:	f7fb feb5 	bl	8000db0 <chMtxLock>
  test_set_step(3);
 8005046:	f04f 0e03 	mov.w	lr, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800504a:	1c61      	adds	r1, r4, #1
 800504c:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <rt_test_006_001_execute.lto_priv.128+0xa4>)
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <rt_test_006_001_execute.lto_priv.128+0xa8>)
 8005050:	4822      	ldr	r0, [pc, #136]	; (80050dc <rt_test_006_001_execute.lto_priv.128+0xac>)
  test_set_step(3);
 8005052:	f8c6 e000 	str.w	lr, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005056:	f001 f9fb 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800505a:	1ca1      	adds	r1, r4, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 800505c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <rt_test_006_001_execute.lto_priv.128+0xb0>)
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <rt_test_006_001_execute.lto_priv.128+0xa8>)
 8005062:	4820      	ldr	r0, [pc, #128]	; (80050e4 <rt_test_006_001_execute.lto_priv.128+0xb4>)
 8005064:	f001 f9f4 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005068:	1ce1      	adds	r1, r4, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800506a:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800506c:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <rt_test_006_001_execute.lto_priv.128+0xb8>)
 800506e:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <rt_test_006_001_execute.lto_priv.128+0xa8>)
 8005070:	481e      	ldr	r0, [pc, #120]	; (80050ec <rt_test_006_001_execute.lto_priv.128+0xbc>)
 8005072:	f001 f9ed 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005076:	1d21      	adds	r1, r4, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005078:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <rt_test_006_001_execute.lto_priv.128+0xc0>)
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <rt_test_006_001_execute.lto_priv.128+0xa8>)
 800507e:	481d      	ldr	r0, [pc, #116]	; (80050f4 <rt_test_006_001_execute.lto_priv.128+0xc4>)
 8005080:	f001 f9e6 	bl	8006450 <chThdCreateStatic.constprop.62>
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005084:	1d61      	adds	r1, r4, #5
 8005086:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <rt_test_006_001_execute.lto_priv.128+0xa8>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005088:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <rt_test_006_001_execute.lto_priv.128+0xc8>)
 800508c:	481b      	ldr	r0, [pc, #108]	; (80050fc <rt_test_006_001_execute.lto_priv.128+0xcc>)
 800508e:	f001 f9df 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(4);
 8005092:	2304      	movs	r3, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005094:	6128      	str	r0, [r5, #16]
    chMtxUnlock(&m1);
 8005096:	480d      	ldr	r0, [pc, #52]	; (80050cc <rt_test_006_001_execute.lto_priv.128+0x9c>)
  test_set_step(4);
 8005098:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 800509a:	f7fb fde9 	bl	8000c70 <chMtxUnlock>
    test_wait_threads();
 800509e:	f7fd fbbf 	bl	8002820 <test_wait_threads>
 80050a2:	69bb      	ldr	r3, [r7, #24]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 80050a4:	4916      	ldr	r1, [pc, #88]	; (8005100 <rt_test_006_001_execute.lto_priv.128+0xd0>)
 80050a6:	6898      	ldr	r0, [r3, #8]
 80050a8:	1b00      	subs	r0, r0, r4
 80050aa:	fab0 f080 	clz	r0, r0
 80050ae:	0940      	lsrs	r0, r0, #5
 80050b0:	f7fd fee6 	bl	8002e80 <_test_assert>
 80050b4:	b100      	cbz	r0, 80050b8 <rt_test_006_001_execute.lto_priv.128+0x88>
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 80050b8:	4912      	ldr	r1, [pc, #72]	; (8005104 <rt_test_006_001_execute.lto_priv.128+0xd4>)
 80050ba:	4813      	ldr	r0, [pc, #76]	; (8005108 <rt_test_006_001_execute.lto_priv.128+0xd8>)
}
 80050bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80050c0:	f7fd beb6 	b.w	8002e30 <_test_assert_sequence>
 80050c4:	2000122c 	.word	0x2000122c
 80050c8:	200013d8 	.word	0x200013d8
 80050cc:	20000854 	.word	0x20000854
 80050d0:	20001160 	.word	0x20001160
 80050d4:	08007a08 	.word	0x08007a08
 80050d8:	080051d1 	.word	0x080051d1
 80050dc:	20000af8 	.word	0x20000af8
 80050e0:	08007a00 	.word	0x08007a00
 80050e4:	20000c40 	.word	0x20000c40
 80050e8:	08007af8 	.word	0x08007af8
 80050ec:	20000d88 	.word	0x20000d88
 80050f0:	08007aec 	.word	0x08007aec
 80050f4:	20000ed0 	.word	0x20000ed0
 80050f8:	08007ac8 	.word	0x08007ac8
 80050fc:	20001018 	.word	0x20001018
 8005100:	08009800 	.word	0x08009800
 8005104:	08007a30 	.word	0x08007a30
 8005108:	08007a04 	.word	0x08007a04
 800510c:	00000000 	.word	0x00000000

08005110 <rt_test_005_004_execute.lto_priv.121>:
  return ch.rlist.current;
 8005110:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <rt_test_005_004_execute.lto_priv.121+0x90>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8005112:	4824      	ldr	r0, [pc, #144]	; (80051a4 <rt_test_005_004_execute.lto_priv.121+0x94>)
  return chThdGetSelfX()->prio;
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <rt_test_005_004_execute.lto_priv.121+0x98>)
 8005118:	6891      	ldr	r1, [r2, #8]
 800511a:	4a24      	ldr	r2, [pc, #144]	; (80051ac <rt_test_005_004_execute.lto_priv.121+0x9c>)
static void rt_test_005_004_execute(void) {
 800511c:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800511e:	4c24      	ldr	r4, [pc, #144]	; (80051b0 <rt_test_005_004_execute.lto_priv.121+0xa0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8005120:	3101      	adds	r1, #1
  test_set_step(1);
 8005122:	2501      	movs	r5, #1
 8005124:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8005126:	f001 f993 	bl	8006450 <chThdCreateStatic.constprop.62>
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <rt_test_005_004_execute.lto_priv.121+0xa4>)
  test_set_step(2);
 800512c:	2502      	movs	r5, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800512e:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8005130:	6025      	str	r5, [r4, #0]
 8005132:	2320      	movs	r3, #32
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	4c1f      	ldr	r4, [pc, #124]	; (80051b8 <rt_test_005_004_execute.lto_priv.121+0xa8>)
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800513a:	2600      	movs	r6, #0
 800513c:	e002      	b.n	8005144 <rt_test_005_004_execute.lto_priv.121+0x34>
  while (n > (cnt_t)0) {
 800513e:	2d01      	cmp	r5, #1
 8005140:	d00e      	beq.n	8005160 <rt_test_005_004_execute.lto_priv.121+0x50>
    }
    n--;
 8005142:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8005144:	68a3      	ldr	r3, [r4, #8]
 8005146:	3301      	adds	r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	dcf7      	bgt.n	800513e <rt_test_005_004_execute.lto_priv.121+0x2e>
  thread_t *tp = tqp->next;
 800514e:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 8005150:	6803      	ldr	r3, [r0, #0]
 8005152:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005154:	605c      	str	r4, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8005156:	f7fb fcfb 	bl	8000b50 <chSchReadyI>
  while (n > (cnt_t)0) {
 800515a:	2d01      	cmp	r5, #1
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800515c:	6246      	str	r6, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800515e:	d1f0      	bne.n	8005142 <rt_test_005_004_execute.lto_priv.121+0x32>
    chSchRescheduleS();
 8005160:	f7fb fc1e 	bl	80009a0 <chSchRescheduleS>
 8005164:	2500      	movs	r5, #0
 8005166:	f385 8811 	msr	BASEPRI, r5
    test_wait_threads();
 800516a:	f7fd fb59 	bl	8002820 <test_wait_threads>
 800516e:	2320      	movs	r3, #32
 8005170:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 8005174:	68a0      	ldr	r0, [r4, #8]
 8005176:	4911      	ldr	r1, [pc, #68]	; (80051bc <rt_test_005_004_execute.lto_priv.121+0xac>)
 8005178:	f1a0 0001 	sub.w	r0, r0, #1
 800517c:	fab0 f080 	clz	r0, r0
 8005180:	0940      	lsrs	r0, r0, #5
 8005182:	f7fd fe7d 	bl	8002e80 <_test_assert>
 8005186:	b110      	cbz	r0, 800518e <rt_test_005_004_execute.lto_priv.121+0x7e>
 8005188:	f385 8811 	msr	BASEPRI, r5
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	f380 8811 	msr	BASEPRI, r0
    test_assert_sequence("A", "invalid sequence");
 8005192:	490b      	ldr	r1, [pc, #44]	; (80051c0 <rt_test_005_004_execute.lto_priv.121+0xb0>)
 8005194:	4804      	ldr	r0, [pc, #16]	; (80051a8 <rt_test_005_004_execute.lto_priv.121+0x98>)
}
 8005196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_sequence("A", "invalid sequence");
 800519a:	f7fd be49 	b.w	8002e30 <_test_assert_sequence>
 800519e:	bf00      	nop
 80051a0:	2000122c 	.word	0x2000122c
 80051a4:	20000af8 	.word	0x20000af8
 80051a8:	08007ac8 	.word	0x08007ac8
 80051ac:	08005311 	.word	0x08005311
 80051b0:	200013d8 	.word	0x200013d8
 80051b4:	20001160 	.word	0x20001160
 80051b8:	20001340 	.word	0x20001340
 80051bc:	08009764 	.word	0x08009764
 80051c0:	08007a30 	.word	0x08007a30
	...

080051d0 <thread1.lto_priv.204>:
static THD_FUNCTION(thread1, p) {
 80051d0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m1);
 80051d2:	4c06      	ldr	r4, [pc, #24]	; (80051ec <thread1.lto_priv.204+0x1c>)
static THD_FUNCTION(thread1, p) {
 80051d4:	4605      	mov	r5, r0
  chMtxLock(&m1);
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7fb fdea 	bl	8000db0 <chMtxLock>
  test_emit_token(*(char *)p);
 80051dc:	7828      	ldrb	r0, [r5, #0]
 80051de:	f7fd fb4f 	bl	8002880 <test_emit_token>
  chMtxUnlock(&m1);
 80051e2:	4620      	mov	r0, r4
}
 80051e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 80051e8:	f7fb bd42 	b.w	8000c70 <chMtxUnlock>
 80051ec:	20000854 	.word	0x20000854

080051f0 <thread9.lto_priv.198>:
static THD_FUNCTION(thread9, p) {
 80051f0:	b538      	push	{r3, r4, r5, lr}
  chMtxLock(&m2);
 80051f2:	4c06      	ldr	r4, [pc, #24]	; (800520c <thread9.lto_priv.198+0x1c>)
static THD_FUNCTION(thread9, p) {
 80051f4:	4605      	mov	r5, r0
  chMtxLock(&m2);
 80051f6:	4620      	mov	r0, r4
 80051f8:	f7fb fdda 	bl	8000db0 <chMtxLock>
  test_emit_token(*(char *)p);
 80051fc:	7828      	ldrb	r0, [r5, #0]
 80051fe:	f7fd fb3f 	bl	8002880 <test_emit_token>
  chMtxUnlock(&m2);
 8005202:	4620      	mov	r0, r4
}
 8005204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 8005208:	f7fb bd32 	b.w	8000c70 <chMtxUnlock>
 800520c:	20000808 	.word	0x20000808

08005210 <thread8.lto_priv.196>:
static THD_FUNCTION(thread8, p) {
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	4607      	mov	r7, r0
  chMtxLock(&m2);
 8005214:	481b      	ldr	r0, [pc, #108]	; (8005284 <thread8.lto_priv.196+0x74>)
 8005216:	f7fb fdcb 	bl	8000db0 <chMtxLock>
  chMtxLock(&m1);
 800521a:	481b      	ldr	r0, [pc, #108]	; (8005288 <thread8.lto_priv.196+0x78>)
 800521c:	f7fb fdc8 	bl	8000db0 <chMtxLock>
 8005220:	2320      	movs	r3, #32
 8005222:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8005226:	4d19      	ldr	r5, [pc, #100]	; (800528c <thread8.lto_priv.196+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->mtxlist;
 8005228:	69ab      	ldr	r3, [r5, #24]
 800522a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(currp->mtxlist != NULL, "not owning a mutex");

  /* Getting "current" mutex and releasing it.*/
  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800522c:	4630      	mov	r0, r6
 800522e:	f7fb fcf7 	bl	8000c20 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <thread8.lto_priv.196+0x80>)
 8005234:	69ac      	ldr	r4, [r5, #24]
  thread_t *cp = (thread_t *)tqp;
 8005236:	4618      	mov	r0, r3
 8005238:	6263      	str	r3, [r4, #36]	; 0x24
 800523a:	e003      	b.n	8005244 <thread8.lto_priv.196+0x34>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800523c:	6899      	ldr	r1, [r3, #8]
 800523e:	68a2      	ldr	r2, [r4, #8]
 8005240:	4291      	cmp	r1, r2
 8005242:	d302      	bcc.n	800524a <thread8.lto_priv.196+0x3a>
    cp = cp->queue.next;
 8005244:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8005246:	4283      	cmp	r3, r0
 8005248:	d1f8      	bne.n	800523c <thread8.lto_priv.196+0x2c>
  tp->queue.prev             = cp->queue.prev;
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 800524e:	6023      	str	r3, [r4, #0]
    chSchGoSleepS(newstate);
 8005250:	2007      	movs	r0, #7
  tp->queue.prev->queue.next = tp;
 8005252:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005254:	605c      	str	r4, [r3, #4]
 8005256:	f7fb fc1b 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 800525a:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	3301      	adds	r3, #1
 8005260:	d002      	beq.n	8005268 <thread8.lto_priv.196+0x58>
    chMtxLockS(mp);
 8005262:	4630      	mov	r0, r6
 8005264:	f7fb fd3c 	bl	8000ce0 <chMtxLockS>
 8005268:	2300      	movs	r3, #0
 800526a:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800526e:	7838      	ldrb	r0, [r7, #0]
 8005270:	f7fd fb06 	bl	8002880 <test_emit_token>
  chMtxUnlock(&m1);
 8005274:	4804      	ldr	r0, [pc, #16]	; (8005288 <thread8.lto_priv.196+0x78>)
 8005276:	f7fb fcfb 	bl	8000c70 <chMtxUnlock>
  chMtxUnlock(&m2);
 800527a:	4802      	ldr	r0, [pc, #8]	; (8005284 <thread8.lto_priv.196+0x74>)
}
 800527c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m2);
 8005280:	f7fb bcf6 	b.w	8000c70 <chMtxUnlock>
 8005284:	20000808 	.word	0x20000808
 8005288:	20000854 	.word	0x20000854
 800528c:	2000122c 	.word	0x2000122c
 8005290:	20000830 	.word	0x20000830
	...

080052a0 <thread6.lto_priv.197>:
static THD_FUNCTION(thread6, p) {
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4606      	mov	r6, r0
  chMtxLock(&m1);
 80052a4:	4816      	ldr	r0, [pc, #88]	; (8005300 <thread6.lto_priv.197+0x60>)
 80052a6:	f7fb fd83 	bl	8000db0 <chMtxLock>
 80052aa:	2320      	movs	r3, #32
 80052ac:	f383 8811 	msr	BASEPRI, r3
  thread_t *ctp = currp;
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <thread6.lto_priv.197+0x64>)
 80052b2:	699c      	ldr	r4, [r3, #24]
 80052b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chMtxUnlockS(mp);
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7fb fcb2 	bl	8000c20 <chMtxUnlockS>
  ctp->u.wtobjp = cp;
 80052bc:	4812      	ldr	r0, [pc, #72]	; (8005308 <thread6.lto_priv.197+0x68>)
 80052be:	6260      	str	r0, [r4, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 80052c0:	4603      	mov	r3, r0
 80052c2:	e003      	b.n	80052cc <thread6.lto_priv.197+0x2c>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	68a2      	ldr	r2, [r4, #8]
 80052c8:	4291      	cmp	r1, r2
 80052ca:	d302      	bcc.n	80052d2 <thread6.lto_priv.197+0x32>
    cp = cp->queue.next;
 80052cc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80052ce:	4283      	cmp	r3, r0
 80052d0:	d1f8      	bne.n	80052c4 <thread6.lto_priv.197+0x24>
  tp->queue.prev             = cp->queue.prev;
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	6062      	str	r2, [r4, #4]
  tp->queue.next             = cp;
 80052d6:	6023      	str	r3, [r4, #0]
  chSchGoSleepS(CH_STATE_WTCOND);
 80052d8:	2007      	movs	r0, #7
  tp->queue.prev->queue.next = tp;
 80052da:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80052dc:	605c      	str	r4, [r3, #4]
 80052de:	f7fb fbd7 	bl	8000a90 <chSchGoSleepS>
  chMtxLockS(mp);
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7fb fcfc 	bl	8000ce0 <chMtxLockS>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80052ee:	7830      	ldrb	r0, [r6, #0]
 80052f0:	f7fd fac6 	bl	8002880 <test_emit_token>
  chMtxUnlock(&m1);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <thread6.lto_priv.197+0x60>)
}
 80052f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chMtxUnlock(&m1);
 80052fa:	f7fb bcb9 	b.w	8000c70 <chMtxUnlock>
 80052fe:	bf00      	nop
 8005300:	20000854 	.word	0x20000854
 8005304:	2000122c 	.word	0x2000122c
 8005308:	20000830 	.word	0x20000830
 800530c:	00000000 	.word	0x00000000

08005310 <thread1.lto_priv.203>:
static THD_FUNCTION(thread1, p) {
 8005310:	b510      	push	{r4, lr}
 8005312:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8005314:	4803      	ldr	r0, [pc, #12]	; (8005324 <thread1.lto_priv.203+0x14>)
 8005316:	f7fb fbf3 	bl	8000b00 <chSemWait>
  test_emit_token(*(char *)p);
 800531a:	7820      	ldrb	r0, [r4, #0]
}
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8005320:	f7fd baae 	b.w	8002880 <test_emit_token>
 8005324:	20001340 	.word	0x20001340
	...

08005330 <rt_test_005_001_teardown.lto_priv.114>:
  chSemReset(&sem1, 0);
 8005330:	2100      	movs	r1, #0
 8005332:	4801      	ldr	r0, [pc, #4]	; (8005338 <rt_test_005_001_teardown.lto_priv.114+0x8>)
 8005334:	f7fb be04 	b.w	8000f40 <chSemReset>
 8005338:	20001340 	.word	0x20001340
 800533c:	00000000 	.word	0x00000000

08005340 <rt_test_005_006_execute.lto_priv.126>:
}

static void rt_test_005_006_execute(void) {
 8005340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  binary_semaphore_t bsem;
  msg_t msg;

  /* [5.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8005344:	4f60      	ldr	r7, [pc, #384]	; (80054c8 <rt_test_005_006_execute.lto_priv.126+0x188>)
static void rt_test_005_006_execute(void) {
 8005346:	b084      	sub	sp, #16
  tqp->next = (thread_t *)tqp;
 8005348:	ac01      	add	r4, sp, #4
  test_set_step(1);
 800534a:	2301      	movs	r3, #1
  sp->cnt = n;
 800534c:	2600      	movs	r6, #0
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	9401      	str	r4, [sp, #4]
  tqp->prev = (thread_t *)tqp;
 8005352:	9402      	str	r4, [sp, #8]
 8005354:	9603      	str	r6, [sp, #12]
 8005356:	f04f 0820 	mov.w	r8, #32
 800535a:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 800535e:	9803      	ldr	r0, [sp, #12]
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8005360:	495a      	ldr	r1, [pc, #360]	; (80054cc <rt_test_005_006_execute.lto_priv.126+0x18c>)
 8005362:	42b0      	cmp	r0, r6
 8005364:	bfcc      	ite	gt
 8005366:	2000      	movgt	r0, #0
 8005368:	2001      	movle	r0, #1
 800536a:	f7fd fd89 	bl	8002e80 <_test_assert>
 800536e:	b120      	cbz	r0, 800537a <rt_test_005_006_execute.lto_priv.126+0x3a>
 8005370:	f386 8811 	msr	BASEPRI, r6
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
}
 8005374:	b004      	add	sp, #16
 8005376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537a:	4605      	mov	r5, r0
 800537c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 8005380:	2302      	movs	r3, #2
  chSemReset(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 8005382:	4601      	mov	r1, r0
 8005384:	4620      	mov	r0, r4
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	f7fb fdda 	bl	8000f40 <chSemReset>
 800538c:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 8005390:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8005392:	494e      	ldr	r1, [pc, #312]	; (80054cc <rt_test_005_006_execute.lto_priv.126+0x18c>)
 8005394:	2800      	cmp	r0, #0
 8005396:	bfcc      	ite	gt
 8005398:	2000      	movgt	r0, #0
 800539a:	2001      	movle	r0, #1
 800539c:	f7fd fd70 	bl	8002e80 <_test_assert>
 80053a0:	4606      	mov	r6, r0
 80053a2:	b120      	cbz	r0, 80053ae <rt_test_005_006_execute.lto_priv.126+0x6e>
 80053a4:	f385 8811 	msr	BASEPRI, r5
}
 80053a8:	b004      	add	sp, #16
 80053aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ae:	f380 8811 	msr	BASEPRI, r0
 80053b2:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <rt_test_005_006_execute.lto_priv.126+0x190>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80053b4:	4a47      	ldr	r2, [pc, #284]	; (80054d4 <rt_test_005_006_execute.lto_priv.126+0x194>)
  return chThdGetSelfX()->prio;
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	4847      	ldr	r0, [pc, #284]	; (80054d8 <rt_test_005_006_execute.lto_priv.126+0x198>)
 80053ba:	6899      	ldr	r1, [r3, #8]
  test_set_step(3);
 80053bc:	2503      	movs	r5, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80053be:	3901      	subs	r1, #1
 80053c0:	4623      	mov	r3, r4
  test_set_step(3);
 80053c2:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80053c4:	f001 f844 	bl	8006450 <chThdCreateStatic.constprop.62>
 80053c8:	4a44      	ldr	r2, [pc, #272]	; (80054dc <rt_test_005_006_execute.lto_priv.126+0x19c>)
  test_set_step(4);
 80053ca:	2304      	movs	r3, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80053cc:	6010      	str	r0, [r2, #0]
  return chSemWait(&bsp->sem);
 80053ce:	4620      	mov	r0, r4
  test_set_step(4);
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	f7fb fb95 	bl	8000b00 <chSemWait>
 80053d6:	4605      	mov	r5, r0
 80053d8:	f388 8811 	msr	BASEPRI, r8
  return (bsp->sem.cnt > (cnt_t)0) ? false : true;
 80053dc:	9803      	ldr	r0, [sp, #12]
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80053de:	493b      	ldr	r1, [pc, #236]	; (80054cc <rt_test_005_006_execute.lto_priv.126+0x18c>)
 80053e0:	2800      	cmp	r0, #0
 80053e2:	bfcc      	ite	gt
 80053e4:	2000      	movgt	r0, #0
 80053e6:	2001      	movle	r0, #1
 80053e8:	f7fd fd4a 	bl	8002e80 <_test_assert>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1bf      	bne.n	8005370 <rt_test_005_006_execute.lto_priv.126+0x30>
 80053f0:	f380 8811 	msr	BASEPRI, r0
    test_assert(msg == MSG_OK, "unexpected message");
 80053f4:	fab5 f085 	clz	r0, r5
 80053f8:	0940      	lsrs	r0, r0, #5
 80053fa:	4939      	ldr	r1, [pc, #228]	; (80054e0 <rt_test_005_006_execute.lto_priv.126+0x1a0>)
 80053fc:	f7fd fd40 	bl	8002e80 <_test_assert>
 8005400:	2800      	cmp	r0, #0
 8005402:	d1b7      	bne.n	8005374 <rt_test_005_006_execute.lto_priv.126+0x34>
  test_set_step(5);
 8005404:	2305      	movs	r3, #5
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	f388 8811 	msr	BASEPRI, r8
  if (bsp->sem.cnt < (cnt_t)1) {
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd23      	ble.n	800545a <rt_test_005_006_execute.lto_priv.126+0x11a>
  chSchRescheduleS();
 8005412:	f7fb fac5 	bl	80009a0 <chSchRescheduleS>
 8005416:	2500      	movs	r5, #0
 8005418:	f385 8811 	msr	BASEPRI, r5
 800541c:	2620      	movs	r6, #32
 800541e:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8005422:	9803      	ldr	r0, [sp, #12]
 8005424:	492f      	ldr	r1, [pc, #188]	; (80054e4 <rt_test_005_006_execute.lto_priv.126+0x1a4>)
 8005426:	42a8      	cmp	r0, r5
 8005428:	bfd4      	ite	le
 800542a:	2000      	movle	r0, #0
 800542c:	2001      	movgt	r0, #1
 800542e:	f7fd fd27 	bl	8002e80 <_test_assert>
 8005432:	4680      	mov	r8, r0
 8005434:	2800      	cmp	r0, #0
 8005436:	d1b5      	bne.n	80053a4 <rt_test_005_006_execute.lto_priv.126+0x64>
 8005438:	f380 8811 	msr	BASEPRI, r0
 800543c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8005440:	9803      	ldr	r0, [sp, #12]
 8005442:	4929      	ldr	r1, [pc, #164]	; (80054e8 <rt_test_005_006_execute.lto_priv.126+0x1a8>)
 8005444:	f1a0 0001 	sub.w	r0, r0, #1
 8005448:	fab0 f080 	clz	r0, r0
 800544c:	0940      	lsrs	r0, r0, #5
 800544e:	f7fd fd17 	bl	8002e80 <_test_assert>
 8005452:	b130      	cbz	r0, 8005462 <rt_test_005_006_execute.lto_priv.126+0x122>
 8005454:	f388 8811 	msr	BASEPRI, r8
 8005458:	e78c      	b.n	8005374 <rt_test_005_006_execute.lto_priv.126+0x34>
    chSemSignalI(&bsp->sem);
 800545a:	4620      	mov	r0, r4
 800545c:	f7fb fd60 	bl	8000f20 <chSemSignalI>
 8005460:	e7d7      	b.n	8005412 <rt_test_005_006_execute.lto_priv.126+0xd2>
 8005462:	f380 8811 	msr	BASEPRI, r0
  test_set_step(6);
 8005466:	2306      	movs	r3, #6
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	f386 8811 	msr	BASEPRI, r6
  if (bsp->sem.cnt < (cnt_t)1) {
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dd22      	ble.n	80054ba <rt_test_005_006_execute.lto_priv.126+0x17a>
  chSchRescheduleS();
 8005474:	f7fb fa94 	bl	80009a0 <chSchRescheduleS>
 8005478:	2600      	movs	r6, #0
 800547a:	f386 8811 	msr	BASEPRI, r6
 800547e:	2520      	movs	r5, #32
 8005480:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8005484:	9803      	ldr	r0, [sp, #12]
 8005486:	4919      	ldr	r1, [pc, #100]	; (80054ec <rt_test_005_006_execute.lto_priv.126+0x1ac>)
 8005488:	42b0      	cmp	r0, r6
 800548a:	bfd4      	ite	le
 800548c:	2000      	movle	r0, #0
 800548e:	2001      	movgt	r0, #1
 8005490:	f7fd fcf6 	bl	8002e80 <_test_assert>
 8005494:	4604      	mov	r4, r0
 8005496:	2800      	cmp	r0, #0
 8005498:	f47f af6a 	bne.w	8005370 <rt_test_005_006_execute.lto_priv.126+0x30>
 800549c:	f380 8811 	msr	BASEPRI, r0
 80054a0:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80054a4:	9803      	ldr	r0, [sp, #12]
 80054a6:	4910      	ldr	r1, [pc, #64]	; (80054e8 <rt_test_005_006_execute.lto_priv.126+0x1a8>)
 80054a8:	1e43      	subs	r3, r0, #1
 80054aa:	4258      	negs	r0, r3
 80054ac:	4158      	adcs	r0, r3
 80054ae:	f7fd fce7 	bl	8002e80 <_test_assert>
 80054b2:	b130      	cbz	r0, 80054c2 <rt_test_005_006_execute.lto_priv.126+0x182>
 80054b4:	f384 8811 	msr	BASEPRI, r4
 80054b8:	e75c      	b.n	8005374 <rt_test_005_006_execute.lto_priv.126+0x34>
    chSemSignalI(&bsp->sem);
 80054ba:	4620      	mov	r0, r4
 80054bc:	f7fb fd30 	bl	8000f20 <chSemSignalI>
 80054c0:	e7d8      	b.n	8005474 <rt_test_005_006_execute.lto_priv.126+0x134>
 80054c2:	f380 8811 	msr	BASEPRI, r0
 80054c6:	e755      	b.n	8005374 <rt_test_005_006_execute.lto_priv.126+0x34>
 80054c8:	200013d8 	.word	0x200013d8
 80054cc:	08009788 	.word	0x08009788
 80054d0:	2000122c 	.word	0x2000122c
 80054d4:	08005521 	.word	0x08005521
 80054d8:	20000af8 	.word	0x20000af8
 80054dc:	20001160 	.word	0x20001160
 80054e0:	08009794 	.word	0x08009794
 80054e4:	080097a8 	.word	0x080097a8
 80054e8:	080097b4 	.word	0x080097b4
 80054ec:	0800978c 	.word	0x0800978c

080054f0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80054f0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80054f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054f6:	f7fb ff93 	bl	8001420 <chThdSleep>
 80054fa:	2320      	movs	r3, #32
 80054fc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 8005500:	4804      	ldr	r0, [pc, #16]	; (8005514 <thread2+0x24>)
 8005502:	f7fb fd0d 	bl	8000f20 <chSemSignalI>
  chSchRescheduleS();
 8005506:	f7fb fa4b 	bl	80009a0 <chSchRescheduleS>
 800550a:	2300      	movs	r3, #0
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	bd08      	pop	{r3, pc}
 8005512:	bf00      	nop
 8005514:	20001340 	.word	0x20001340
	...

08005520 <thread4>:
static THD_FUNCTION(thread4, p) {
 8005520:	b508      	push	{r3, lr}
 8005522:	2220      	movs	r2, #32
 8005524:	f382 8811 	msr	BASEPRI, r2
  if (bsp->sem.cnt < (cnt_t)1) {
 8005528:	6883      	ldr	r3, [r0, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	dd05      	ble.n	800553a <thread4+0x1a>
  chSchRescheduleS();
 800552e:	f7fb fa37 	bl	80009a0 <chSchRescheduleS>
 8005532:	2300      	movs	r3, #0
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 800553a:	f7fb fcf1 	bl	8000f20 <chSemSignalI>
  chSchRescheduleS();
 800553e:	f7fb fa2f 	bl	80009a0 <chSchRescheduleS>
 8005542:	2300      	movs	r3, #0
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	bd08      	pop	{r3, pc}
 800554a:	bf00      	nop
 800554c:	0000      	movs	r0, r0
	...

08005550 <rt_test_005_005_execute.lto_priv.124>:
  return ch.rlist.current;
 8005550:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <rt_test_005_005_execute.lto_priv.124+0x7c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005552:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <rt_test_005_005_execute.lto_priv.124+0x80>)
  return chThdGetSelfX()->prio;
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	481f      	ldr	r0, [pc, #124]	; (80055d4 <rt_test_005_005_execute.lto_priv.124+0x84>)
 8005558:	6899      	ldr	r1, [r3, #8]
static void rt_test_005_005_execute(void) {
 800555a:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 800555c:	4d1e      	ldr	r5, [pc, #120]	; (80055d8 <rt_test_005_005_execute.lto_priv.124+0x88>)
  return (bool)(tqp->next == (const thread_t *)tqp);
 800555e:	4c1f      	ldr	r4, [pc, #124]	; (80055dc <rt_test_005_005_execute.lto_priv.124+0x8c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005560:	3101      	adds	r1, #1
 8005562:	2300      	movs	r3, #0
  test_set_step(1);
 8005564:	2601      	movs	r6, #1
 8005566:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005568:	f000 ff72 	bl	8006450 <chThdCreateStatic.constprop.62>
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <rt_test_005_005_execute.lto_priv.124+0x90>)
  test_set_step(2);
 800556e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005570:	6010      	str	r0, [r2, #0]
  test_set_step(2);
 8005572:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 8005574:	f000 fffc 	bl	8006570 <chSemSignalWait.constprop.55>
 8005578:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800557a:	491a      	ldr	r1, [pc, #104]	; (80055e4 <rt_test_005_005_execute.lto_priv.124+0x94>)
 800557c:	1b00      	subs	r0, r0, r4
 800557e:	fab0 f080 	clz	r0, r0
 8005582:	0940      	lsrs	r0, r0, #5
 8005584:	f7fd fc7c 	bl	8002e80 <_test_assert>
 8005588:	b100      	cbz	r0, 800558c <rt_test_005_005_execute.lto_priv.124+0x3c>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800558c:	68a0      	ldr	r0, [r4, #8]
 800558e:	4916      	ldr	r1, [pc, #88]	; (80055e8 <rt_test_005_005_execute.lto_priv.124+0x98>)
 8005590:	fab0 f080 	clz	r0, r0
 8005594:	0940      	lsrs	r0, r0, #5
 8005596:	f7fd fc73 	bl	8002e80 <_test_assert>
 800559a:	2800      	cmp	r0, #0
 800559c:	d1f5      	bne.n	800558a <rt_test_005_005_execute.lto_priv.124+0x3a>
  test_set_step(3);
 800559e:	2303      	movs	r3, #3
 80055a0:	602b      	str	r3, [r5, #0]
    chSemSignalWait(&sem1, &sem1);
 80055a2:	f000 ffe5 	bl	8006570 <chSemSignalWait.constprop.55>
 80055a6:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80055a8:	490e      	ldr	r1, [pc, #56]	; (80055e4 <rt_test_005_005_execute.lto_priv.124+0x94>)
 80055aa:	1b00      	subs	r0, r0, r4
 80055ac:	fab0 f080 	clz	r0, r0
 80055b0:	0940      	lsrs	r0, r0, #5
 80055b2:	f7fd fc65 	bl	8002e80 <_test_assert>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d1e7      	bne.n	800558a <rt_test_005_005_execute.lto_priv.124+0x3a>
    test_assert(sem1.cnt == 0, "counter not zero");
 80055ba:	68a0      	ldr	r0, [r4, #8]
 80055bc:	490a      	ldr	r1, [pc, #40]	; (80055e8 <rt_test_005_005_execute.lto_priv.124+0x98>)
 80055be:	fab0 f080 	clz	r0, r0
 80055c2:	0940      	lsrs	r0, r0, #5
}
 80055c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 80055c8:	f7fd bc5a 	b.w	8002e80 <_test_assert>
 80055cc:	2000122c 	.word	0x2000122c
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	20000af8 	.word	0x20000af8
 80055d8:	200013d8 	.word	0x200013d8
 80055dc:	20001340 	.word	0x20001340
 80055e0:	20001160 	.word	0x20001160
 80055e4:	080097f0 	.word	0x080097f0
 80055e8:	08009774 	.word	0x08009774
 80055ec:	00000000 	.word	0x00000000

080055f0 <thread3>:
static THD_FUNCTION(thread3, p) {
 80055f0:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 80055f2:	4c04      	ldr	r4, [pc, #16]	; (8005604 <thread3+0x14>)
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7fb fa83 	bl	8000b00 <chSemWait>
  chSemSignal(&sem1);
 80055fa:	4620      	mov	r0, r4
}
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8005600:	f7fb ba26 	b.w	8000a50 <chSemSignal>
 8005604:	20001340 	.word	0x20001340
	...

08005610 <rt_test_005_002_execute.lto_priv.117>:
static void rt_test_005_002_execute(void) {
 8005610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005614:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80056f8 <rt_test_005_002_execute.lto_priv.117+0xe8>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005618:	4f2c      	ldr	r7, [pc, #176]	; (80056cc <rt_test_005_002_execute.lto_priv.117+0xbc>)
  return chThdGetSelfX()->prio;
 800561a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800561e:	4e2c      	ldr	r6, [pc, #176]	; (80056d0 <rt_test_005_002_execute.lto_priv.117+0xc0>)
 8005620:	6899      	ldr	r1, [r3, #8]
  test_set_step(1);
 8005622:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80056fc <rt_test_005_002_execute.lto_priv.117+0xec>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005626:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <rt_test_005_002_execute.lto_priv.117+0xc4>)
 8005628:	4d2b      	ldr	r5, [pc, #172]	; (80056d8 <rt_test_005_002_execute.lto_priv.117+0xc8>)
 800562a:	463a      	mov	r2, r7
 800562c:	3105      	adds	r1, #5
 800562e:	4630      	mov	r0, r6
  test_set_step(1);
 8005630:	2401      	movs	r4, #1
 8005632:	f8c9 4000 	str.w	r4, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005636:	f000 ff0b 	bl	8006450 <chThdCreateStatic.constprop.62>
 800563a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800563e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005640:	6899      	ldr	r1, [r3, #8]
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <rt_test_005_002_execute.lto_priv.117+0xcc>)
    chSemSignal(&sem1);
 8005644:	4c26      	ldr	r4, [pc, #152]	; (80056e0 <rt_test_005_002_execute.lto_priv.117+0xd0>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005646:	463a      	mov	r2, r7
 8005648:	3101      	adds	r1, #1
 800564a:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 800564e:	f000 feff 	bl	8006450 <chThdCreateStatic.constprop.62>
 8005652:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005656:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005658:	6899      	ldr	r1, [r3, #8]
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <rt_test_005_002_execute.lto_priv.117+0xd4>)
 800565c:	463a      	mov	r2, r7
 800565e:	3103      	adds	r1, #3
 8005660:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005664:	f000 fef4 	bl	8006450 <chThdCreateStatic.constprop.62>
 8005668:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800566c:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800566e:	6899      	ldr	r1, [r3, #8]
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <rt_test_005_002_execute.lto_priv.117+0xd8>)
 8005672:	463a      	mov	r2, r7
 8005674:	3104      	adds	r1, #4
 8005676:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800567a:	f000 fee9 	bl	8006450 <chThdCreateStatic.constprop.62>
 800567e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005682:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <rt_test_005_002_execute.lto_priv.117+0xdc>)
 8005688:	3102      	adds	r1, #2
 800568a:	463a      	mov	r2, r7
 800568c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005690:	f000 fede 	bl	8006450 <chThdCreateStatic.constprop.62>
  test_set_step(2);
 8005694:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005696:	6128      	str	r0, [r5, #16]
    chSemSignal(&sem1);
 8005698:	4620      	mov	r0, r4
  test_set_step(2);
 800569a:	f8c9 3000 	str.w	r3, [r9]
    chSemSignal(&sem1);
 800569e:	f7fb f9d7 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7fb f9d4 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fb f9d1 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7fb f9ce 	bl	8000a50 <chSemSignal>
    chSemSignal(&sem1);
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7fb f9cb 	bl	8000a50 <chSemSignal>
    test_wait_threads();
 80056ba:	f7fd f8b1 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80056be:	490c      	ldr	r1, [pc, #48]	; (80056f0 <rt_test_005_002_execute.lto_priv.117+0xe0>)
 80056c0:	480c      	ldr	r0, [pc, #48]	; (80056f4 <rt_test_005_002_execute.lto_priv.117+0xe4>)
}
 80056c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80056c6:	f7fd bbb3 	b.w	8002e30 <_test_assert_sequence>
 80056ca:	bf00      	nop
 80056cc:	08005311 	.word	0x08005311
 80056d0:	20000af8 	.word	0x20000af8
 80056d4:	08007ac8 	.word	0x08007ac8
 80056d8:	20001160 	.word	0x20001160
 80056dc:	08007aec 	.word	0x08007aec
 80056e0:	20001340 	.word	0x20001340
 80056e4:	08007af8 	.word	0x08007af8
 80056e8:	08007a00 	.word	0x08007a00
 80056ec:	08007a08 	.word	0x08007a08
 80056f0:	08007a30 	.word	0x08007a30
 80056f4:	08007a04 	.word	0x08007a04
 80056f8:	2000122c 	.word	0x2000122c
 80056fc:	200013d8 	.word	0x200013d8

08005700 <rt_test_005_001_execute.lto_priv.115>:
static void rt_test_005_001_execute(void) {
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    msg = chSemWait(&sem1);
 8005704:	4c2b      	ldr	r4, [pc, #172]	; (80057b4 <rt_test_005_001_execute.lto_priv.115+0xb4>)
  test_set_step(1);
 8005706:	4e2c      	ldr	r6, [pc, #176]	; (80057b8 <rt_test_005_001_execute.lto_priv.115+0xb8>)
 8005708:	2301      	movs	r3, #1
    msg = chSemWait(&sem1);
 800570a:	4620      	mov	r0, r4
  test_set_step(1);
 800570c:	6033      	str	r3, [r6, #0]
    msg = chSemWait(&sem1);
 800570e:	f7fb f9f7 	bl	8000b00 <chSemWait>
 8005712:	2520      	movs	r5, #32
 8005714:	4607      	mov	r7, r0
 8005716:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800571a:	68a0      	ldr	r0, [r4, #8]
 800571c:	4927      	ldr	r1, [pc, #156]	; (80057bc <rt_test_005_001_execute.lto_priv.115+0xbc>)
 800571e:	fab0 f080 	clz	r0, r0
 8005722:	0940      	lsrs	r0, r0, #5
 8005724:	f7fd fbac 	bl	8002e80 <_test_assert>
 8005728:	b120      	cbz	r0, 8005734 <rt_test_005_001_execute.lto_priv.115+0x34>
 800572a:	2300      	movs	r3, #0
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005734:	f380 8811 	msr	BASEPRI, r0
    test_assert(MSG_OK == msg, "wrong returned message");
 8005738:	fab7 f087 	clz	r0, r7
 800573c:	0940      	lsrs	r0, r0, #5
 800573e:	4920      	ldr	r1, [pc, #128]	; (80057c0 <rt_test_005_001_execute.lto_priv.115+0xc0>)
 8005740:	f7fd fb9e 	bl	8002e80 <_test_assert>
 8005744:	4607      	mov	r7, r0
 8005746:	b108      	cbz	r0, 800574c <rt_test_005_001_execute.lto_priv.115+0x4c>
 8005748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_set_step(2);
 800574c:	f04f 0902 	mov.w	r9, #2
    chSemSignal(&sem1);
 8005750:	4620      	mov	r0, r4
  test_set_step(2);
 8005752:	f8c6 9000 	str.w	r9, [r6]
    chSemSignal(&sem1);
 8005756:	f7fb f97b 	bl	8000a50 <chSemSignal>
 800575a:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 800575e:	68a0      	ldr	r0, [r4, #8]
 8005760:	4916      	ldr	r1, [pc, #88]	; (80057bc <rt_test_005_001_execute.lto_priv.115+0xbc>)
 8005762:	f1a0 0001 	sub.w	r0, r0, #1
 8005766:	fab0 f080 	clz	r0, r0
 800576a:	0940      	lsrs	r0, r0, #5
 800576c:	f7fd fb88 	bl	8002e80 <_test_assert>
 8005770:	4680      	mov	r8, r0
 8005772:	b118      	cbz	r0, 800577c <rt_test_005_001_execute.lto_priv.115+0x7c>
 8005774:	f387 8811 	msr	BASEPRI, r7
 8005778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577c:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 8005780:	2303      	movs	r3, #3
    chSemReset(&sem1, 2);
 8005782:	4649      	mov	r1, r9
 8005784:	4620      	mov	r0, r4
  test_set_step(3);
 8005786:	6033      	str	r3, [r6, #0]
    chSemReset(&sem1, 2);
 8005788:	f7fb fbda 	bl	8000f40 <chSemReset>
 800578c:	f385 8811 	msr	BASEPRI, r5
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8005790:	68a0      	ldr	r0, [r4, #8]
 8005792:	490a      	ldr	r1, [pc, #40]	; (80057bc <rt_test_005_001_execute.lto_priv.115+0xbc>)
 8005794:	f1a0 0002 	sub.w	r0, r0, #2
 8005798:	fab0 f080 	clz	r0, r0
 800579c:	0940      	lsrs	r0, r0, #5
 800579e:	f7fd fb6f 	bl	8002e80 <_test_assert>
 80057a2:	b910      	cbnz	r0, 80057aa <rt_test_005_001_execute.lto_priv.115+0xaa>
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	e7ce      	b.n	8005748 <rt_test_005_001_execute.lto_priv.115+0x48>
 80057aa:	f388 8811 	msr	BASEPRI, r8
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	bf00      	nop
 80057b4:	20001340 	.word	0x20001340
 80057b8:	200013d8 	.word	0x200013d8
 80057bc:	08009738 	.word	0x08009738
 80057c0:	0800974c 	.word	0x0800974c
	...

080057d0 <rt_test_005_003_execute.lto_priv.119>:
static void rt_test_005_003_execute(void) {
 80057d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 80057d4:	4d4b      	ldr	r5, [pc, #300]	; (8005904 <rt_test_005_003_execute.lto_priv.119+0x134>)
 80057d6:	2001      	movs	r0, #1
 80057d8:	6028      	str	r0, [r5, #0]
 80057da:	2320      	movs	r3, #32
 80057dc:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 80057e0:	4c49      	ldr	r4, [pc, #292]	; (8005908 <rt_test_005_003_execute.lto_priv.119+0x138>)
 80057e2:	68a3      	ldr	r3, [r4, #8]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	bf5c      	itt	pl
 80057e8:	60a3      	strpl	r3, [r4, #8]
 80057ea:	2000      	movpl	r0, #0
 80057ec:	2300      	movs	r3, #0
 80057ee:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80057f2:	4946      	ldr	r1, [pc, #280]	; (800590c <rt_test_005_003_execute.lto_priv.119+0x13c>)
 80057f4:	f7fd fb44 	bl	8002e80 <_test_assert>
 80057f8:	b108      	cbz	r0, 80057fe <rt_test_005_003_execute.lto_priv.119+0x2e>
 80057fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057fe:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8005800:	4943      	ldr	r1, [pc, #268]	; (8005910 <rt_test_005_003_execute.lto_priv.119+0x140>)
 8005802:	1b00      	subs	r0, r0, r4
 8005804:	fab0 f080 	clz	r0, r0
 8005808:	0940      	lsrs	r0, r0, #5
 800580a:	f7fd fb39 	bl	8002e80 <_test_assert>
 800580e:	2800      	cmp	r0, #0
 8005810:	d1f3      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8005812:	68a0      	ldr	r0, [r4, #8]
 8005814:	493f      	ldr	r1, [pc, #252]	; (8005914 <rt_test_005_003_execute.lto_priv.119+0x144>)
 8005816:	fab0 f080 	clz	r0, r0
 800581a:	0940      	lsrs	r0, r0, #5
 800581c:	f7fd fb30 	bl	8002e80 <_test_assert>
 8005820:	4603      	mov	r3, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d1e9      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
  return ch.rlist.current;
 8005826:	493c      	ldr	r1, [pc, #240]	; (8005918 <rt_test_005_003_execute.lto_priv.119+0x148>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005828:	4a3c      	ldr	r2, [pc, #240]	; (800591c <rt_test_005_003_execute.lto_priv.119+0x14c>)
  return chThdGetSelfX()->prio;
 800582a:	6989      	ldr	r1, [r1, #24]
 800582c:	483c      	ldr	r0, [pc, #240]	; (8005920 <rt_test_005_003_execute.lto_priv.119+0x150>)
 800582e:	6889      	ldr	r1, [r1, #8]
  test_set_step(2);
 8005830:	2602      	movs	r6, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005832:	3901      	subs	r1, #1
  test_set_step(2);
 8005834:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005836:	f000 fe0b 	bl	8006450 <chThdCreateStatic.constprop.62>
 800583a:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <rt_test_005_003_execute.lto_priv.119+0x154>)
 800583c:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 800583e:	f241 3088 	movw	r0, #5000	; 0x1388
 8005842:	f000 fe6d 	bl	8006520 <chSemWaitTimeout.constprop.58>
 8005846:	4606      	mov	r6, r0
    test_wait_threads();
 8005848:	f7fc ffea 	bl	8002820 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 800584c:	fab6 f086 	clz	r0, r6
 8005850:	0940      	lsrs	r0, r0, #5
 8005852:	492e      	ldr	r1, [pc, #184]	; (800590c <rt_test_005_003_execute.lto_priv.119+0x13c>)
 8005854:	f7fd fb14 	bl	8002e80 <_test_assert>
 8005858:	2800      	cmp	r0, #0
 800585a:	d1ce      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
 800585c:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800585e:	492c      	ldr	r1, [pc, #176]	; (8005910 <rt_test_005_003_execute.lto_priv.119+0x140>)
 8005860:	1b00      	subs	r0, r0, r4
 8005862:	fab0 f080 	clz	r0, r0
 8005866:	0940      	lsrs	r0, r0, #5
 8005868:	f7fd fb0a 	bl	8002e80 <_test_assert>
 800586c:	2800      	cmp	r0, #0
 800586e:	d1c4      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
    test_assert(sem1.cnt == 0, "counter not zero");
 8005870:	68a0      	ldr	r0, [r4, #8]
 8005872:	4928      	ldr	r1, [pc, #160]	; (8005914 <rt_test_005_003_execute.lto_priv.119+0x144>)
 8005874:	fab0 f080 	clz	r0, r0
 8005878:	0940      	lsrs	r0, r0, #5
 800587a:	f7fd fb01 	bl	8002e80 <_test_assert>
 800587e:	2800      	cmp	r0, #0
 8005880:	d1bb      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
  test_set_step(3);
 8005882:	2303      	movs	r3, #3
 8005884:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8005886:	f7fc ffbb 	bl	8002800 <test_wait_tick>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 800588a:	4f20      	ldr	r7, [pc, #128]	; (800590c <rt_test_005_003_execute.lto_priv.119+0x13c>)
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800588c:	4e20      	ldr	r6, [pc, #128]	; (8005910 <rt_test_005_003_execute.lto_priv.119+0x140>)
      test_assert(sem1.cnt == 0, "counter not zero");
 800588e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005914 <rt_test_005_003_execute.lto_priv.119+0x144>
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8005892:	2541      	movs	r5, #65	; 0x41
 8005894:	4681      	mov	r9, r0
      test_emit_token('A' + i);
 8005896:	4628      	mov	r0, r5
 8005898:	f7fc fff2 	bl	8002880 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 800589c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058a0:	f000 fe3e 	bl	8006520 <chSemWaitTimeout.constprop.58>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80058a4:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 80058a8:	fab0 f080 	clz	r0, r0
 80058ac:	4639      	mov	r1, r7
 80058ae:	0940      	lsrs	r0, r0, #5
 80058b0:	f7fd fae6 	bl	8002e80 <_test_assert>
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80058b4:	4631      	mov	r1, r6
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d19f      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
 80058ba:	6820      	ldr	r0, [r4, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80058bc:	1b00      	subs	r0, r0, r4
 80058be:	fab0 f080 	clz	r0, r0
 80058c2:	0940      	lsrs	r0, r0, #5
 80058c4:	f7fd fadc 	bl	8002e80 <_test_assert>
      test_assert(sem1.cnt == 0, "counter not zero");
 80058c8:	4641      	mov	r1, r8
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d195      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
      test_assert(sem1.cnt == 0, "counter not zero");
 80058ce:	68a0      	ldr	r0, [r4, #8]
 80058d0:	fab0 f080 	clz	r0, r0
 80058d4:	0940      	lsrs	r0, r0, #5
 80058d6:	f7fd fad3 	bl	8002e80 <_test_assert>
 80058da:	3501      	adds	r5, #1
 80058dc:	b2ed      	uxtb	r5, r5
 80058de:	2800      	cmp	r0, #0
 80058e0:	d18b      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
    for (i = 0; i < 5; i++) {
 80058e2:	2d46      	cmp	r5, #70	; 0x46
 80058e4:	d1d7      	bne.n	8005896 <rt_test_005_003_execute.lto_priv.119+0xc6>
    test_assert_sequence("ABCDE", "invalid sequence");
 80058e6:	4910      	ldr	r1, [pc, #64]	; (8005928 <rt_test_005_003_execute.lto_priv.119+0x158>)
 80058e8:	4810      	ldr	r0, [pc, #64]	; (800592c <rt_test_005_003_execute.lto_priv.119+0x15c>)
 80058ea:	f7fd faa1 	bl	8002e30 <_test_assert_sequence>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d183      	bne.n	80057fa <rt_test_005_003_execute.lto_priv.119+0x2a>
    test_assert_time_window(target_time,
 80058f2:	f609 11d8 	addw	r1, r9, #2520	; 0x9d8
 80058f6:	f609 10c4 	addw	r0, r9, #2500	; 0x9c4
}
 80058fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert_time_window(target_time,
 80058fe:	f001 badf 	b.w	8006ec0 <_test_assert_time_window.constprop.2>
 8005902:	bf00      	nop
 8005904:	200013d8 	.word	0x200013d8
 8005908:	20001340 	.word	0x20001340
 800590c:	08009588 	.word	0x08009588
 8005910:	080097f0 	.word	0x080097f0
 8005914:	08009774 	.word	0x08009774
 8005918:	2000122c 	.word	0x2000122c
 800591c:	080054f1 	.word	0x080054f1
 8005920:	20000af8 	.word	0x20000af8
 8005924:	20001160 	.word	0x20001160
 8005928:	08007a30 	.word	0x08007a30
 800592c:	08007a04 	.word	0x08007a04

08005930 <oslib_test_003_001_setup.lto_priv.188>:
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <oslib_test_003_001_setup.lto_priv.188+0x30>)
  heapp->provider = NULL;
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <oslib_test_003_001_setup.lto_priv.188+0x34>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8005934:	1dd9      	adds	r1, r3, #7
 8005936:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 800593a:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 800593c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
  heapp->provider = NULL;
 8005940:	2000      	movs	r0, #0
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8005942:	08db      	lsrs	r3, r3, #3
static void oslib_test_003_001_setup(void) {
 8005944:	b410      	push	{r4}
 8005946:	604b      	str	r3, [r1, #4]
  tqp->next = (thread_t *)tqp;
 8005948:	f102 040c 	add.w	r4, r2, #12
  H_NEXT(&heapp->header) = hp;
 800594c:	6051      	str	r1, [r2, #4]
  H_NEXT(hp) = NULL;
 800594e:	6008      	str	r0, [r1, #0]
  H_PAGES(&heapp->header) = 0;
 8005950:	6090      	str	r0, [r2, #8]
 8005952:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 8005954:	6114      	str	r4, [r2, #16]
  heapp->provider = NULL;
 8005956:	6010      	str	r0, [r2, #0]
  mp->owner = NULL;
 8005958:	6150      	str	r0, [r2, #20]
}
 800595a:	bc10      	pop	{r4}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	200011ac 	.word	0x200011ac
 8005964:	20000970 	.word	0x20000970
	...

08005970 <oslib_test_002_003_setup.lto_priv.186>:
  mp->next = NULL;
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <oslib_test_002_003_setup.lto_priv.186+0x18>)
 8005972:	2200      	movs	r2, #0
  mp->object_size = size;
 8005974:	2104      	movs	r1, #4
  tqp->next = (thread_t *)tqp;
 8005976:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8005978:	605b      	str	r3, [r3, #4]
  mp->next = NULL;
 800597a:	60da      	str	r2, [r3, #12]
  mp->provider = provider;
 800597c:	619a      	str	r2, [r3, #24]
  sp->cnt = n;
 800597e:	609a      	str	r2, [r3, #8]
  mp->object_size = size;
 8005980:	6119      	str	r1, [r3, #16]
  mp->align = align;
 8005982:	6159      	str	r1, [r3, #20]
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000838 	.word	0x20000838
 800598c:	00000000 	.word	0x00000000

08005990 <oslib_test_002_002_setup.lto_priv.184>:
 8005990:	f7ff bfee 	b.w	8005970 <oslib_test_002_003_setup.lto_priv.186>
	...

080059a0 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 80059a0:	2000      	movs	r0, #0
 80059a2:	4770      	bx	lr
	...

080059b0 <oslib_test_002_001_setup.lto_priv.182>:
  mp->next = NULL;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <oslib_test_002_001_setup.lto_priv.182+0x10>)
 80059b2:	2100      	movs	r1, #0
  mp->object_size = size;
 80059b4:	2204      	movs	r2, #4
  mp->next = NULL;
 80059b6:	6019      	str	r1, [r3, #0]
  mp->provider = provider;
 80059b8:	60d9      	str	r1, [r3, #12]
  mp->object_size = size;
 80059ba:	605a      	str	r2, [r3, #4]
  mp->align = align;
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	4770      	bx	lr
 80059c0:	20000820 	.word	0x20000820
	...

080059d0 <oslib_test_001_003_setup.lto_priv.179>:
 *   active state.
 * - [1.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_001_003_setup(void) {
 80059d0:	b430      	push	{r4, r5}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <oslib_test_001_003_setup.lto_priv.179+0x2c>)
 80059d4:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <oslib_test_001_003_setup.lto_priv.179+0x30>)
 80059d6:	601a      	str	r2, [r3, #0]
  tqp->next = (thread_t *)tqp;
 80059d8:	f103 0418 	add.w	r4, r3, #24
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 80059dc:	f102 0510 	add.w	r5, r2, #16
 80059e0:	f103 0020 	add.w	r0, r3, #32
  mbp->cnt    = (size_t)0;
 80059e4:	2100      	movs	r1, #0
  mbp->top    = &buf[n];
 80059e6:	605d      	str	r5, [r3, #4]
 80059e8:	619c      	str	r4, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 80059ea:	61dc      	str	r4, [r3, #28]
  mbp->rdptr  = buf;
 80059ec:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
 80059ee:	609a      	str	r2, [r3, #8]
  tqp->next = (thread_t *)tqp;
 80059f0:	6218      	str	r0, [r3, #32]
  tqp->prev = (thread_t *)tqp;
 80059f2:	6258      	str	r0, [r3, #36]	; 0x24
  mbp->cnt    = (size_t)0;
 80059f4:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 80059f6:	7519      	strb	r1, [r3, #20]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 80059f8:	bc30      	pop	{r4, r5}
 80059fa:	4770      	bx	lr
 80059fc:	20000864 	.word	0x20000864
 8005a00:	20001320 	.word	0x20001320
	...

08005a10 <oslib_test_003_001_execute.lto_priv.189>:
static void oslib_test_003_001_execute(void) {
 8005a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005a14:	4cc0      	ldr	r4, [pc, #768]	; (8005d18 <oslib_test_003_001_execute.lto_priv.189+0x308>)
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005a16:	48c1      	ldr	r0, [pc, #772]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
static void oslib_test_003_001_execute(void) {
 8005a18:	b084      	sub	sp, #16
  test_set_step(1);
 8005a1a:	2301      	movs	r3, #1
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005a1c:	4669      	mov	r1, sp
 8005a1e:	2200      	movs	r2, #0
  test_set_step(1);
 8005a20:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8005a22:	f7fd fbdd 	bl	80031e0 <chHeapStatus>
 8005a26:	f1a0 0001 	sub.w	r0, r0, #1
 8005a2a:	fab0 f080 	clz	r0, r0
 8005a2e:	49bc      	ldr	r1, [pc, #752]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005a30:	0940      	lsrs	r0, r0, #5
 8005a32:	f7fd fa25 	bl	8002e80 <_test_assert>
 8005a36:	b110      	cbz	r0, 8005a3e <oslib_test_003_001_execute.lto_priv.189+0x2e>
}
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(2);
 8005a3e:	2302      	movs	r3, #2
 8005a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a44:	48b5      	ldr	r0, [pc, #724]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	f000 fe82 	bl	8006750 <chHeapAllocAligned.constprop.33>
    test_assert(p1 == NULL, "allocation not failed");
 8005a4c:	fab0 f080 	clz	r0, r0
 8005a50:	0940      	lsrs	r0, r0, #5
 8005a52:	49b4      	ldr	r1, [pc, #720]	; (8005d24 <oslib_test_003_001_execute.lto_priv.189+0x314>)
 8005a54:	f7fd fa14 	bl	8002e80 <_test_assert>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d1ed      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(3);
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	2110      	movs	r1, #16
 8005a60:	48ae      	ldr	r0, [pc, #696]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	f000 fe74 	bl	8006750 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
 8005a68:	4605      	mov	r5, r0
 8005a6a:	3000      	adds	r0, #0
 8005a6c:	bf18      	it	ne
 8005a6e:	2001      	movne	r0, #1
 8005a70:	49ad      	ldr	r1, [pc, #692]	; (8005d28 <oslib_test_003_001_execute.lto_priv.189+0x318>)
 8005a72:	f7fd fa05 	bl	8002e80 <_test_assert>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1de      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    chHeapFree(p1);
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f7fb f9a8 	bl	8000dd0 <chHeapFree>
  test_set_step(4);
 8005a80:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005a82:	a902      	add	r1, sp, #8
 8005a84:	aa03      	add	r2, sp, #12
 8005a86:	48a5      	ldr	r0, [pc, #660]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
  test_set_step(4);
 8005a88:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005a8a:	f7fd fba9 	bl	80031e0 <chHeapStatus>
 8005a8e:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8005a90:	f1a0 0001 	sub.w	r0, r0, #1
 8005a94:	fab0 f080 	clz	r0, r0
 8005a98:	0940      	lsrs	r0, r0, #5
 8005a9a:	49a4      	ldr	r1, [pc, #656]	; (8005d2c <oslib_test_003_001_execute.lto_priv.189+0x31c>)
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8005a9c:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 8005a9e:	f7fd f9ef 	bl	8002e80 <_test_assert>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d1c8      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8005aa6:	9802      	ldr	r0, [sp, #8]
 8005aa8:	49a1      	ldr	r1, [pc, #644]	; (8005d30 <oslib_test_003_001_execute.lto_priv.189+0x320>)
 8005aaa:	280f      	cmp	r0, #15
 8005aac:	bf94      	ite	ls
 8005aae:	2000      	movls	r0, #0
 8005ab0:	2001      	movhi	r0, #1
 8005ab2:	f7fd f9e5 	bl	8002e80 <_test_assert>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d1be      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    test_assert(total_size == largest_size, "unexpected heap state");
 8005aba:	9802      	ldr	r0, [sp, #8]
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	499c      	ldr	r1, [pc, #624]	; (8005d30 <oslib_test_003_001_execute.lto_priv.189+0x320>)
 8005ac0:	1ac0      	subs	r0, r0, r3
 8005ac2:	fab0 f080 	clz	r0, r0
 8005ac6:	0940      	lsrs	r0, r0, #5
 8005ac8:	f7fd f9da 	bl	8002e80 <_test_assert>
 8005acc:	4605      	mov	r5, r0
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d1b2      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(5);
 8005ad2:	2305      	movs	r3, #5
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	4891      	ldr	r0, [pc, #580]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	f000 fe39 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005ade:	2110      	movs	r1, #16
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	488e      	ldr	r0, [pc, #568]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005ae4:	f000 fe34 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005ae8:	2110      	movs	r1, #16
 8005aea:	4607      	mov	r7, r0
 8005aec:	488b      	ldr	r0, [pc, #556]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005aee:	f000 fe2f 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005af2:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 8005af4:	4640      	mov	r0, r8
 8005af6:	f7fb f96b 	bl	8000dd0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7fb f968 	bl	8000dd0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7fb f965 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005b06:	462a      	mov	r2, r5
 8005b08:	a901      	add	r1, sp, #4
 8005b0a:	4884      	ldr	r0, [pc, #528]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b0c:	f7fd fb68 	bl	80031e0 <chHeapStatus>
 8005b10:	f1a0 0001 	sub.w	r0, r0, #1
 8005b14:	fab0 f080 	clz	r0, r0
 8005b18:	4981      	ldr	r1, [pc, #516]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005b1a:	0940      	lsrs	r0, r0, #5
 8005b1c:	f7fd f9b0 	bl	8002e80 <_test_assert>
 8005b20:	4605      	mov	r5, r0
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d188      	bne.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(6);
 8005b26:	2306      	movs	r3, #6
 8005b28:	2110      	movs	r1, #16
 8005b2a:	487c      	ldr	r0, [pc, #496]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	f000 fe0f 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005b32:	2110      	movs	r1, #16
 8005b34:	4606      	mov	r6, r0
 8005b36:	4879      	ldr	r0, [pc, #484]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b38:	f000 fe0a 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	4607      	mov	r7, r0
 8005b40:	4876      	ldr	r0, [pc, #472]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b42:	f000 fe05 	bl	8006750 <chHeapAllocAligned.constprop.33>
    chHeapFree(p3);                                 /* Merges forward.*/
 8005b46:	f7fb f943 	bl	8000dd0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7fb f940 	bl	8000dd0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7fb f93d 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005b56:	462a      	mov	r2, r5
 8005b58:	a901      	add	r1, sp, #4
 8005b5a:	4870      	ldr	r0, [pc, #448]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b5c:	f7fd fb40 	bl	80031e0 <chHeapStatus>
 8005b60:	f1a0 0001 	sub.w	r0, r0, #1
 8005b64:	fab0 f080 	clz	r0, r0
 8005b68:	496d      	ldr	r1, [pc, #436]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005b6a:	0940      	lsrs	r0, r0, #5
 8005b6c:	f7fd f988 	bl	8002e80 <_test_assert>
 8005b70:	4605      	mov	r5, r0
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f47f af60 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(7);
 8005b78:	2307      	movs	r3, #7
 8005b7a:	2111      	movs	r1, #17
 8005b7c:	4867      	ldr	r0, [pc, #412]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	f000 fde6 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005b84:	2110      	movs	r1, #16
 8005b86:	4606      	mov	r6, r0
 8005b88:	4864      	ldr	r0, [pc, #400]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b8a:	f000 fde1 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005b8e:	4607      	mov	r7, r0
    chHeapFree(p1);
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7fb f91d 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8005b96:	462a      	mov	r2, r5
 8005b98:	a901      	add	r1, sp, #4
 8005b9a:	4860      	ldr	r0, [pc, #384]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005b9c:	f7fd fb20 	bl	80031e0 <chHeapStatus>
 8005ba0:	f1a0 0802 	sub.w	r8, r0, #2
 8005ba4:	f1d8 0000 	rsbs	r0, r8, #0
 8005ba8:	4962      	ldr	r1, [pc, #392]	; (8005d34 <oslib_test_003_001_execute.lto_priv.189+0x324>)
 8005baa:	eb40 0008 	adc.w	r0, r0, r8
 8005bae:	f7fd f967 	bl	8002e80 <_test_assert>
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f47f af3f 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
 8005bba:	2110      	movs	r1, #16
 8005bbc:	4857      	ldr	r0, [pc, #348]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005bbe:	f000 fdc7 	bl	8006750 <chHeapAllocAligned.constprop.33>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	a901      	add	r1, sp, #4
 8005bc8:	4854      	ldr	r0, [pc, #336]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005bca:	f7fd fb09 	bl	80031e0 <chHeapStatus>
 8005bce:	2801      	cmp	r0, #1
 8005bd0:	f000 809f 	beq.w	8005d12 <oslib_test_003_001_execute.lto_priv.189+0x302>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	a901      	add	r1, sp, #4
 8005bd8:	4850      	ldr	r0, [pc, #320]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005bda:	f7fd fb01 	bl	80031e0 <chHeapStatus>
 8005bde:	f1a0 0c02 	sub.w	ip, r0, #2
 8005be2:	f1dc 0000 	rsbs	r0, ip, #0
 8005be6:	eb40 000c 	adc.w	r0, r0, ip
 8005bea:	494d      	ldr	r1, [pc, #308]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005bec:	f7fd f948 	bl	8002e80 <_test_assert>
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f47f af20 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    chHeapFree(p2);
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	f7fb f8e9 	bl	8000dd0 <chHeapFree>
    chHeapFree(p1);
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7fb f8e6 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005c04:	462a      	mov	r2, r5
 8005c06:	a901      	add	r1, sp, #4
 8005c08:	4844      	ldr	r0, [pc, #272]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c0a:	f7fd fae9 	bl	80031e0 <chHeapStatus>
 8005c0e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8005c12:	f1de 0000 	rsbs	r0, lr, #0
 8005c16:	4942      	ldr	r1, [pc, #264]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005c18:	eb40 000e 	adc.w	r0, r0, lr
 8005c1c:	f7fd f930 	bl	8002e80 <_test_assert>
 8005c20:	4605      	mov	r5, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f47f af08 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(8);
 8005c28:	2308      	movs	r3, #8
 8005c2a:	2110      	movs	r1, #16
 8005c2c:	483b      	ldr	r0, [pc, #236]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	f000 fd8e 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005c34:	2110      	movs	r1, #16
 8005c36:	4607      	mov	r7, r0
 8005c38:	4838      	ldr	r0, [pc, #224]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c3a:	f000 fd89 	bl	8006750 <chHeapAllocAligned.constprop.33>
 8005c3e:	4606      	mov	r6, r0
    chHeapFree(p1);
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7fb f8c5 	bl	8000dd0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8005c46:	462a      	mov	r2, r5
 8005c48:	a901      	add	r1, sp, #4
 8005c4a:	4834      	ldr	r0, [pc, #208]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c4c:	f7fd fac8 	bl	80031e0 <chHeapStatus>
 8005c50:	1e87      	subs	r7, r0, #2
 8005c52:	4278      	negs	r0, r7
 8005c54:	4937      	ldr	r1, [pc, #220]	; (8005d34 <oslib_test_003_001_execute.lto_priv.189+0x324>)
 8005c56:	4178      	adcs	r0, r7
 8005c58:	f7fd f912 	bl	8002e80 <_test_assert>
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f47f aeea 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
 8005c64:	2120      	movs	r1, #32
 8005c66:	482d      	ldr	r0, [pc, #180]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c68:	f000 fd72 	bl	8006750 <chHeapAllocAligned.constprop.33>
    chHeapFree(p1);
 8005c6c:	f7fb f8b0 	bl	8000dd0 <chHeapFree>
    chHeapFree(p2);
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fb f8ad 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005c76:	462a      	mov	r2, r5
 8005c78:	a901      	add	r1, sp, #4
 8005c7a:	4828      	ldr	r0, [pc, #160]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005c7c:	f7fd fab0 	bl	80031e0 <chHeapStatus>
 8005c80:	1e45      	subs	r5, r0, #1
 8005c82:	4268      	negs	r0, r5
 8005c84:	4926      	ldr	r1, [pc, #152]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005c86:	4168      	adcs	r0, r5
 8005c88:	f7fd f8fa 	bl	8002e80 <_test_assert>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f47f aed2 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
  test_set_step(9);
 8005c94:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8005c96:	a901      	add	r1, sp, #4
 8005c98:	4820      	ldr	r0, [pc, #128]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
  test_set_step(9);
 8005c9a:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8005c9c:	f7fd faa0 	bl	80031e0 <chHeapStatus>
 8005ca0:	9901      	ldr	r1, [sp, #4]
 8005ca2:	481e      	ldr	r0, [pc, #120]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005ca4:	f000 fd54 	bl	8006750 <chHeapAllocAligned.constprop.33>
    test_assert(p1 != NULL, "allocation failed");
 8005ca8:	4606      	mov	r6, r0
 8005caa:	3000      	adds	r0, #0
 8005cac:	491e      	ldr	r1, [pc, #120]	; (8005d28 <oslib_test_003_001_execute.lto_priv.189+0x318>)
 8005cae:	bf18      	it	ne
 8005cb0:	2001      	movne	r0, #1
 8005cb2:	f7fd f8e5 	bl	8002e80 <_test_assert>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f47f aebd 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8005cbe:	4601      	mov	r1, r0
 8005cc0:	4816      	ldr	r0, [pc, #88]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
 8005cc2:	f7fd fa8d 	bl	80031e0 <chHeapStatus>
 8005cc6:	fab0 f080 	clz	r0, r0
 8005cca:	0940      	lsrs	r0, r0, #5
 8005ccc:	491a      	ldr	r1, [pc, #104]	; (8005d38 <oslib_test_003_001_execute.lto_priv.189+0x328>)
 8005cce:	f7fd f8d7 	bl	8002e80 <_test_assert>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f47f aeaf 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    chHeapFree(p1);
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7fb f878 	bl	8000dd0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	a901      	add	r1, sp, #4
  test_set_step(10);
 8005ce4:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005ce6:	480d      	ldr	r0, [pc, #52]	; (8005d1c <oslib_test_003_001_execute.lto_priv.189+0x30c>)
  test_set_step(10);
 8005ce8:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8005cea:	f7fd fa79 	bl	80031e0 <chHeapStatus>
 8005cee:	1e42      	subs	r2, r0, #1
 8005cf0:	4250      	negs	r0, r2
 8005cf2:	4150      	adcs	r0, r2
 8005cf4:	490a      	ldr	r1, [pc, #40]	; (8005d20 <oslib_test_003_001_execute.lto_priv.189+0x310>)
 8005cf6:	f7fd f8c3 	bl	8002e80 <_test_assert>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f47f ae9c 	bne.w	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    test_assert(n == sz, "size changed");
 8005d00:	9801      	ldr	r0, [sp, #4]
 8005d02:	9b00      	ldr	r3, [sp, #0]
 8005d04:	490d      	ldr	r1, [pc, #52]	; (8005d3c <oslib_test_003_001_execute.lto_priv.189+0x32c>)
 8005d06:	1ac3      	subs	r3, r0, r3
 8005d08:	4258      	negs	r0, r3
 8005d0a:	4158      	adcs	r0, r3
 8005d0c:	f7fd f8b8 	bl	8002e80 <_test_assert>
 8005d10:	e692      	b.n	8005a38 <oslib_test_003_001_execute.lto_priv.189+0x28>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8005d12:	2001      	movs	r0, #1
 8005d14:	e769      	b.n	8005bea <oslib_test_003_001_execute.lto_priv.189+0x1da>
 8005d16:	bf00      	nop
 8005d18:	200013d8 	.word	0x200013d8
 8005d1c:	20000970 	.word	0x20000970
 8005d20:	08007ab8 	.word	0x08007ab8
 8005d24:	08008668 	.word	0x08008668
 8005d28:	08008654 	.word	0x08008654
 8005d2c:	08009850 	.word	0x08009850
 8005d30:	08009864 	.word	0x08009864
 8005d34:	0800987c 	.word	0x0800987c
 8005d38:	08009514 	.word	0x08009514
 8005d3c:	0800988c 	.word	0x0800988c

08005d40 <oslib_test_002_003_execute.lto_priv.187>:

static void oslib_test_002_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}

static void oslib_test_002_003_execute(void) {
 8005d40:	b508      	push	{r3, lr}

  /* [2.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8005d42:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <oslib_test_002_003_execute.lto_priv.187+0x20>)
 8005d44:	2201      	movs	r2, #1
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8005d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(1);
 8005d4a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8005d4c:	f000 ff28 	bl	8006ba0 <chGuardedPoolAllocTimeout.constprop.15>
 8005d50:	fab0 f080 	clz	r0, r0
 8005d54:	0940      	lsrs	r0, r0, #5
 8005d56:	4903      	ldr	r1, [pc, #12]	; (8005d64 <oslib_test_002_003_execute.lto_priv.187+0x24>)
  }
}
 8005d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8005d5c:	f7fd b890 	b.w	8002e80 <_test_assert>
 8005d60:	200013d8 	.word	0x200013d8
 8005d64:	08009840 	.word	0x08009840
	...

08005d70 <oslib_test_002_002_execute.lto_priv.185>:
static void oslib_test_002_002_execute(void) {
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8005d74:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8005e6c <oslib_test_002_002_execute.lto_priv.185+0xfc>
 8005d78:	4d38      	ldr	r5, [pc, #224]	; (8005e5c <oslib_test_002_002_execute.lto_priv.185+0xec>)
 8005d7a:	4c39      	ldr	r4, [pc, #228]	; (8005e60 <oslib_test_002_002_execute.lto_priv.185+0xf0>)
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f8ca 3000 	str.w	r3, [sl]
 * @iclass
 */
void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8005d82:	46a9      	mov	r9, r5
 8005d84:	2604      	movs	r6, #4
 8005d86:	f04f 0820 	mov.w	r8, #32
 8005d8a:	2700      	movs	r7, #0
 8005d8c:	f388 8811 	msr	BASEPRI, r8
  php->next = mp->next;
 8005d90:	68eb      	ldr	r3, [r5, #12]
 8005d92:	6023      	str	r3, [r4, #0]
  chSemSignalI(&gmp->sem);
 8005d94:	4648      	mov	r0, r9
  mp->next = php;
 8005d96:	60ec      	str	r4, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005d98:	f7fb f8c2 	bl	8000f20 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8005d9c:	f7fa fe00 	bl	80009a0 <chSchRescheduleS>
 8005da0:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005da4:	692b      	ldr	r3, [r5, #16]
  while (n != 0U) {
 8005da6:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8005da8:	441c      	add	r4, r3
  while (n != 0U) {
 8005daa:	d1ef      	bne.n	8005d8c <oslib_test_002_002_execute.lto_priv.185+0x1c>
  test_set_step(2);
 8005dac:	2302      	movs	r3, #2
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005dae:	4e2d      	ldr	r6, [pc, #180]	; (8005e64 <oslib_test_002_002_execute.lto_priv.185+0xf4>)
  test_set_step(2);
 8005db0:	f8ca 3000 	str.w	r3, [sl]
 8005db4:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005db6:	2000      	movs	r0, #0
 8005db8:	f000 fef2 	bl	8006ba0 <chGuardedPoolAllocTimeout.constprop.15>
 8005dbc:	3000      	adds	r0, #0
 8005dbe:	bf18      	it	ne
 8005dc0:	2001      	movne	r0, #1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	f7fd f85c 	bl	8002e80 <_test_assert>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d144      	bne.n	8005e56 <oslib_test_002_002_execute.lto_priv.185+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005dcc:	3c01      	subs	r4, #1
 8005dce:	d1f2      	bne.n	8005db6 <oslib_test_002_002_execute.lto_priv.185+0x46>
  test_set_step(3);
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005dd6:	f000 fee3 	bl	8006ba0 <chGuardedPoolAllocTimeout.constprop.15>
 8005dda:	fab0 f080 	clz	r0, r0
 8005dde:	0940      	lsrs	r0, r0, #5
 8005de0:	4921      	ldr	r1, [pc, #132]	; (8005e68 <oslib_test_002_002_execute.lto_priv.185+0xf8>)
 8005de2:	f7fd f84d 	bl	8002e80 <_test_assert>
 8005de6:	bbb0      	cbnz	r0, 8005e56 <oslib_test_002_002_execute.lto_priv.185+0xe6>
 8005de8:	4e1d      	ldr	r6, [pc, #116]	; (8005e60 <oslib_test_002_002_execute.lto_priv.185+0xf0>)
  chSemSignalI(&gmp->sem);
 8005dea:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8005e5c <oslib_test_002_002_execute.lto_priv.185+0xec>
  test_set_step(4);
 8005dee:	2304      	movs	r3, #4
 8005df0:	f106 0910 	add.w	r9, r6, #16
 8005df4:	f8ca 3000 	str.w	r3, [sl]
 8005df8:	2720      	movs	r7, #32
      chGuardedPoolFree(&gmp1, &objects[i]);
 8005dfa:	4633      	mov	r3, r6
 8005dfc:	f387 8811 	msr	BASEPRI, r7
  php->next = mp->next;
 8005e00:	68ea      	ldr	r2, [r5, #12]
 8005e02:	f846 2b04 	str.w	r2, [r6], #4
  chSemSignalI(&gmp->sem);
 8005e06:	4640      	mov	r0, r8
  mp->next = php;
 8005e08:	60eb      	str	r3, [r5, #12]
  chSemSignalI(&gmp->sem);
 8005e0a:	f7fb f889 	bl	8000f20 <chSemSignalI>
  chSchRescheduleS();
 8005e0e:	f7fa fdc7 	bl	80009a0 <chSchRescheduleS>
 8005e12:	f384 8811 	msr	BASEPRI, r4
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005e16:	45b1      	cmp	r9, r6
 8005e18:	d1ef      	bne.n	8005dfa <oslib_test_002_002_execute.lto_priv.185+0x8a>
  test_set_step(5);
 8005e1a:	2305      	movs	r3, #5
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005e1c:	4d11      	ldr	r5, [pc, #68]	; (8005e64 <oslib_test_002_002_execute.lto_priv.185+0xf4>)
  test_set_step(5);
 8005e1e:	f8ca 3000 	str.w	r3, [sl]
 8005e22:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 8005e24:	2000      	movs	r0, #0
 8005e26:	f000 febb 	bl	8006ba0 <chGuardedPoolAllocTimeout.constprop.15>
 8005e2a:	3000      	adds	r0, #0
 8005e2c:	bf18      	it	ne
 8005e2e:	2001      	movne	r0, #1
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fd f825 	bl	8002e80 <_test_assert>
 8005e36:	b970      	cbnz	r0, 8005e56 <oslib_test_002_002_execute.lto_priv.185+0xe6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005e38:	3c01      	subs	r4, #1
 8005e3a:	d1f3      	bne.n	8005e24 <oslib_test_002_002_execute.lto_priv.185+0xb4>
  test_set_step(6);
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	f8ca 3000 	str.w	r3, [sl]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005e42:	f000 fead 	bl	8006ba0 <chGuardedPoolAllocTimeout.constprop.15>
 8005e46:	fab0 f080 	clz	r0, r0
 8005e4a:	0940      	lsrs	r0, r0, #5
 8005e4c:	4906      	ldr	r1, [pc, #24]	; (8005e68 <oslib_test_002_002_execute.lto_priv.185+0xf8>)
}
 8005e4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 8005e52:	f7fd b815 	b.w	8002e80 <_test_assert>
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000838 	.word	0x20000838
 8005e60:	2000119c 	.word	0x2000119c
 8005e64:	08009834 	.word	0x08009834
 8005e68:	08009840 	.word	0x08009840
 8005e6c:	200013d8 	.word	0x200013d8

08005e70 <oslib_test_002_001_execute.lto_priv.183>:
static void oslib_test_002_001_execute(void) {
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005e74:	4e3a      	ldr	r6, [pc, #232]	; (8005f60 <oslib_test_002_001_execute.lto_priv.183+0xf0>)
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <oslib_test_002_001_execute.lto_priv.183+0xf4>)
 8005e78:	4c3b      	ldr	r4, [pc, #236]	; (8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	6032      	str	r2, [r6, #0]
 8005e7e:	2520      	movs	r5, #32
 8005e80:	2204      	movs	r2, #4
 8005e82:	2000      	movs	r0, #0
 8005e84:	f385 8811 	msr	BASEPRI, r5
  php->next = mp->next;
 8005e88:	6821      	ldr	r1, [r4, #0]
 8005e8a:	6019      	str	r1, [r3, #0]
  mp->next = php;
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	f380 8811 	msr	BASEPRI, r0
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005e92:	6861      	ldr	r1, [r4, #4]
  while (n != 0U) {
 8005e94:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 8005e96:	440b      	add	r3, r1
  while (n != 0U) {
 8005e98:	d1f4      	bne.n	8005e84 <oslib_test_002_001_execute.lto_priv.183+0x14>
  test_set_step(2);
 8005e9a:	2302      	movs	r3, #2
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005e9c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>
 8005ea0:	4f32      	ldr	r7, [pc, #200]	; (8005f6c <oslib_test_002_001_execute.lto_priv.183+0xfc>)
  test_set_step(2);
 8005ea2:	6033      	str	r3, [r6, #0]
 8005ea4:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7fd f95a 	bl	8003160 <chPoolAlloc>
 8005eac:	3000      	adds	r0, #0
 8005eae:	bf18      	it	ne
 8005eb0:	2001      	movne	r0, #1
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fc ffe4 	bl	8002e80 <_test_assert>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d13c      	bne.n	8005f36 <oslib_test_002_001_execute.lto_priv.183+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005ebc:	3d01      	subs	r5, #1
 8005ebe:	d1f2      	bne.n	8005ea6 <oslib_test_002_001_execute.lto_priv.183+0x36>
  test_set_step(3);
 8005ec0:	2303      	movs	r3, #3
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005ec2:	4829      	ldr	r0, [pc, #164]	; (8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>)
  test_set_step(3);
 8005ec4:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005ec6:	f7fd f94b 	bl	8003160 <chPoolAlloc>
 8005eca:	fab0 f080 	clz	r0, r0
 8005ece:	0940      	lsrs	r0, r0, #5
 8005ed0:	4927      	ldr	r1, [pc, #156]	; (8005f70 <oslib_test_002_001_execute.lto_priv.183+0x100>)
 8005ed2:	f7fc ffd5 	bl	8002e80 <_test_assert>
 8005ed6:	bb70      	cbnz	r0, 8005f36 <oslib_test_002_001_execute.lto_priv.183+0xc6>
 8005ed8:	4b22      	ldr	r3, [pc, #136]	; (8005f64 <oslib_test_002_001_execute.lto_priv.183+0xf4>)
  test_set_step(4);
 8005eda:	2204      	movs	r2, #4
 8005edc:	f103 0710 	add.w	r7, r3, #16
 8005ee0:	6032      	str	r2, [r6, #0]
 8005ee2:	2020      	movs	r0, #32
      chPoolFree(&mp1, &objects[i]);
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f380 8811 	msr	BASEPRI, r0
  php->next = mp->next;
 8005eea:	6821      	ldr	r1, [r4, #0]
 8005eec:	f843 1b04 	str.w	r1, [r3], #4
  mp->next = php;
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005ef6:	429f      	cmp	r7, r3
 8005ef8:	d1f4      	bne.n	8005ee4 <oslib_test_002_001_execute.lto_priv.183+0x74>
  test_set_step(5);
 8005efa:	2305      	movs	r3, #5
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005efc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>
 8005f00:	4f1a      	ldr	r7, [pc, #104]	; (8005f6c <oslib_test_002_001_execute.lto_priv.183+0xfc>)
  test_set_step(5);
 8005f02:	6033      	str	r3, [r6, #0]
 8005f04:	2504      	movs	r5, #4
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7fd f92a 	bl	8003160 <chPoolAlloc>
 8005f0c:	3000      	adds	r0, #0
 8005f0e:	bf18      	it	ne
 8005f10:	2001      	movne	r0, #1
 8005f12:	4639      	mov	r1, r7
 8005f14:	f7fc ffb4 	bl	8002e80 <_test_assert>
 8005f18:	b968      	cbnz	r0, 8005f36 <oslib_test_002_001_execute.lto_priv.183+0xc6>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005f1a:	3d01      	subs	r5, #1
 8005f1c:	d1f3      	bne.n	8005f06 <oslib_test_002_001_execute.lto_priv.183+0x96>
  test_set_step(6);
 8005f1e:	2306      	movs	r3, #6
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005f20:	4811      	ldr	r0, [pc, #68]	; (8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>)
  test_set_step(6);
 8005f22:	6033      	str	r3, [r6, #0]
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 8005f24:	f7fd f91c 	bl	8003160 <chPoolAlloc>
 8005f28:	fab0 f080 	clz	r0, r0
 8005f2c:	0940      	lsrs	r0, r0, #5
 8005f2e:	4910      	ldr	r1, [pc, #64]	; (8005f70 <oslib_test_002_001_execute.lto_priv.183+0x100>)
 8005f30:	f7fc ffa6 	bl	8002e80 <_test_assert>
 8005f34:	b108      	cbz	r0, 8005f3a <oslib_test_002_001_execute.lto_priv.183+0xca>
 8005f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(7);
 8005f3a:	2107      	movs	r1, #7
  mp->object_size = size;
 8005f3c:	2304      	movs	r3, #4
  mp->provider = provider;
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <oslib_test_002_001_execute.lto_priv.183+0x104>)
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005f40:	4809      	ldr	r0, [pc, #36]	; (8005f68 <oslib_test_002_001_execute.lto_priv.183+0xf8>)
  test_set_step(7);
 8005f42:	6031      	str	r1, [r6, #0]
  mp->next = NULL;
 8005f44:	6025      	str	r5, [r4, #0]
  mp->object_size = size;
 8005f46:	6063      	str	r3, [r4, #4]
  mp->align = align;
 8005f48:	60a3      	str	r3, [r4, #8]
  mp->provider = provider;
 8005f4a:	60e2      	str	r2, [r4, #12]
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005f4c:	f7fd f908 	bl	8003160 <chPoolAlloc>
 8005f50:	fab0 f080 	clz	r0, r0
 8005f54:	0940      	lsrs	r0, r0, #5
 8005f56:	4908      	ldr	r1, [pc, #32]	; (8005f78 <oslib_test_002_001_execute.lto_priv.183+0x108>)
}
 8005f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8005f5c:	f7fc bf90 	b.w	8002e80 <_test_assert>
 8005f60:	200013d8 	.word	0x200013d8
 8005f64:	2000119c 	.word	0x2000119c
 8005f68:	20000820 	.word	0x20000820
 8005f6c:	08009834 	.word	0x08009834
 8005f70:	08009840 	.word	0x08009840
 8005f74:	080059a1 	.word	0x080059a1
 8005f78:	08009818 	.word	0x08009818
 8005f7c:	00000000 	.word	0x00000000

08005f80 <oslib_test_001_003_teardown.lto_priv.180>:

static void oslib_test_001_003_teardown(void) {
  chMBReset(&mb1);
 8005f80:	f000 bcbe 	b.w	8006900 <chMBReset.constprop.29>
	...

08005f90 <oslib_test_001_003_execute.lto_priv.181>:
}

static void oslib_test_001_003_execute(void) {
 8005f90:	b570      	push	{r4, r5, r6, lr}
  msg_t msg1, msg2;
  unsigned i;

  /* [1.3.1] Filling the mailbox.*/
  test_set_step(1);
 8005f92:	4e40      	ldr	r6, [pc, #256]	; (8006094 <oslib_test_001_003_execute.lto_priv.181+0x104>)
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005f94:	4d40      	ldr	r5, [pc, #256]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
  test_set_step(1);
 8005f96:	2301      	movs	r3, #1
static void oslib_test_001_003_execute(void) {
 8005f98:	b082      	sub	sp, #8
  test_set_step(1);
 8005f9a:	6033      	str	r3, [r6, #0]
 8005f9c:	2442      	movs	r4, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8005f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 fccc 	bl	8006940 <chMBPostTimeout.constprop.27>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8005fa8:	fab0 f080 	clz	r0, r0
 8005fac:	4629      	mov	r1, r5
 8005fae:	0940      	lsrs	r0, r0, #5
 8005fb0:	f7fc ff66 	bl	8002e80 <_test_assert>
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	b988      	cbnz	r0, 8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
    for (i = 0; i < MB_SIZE; i++) {
 8005fb8:	2c46      	cmp	r4, #70	; 0x46
 8005fba:	d1f0      	bne.n	8005f9e <oslib_test_001_003_execute.lto_priv.181+0xe>
    }
  }

  /* [1.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 8005fbc:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	2058      	movs	r0, #88	; 0x58
  test_set_step(2);
 8005fc2:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 8005fc4:	f000 fcbc 	bl	8006940 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005fc8:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005fcc:	fab0 f080 	clz	r0, r0
 8005fd0:	4931      	ldr	r1, [pc, #196]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 8005fd2:	0940      	lsrs	r0, r0, #5
 8005fd4:	f7fc ff54 	bl	8002e80 <_test_assert>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	b108      	cbz	r0, 8005fe0 <oslib_test_001_003_execute.lto_priv.181+0x50>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
}
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	2520      	movs	r5, #32
 8005fe2:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostI(&mb1, 'X');
 8005fe6:	2058      	movs	r0, #88	; 0x58
 8005fe8:	f000 fcea 	bl	80069c0 <chMBPostI.constprop.26>
 8005fec:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005ff0:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8005ff4:	fab0 f080 	clz	r0, r0
 8005ff8:	4927      	ldr	r1, [pc, #156]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 8005ffa:	0940      	lsrs	r0, r0, #5
 8005ffc:	f7fc ff40 	bl	8002e80 <_test_assert>
 8006000:	2800      	cmp	r0, #0
 8006002:	d1eb      	bne.n	8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 8006004:	2101      	movs	r1, #1
 8006006:	2058      	movs	r0, #88	; 0x58
 8006008:	f000 fd02 	bl	8006a10 <chMBPostAheadTimeout.constprop.24>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800600c:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8006010:	fab0 f080 	clz	r0, r0
 8006014:	4920      	ldr	r1, [pc, #128]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 8006016:	0940      	lsrs	r0, r0, #5
 8006018:	f7fc ff32 	bl	8002e80 <_test_assert>
 800601c:	4604      	mov	r4, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d1dc      	bne.n	8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
 8006022:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBPostAheadI(&mb1, 'X');
 8006026:	2058      	movs	r0, #88	; 0x58
 8006028:	f000 fd32 	bl	8006a90 <chMBPostAheadI.constprop.23>
 800602c:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006030:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8006034:	fab0 f080 	clz	r0, r0
 8006038:	4917      	ldr	r1, [pc, #92]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 800603a:	0940      	lsrs	r0, r0, #5
 800603c:	f7fc ff20 	bl	8002e80 <_test_assert>
 8006040:	4604      	mov	r4, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	d1ca      	bne.n	8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
  test_set_step(3);
 8006046:	2303      	movs	r3, #3
 8006048:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 800604a:	f000 fc59 	bl	8006900 <chMBReset.constprop.29>
  mbp->reset = false;
 800604e:	4a13      	ldr	r2, [pc, #76]	; (800609c <oslib_test_001_003_execute.lto_priv.181+0x10c>)
  test_set_step(4);
 8006050:	2304      	movs	r3, #4
 8006052:	7514      	strb	r4, [r2, #20]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 8006054:	2101      	movs	r1, #1
 8006056:	a801      	add	r0, sp, #4
  test_set_step(4);
 8006058:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800605a:	f000 fd41 	bl	8006ae0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800605e:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8006062:	fab0 f080 	clz	r0, r0
 8006066:	490c      	ldr	r1, [pc, #48]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 8006068:	0940      	lsrs	r0, r0, #5
 800606a:	f7fc ff09 	bl	8002e80 <_test_assert>
 800606e:	4604      	mov	r4, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1b3      	bne.n	8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
 8006074:	f385 8811 	msr	BASEPRI, r5
    msg1 = chMBFetchI(&mb1, &msg2);
 8006078:	a801      	add	r0, sp, #4
 800607a:	f000 fd69 	bl	8006b50 <chMBFetchI.constprop.20>
 800607e:	f384 8811 	msr	BASEPRI, r4
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006082:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 8006086:	fab0 f080 	clz	r0, r0
 800608a:	4903      	ldr	r1, [pc, #12]	; (8006098 <oslib_test_001_003_execute.lto_priv.181+0x108>)
 800608c:	0940      	lsrs	r0, r0, #5
 800608e:	f7fc fef7 	bl	8002e80 <_test_assert>
 8006092:	e7a3      	b.n	8005fdc <oslib_test_001_003_execute.lto_priv.181+0x4c>
 8006094:	200013d8 	.word	0x200013d8
 8006098:	08009588 	.word	0x08009588
 800609c:	20000864 	.word	0x20000864

080060a0 <oslib_test_001_002_execute.lto_priv.178>:
static void oslib_test_001_002_execute(void) {
 80060a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 80060a4:	4fad      	ldr	r7, [pc, #692]	; (800635c <oslib_test_001_002_execute.lto_priv.178+0x2bc>)
 80060a6:	f04f 0801 	mov.w	r8, #1
static void oslib_test_001_002_execute(void) {
 80060aa:	b082      	sub	sp, #8
  test_set_step(1);
 80060ac:	f8c7 8000 	str.w	r8, [r7]
 80060b0:	2620      	movs	r6, #32
 80060b2:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 80060b6:	4caa      	ldr	r4, [pc, #680]	; (8006360 <oslib_test_001_002_execute.lto_priv.178+0x2c0>)
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80060b8:	49aa      	ldr	r1, [pc, #680]	; (8006364 <oslib_test_001_002_execute.lto_priv.178+0x2c4>)
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80060ba:	6920      	ldr	r0, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 80060bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80060c0:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80060c2:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80060c6:	f1a0 0004 	sub.w	r0, r0, #4
 80060ca:	fab0 f080 	clz	r0, r0
 80060ce:	0940      	lsrs	r0, r0, #5
 80060d0:	f7fc fed6 	bl	8002e80 <_test_assert>
 80060d4:	b128      	cbz	r0, 80060e2 <oslib_test_001_002_execute.lto_priv.178+0x42>
 80060d6:	2300      	movs	r3, #0
 80060d8:	f383 8811 	msr	BASEPRI, r3
}
 80060dc:	b002      	add	sp, #8
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	4605      	mov	r5, r0
 80060e4:	f380 8811 	msr	BASEPRI, r0
  test_set_step(2);
 80060e8:	2302      	movs	r3, #2
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	f386 8811 	msr	BASEPRI, r6
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 80060f0:	6823      	ldr	r3, [r4, #0]
  mbp->rdptr = mbp->buffer;
  mbp->cnt   = (size_t)0;
 80060f2:	6120      	str	r0, [r4, #16]
  mbp->reset = true;
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 80060f4:	f104 0018 	add.w	r0, r4, #24
  mbp->wrptr = mbp->buffer;
 80060f8:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
 80060fa:	60e3      	str	r3, [r4, #12]
  mbp->reset = true;
 80060fc:	f884 8014 	strb.w	r8, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8006100:	f000 f9f6 	bl	80064f0 <chThdDequeueAllI.constprop.59>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8006104:	f104 0020 	add.w	r0, r4, #32
 8006108:	f000 f9f2 	bl	80064f0 <chThdDequeueAllI.constprop.59>
 800610c:	f385 8811 	msr	BASEPRI, r5
 8006110:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006114:	e894 000c 	ldmia.w	r4, {r2, r3}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006118:	6920      	ldr	r0, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800611a:	4993      	ldr	r1, [pc, #588]	; (8006368 <oslib_test_001_002_execute.lto_priv.178+0x2c8>)
  return (size_t)(mbp->top - mbp->buffer);
 800611c:	1a9b      	subs	r3, r3, r2
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800611e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 8006122:	f1a0 0004 	sub.w	r0, r0, #4
 8006126:	fab0 f080 	clz	r0, r0
 800612a:	0940      	lsrs	r0, r0, #5
 800612c:	f7fc fea8 	bl	8002e80 <_test_assert>
 8006130:	4680      	mov	r8, r0
 8006132:	b120      	cbz	r0, 800613e <oslib_test_001_002_execute.lto_priv.178+0x9e>
 8006134:	f385 8811 	msr	BASEPRI, r5
}
 8006138:	b002      	add	sp, #8
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	f380 8811 	msr	BASEPRI, r0
 8006142:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8006146:	6920      	ldr	r0, [r4, #16]
 8006148:	4988      	ldr	r1, [pc, #544]	; (800636c <oslib_test_001_002_execute.lto_priv.178+0x2cc>)
 800614a:	fab0 f080 	clz	r0, r0
 800614e:	0940      	lsrs	r0, r0, #5
 8006150:	f7fc fe96 	bl	8002e80 <_test_assert>
 8006154:	4605      	mov	r5, r0
 8006156:	b120      	cbz	r0, 8006162 <oslib_test_001_002_execute.lto_priv.178+0xc2>
 8006158:	f388 8811 	msr	BASEPRI, r8
}
 800615c:	b002      	add	sp, #8
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	f380 8811 	msr	BASEPRI, r0
 8006166:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	4980      	ldr	r1, [pc, #512]	; (8006370 <oslib_test_001_002_execute.lto_priv.178+0x2d0>)
 8006170:	1ac0      	subs	r0, r0, r3
 8006172:	fab0 f080 	clz	r0, r0
 8006176:	0940      	lsrs	r0, r0, #5
 8006178:	f7fc fe82 	bl	8002e80 <_test_assert>
 800617c:	4680      	mov	r8, r0
 800617e:	2800      	cmp	r0, #0
 8006180:	d1d8      	bne.n	8006134 <oslib_test_001_002_execute.lto_priv.178+0x94>
 8006182:	f380 8811 	msr	BASEPRI, r0
 8006186:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	68e3      	ldr	r3, [r4, #12]
 800618e:	4979      	ldr	r1, [pc, #484]	; (8006374 <oslib_test_001_002_execute.lto_priv.178+0x2d4>)
 8006190:	1ac0      	subs	r0, r0, r3
 8006192:	fab0 f080 	clz	r0, r0
 8006196:	0940      	lsrs	r0, r0, #5
 8006198:	f7fc fe72 	bl	8002e80 <_test_assert>
 800619c:	2800      	cmp	r0, #0
 800619e:	d1db      	bne.n	8006158 <oslib_test_001_002_execute.lto_priv.178+0xb8>
 80061a0:	f380 8811 	msr	BASEPRI, r0
  test_set_step(3);
 80061a4:	2303      	movs	r3, #3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80061a6:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8006378 <oslib_test_001_002_execute.lto_priv.178+0x2d8>
  mbp->reset = false;
 80061aa:	7520      	strb	r0, [r4, #20]
 80061ac:	4680      	mov	r8, r0
  test_set_step(3);
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	2542      	movs	r5, #66	; 0x42
 80061b2:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBPostI(&mb1, 'B' + i);
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fc02 	bl	80069c0 <chMBPostI.constprop.26>
 80061bc:	f388 8811 	msr	BASEPRI, r8
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80061c0:	fab0 f080 	clz	r0, r0
 80061c4:	0940      	lsrs	r0, r0, #5
 80061c6:	4651      	mov	r1, sl
 80061c8:	f7fc fe5a 	bl	8002e80 <_test_assert>
 80061cc:	3501      	adds	r5, #1
 80061ce:	4681      	mov	r9, r0
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d183      	bne.n	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80061d4:	2d45      	cmp	r5, #69	; 0x45
 80061d6:	d1ec      	bne.n	80061b2 <oslib_test_001_002_execute.lto_priv.178+0x112>
 80061d8:	f386 8811 	msr	BASEPRI, r6
    msg1 = chMBPostAheadI(&mb1, 'A');
 80061dc:	2041      	movs	r0, #65	; 0x41
 80061de:	f000 fc57 	bl	8006a90 <chMBPostAheadI.constprop.23>
 80061e2:	f389 8811 	msr	BASEPRI, r9
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80061e6:	fab0 f080 	clz	r0, r0
 80061ea:	0940      	lsrs	r0, r0, #5
 80061ec:	4962      	ldr	r1, [pc, #392]	; (8006378 <oslib_test_001_002_execute.lto_priv.178+0x2d8>)
 80061ee:	f7fc fe47 	bl	8002e80 <_test_assert>
 80061f2:	4605      	mov	r5, r0
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f47f af71 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
  test_set_step(4);
 80061fa:	f04f 0804 	mov.w	r8, #4
 80061fe:	f8c7 8000 	str.w	r8, [r7]
 8006202:	f386 8811 	msr	BASEPRI, r6
  return (size_t)(mbp->top - mbp->buffer);
 8006206:	e894 000a 	ldmia.w	r4, {r1, r3}
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800620a:	6922      	ldr	r2, [r4, #16]
 800620c:	1a5b      	subs	r3, r3, r1
 800620e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8006212:	bf0c      	ite	eq
 8006214:	2001      	moveq	r0, #1
 8006216:	2000      	movne	r0, #0
 8006218:	4958      	ldr	r1, [pc, #352]	; (800637c <oslib_test_001_002_execute.lto_priv.178+0x2dc>)
 800621a:	f7fc fe31 	bl	8002e80 <_test_assert>
 800621e:	4681      	mov	r9, r0
 8006220:	2800      	cmp	r0, #0
 8006222:	d187      	bne.n	8006134 <oslib_test_001_002_execute.lto_priv.178+0x94>
 8006224:	f380 8811 	msr	BASEPRI, r0
 8006228:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800622c:	6920      	ldr	r0, [r4, #16]
 800622e:	4954      	ldr	r1, [pc, #336]	; (8006380 <oslib_test_001_002_execute.lto_priv.178+0x2e0>)
 8006230:	f1a0 0004 	sub.w	r0, r0, #4
 8006234:	fab0 f080 	clz	r0, r0
 8006238:	0940      	lsrs	r0, r0, #5
 800623a:	f7fc fe21 	bl	8002e80 <_test_assert>
 800623e:	4605      	mov	r5, r0
 8006240:	b110      	cbz	r0, 8006248 <oslib_test_001_002_execute.lto_priv.178+0x1a8>
 8006242:	f389 8811 	msr	BASEPRI, r9
 8006246:	e749      	b.n	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
 8006248:	f380 8811 	msr	BASEPRI, r0
 800624c:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8006250:	68e0      	ldr	r0, [r4, #12]
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	494b      	ldr	r1, [pc, #300]	; (8006384 <oslib_test_001_002_execute.lto_priv.178+0x2e4>)
 8006256:	1ac6      	subs	r6, r0, r3
 8006258:	4270      	negs	r0, r6
 800625a:	4170      	adcs	r0, r6
 800625c:	f7fc fe10 	bl	8002e80 <_test_assert>
 8006260:	2800      	cmp	r0, #0
 8006262:	f47f af67 	bne.w	8006134 <oslib_test_001_002_execute.lto_priv.178+0x94>
 8006266:	f380 8811 	msr	BASEPRI, r0
  test_set_step(5);
 800626a:	2305      	movs	r3, #5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800626c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006378 <oslib_test_001_002_execute.lto_priv.178+0x2d8>
  test_set_step(5);
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4605      	mov	r5, r0
 8006274:	2620      	movs	r6, #32
 8006276:	f386 8811 	msr	BASEPRI, r6
      msg1 = chMBFetchI(&mb1, &msg2);
 800627a:	a801      	add	r0, sp, #4
 800627c:	f000 fc68 	bl	8006b50 <chMBFetchI.constprop.20>
 8006280:	f385 8811 	msr	BASEPRI, r5
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8006284:	fab0 f080 	clz	r0, r0
 8006288:	0940      	lsrs	r0, r0, #5
 800628a:	4649      	mov	r1, r9
 800628c:	f7fc fdf8 	bl	8002e80 <_test_assert>
 8006290:	2800      	cmp	r0, #0
 8006292:	f47f af23 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
      test_emit_token(msg2);
 8006296:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800629a:	f7fc faf1 	bl	8002880 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800629e:	f1b8 0801 	subs.w	r8, r8, #1
 80062a2:	d1e8      	bne.n	8006276 <oslib_test_001_002_execute.lto_priv.178+0x1d6>
    test_assert_sequence("ABCD", "wrong get sequence");
 80062a4:	4938      	ldr	r1, [pc, #224]	; (8006388 <oslib_test_001_002_execute.lto_priv.178+0x2e8>)
 80062a6:	4839      	ldr	r0, [pc, #228]	; (800638c <oslib_test_001_002_execute.lto_priv.178+0x2ec>)
 80062a8:	f7fc fdc2 	bl	8002e30 <_test_assert_sequence>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f47f af15 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
  test_set_step(6);
 80062b2:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062b8:	2046      	movs	r0, #70	; 0x46
  test_set_step(6);
 80062ba:	603b      	str	r3, [r7, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80062bc:	f000 fb40 	bl	8006940 <chMBPostTimeout.constprop.27>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80062c0:	fab0 f080 	clz	r0, r0
 80062c4:	0940      	lsrs	r0, r0, #5
 80062c6:	492c      	ldr	r1, [pc, #176]	; (8006378 <oslib_test_001_002_execute.lto_priv.178+0x2d8>)
 80062c8:	f7fc fdda 	bl	8002e80 <_test_assert>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f47f af05 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 80062d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062d6:	a801      	add	r0, sp, #4
 80062d8:	f000 fc02 	bl	8006ae0 <chMBFetchTimeout.constprop.21>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80062dc:	fab0 f080 	clz	r0, r0
 80062e0:	0940      	lsrs	r0, r0, #5
 80062e2:	4925      	ldr	r1, [pc, #148]	; (8006378 <oslib_test_001_002_execute.lto_priv.178+0x2d8>)
 80062e4:	f7fc fdcc 	bl	8002e80 <_test_assert>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f47f aef7 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
  test_set_step(7);
 80062ee:	2307      	movs	r3, #7
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	f386 8811 	msr	BASEPRI, r6
 80062f6:	e894 0005 	ldmia.w	r4, {r0, r2}
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 80062fa:	6923      	ldr	r3, [r4, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80062fc:	491a      	ldr	r1, [pc, #104]	; (8006368 <oslib_test_001_002_execute.lto_priv.178+0x2c8>)
  return (size_t)(mbp->top - mbp->buffer);
 80062fe:	1a12      	subs	r2, r2, r0
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8006300:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006304:	1f1d      	subs	r5, r3, #4
 8006306:	4268      	negs	r0, r5
 8006308:	4168      	adcs	r0, r5
 800630a:	f7fc fdb9 	bl	8002e80 <_test_assert>
 800630e:	2800      	cmp	r0, #0
 8006310:	f47f af22 	bne.w	8006158 <oslib_test_001_002_execute.lto_priv.178+0xb8>
 8006314:	f388 8811 	msr	BASEPRI, r8
 8006318:	f386 8811 	msr	BASEPRI, r6
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800631c:	6920      	ldr	r0, [r4, #16]
 800631e:	4913      	ldr	r1, [pc, #76]	; (800636c <oslib_test_001_002_execute.lto_priv.178+0x2cc>)
 8006320:	fab0 f080 	clz	r0, r0
 8006324:	0940      	lsrs	r0, r0, #5
 8006326:	f7fc fdab 	bl	8002e80 <_test_assert>
 800632a:	2800      	cmp	r0, #0
 800632c:	f47f af14 	bne.w	8006158 <oslib_test_001_002_execute.lto_priv.178+0xb8>
 8006330:	f388 8811 	msr	BASEPRI, r8
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8006334:	6820      	ldr	r0, [r4, #0]
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	490d      	ldr	r1, [pc, #52]	; (8006370 <oslib_test_001_002_execute.lto_priv.178+0x2d0>)
 800633a:	1ac2      	subs	r2, r0, r3
 800633c:	4250      	negs	r0, r2
 800633e:	4150      	adcs	r0, r2
 8006340:	f7fc fd9e 	bl	8002e80 <_test_assert>
 8006344:	2800      	cmp	r0, #0
 8006346:	f47f aec9 	bne.w	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	68e3      	ldr	r3, [r4, #12]
 800634e:	4909      	ldr	r1, [pc, #36]	; (8006374 <oslib_test_001_002_execute.lto_priv.178+0x2d4>)
 8006350:	1ac3      	subs	r3, r0, r3
 8006352:	4258      	negs	r0, r3
 8006354:	4158      	adcs	r0, r3
 8006356:	f7fc fd93 	bl	8002e80 <_test_assert>
 800635a:	e6bf      	b.n	80060dc <oslib_test_001_002_execute.lto_priv.178+0x3c>
 800635c:	200013d8 	.word	0x200013d8
 8006360:	20000864 	.word	0x20000864
 8006364:	08009508 	.word	0x08009508
 8006368:	08009514 	.word	0x08009514
 800636c:	08009520 	.word	0x08009520
 8006370:	0800952c 	.word	0x0800952c
 8006374:	08009550 	.word	0x08009550
 8006378:	08009588 	.word	0x08009588
 800637c:	080095a0 	.word	0x080095a0
 8006380:	080095ac 	.word	0x080095ac
 8006384:	080095b8 	.word	0x080095b8
 8006388:	080095d0 	.word	0x080095d0
 800638c:	08007a0c 	.word	0x08007a0c

08006390 <chThdDequeueNextI.constprop.76>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006390:	6803      	ldr	r3, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8006392:	4298      	cmp	r0, r3
 8006394:	d007      	beq.n	80063a6 <chThdDequeueNextI.constprop.76+0x16>
  tqp->next             = tp->queue.next;
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	6002      	str	r2, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800639a:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800639c:	6050      	str	r0, [r2, #4]
  (void) chSchReadyI(tp);
 800639e:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 80063a0:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80063a2:	f7fa bbd5 	b.w	8000b50 <chSchReadyI>
 80063a6:	4770      	bx	lr
	...

080063b0 <_pal_lld_setgroupmode.constprop.69>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80063b4:	2100      	movs	r1, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80063b6:	4c20      	ldr	r4, [pc, #128]	; (8006438 <_pal_lld_setgroupmode.constprop.69+0x88>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80063b8:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 80063ba:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 80063be:	f04f 0c0f 	mov.w	ip, #15
      m1 = 1 << bit;
 80063c2:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
 80063c6:	2703      	movs	r7, #3
 80063c8:	e00d      	b.n	80063e6 <_pal_lld_setgroupmode.constprop.69+0x36>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80063ca:	6a26      	ldr	r6, [r4, #32]
 80063cc:	ea26 0202 	bic.w	r2, r6, r2
 80063d0:	ea42 0209 	orr.w	r2, r2, r9
 80063d4:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	4013      	ands	r3, r2
 80063da:	432b      	orrs	r3, r5
 80063dc:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80063de:	0840      	lsrs	r0, r0, #1
 80063e0:	d027      	beq.n	8006432 <_pal_lld_setgroupmode.constprop.69+0x82>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80063e2:	00ad      	lsls	r5, r5, #2
    bit++;
 80063e4:	3101      	adds	r1, #1
      m2 = 3 << (bit * 2);
 80063e6:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
 80063e8:	f001 0207 	and.w	r2, r1, #7
 80063ec:	0092      	lsls	r2, r2, #2
      m2 = 3 << (bit * 2);
 80063ee:	fa07 f303 	lsl.w	r3, r7, r3
    if ((mask & 1) != 0) {
 80063f2:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 80063f6:	fa08 f902 	lsl.w	r9, r8, r2
      m1 = 1 << bit;
 80063fa:	fa0e f601 	lsl.w	r6, lr, r1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80063fe:	ea6f 0303 	mvn.w	r3, r3
      m4 = 15 << ((bit & 7) * 4);
 8006402:	fa0c f202 	lsl.w	r2, ip, r2
    if ((mask & 1) != 0) {
 8006406:	d0ea      	beq.n	80063de <_pal_lld_setgroupmode.constprop.69+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006408:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800640c:	ea2a 0606 	bic.w	r6, sl, r6
 8006410:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006412:	68a6      	ldr	r6, [r4, #8]
 8006414:	401e      	ands	r6, r3
 8006416:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8006418:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 800641a:	2907      	cmp	r1, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800641c:	ea06 0603 	and.w	r6, r6, r3
 8006420:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
 8006422:	d9d2      	bls.n	80063ca <_pal_lld_setgroupmode.constprop.69+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006426:	ea26 0202 	bic.w	r2, r6, r2
 800642a:	ea42 0209 	orr.w	r2, r2, r9
 800642e:	6262      	str	r2, [r4, #36]	; 0x24
 8006430:	e7d1      	b.n	80063d6 <_pal_lld_setgroupmode.constprop.69+0x26>
 8006432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006436:	bf00      	nop
 8006438:	40020000 	.word	0x40020000
 800643c:	00000000 	.word	0x00000000

08006440 <chTMStartMeasurementX.constprop.63>:
  return DWT->CYCCNT;
 8006440:	4b01      	ldr	r3, [pc, #4]	; (8006448 <chTMStartMeasurementX.constprop.63+0x8>)
 8006442:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8006444:	6083      	str	r3, [r0, #8]
 8006446:	4770      	bx	lr
 8006448:	e0001000 	.word	0xe0001000
 800644c:	00000000 	.word	0x00000000

08006450 <chThdCreateStatic.constprop.62>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	4604      	mov	r4, r0
 8006454:	2020      	movs	r0, #32
 8006456:	f380 8811 	msr	BASEPRI, r0
  REG_INSERT(tp);
 800645a:	4f1f      	ldr	r7, [pc, #124]	; (80064d8 <chThdCreateStatic.constprop.62+0x88>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800645c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  REG_INSERT(tp);
 8006460:	6978      	ldr	r0, [r7, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006462:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006466:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
 800646a:	4d1c      	ldr	r5, [pc, #112]	; (80064dc <chThdCreateStatic.constprop.62+0x8c>)
 800646c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
  tp->state     = CH_STATE_WTSTART;
 8006470:	2202      	movs	r2, #2
  tp->refs      = (trefs_t)1;
 8006472:	2301      	movs	r3, #1
  tp = (thread_t *)((uint8_t *)wsp + size -
 8006474:	f504 7680 	add.w	r6, r4, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006478:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
  tp->state     = CH_STATE_WTSTART;
 800647c:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
  tp->flags     = CH_FLAG_MODE_STATIC;
 8006480:	2500      	movs	r5, #0
  tp->refs      = (trefs_t)1;
 8006482:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  tp->name      = name;
 8006486:	f8df e058 	ldr.w	lr, [pc, #88]	; 80064e0 <chThdCreateStatic.constprop.62+0x90>
  tp->prio      = prio;
 800648a:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
  queue_init(&tp->msgqueue);
 800648e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  list_init(&tp->waiting);
 8006492:	f504 7294 	add.w	r2, r4, #296	; 0x128
  tp->realprio  = prio;
 8006496:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
  REG_INSERT(tp);
 800649a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  tp->wabase = (stkalign_t *)wsp;
 800649e:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  tp->name      = name;
 80064a2:	f8c4 e118 	str.w	lr, [r4, #280]	; 0x118
  tp->flags     = CH_FLAG_MODE_STATIC;
 80064a6:	f884 5121 	strb.w	r5, [r4, #289]	; 0x121
  tp->mtxlist   = NULL;
 80064aa:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
 80064ae:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  REG_INSERT(tp);
 80064b2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
  chSchWakeupS(tp, MSG_OK);
 80064b6:	4629      	mov	r1, r5
  REG_INSERT(tp);
 80064b8:	6106      	str	r6, [r0, #16]
  chSchWakeupS(tp, MSG_OK);
 80064ba:	4630      	mov	r0, r6
  tlp->next = (thread_t *)tlp;
 80064bc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
 80064c0:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
 80064c4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  REG_INSERT(tp);
 80064c8:	617e      	str	r6, [r7, #20]
  chSchWakeupS(tp, MSG_OK);
 80064ca:	f7fa fa91 	bl	80009f0 <chSchWakeupS>
 80064ce:	f385 8811 	msr	BASEPRI, r5
}
 80064d2:	4630      	mov	r0, r6
 80064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2000122c 	.word	0x2000122c
 80064dc:	080002d1 	.word	0x080002d1
 80064e0:	080098d8 	.word	0x080098d8
	...

080064f0 <chThdDequeueAllI.constprop.59>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80064f0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 80064f2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 80064f4:	4298      	cmp	r0, r3
 80064f6:	d00c      	beq.n	8006512 <chThdDequeueAllI.constprop.59+0x22>
 80064f8:	4604      	mov	r4, r0
  tp->u.rdymsg = msg;
 80064fa:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	6022      	str	r2, [r4, #0]
  (void) chSchReadyI(tp);
 8006502:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8006504:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 8006506:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8006508:	f7fa fb22 	bl	8000b50 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	42a3      	cmp	r3, r4
 8006510:	d1f5      	bne.n	80064fe <chThdDequeueAllI.constprop.59+0xe>
 8006512:	bd38      	pop	{r3, r4, r5, pc}
	...

08006520 <chSemWaitTimeout.constprop.58>:
 8006520:	2320      	movs	r3, #32
 8006522:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <chSemWaitTimeout.constprop.58+0x48>)
 8006528:	6899      	ldr	r1, [r3, #8]
 800652a:	1e4a      	subs	r2, r1, #1
 800652c:	2a00      	cmp	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	db04      	blt.n	800653c <chSemWaitTimeout.constprop.58+0x1c>
  return MSG_OK;
 8006532:	2000      	movs	r0, #0
 8006534:	2300      	movs	r3, #0
 8006536:	f383 8811 	msr	BASEPRI, r3
}
 800653a:	4770      	bx	lr
    if (TIME_IMMEDIATE == timeout) {
 800653c:	b180      	cbz	r0, 8006560 <chSemWaitTimeout.constprop.58+0x40>
    currp->u.wtsemp = sp;
 800653e:	4a0b      	ldr	r2, [pc, #44]	; (800656c <chSemWaitTimeout.constprop.58+0x4c>)
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 8006540:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 8006542:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8006544:	685c      	ldr	r4, [r3, #4]
 8006546:	6253      	str	r3, [r2, #36]	; 0x24
 8006548:	e882 0018 	stmia.w	r2, {r3, r4}
 800654c:	4601      	mov	r1, r0
  tp->queue.prev->queue.next = tp;
 800654e:	6022      	str	r2, [r4, #0]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8006550:	2005      	movs	r0, #5
  tqp->prev                  = tp;
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	f7fa fdb4 	bl	80010c0 <chSchGoSleepTimeoutS>
 8006558:	2300      	movs	r3, #0
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8006560:	6099      	str	r1, [r3, #8]
      return MSG_TIMEOUT;
 8006562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006566:	e7e5      	b.n	8006534 <chSemWaitTimeout.constprop.58+0x14>
 8006568:	20001340 	.word	0x20001340
 800656c:	2000122c 	.word	0x2000122c

08006570 <chSemSignalWait.constprop.55>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	2320      	movs	r3, #32
 8006574:	f383 8811 	msr	BASEPRI, r3
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8006578:	4c15      	ldr	r4, [pc, #84]	; (80065d0 <chSemSignalWait.constprop.55+0x60>)
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	3301      	adds	r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	dd1a      	ble.n	80065ba <chSemSignalWait.constprop.55+0x4a>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8006584:	3b01      	subs	r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	db06      	blt.n	800659a <chSemSignalWait.constprop.55+0x2a>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800658c:	f7fa fa08 	bl	80009a0 <chSchRescheduleS>
    msg = MSG_OK;
 8006590:	2000      	movs	r0, #0
 8006592:	2300      	movs	r3, #0
 8006594:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8006598:	bd38      	pop	{r3, r4, r5, pc}
    thread_t *ctp = currp;
 800659a:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <chSemSignalWait.constprop.55+0x64>)
  tp->queue.prev             = tqp->prev;
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	6995      	ldr	r5, [r2, #24]
    chSchGoSleepS(CH_STATE_WTSEM);
 80065a0:	2005      	movs	r0, #5
 80065a2:	606b      	str	r3, [r5, #4]
  tp->queue.next             = (thread_t *)tqp;
 80065a4:	602c      	str	r4, [r5, #0]
  tp->queue.prev->queue.next = tp;
 80065a6:	601d      	str	r5, [r3, #0]
    ctp->u.wtsemp = spw;
 80065a8:	626c      	str	r4, [r5, #36]	; 0x24
  tqp->prev                  = tp;
 80065aa:	6065      	str	r5, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 80065ac:	f7fa fa70 	bl	8000a90 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 80065b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80065b2:	2300      	movs	r3, #0
 80065b4:	f383 8811 	msr	BASEPRI, r3
}
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
  thread_t *tp = tqp->next;
 80065ba:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80065bc:	6803      	ldr	r3, [r0, #0]
 80065be:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80065c0:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 80065c2:	f7fa fac5 	bl	8000b50 <chSchReadyI>
 80065c6:	2200      	movs	r2, #0
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	6242      	str	r2, [r0, #36]	; 0x24
 80065cc:	e7da      	b.n	8006584 <chSemSignalWait.constprop.55+0x14>
 80065ce:	bf00      	nop
 80065d0:	20001340 	.word	0x20001340
 80065d4:	2000122c 	.word	0x2000122c
	...

080065e0 <chMtxTryLock.constprop.53>:
 80065e0:	2320      	movs	r3, #32
 80065e2:	f383 8811 	msr	BASEPRI, r3
  if (mp->owner != NULL) {
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <chMtxTryLock.constprop.53+0x2c>)
 80065e8:	689a      	ldr	r2, [r3, #8]
    return false;
 80065ea:	2000      	movs	r0, #0
  if (mp->owner != NULL) {
 80065ec:	b11a      	cbz	r2, 80065f6 <chMtxTryLock.constprop.53+0x16>
 80065ee:	2300      	movs	r3, #0
 80065f0:	f383 8811 	msr	BASEPRI, r3
}
 80065f4:	4770      	bx	lr
  mp->owner = currp;
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <chMtxTryLock.constprop.53+0x30>)
 80065f8:	6992      	ldr	r2, [r2, #24]
 80065fa:	609a      	str	r2, [r3, #8]
  mp->next = currp->mtxlist;
 80065fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80065fe:	60d9      	str	r1, [r3, #12]
  currp->mtxlist = mp;
 8006600:	6393      	str	r3, [r2, #56]	; 0x38
 8006602:	2001      	movs	r0, #1
 8006604:	2300      	movs	r3, #0
 8006606:	f383 8811 	msr	BASEPRI, r3
}
 800660a:	4770      	bx	lr
 800660c:	20000854 	.word	0x20000854
 8006610:	2000122c 	.word	0x2000122c
	...

08006620 <chCondSignal.constprop.51>:
void chCondSignal(condition_variable_t *cp) {
 8006620:	b508      	push	{r3, lr}
 8006622:	2320      	movs	r3, #32
 8006624:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <chCondSignal.constprop.51+0x24>)
 800662a:	6818      	ldr	r0, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 800662c:	4298      	cmp	r0, r3
 800662e:	d005      	beq.n	800663c <chCondSignal.constprop.51+0x1c>
  tqp->next             = tp->queue.next;
 8006630:	6802      	ldr	r2, [r0, #0]
 8006632:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006634:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 8006636:	2100      	movs	r1, #0
 8006638:	f7fa f9da 	bl	80009f0 <chSchWakeupS>
 800663c:	2300      	movs	r3, #0
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	bd08      	pop	{r3, pc}
 8006644:	20000830 	.word	0x20000830
	...

08006650 <chCondSignalI.constprop.50>:
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <chCondSignalI.constprop.50+0x20>)
 8006652:	681a      	ldr	r2, [r3, #0]
  if (queue_notempty(&cp->queue)) {
 8006654:	429a      	cmp	r2, r3
 8006656:	d009      	beq.n	800666c <chCondSignalI.constprop.50+0x1c>
  tqp->next             = tp->queue.next;
 8006658:	6811      	ldr	r1, [r2, #0]
void chCondSignalI(condition_variable_t *cp) {
 800665a:	b410      	push	{r4}
    tp->u.rdymsg = MSG_OK;
 800665c:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800665e:	604b      	str	r3, [r1, #4]
 8006660:	6254      	str	r4, [r2, #36]	; 0x24
  tqp->next             = tp->queue.next;
 8006662:	6019      	str	r1, [r3, #0]
    (void) chSchReadyI(tp);
 8006664:	4610      	mov	r0, r2
}
 8006666:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8006668:	f7fa ba72 	b.w	8000b50 <chSchReadyI>
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000830 	.word	0x20000830
	...

08006680 <chEvtGetAndClearEvents.constprop.43>:
 8006680:	2320      	movs	r3, #32
 8006682:	f383 8811 	msr	BASEPRI, r3
  m = currp->epending & events;
 8006686:	4b04      	ldr	r3, [pc, #16]	; (8006698 <chEvtGetAndClearEvents.constprop.43+0x18>)
 8006688:	699a      	ldr	r2, [r3, #24]
  currp->epending &= ~events;
 800668a:	2300      	movs	r3, #0
  m = currp->epending & events;
 800668c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->epending &= ~events;
 800668e:	6353      	str	r3, [r2, #52]	; 0x34
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	2000122c 	.word	0x2000122c
 800669c:	00000000 	.word	0x00000000

080066a0 <chEvtWaitOne.constprop.39>:
  thread_t *ctp = currp;
 80066a0:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <chEvtWaitOne.constprop.39+0x30>)
eventmask_t chEvtWaitOne(eventmask_t events) {
 80066a2:	b510      	push	{r4, lr}
 80066a4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80066a6:	6994      	ldr	r4, [r2, #24]
 80066a8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80066ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80066ae:	b933      	cbnz	r3, 80066be <chEvtWaitOne.constprop.39+0x1e>
    ctp->u.ewmask = events;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b4:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80066b6:	200a      	movs	r0, #10
 80066b8:	f7fa f9ea 	bl	8000a90 <chSchGoSleepS>
    m = ctp->epending & events;
 80066bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80066be:	4258      	negs	r0, r3
 80066c0:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 80066c2:	ea23 0300 	bic.w	r3, r3, r0
 80066c6:	6363      	str	r3, [r4, #52]	; 0x34
 80066c8:	2300      	movs	r3, #0
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bd10      	pop	{r4, pc}
 80066d0:	2000122c 	.word	0x2000122c
	...

080066e0 <chEvtWaitAny.constprop.38>:
  thread_t *ctp = currp;
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <chEvtWaitAny.constprop.38+0x28>)
eventmask_t chEvtWaitAny(eventmask_t events) {
 80066e2:	b510      	push	{r4, lr}
 80066e4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80066e6:	6994      	ldr	r4, [r2, #24]
 80066e8:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 80066ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80066ee:	b930      	cbnz	r0, 80066fe <chEvtWaitAny.constprop.38+0x1e>
    ctp->u.ewmask = events;
 80066f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 80066f4:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80066f6:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80066f8:	f7fa f9ca 	bl	8000a90 <chSchGoSleepS>
    m = ctp->epending & events;
 80066fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
  ctp->epending &= ~m;
 80066fe:	2300      	movs	r3, #0
 8006700:	6363      	str	r3, [r4, #52]	; 0x34
 8006702:	f383 8811 	msr	BASEPRI, r3
}
 8006706:	bd10      	pop	{r4, pc}
 8006708:	2000122c 	.word	0x2000122c
 800670c:	00000000 	.word	0x00000000

08006710 <chEvtWaitAll.constprop.37>:
  thread_t *ctp = currp;
 8006710:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <chEvtWaitAll.constprop.37+0x34>)
eventmask_t chEvtWaitAll(eventmask_t events) {
 8006712:	b510      	push	{r4, lr}
 8006714:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006716:	6994      	ldr	r4, [r2, #24]
 8006718:	f383 8811 	msr	BASEPRI, r3
  if ((ctp->epending & events) != events) {
 800671c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800671e:	f003 0205 	and.w	r2, r3, #5
 8006722:	2a05      	cmp	r2, #5
 8006724:	d005      	beq.n	8006732 <chEvtWaitAll.constprop.37+0x22>
    ctp->u.ewmask = events;
 8006726:	2305      	movs	r3, #5
 8006728:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800672a:	200b      	movs	r0, #11
 800672c:	f7fa f9b0 	bl	8000a90 <chSchGoSleepS>
 8006730:	6b63      	ldr	r3, [r4, #52]	; 0x34
  ctp->epending &= ~events;
 8006732:	f023 0305 	bic.w	r3, r3, #5
 8006736:	6363      	str	r3, [r4, #52]	; 0x34
 8006738:	2300      	movs	r3, #0
 800673a:	f383 8811 	msr	BASEPRI, r3
}
 800673e:	2005      	movs	r0, #5
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	2000122c 	.word	0x2000122c
	...

08006750 <chHeapAllocAligned.constprop.33>:
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    heapp = &default_heap;
 8006754:	4d39      	ldr	r5, [pc, #228]	; (800683c <chHeapAllocAligned.constprop.33+0xec>)
 8006756:	2800      	cmp	r0, #0
 8006758:	bf18      	it	ne
 800675a:	4605      	movne	r5, r0
  H_LOCK(heapp);
 800675c:	f105 070c 	add.w	r7, r5, #12
 8006760:	4638      	mov	r0, r7
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006762:	f101 0807 	add.w	r8, r1, #7
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8006766:	460c      	mov	r4, r1
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8006768:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  H_LOCK(heapp);
 800676c:	f7fa fb20 	bl	8000db0 <chMtxLock>
  qp = &heapp->header;
 8006770:	1d28      	adds	r0, r5, #4
  while (H_NEXT(qp) != NULL) {
 8006772:	6802      	ldr	r2, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8006774:	f102 030f 	add.w	r3, r2, #15
 8006778:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800677c:	461e      	mov	r6, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800677e:	f102 0908 	add.w	r9, r2, #8
 8006782:	3b08      	subs	r3, #8
  while (H_NEXT(qp) != NULL) {
 8006784:	b17a      	cbz	r2, 80067a6 <chHeapAllocAligned.constprop.33+0x56>
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8006786:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800678a:	f10e 0101 	add.w	r1, lr, #1
 800678e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006792:	eba1 0c06 	sub.w	ip, r1, r6
 8006796:	428b      	cmp	r3, r1
 8006798:	ea4f 0cec 	mov.w	ip, ip, asr #3
 800679c:	d201      	bcs.n	80067a2 <chHeapAllocAligned.constprop.33+0x52>
 800679e:	45e0      	cmp	r8, ip
 80067a0:	d916      	bls.n	80067d0 <chHeapAllocAligned.constprop.33+0x80>
          H_NEXT(qp) = fp;
 80067a2:	4610      	mov	r0, r2
 80067a4:	e7e5      	b.n	8006772 <chHeapAllocAligned.constprop.33+0x22>
  H_UNLOCK(heapp);
 80067a6:	4638      	mov	r0, r7
 80067a8:	f7fa fa62 	bl	8000c70 <chMtxUnlock>
  if (heapp->provider != NULL) {
 80067ac:	682e      	ldr	r6, [r5, #0]
 80067ae:	b166      	cbz	r6, 80067ca <chHeapAllocAligned.constprop.33+0x7a>
    ahp = heapp->provider((pages + 1U) * CH_HEAP_ALIGNMENT,
 80067b0:	f108 0001 	add.w	r0, r8, #1
 80067b4:	2208      	movs	r2, #8
 80067b6:	00c0      	lsls	r0, r0, #3
 80067b8:	4611      	mov	r1, r2
 80067ba:	47b0      	blx	r6
    if (ahp != NULL) {
 80067bc:	b130      	cbz	r0, 80067cc <chHeapAllocAligned.constprop.33+0x7c>
      H_HEAP(hp) = heapp;
 80067be:	f840 5c08 	str.w	r5, [r0, #-8]
      H_SIZE(hp) = size;
 80067c2:	f840 4c04 	str.w	r4, [r0, #-4]
 80067c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 80067ca:	4630      	mov	r0, r6
}
 80067cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (ahp > hp) {
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d31a      	bcc.n	800680a <chHeapAllocAligned.constprop.33+0xba>
        if (H_PAGES(hp) == pages) {
 80067d4:	45f0      	cmp	r8, lr
 80067d6:	d02b      	beq.n	8006830 <chHeapAllocAligned.constprop.33+0xe0>
          fp = H_BLOCK(hp) + pages;
 80067d8:	f108 0801 	add.w	r8, r8, #1
 80067dc:	eb02 0ec8 	add.w	lr, r2, r8, lsl #3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80067e0:	f10e 0308 	add.w	r3, lr, #8
 80067e4:	1ac9      	subs	r1, r1, r3
 80067e6:	10c9      	asrs	r1, r1, #3
          H_NEXT(fp) = H_NEXT(hp);
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	f842 3038 	str.w	r3, [r2, r8, lsl #3]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 80067ee:	464e      	mov	r6, r9
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80067f0:	f8ce 1004 	str.w	r1, [lr, #4]
          H_NEXT(qp) = fp;
 80067f4:	4613      	mov	r3, r2
 80067f6:	f8c0 e000 	str.w	lr, [r0]
      H_UNLOCK(heapp);
 80067fa:	4638      	mov	r0, r7
      H_SIZE(hp) = size;
 80067fc:	605c      	str	r4, [r3, #4]
      H_HEAP(hp) = heapp;
 80067fe:	601d      	str	r5, [r3, #0]
      H_UNLOCK(heapp);
 8006800:	f7fa fa36 	bl	8000c70 <chMtxUnlock>
      return (void *)H_BLOCK(hp);
 8006804:	4630      	mov	r0, r6
 8006806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 800680a:	eba3 0109 	sub.w	r1, r3, r9
 800680e:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8006810:	45e0      	cmp	r8, ip
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8006812:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8006814:	d2f1      	bcs.n	80067fa <chHeapAllocAligned.constprop.33+0xaa>
          fp = H_BLOCK(ahp) + pages;
 8006816:	f108 0e01 	add.w	lr, r8, #1
 800681a:	eb03 00ce 	add.w	r0, r3, lr, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 800681e:	ea6f 0108 	mvn.w	r1, r8
 8006822:	4461      	add	r1, ip
 8006824:	6041      	str	r1, [r0, #4]
          H_NEXT(fp) = H_NEXT(hp);
 8006826:	6811      	ldr	r1, [r2, #0]
 8006828:	f843 103e 	str.w	r1, [r3, lr, lsl #3]
          H_NEXT(hp) = fp;
 800682c:	6010      	str	r0, [r2, #0]
 800682e:	e7e4      	b.n	80067fa <chHeapAllocAligned.constprop.33+0xaa>
          H_NEXT(qp) = H_NEXT(hp);
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	6003      	str	r3, [r0, #0]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8006834:	464e      	mov	r6, r9
          H_NEXT(qp) = H_NEXT(hp);
 8006836:	4613      	mov	r3, r2
 8006838:	e7df      	b.n	80067fa <chHeapAllocAligned.constprop.33+0xaa>
 800683a:	bf00      	nop
 800683c:	200012e8 	.word	0x200012e8

08006840 <chThdCreateFromHeap.constprop.32>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8006840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	b087      	sub	sp, #28
 8006846:	460f      	mov	r7, r1
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8006848:	4811      	ldr	r0, [pc, #68]	; (8006890 <chThdCreateFromHeap.constprop.32+0x50>)
 800684a:	4621      	mov	r1, r4
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 800684c:	4616      	mov	r6, r2
 800684e:	461d      	mov	r5, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8006850:	f7ff ff7e 	bl	8006750 <chHeapAllocAligned.constprop.33>
  if (wsp == NULL) {
 8006854:	b1d0      	cbz	r0, 800688c <chThdCreateFromHeap.constprop.32+0x4c>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8006856:	4404      	add	r4, r0
  thread_descriptor_t td = {
 8006858:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <chThdCreateFromHeap.constprop.32+0x54>)
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	9402      	str	r4, [sp, #8]
 800685e:	9700      	str	r7, [sp, #0]
 8006860:	9001      	str	r0, [sp, #4]
 8006862:	9603      	str	r6, [sp, #12]
 8006864:	9505      	str	r5, [sp, #20]
 8006866:	2320      	movs	r3, #32
 8006868:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800686c:	4668      	mov	r0, sp
 800686e:	f7fa f82f 	bl	80008d0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8006872:	2301      	movs	r3, #1
 8006874:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 8006878:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 800687a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800687c:	f7fa f8b8 	bl	80009f0 <chSchWakeupS>
 8006880:	2300      	movs	r3, #0
 8006882:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8006886:	4620      	mov	r0, r4
 8006888:	b007      	add	sp, #28
 800688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800688c:	4604      	mov	r4, r0
 800688e:	e7fa      	b.n	8006886 <chThdCreateFromHeap.constprop.32+0x46>
 8006890:	20001304 	.word	0x20001304
 8006894:	08001cd1 	.word	0x08001cd1
	...

080068a0 <chThdCreateFromMemoryPool.constprop.31>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80068a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 80068a2:	4d14      	ldr	r5, [pc, #80]	; (80068f4 <chThdCreateFromMemoryPool.constprop.31+0x54>)
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80068a4:	b087      	sub	sp, #28
 80068a6:	4607      	mov	r7, r0
  wsp = chPoolAlloc(mp);
 80068a8:	4628      	mov	r0, r5
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 80068aa:	460e      	mov	r6, r1
 80068ac:	4614      	mov	r4, r2
  wsp = chPoolAlloc(mp);
 80068ae:	f7fc fc57 	bl	8003160 <chPoolAlloc>
  if (wsp == NULL) {
 80068b2:	b1e0      	cbz	r0, 80068ee <chThdCreateFromMemoryPool.constprop.31+0x4e>
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80068b4:	686b      	ldr	r3, [r5, #4]
  thread_descriptor_t td = {
 80068b6:	4a10      	ldr	r2, [pc, #64]	; (80068f8 <chThdCreateFromMemoryPool.constprop.31+0x58>)
 80068b8:	9700      	str	r7, [sp, #0]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 80068ba:	4403      	add	r3, r0
  thread_descriptor_t td = {
 80068bc:	9302      	str	r3, [sp, #8]
 80068be:	9001      	str	r0, [sp, #4]
 80068c0:	9603      	str	r6, [sp, #12]
 80068c2:	9405      	str	r4, [sp, #20]
 80068c4:	9204      	str	r2, [sp, #16]
 80068c6:	2320      	movs	r3, #32
 80068c8:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 80068cc:	4668      	mov	r0, sp
 80068ce:	f7f9 ffff 	bl	80008d0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 80068d2:	2302      	movs	r3, #2
 80068d4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 80068d8:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 80068da:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(&td);
 80068dc:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 80068de:	f7fa f887 	bl	80009f0 <chSchWakeupS>
 80068e2:	2300      	movs	r3, #0
 80068e4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 80068e8:	4620      	mov	r0, r4
 80068ea:	b007      	add	sp, #28
 80068ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 80068ee:	4604      	mov	r4, r0
 80068f0:	e7fa      	b.n	80068e8 <chThdCreateFromMemoryPool.constprop.31+0x48>
 80068f2:	bf00      	nop
 80068f4:	20001330 	.word	0x20001330
 80068f8:	08001cd1 	.word	0x08001cd1
 80068fc:	00000000 	.word	0x00000000

08006900 <chMBReset.constprop.29>:
void chMBReset(mailbox_t *mbp) {
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2320      	movs	r3, #32
 8006904:	f383 8811 	msr	BASEPRI, r3
  mbp->wrptr = mbp->buffer;
 8006908:	4c0a      	ldr	r4, [pc, #40]	; (8006934 <chMBReset.constprop.29+0x34>)
  mbp->reset = true;
 800690a:	2201      	movs	r2, #1
  mbp->wrptr = mbp->buffer;
 800690c:	6823      	ldr	r3, [r4, #0]
  mbp->reset = true;
 800690e:	7522      	strb	r2, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8006910:	f104 0018 	add.w	r0, r4, #24
  mbp->cnt   = (size_t)0;
 8006914:	2500      	movs	r5, #0
  mbp->wrptr = mbp->buffer;
 8006916:	60a3      	str	r3, [r4, #8]
  mbp->rdptr = mbp->buffer;
 8006918:	60e3      	str	r3, [r4, #12]
  mbp->cnt   = (size_t)0;
 800691a:	6125      	str	r5, [r4, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800691c:	f7ff fde8 	bl	80064f0 <chThdDequeueAllI.constprop.59>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8006920:	f104 0020 	add.w	r0, r4, #32
 8006924:	f7ff fde4 	bl	80064f0 <chThdDequeueAllI.constprop.59>
  chSchRescheduleS();
 8006928:	f7fa f83a 	bl	80009a0 <chSchRescheduleS>
 800692c:	f385 8811 	msr	BASEPRI, r5
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	bf00      	nop
 8006934:	20000864 	.word	0x20000864
	...

08006940 <chMBPostTimeout.constprop.27>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006944:	2320      	movs	r3, #32
 8006946:	4680      	mov	r8, r0
 8006948:	460e      	mov	r6, r1
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	4c18      	ldr	r4, [pc, #96]	; (80069b0 <chMBPostTimeout.constprop.27+0x70>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006950:	f104 0518 	add.w	r5, r4, #24
 8006954:	e00a      	b.n	800696c <chMBPostTimeout.constprop.27+0x2c>
 8006956:	6827      	ldr	r7, [r4, #0]
 8006958:	6862      	ldr	r2, [r4, #4]
 800695a:	6923      	ldr	r3, [r4, #16]
  return (size_t)(mbp->top - mbp->buffer);
 800695c:	eba2 0c07 	sub.w	ip, r2, r7
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006960:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8006964:	d10e      	bne.n	8006984 <chMBPostTimeout.constprop.27+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006966:	f7fa fbd3 	bl	8001110 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800696a:	b930      	cbnz	r0, 800697a <chMBPostTimeout.constprop.27+0x3a>
    if (mbp->reset) {
 800696c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
    if (mbp->reset) {
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0ef      	beq.n	8006956 <chMBPostTimeout.constprop.27+0x16>
      return MSG_RESET;
 8006976:	f06f 0001 	mvn.w	r0, #1
 800697a:	2300      	movs	r3, #0
 800697c:	f383 8811 	msr	BASEPRI, r3
}
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *mbp->wrptr++ = msg;
 8006984:	68a0      	ldr	r0, [r4, #8]
 8006986:	1d01      	adds	r1, r0, #4
 8006988:	60a1      	str	r1, [r4, #8]
      if (mbp->wrptr >= mbp->top) {
 800698a:	428a      	cmp	r2, r1
      *mbp->wrptr++ = msg;
 800698c:	f8c0 8000 	str.w	r8, [r0]
      mbp->cnt++;
 8006990:	f103 0301 	add.w	r3, r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006994:	4807      	ldr	r0, [pc, #28]	; (80069b4 <chMBPostTimeout.constprop.27+0x74>)
        mbp->wrptr = mbp->buffer;
 8006996:	bf98      	it	ls
 8006998:	60a7      	strls	r7, [r4, #8]
      mbp->cnt++;
 800699a:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800699c:	f7ff fcf8 	bl	8006390 <chThdDequeueNextI.constprop.76>
      chSchRescheduleS();
 80069a0:	f7f9 fffe 	bl	80009a0 <chSchRescheduleS>
      return MSG_OK;
 80069a4:	2000      	movs	r0, #0
 80069a6:	2300      	movs	r3, #0
 80069a8:	f383 8811 	msr	BASEPRI, r3
}
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	20000864 	.word	0x20000864
 80069b4:	20000884 	.word	0x20000884
	...

080069c0 <chMBPostI.constprop.26>:

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <chMBPostI.constprop.26+0x40>)
 80069c2:	7d1a      	ldrb	r2, [r3, #20]
 80069c4:	b9b2      	cbnz	r2, 80069f4 <chMBPostI.constprop.26+0x34>
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80069c6:	b570      	push	{r4, r5, r6, lr}
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	681e      	ldr	r6, [r3, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	1b8c      	subs	r4, r1, r6
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80069d0:	ebb2 0fa4 	cmp.w	r2, r4, asr #2
 80069d4:	d011      	beq.n	80069fa <chMBPostI.constprop.26+0x3a>
    *mbp->wrptr++ = msg;
 80069d6:	689d      	ldr	r5, [r3, #8]
 80069d8:	1d2c      	adds	r4, r5, #4
 80069da:	609c      	str	r4, [r3, #8]
    if (mbp->wrptr >= mbp->top) {
 80069dc:	42a1      	cmp	r1, r4
    *mbp->wrptr++ = msg;
 80069de:	6028      	str	r0, [r5, #0]
      mbp->wrptr = mbp->buffer;
    }
    mbp->cnt++;
 80069e0:	f102 0201 	add.w	r2, r2, #1

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80069e4:	4807      	ldr	r0, [pc, #28]	; (8006a04 <chMBPostI.constprop.26+0x44>)
      mbp->wrptr = mbp->buffer;
 80069e6:	bf98      	it	ls
 80069e8:	609e      	strls	r6, [r3, #8]
    mbp->cnt++;
 80069ea:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80069ec:	f7ff fcd0 	bl	8006390 <chThdDequeueNextI.constprop.76>

    return MSG_OK;
 80069f0:	2000      	movs	r0, #0
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_RESET;
 80069f4:	f06f 0001 	mvn.w	r0, #1
 80069f8:	4770      	bx	lr
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
 80069fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	20000864 	.word	0x20000864
 8006a04:	20000884 	.word	0x20000884
	...

08006a10 <chMBPostAheadTimeout.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	2320      	movs	r3, #32
 8006a16:	4680      	mov	r8, r0
 8006a18:	460e      	mov	r6, r1
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	4c18      	ldr	r4, [pc, #96]	; (8006a80 <chMBPostAheadTimeout.constprop.24+0x70>)

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006a20:	f104 0518 	add.w	r5, r4, #24
 8006a24:	e00a      	b.n	8006a3c <chMBPostAheadTimeout.constprop.24+0x2c>
 8006a26:	e894 0084 	ldmia.w	r4, {r2, r7}
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	eba7 0c02 	sub.w	ip, r7, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006a30:	ebb3 0fac 	cmp.w	r3, ip, asr #2
 8006a34:	d10e      	bne.n	8006a54 <chMBPostAheadTimeout.constprop.24+0x44>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006a36:	f7fa fb6b 	bl	8001110 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8006a3a:	b930      	cbnz	r0, 8006a4a <chMBPostAheadTimeout.constprop.24+0x3a>
    if (mbp->reset) {
 8006a3c:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
    if (mbp->reset) {
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0ef      	beq.n	8006a26 <chMBPostAheadTimeout.constprop.24+0x16>
      return MSG_RESET;
 8006a46:	f06f 0001 	mvn.w	r0, #1
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f383 8811 	msr	BASEPRI, r3
}
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (--mbp->rdptr < mbp->buffer) {
 8006a54:	68e1      	ldr	r1, [r4, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006a56:	480b      	ldr	r0, [pc, #44]	; (8006a84 <chMBPostAheadTimeout.constprop.24+0x74>)
      if (--mbp->rdptr < mbp->buffer) {
 8006a58:	3904      	subs	r1, #4
 8006a5a:	428a      	cmp	r2, r1
        mbp->rdptr = mbp->top - 1;
 8006a5c:	bf88      	it	hi
 8006a5e:	1f39      	subhi	r1, r7, #4
 8006a60:	60e1      	str	r1, [r4, #12]
      mbp->cnt++;
 8006a62:	3301      	adds	r3, #1
      *mbp->rdptr = msg;
 8006a64:	f8c1 8000 	str.w	r8, [r1]
      mbp->cnt++;
 8006a68:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006a6a:	f7ff fc91 	bl	8006390 <chThdDequeueNextI.constprop.76>
      chSchRescheduleS();
 8006a6e:	f7f9 ff97 	bl	80009a0 <chSchRescheduleS>
      return MSG_OK;
 8006a72:	2000      	movs	r0, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	f383 8811 	msr	BASEPRI, r3
}
 8006a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000864 	.word	0x20000864
 8006a84:	20000884 	.word	0x20000884
	...

08006a90 <chMBPostAheadI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006a90:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006a92:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <chMBPostAheadI.constprop.23+0x40>)
 8006a94:	7d1a      	ldrb	r2, [r3, #20]
 8006a96:	b9a2      	cbnz	r2, 8006ac2 <chMBPostAheadI.constprop.23+0x32>
 8006a98:	e893 0030 	ldmia.w	r3, {r4, r5}
 8006a9c:	6919      	ldr	r1, [r3, #16]
 8006a9e:	1b2a      	subs	r2, r5, r4
    return MSG_RESET;
  }

  /* Is there a free message slot in queue? if so then post.*/
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8006aa0:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8006aa4:	d010      	beq.n	8006ac8 <chMBPostAheadI.constprop.23+0x38>
    if (--mbp->rdptr < mbp->buffer) {
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	3a04      	subs	r2, #4
 8006aaa:	4294      	cmp	r4, r2
      mbp->rdptr = mbp->top - 1;
 8006aac:	bf88      	it	hi
 8006aae:	1f2a      	subhi	r2, r5, #4
 8006ab0:	60da      	str	r2, [r3, #12]
    }
    *mbp->rdptr = msg;
    mbp->cnt++;
 8006ab2:	3101      	adds	r1, #1
    *mbp->rdptr = msg;
 8006ab4:	6010      	str	r0, [r2, #0]

    /* If there is a reader waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006ab6:	4807      	ldr	r0, [pc, #28]	; (8006ad4 <chMBPostAheadI.constprop.23+0x44>)
    mbp->cnt++;
 8006ab8:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 8006aba:	f7ff fc69 	bl	8006390 <chThdDequeueNextI.constprop.76>

    return MSG_OK;
 8006abe:	2000      	movs	r0, #0
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8006ac2:	f06f 0001 	mvn.w	r0, #1
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* No space, immediate timeout.*/
  return MSG_TIMEOUT;
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000864 	.word	0x20000864
 8006ad4:	20000884 	.word	0x20000884
	...

08006ae0 <chMBFetchTimeout.constprop.21>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	2320      	movs	r3, #32
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	4c15      	ldr	r4, [pc, #84]	; (8006b44 <chMBFetchTimeout.constprop.21+0x64>)

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8006aee:	18e5      	adds	r5, r4, r3
 8006af0:	e004      	b.n	8006afc <chMBFetchTimeout.constprop.21+0x1c>
 8006af2:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8006af4:	b96b      	cbnz	r3, 8006b12 <chMBFetchTimeout.constprop.21+0x32>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8006af6:	f7fa fb0b 	bl	8001110 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8006afa:	b930      	cbnz	r0, 8006b0a <chMBFetchTimeout.constprop.21+0x2a>
    if (mbp->reset) {
 8006afc:	7d23      	ldrb	r3, [r4, #20]
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
    if (mbp->reset) {
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f5      	beq.n	8006af2 <chMBFetchTimeout.constprop.21+0x12>
      return MSG_RESET;
 8006b06:	f06f 0001 	mvn.w	r0, #1
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f383 8811 	msr	BASEPRI, r3
}
 8006b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *msgp = *mbp->rdptr++;
 8006b12:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8006b14:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 8006b16:	6810      	ldr	r0, [r2, #0]
 8006b18:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8006b1a:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 8006b1c:	60e2      	str	r2, [r4, #12]
      mbp->cnt--;
 8006b1e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      *msgp = *mbp->rdptr++;
 8006b22:	6038      	str	r0, [r7, #0]
        mbp->rdptr = mbp->buffer;
 8006b24:	bf28      	it	cs
 8006b26:	6822      	ldrcs	r2, [r4, #0]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006b28:	4807      	ldr	r0, [pc, #28]	; (8006b48 <chMBFetchTimeout.constprop.21+0x68>)
        mbp->rdptr = mbp->buffer;
 8006b2a:	bf28      	it	cs
 8006b2c:	60e2      	strcs	r2, [r4, #12]
      mbp->cnt--;
 8006b2e:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006b30:	f7ff fc2e 	bl	8006390 <chThdDequeueNextI.constprop.76>
      chSchRescheduleS();
 8006b34:	f7f9 ff34 	bl	80009a0 <chSchRescheduleS>
      return MSG_OK;
 8006b38:	2000      	movs	r0, #0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f383 8811 	msr	BASEPRI, r3
}
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000864 	.word	0x20000864
 8006b48:	2000087c 	.word	0x2000087c
 8006b4c:	00000000 	.word	0x00000000

08006b50 <chMBFetchI.constprop.20>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8006b50:	b538      	push	{r3, r4, r5, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 8006b52:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <chMBFetchI.constprop.20+0x40>)
 8006b54:	7d1a      	ldrb	r2, [r3, #20]
 8006b56:	b9a2      	cbnz	r2, 8006b82 <chMBFetchI.constprop.20+0x32>
 8006b58:	6919      	ldr	r1, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8006b5a:	b1a9      	cbz	r1, 8006b88 <chMBFetchI.constprop.20+0x38>
    *msgp = *mbp->rdptr++;
 8006b5c:	68da      	ldr	r2, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
 8006b5e:	685c      	ldr	r4, [r3, #4]
    *msgp = *mbp->rdptr++;
 8006b60:	6815      	ldr	r5, [r2, #0]
 8006b62:	3204      	adds	r2, #4
    if (mbp->rdptr >= mbp->top) {
 8006b64:	42a2      	cmp	r2, r4
    *msgp = *mbp->rdptr++;
 8006b66:	60da      	str	r2, [r3, #12]
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 8006b68:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    *msgp = *mbp->rdptr++;
 8006b6c:	6005      	str	r5, [r0, #0]
      mbp->rdptr = mbp->buffer;
 8006b6e:	bf28      	it	cs
 8006b70:	681a      	ldrcs	r2, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006b72:	4808      	ldr	r0, [pc, #32]	; (8006b94 <chMBFetchI.constprop.20+0x44>)
      mbp->rdptr = mbp->buffer;
 8006b74:	bf28      	it	cs
 8006b76:	60da      	strcs	r2, [r3, #12]
    mbp->cnt--;
 8006b78:	6119      	str	r1, [r3, #16]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8006b7a:	f7ff fc09 	bl	8006390 <chThdDequeueNextI.constprop.76>

    return MSG_OK;
 8006b7e:	2000      	movs	r0, #0
 8006b80:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8006b82:	f06f 0001 	mvn.w	r0, #1
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006b8c:	bd38      	pop	{r3, r4, r5, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000864 	.word	0x20000864
 8006b94:	2000087c 	.word	0x2000087c
	...

08006ba0 <chGuardedPoolAllocTimeout.constprop.15>:
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	2320      	movs	r3, #32
 8006ba4:	f383 8811 	msr	BASEPRI, r3
  if (--sp->cnt < (cnt_t)0) {
 8006ba8:	4c16      	ldr	r4, [pc, #88]	; (8006c04 <chGuardedPoolAllocTimeout.constprop.15+0x64>)
 8006baa:	68a2      	ldr	r2, [r4, #8]
 8006bac:	1e53      	subs	r3, r2, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	db07      	blt.n	8006bc4 <chGuardedPoolAllocTimeout.constprop.15+0x24>
  objp = mp->next;
 8006bb4:	68e0      	ldr	r0, [r4, #12]
  if (objp != NULL) {
 8006bb6:	b1c8      	cbz	r0, 8006bec <chGuardedPoolAllocTimeout.constprop.15+0x4c>
    mp->next = mp->next->next;
 8006bb8:	6803      	ldr	r3, [r0, #0]
 8006bba:	60e3      	str	r3, [r4, #12]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f383 8811 	msr	BASEPRI, r3
}
 8006bc2:	bd10      	pop	{r4, pc}
    if (TIME_IMMEDIATE == timeout) {
 8006bc4:	b1e0      	cbz	r0, 8006c00 <chGuardedPoolAllocTimeout.constprop.15+0x60>
    currp->u.wtsemp = sp;
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <chGuardedPoolAllocTimeout.constprop.15+0x68>)
  tp->queue.prev             = tqp->prev;
 8006bc8:	6862      	ldr	r2, [r4, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8006bcc:	4601      	mov	r1, r0
  tp->queue.next             = (thread_t *)tqp;
 8006bce:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8006bd0:	605a      	str	r2, [r3, #4]
    currp->u.wtsemp = sp;
 8006bd2:	625c      	str	r4, [r3, #36]	; 0x24
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8006bd4:	2005      	movs	r0, #5
  tp->queue.prev->queue.next = tp;
 8006bd6:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	f7fa fa71 	bl	80010c0 <chSchGoSleepTimeoutS>
  if (msg != MSG_OK) {
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d0e8      	beq.n	8006bb4 <chGuardedPoolAllocTimeout.constprop.15+0x14>
    return NULL;
 8006be2:	2000      	movs	r0, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	f383 8811 	msr	BASEPRI, r3
}
 8006bea:	bd10      	pop	{r4, pc}
  else if (mp->provider != NULL) {
 8006bec:	69a3      	ldr	r3, [r4, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f7      	beq.n	8006be2 <chGuardedPoolAllocTimeout.constprop.15+0x42>
    objp = mp->provider(mp->object_size, mp->align);
 8006bf2:	6961      	ldr	r1, [r4, #20]
 8006bf4:	6920      	ldr	r0, [r4, #16]
 8006bf6:	4798      	blx	r3
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bd10      	pop	{r4, pc}
      sp->cnt++;
 8006c00:	60a2      	str	r2, [r4, #8]
 8006c02:	e7db      	b.n	8006bbc <chGuardedPoolAllocTimeout.constprop.15+0x1c>
 8006c04:	20000838 	.word	0x20000838
 8006c08:	2000122c 	.word	0x2000122c
 8006c0c:	00000000 	.word	0x00000000

08006c10 <chFactoryRegisterObject.constprop.12>:
registered_object_t *chFactoryRegisterObject(const char *name,
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4605      	mov	r5, r0
  F_LOCK();
 8006c14:	4807      	ldr	r0, [pc, #28]	; (8006c34 <chFactoryRegisterObject.constprop.12+0x24>)
 8006c16:	f7fa f8cb 	bl	8000db0 <chMtxLock>
  rop = (registered_object_t *)dyn_create_object_pool(name,
 8006c1a:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <chFactoryRegisterObject.constprop.12+0x28>)
 8006c1c:	4807      	ldr	r0, [pc, #28]	; (8006c3c <chFactoryRegisterObject.constprop.12+0x2c>)
 8006c1e:	1f11      	subs	r1, r2, #4
 8006c20:	f7fc fab6 	bl	8003190 <dyn_create_object_pool.lto_priv.81>
  if (rop != NULL) {
 8006c24:	4604      	mov	r4, r0
 8006c26:	b100      	cbz	r0, 8006c2a <chFactoryRegisterObject.constprop.12+0x1a>
    rop->objp = objp;
 8006c28:	6105      	str	r5, [r0, #16]
  F_UNLOCK();
 8006c2a:	4802      	ldr	r0, [pc, #8]	; (8006c34 <chFactoryRegisterObject.constprop.12+0x24>)
 8006c2c:	f7fa f820 	bl	8000c70 <chMtxUnlock>
}
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200012a4 	.word	0x200012a4
 8006c38:	200012b8 	.word	0x200012b8
 8006c3c:	080098d0 	.word	0x080098d0

08006c40 <chFactoryFindObject.constprop.11>:
registered_object_t *chFactoryFindObject(const char *name) {
 8006c40:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006c42:	4c07      	ldr	r4, [pc, #28]	; (8006c60 <chFactoryFindObject.constprop.11+0x20>)
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7fa f8b3 	bl	8000db0 <chMtxLock>
  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 8006c4a:	f104 0110 	add.w	r1, r4, #16
 8006c4e:	4805      	ldr	r0, [pc, #20]	; (8006c64 <chFactoryFindObject.constprop.11+0x24>)
 8006c50:	f7fc fa3e 	bl	80030d0 <dyn_find_object.lto_priv.82>
 8006c54:	4605      	mov	r5, r0
  F_UNLOCK();
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7fa f80a 	bl	8000c70 <chMtxUnlock>
}
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	200012a4 	.word	0x200012a4
 8006c64:	080098d0 	.word	0x080098d0
	...

08006c70 <chFactoryCreateBuffer.constprop.10>:
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 8006c70:	b510      	push	{r4, lr}
  F_LOCK();
 8006c72:	480a      	ldr	r0, [pc, #40]	; (8006c9c <chFactoryCreateBuffer.constprop.10+0x2c>)
 8006c74:	f7fa f89c 	bl	8000db0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 8006c78:	2280      	movs	r2, #128	; 0x80
 8006c7a:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <chFactoryCreateBuffer.constprop.10+0x30>)
 8006c7c:	4809      	ldr	r0, [pc, #36]	; (8006ca4 <chFactoryCreateBuffer.constprop.10+0x34>)
 8006c7e:	f7fc fa47 	bl	8003110 <dyn_create_object_heap.lto_priv.83>
  if (dbp != NULL) {
 8006c82:	4604      	mov	r4, r0
 8006c84:	b120      	cbz	r0, 8006c90 <chFactoryCreateBuffer.constprop.10+0x20>
    memset((void *)dbp->buffer, 0, size);
 8006c86:	2280      	movs	r2, #128	; 0x80
 8006c88:	2100      	movs	r1, #0
 8006c8a:	3010      	adds	r0, #16
 8006c8c:	f7f9 fba4 	bl	80003d8 <memset>
  F_UNLOCK();
 8006c90:	4802      	ldr	r0, [pc, #8]	; (8006c9c <chFactoryCreateBuffer.constprop.10+0x2c>)
 8006c92:	f7f9 ffed 	bl	8000c70 <chMtxUnlock>
}
 8006c96:	4620      	mov	r0, r4
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200012a4 	.word	0x200012a4
 8006ca0:	200012c8 	.word	0x200012c8
 8006ca4:	080098b0 	.word	0x080098b0
	...

08006cb0 <chFactoryFindBuffer.constprop.9>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 8006cb0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006cb2:	4c07      	ldr	r4, [pc, #28]	; (8006cd0 <chFactoryFindBuffer.constprop.9+0x20>)
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f7fa f87b 	bl	8000db0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 8006cba:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <chFactoryFindBuffer.constprop.9+0x24>)
 8006cc0:	f7fc fa06 	bl	80030d0 <dyn_find_object.lto_priv.82>
 8006cc4:	4605      	mov	r5, r0
  F_UNLOCK();
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7f9 ffd2 	bl	8000c70 <chMtxUnlock>
}
 8006ccc:	4628      	mov	r0, r5
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	200012a4 	.word	0x200012a4
 8006cd4:	080098b0 	.word	0x080098b0
	...

08006ce0 <chFactoryCreateSemaphore.constprop.8>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8006ce0:	b510      	push	{r4, lr}
  F_LOCK();
 8006ce2:	480a      	ldr	r0, [pc, #40]	; (8006d0c <chFactoryCreateSemaphore.constprop.8+0x2c>)
 8006ce4:	f7fa f864 	bl	8000db0 <chMtxLock>
  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <chFactoryCreateSemaphore.constprop.8+0x30>)
 8006cea:	480a      	ldr	r0, [pc, #40]	; (8006d14 <chFactoryCreateSemaphore.constprop.8+0x34>)
 8006cec:	1f11      	subs	r1, r2, #4
 8006cee:	f7fc fa4f 	bl	8003190 <dyn_create_object_pool.lto_priv.81>
  if (dsp != NULL) {
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	b128      	cbz	r0, 8006d02 <chFactoryCreateSemaphore.constprop.8+0x22>
    chSemObjectInit(&dsp->sem, n);
 8006cf6:	f100 0310 	add.w	r3, r0, #16
  sp->cnt = n;
 8006cfa:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 8006cfc:	6103      	str	r3, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 8006cfe:	6143      	str	r3, [r0, #20]
 8006d00:	6182      	str	r2, [r0, #24]
  F_UNLOCK();
 8006d02:	4802      	ldr	r0, [pc, #8]	; (8006d0c <chFactoryCreateSemaphore.constprop.8+0x2c>)
 8006d04:	f7f9 ffb4 	bl	8000c70 <chMtxUnlock>
}
 8006d08:	4620      	mov	r0, r4
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	200012a4 	.word	0x200012a4
 8006d10:	200012d0 	.word	0x200012d0
 8006d14:	080098c8 	.word	0x080098c8
	...

08006d20 <chFactoryFindSemaphore.constprop.7>:
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8006d20:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006d22:	4c07      	ldr	r4, [pc, #28]	; (8006d40 <chFactoryFindSemaphore.constprop.7+0x20>)
 8006d24:	4620      	mov	r0, r4
 8006d26:	f7fa f843 	bl	8000db0 <chMtxLock>
  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 8006d2a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006d2e:	4805      	ldr	r0, [pc, #20]	; (8006d44 <chFactoryFindSemaphore.constprop.7+0x24>)
 8006d30:	f7fc f9ce 	bl	80030d0 <dyn_find_object.lto_priv.82>
 8006d34:	4605      	mov	r5, r0
  F_UNLOCK();
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7f9 ff9a 	bl	8000c70 <chMtxUnlock>
}
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	200012a4 	.word	0x200012a4
 8006d44:	080098c8 	.word	0x080098c8
	...

08006d50 <chFactoryCreateMailbox.constprop.6>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8006d50:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006d52:	4811      	ldr	r0, [pc, #68]	; (8006d98 <chFactoryCreateMailbox.constprop.6+0x48>)
 8006d54:	f7fa f82c 	bl	8000db0 <chMtxLock>
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8006d58:	2278      	movs	r2, #120	; 0x78
 8006d5a:	4910      	ldr	r1, [pc, #64]	; (8006d9c <chFactoryCreateMailbox.constprop.6+0x4c>)
 8006d5c:	4810      	ldr	r0, [pc, #64]	; (8006da0 <chFactoryCreateMailbox.constprop.6+0x50>)
 8006d5e:	f7fc f9d7 	bl	8003110 <dyn_create_object_heap.lto_priv.83>
  if (dmp != NULL) {
 8006d62:	4604      	mov	r4, r0
 8006d64:	b198      	cbz	r0, 8006d8e <chFactoryCreateMailbox.constprop.6+0x3e>
    chMBObjectInit(&dmp->mbx, dmp->msgbuf, n);
 8006d66:	f100 0338 	add.w	r3, r0, #56	; 0x38
  mbp->top    = &buf[n];
 8006d6a:	f100 0578 	add.w	r5, r0, #120	; 0x78
  chThdQueueObjectInit(&mbp->qw);
 8006d6e:	f104 0128 	add.w	r1, r4, #40	; 0x28
  mbp->cnt    = (size_t)0;
 8006d72:	2000      	movs	r0, #0
  chThdQueueObjectInit(&mbp->qr);
 8006d74:	f104 0230 	add.w	r2, r4, #48	; 0x30
  mbp->buffer = buf;
 8006d78:	6123      	str	r3, [r4, #16]
  mbp->rdptr  = buf;
 8006d7a:	61e3      	str	r3, [r4, #28]
  mbp->wrptr  = buf;
 8006d7c:	61a3      	str	r3, [r4, #24]
  mbp->top    = &buf[n];
 8006d7e:	6165      	str	r5, [r4, #20]
  mbp->cnt    = (size_t)0;
 8006d80:	6220      	str	r0, [r4, #32]
  mbp->reset  = false;
 8006d82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  tqp->next = (thread_t *)tqp;
 8006d86:	62a1      	str	r1, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8006d88:	62e1      	str	r1, [r4, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8006d8a:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8006d8c:	6362      	str	r2, [r4, #52]	; 0x34
  F_UNLOCK();
 8006d8e:	4802      	ldr	r0, [pc, #8]	; (8006d98 <chFactoryCreateMailbox.constprop.6+0x48>)
 8006d90:	f7f9 ff6e 	bl	8000c70 <chMtxUnlock>
}
 8006d94:	4620      	mov	r0, r4
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	200012a4 	.word	0x200012a4
 8006d9c:	200012e0 	.word	0x200012e0
 8006da0:	080098b8 	.word	0x080098b8
	...

08006db0 <chFactoryFindMailbox.constprop.5>:
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 8006db0:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006db2:	4c07      	ldr	r4, [pc, #28]	; (8006dd0 <chFactoryFindMailbox.constprop.5+0x20>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7f9 fffb 	bl	8000db0 <chMtxLock>
  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 8006dba:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8006dbe:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <chFactoryFindMailbox.constprop.5+0x24>)
 8006dc0:	f7fc f986 	bl	80030d0 <dyn_find_object.lto_priv.82>
 8006dc4:	4605      	mov	r5, r0
  F_UNLOCK();
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7f9 ff52 	bl	8000c70 <chMtxUnlock>
}
 8006dcc:	4628      	mov	r0, r5
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	200012a4 	.word	0x200012a4
 8006dd4:	080098b8 	.word	0x080098b8
	...

08006de0 <chFactoryCreateObjectsFIFO.constprop.4>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8006de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  F_LOCK();
 8006de4:	4824      	ldr	r0, [pc, #144]	; (8006e78 <chFactoryCreateObjectsFIFO.constprop.4+0x98>)
 8006de6:	f7f9 ffe3 	bl	8000db0 <chMtxLock>
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8006dea:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8006dee:	4923      	ldr	r1, [pc, #140]	; (8006e7c <chFactoryCreateObjectsFIFO.constprop.4+0x9c>)
 8006df0:	4823      	ldr	r0, [pc, #140]	; (8006e80 <chFactoryCreateObjectsFIFO.constprop.4+0xa0>)
 8006df2:	f7fc f98d 	bl	8003110 <dyn_create_object_heap.lto_priv.83>
  if (dofp != NULL) {
 8006df6:	4604      	mov	r4, r0
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d037      	beq.n	8006e6c <chFactoryCreateObjectsFIFO.constprop.4+0x8c>
  mp->next = NULL;
 8006dfc:	2700      	movs	r7, #0
 */
static inline void chFifoObjectInit(objects_fifo_t *ofp, size_t objsize,
                                    size_t objn, unsigned objalign,
                                    void *objbuf, msg_t *msgbuf) {

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8006dfe:	f100 0810 	add.w	r8, r0, #16
                     (void *)&dofp->msgbuf[objn], dofp->msgbuf);
 8006e02:	f100 0b94 	add.w	fp, r0, #148	; 0x94
  mp->object_size = size;
 8006e06:	2610      	movs	r6, #16
  mp->align = align;
 8006e08:	2304      	movs	r3, #4
 8006e0a:	465d      	mov	r5, fp
  tqp->next = (thread_t *)tqp;
 8006e0c:	f8c0 8010 	str.w	r8, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 8006e10:	f8c0 8014 	str.w	r8, [r0, #20]
  mp->next = NULL;
 8006e14:	61c7      	str	r7, [r0, #28]
  mp->provider = provider;
 8006e16:	6287      	str	r7, [r0, #40]	; 0x28
 8006e18:	6187      	str	r7, [r0, #24]
  mp->object_size = size;
 8006e1a:	6206      	str	r6, [r0, #32]
  mp->align = align;
 8006e1c:	6243      	str	r3, [r0, #36]	; 0x24
 8006e1e:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 8006e22:	f04f 0920 	mov.w	r9, #32
 8006e26:	f389 8811 	msr	BASEPRI, r9
  php->next = mp->next;
 8006e2a:	69e3      	ldr	r3, [r4, #28]
 8006e2c:	602b      	str	r3, [r5, #0]
  chSemSignalI(&gmp->sem);
 8006e2e:	4640      	mov	r0, r8
  mp->next = php;
 8006e30:	61e5      	str	r5, [r4, #28]
  chSemSignalI(&gmp->sem);
 8006e32:	f7fa f875 	bl	8000f20 <chSemSignalI>
  chSchRescheduleS();
 8006e36:	f7f9 fdb3 	bl	80009a0 <chSchRescheduleS>
 8006e3a:	f387 8811 	msr	BASEPRI, r7
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8006e3e:	6a23      	ldr	r3, [r4, #32]
  while (n != 0U) {
 8006e40:	3e01      	subs	r6, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8006e42:	441d      	add	r5, r3
  while (n != 0U) {
 8006e44:	d1ef      	bne.n	8006e26 <chFactoryCreateObjectsFIFO.constprop.4+0x46>
  chThdQueueObjectInit(&mbp->qw);
 8006e46:	f104 0244 	add.w	r2, r4, #68	; 0x44
  chThdQueueObjectInit(&mbp->qr);
 8006e4a:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  mbp->buffer = buf;
 8006e4e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
  mbp->rdptr  = buf;
 8006e52:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  mbp->wrptr  = buf;
 8006e56:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  mbp->top    = &buf[n];
 8006e5a:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8006e5e:	63e6      	str	r6, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8006e60:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 8006e64:	6462      	str	r2, [r4, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
 8006e66:	64a2      	str	r2, [r4, #72]	; 0x48
  tqp->next = (thread_t *)tqp;
 8006e68:	64e3      	str	r3, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 8006e6a:	6523      	str	r3, [r4, #80]	; 0x50
  F_UNLOCK();
 8006e6c:	4802      	ldr	r0, [pc, #8]	; (8006e78 <chFactoryCreateObjectsFIFO.constprop.4+0x98>)
 8006e6e:	f7f9 feff 	bl	8000c70 <chMtxUnlock>
}
 8006e72:	4620      	mov	r0, r4
 8006e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e78:	200012a4 	.word	0x200012a4
 8006e7c:	200012e4 	.word	0x200012e4
 8006e80:	080098c0 	.word	0x080098c0
	...

08006e90 <chFactoryFindObjectsFIFO.constprop.3>:
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8006e90:	b538      	push	{r3, r4, r5, lr}
  F_LOCK();
 8006e92:	4c07      	ldr	r4, [pc, #28]	; (8006eb0 <chFactoryFindObjectsFIFO.constprop.3+0x20>)
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7f9 ff8b 	bl	8000db0 <chMtxLock>
  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 8006e9a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006e9e:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <chFactoryFindObjectsFIFO.constprop.3+0x24>)
 8006ea0:	f7fc f916 	bl	80030d0 <dyn_find_object.lto_priv.82>
 8006ea4:	4605      	mov	r5, r0
  F_UNLOCK();
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7f9 fee2 	bl	8000c70 <chMtxUnlock>
}
 8006eac:	4628      	mov	r0, r5
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	200012a4 	.word	0x200012a4
 8006eb4:	080098c0 	.word	0x080098c0
	...

08006ec0 <_test_assert_time_window.constprop.2>:
 8006ec0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ec4:	1a09      	subs	r1, r1, r0
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	1a1b      	subs	r3, r3, r0
  if (!condition)
 8006eca:	428b      	cmp	r3, r1
 8006ecc:	d308      	bcc.n	8006ee0 <_test_assert_time_window.constprop.2+0x20>
  test_failure_message = msg;
 8006ece:	4905      	ldr	r1, [pc, #20]	; (8006ee4 <_test_assert_time_window.constprop.2+0x24>)
  test_local_fail      = true;
 8006ed0:	4a05      	ldr	r2, [pc, #20]	; (8006ee8 <_test_assert_time_window.constprop.2+0x28>)
  test_global_fail     = true;
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <_test_assert_time_window.constprop.2+0x2c>)
  test_failure_message = msg;
 8006ed4:	4806      	ldr	r0, [pc, #24]	; (8006ef0 <_test_assert_time_window.constprop.2+0x30>)
 8006ed6:	6008      	str	r0, [r1, #0]
  test_local_fail      = true;
 8006ed8:	2001      	movs	r0, #1
 8006eda:	7010      	strb	r0, [r2, #0]
  test_global_fail     = true;
 8006edc:	7018      	strb	r0, [r3, #0]
 8006ede:	4770      	bx	lr
  return false;
 8006ee0:	2000      	movs	r0, #0
}
 8006ee2:	4770      	bx	lr
 8006ee4:	2000134c 	.word	0x2000134c
 8006ee8:	20001351 	.word	0x20001351
 8006eec:	20001350 	.word	0x20001350
 8006ef0:	0800989c 	.word	0x0800989c
	...

08006f00 <rt_test_004_001_setup.lto_priv.111>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_004_001_setup(void) {
  tr1 = NULL;
 8006f00:	4b01      	ldr	r3, [pc, #4]	; (8006f08 <rt_test_004_001_setup.lto_priv.111+0x8>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	4770      	bx	lr
 8006f08:	20001354 	.word	0x20001354
 8006f0c:	00000000 	.word	0x00000000

08006f10 <rt_test_002_004_execute.lto_priv.106>:

static void rt_test_002_004_execute(void) {

  /* [2.4.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <rt_test_002_004_execute.lto_priv.106+0x14>)
 8006f12:	2101      	movs	r1, #1
 8006f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006f18:	6019      	str	r1, [r3, #0]
 8006f1a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8006f1c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d0fc      	beq.n	8006f1c <rt_test_002_004_execute.lto_priv.106+0xc>
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    }
  }
}
 8006f22:	4770      	bx	lr
 8006f24:	200013d8 	.word	0x200013d8
	...

08006f30 <rt_test_002_003_execute.lto_priv.105>:
  test_set_step(1);
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <rt_test_002_003_execute.lto_priv.105+0x20>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	2320      	movs	r3, #32
 8006f38:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8006f3c:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 8006f3e:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f40:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8006f44:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f46:	2300      	movs	r3, #0
 8006f48:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8006f4c:	b662      	cpsie	i
 8006f4e:	4770      	bx	lr
 8006f50:	200013d8 	.word	0x200013d8
	...

08006f60 <thread.lto_priv.201>:
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {

  test_emit_token(*(char *)p);
 8006f60:	7800      	ldrb	r0, [r0, #0]
 8006f62:	f7fb bc8d 	b.w	8002880 <test_emit_token>
 8006f66:	bf00      	nop
	...

08006f70 <rt_test_004_001_execute.lto_priv.112>:
}

static void rt_test_004_001_execute(void) {
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8006f74:	4d30      	ldr	r5, [pc, #192]	; (8007038 <rt_test_004_001_execute.lto_priv.112+0xc8>)
  msg_t msg;

  /* [4.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 8006f76:	4f31      	ldr	r7, [pc, #196]	; (800703c <rt_test_004_001_execute.lto_priv.112+0xcc>)
  return chThdGetSelfX()->prio;
 8006f78:	69aa      	ldr	r2, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8006f7a:	4b31      	ldr	r3, [pc, #196]	; (8007040 <rt_test_004_001_execute.lto_priv.112+0xd0>)
 8006f7c:	6891      	ldr	r1, [r2, #8]
 8006f7e:	4831      	ldr	r0, [pc, #196]	; (8007044 <rt_test_004_001_execute.lto_priv.112+0xd4>)
 8006f80:	4a31      	ldr	r2, [pc, #196]	; (8007048 <rt_test_004_001_execute.lto_priv.112+0xd8>)
 8006f82:	3901      	subs	r1, #1
  test_set_step(1);
 8006f84:	2401      	movs	r4, #1
 8006f86:	603c      	str	r4, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8006f88:	f7ff fa62 	bl	8006450 <chThdCreateStatic.constprop.62>
 8006f8c:	4b2f      	ldr	r3, [pc, #188]	; (800704c <rt_test_004_001_execute.lto_priv.112+0xdc>)
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006f8e:	2620      	movs	r6, #32
 8006f90:	6018      	str	r0, [r3, #0]
 8006f92:	f386 8811 	msr	BASEPRI, r6
  return ch.rlist.current;
 8006f96:	69ab      	ldr	r3, [r5, #24]
  *trp = tp;
 8006f98:	4c2d      	ldr	r4, [pc, #180]	; (8007050 <rt_test_004_001_execute.lto_priv.112+0xe0>)
  tp->u.wttrp = trp;
 8006f9a:	625c      	str	r4, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 8006f9c:	2003      	movs	r0, #3
  *trp = tp;
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	f7f9 fd76 	bl	8000a90 <chSchGoSleepS>
  return currp->u.rdymsg;
 8006fa4:	69aa      	ldr	r2, [r5, #24]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f8d2 8024 	ldr.w	r8, [r2, #36]	; 0x24
 8006fac:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8006fb0:	6820      	ldr	r0, [r4, #0]
 8006fb2:	4928      	ldr	r1, [pc, #160]	; (8007054 <rt_test_004_001_execute.lto_priv.112+0xe4>)
 8006fb4:	fab0 f080 	clz	r0, r0
 8006fb8:	0940      	lsrs	r0, r0, #5
 8006fba:	f7fb ff61 	bl	8002e80 <_test_assert>
 8006fbe:	b108      	cbz	r0, 8006fc4 <rt_test_004_001_execute.lto_priv.112+0x54>
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 8006fc4:	fab8 f088 	clz	r0, r8
 8006fc8:	0940      	lsrs	r0, r0, #5
 8006fca:	4923      	ldr	r1, [pc, #140]	; (8007058 <rt_test_004_001_execute.lto_priv.112+0xe8>)
 8006fcc:	f7fb ff58 	bl	8002e80 <_test_assert>
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1f4      	bne.n	8006fc0 <rt_test_004_001_execute.lto_priv.112+0x50>
    test_wait_threads();
 8006fd6:	f7fb fc23 	bl	8002820 <test_wait_threads>
  }

  /* [4.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8006fda:	2302      	movs	r3, #2
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	f386 8811 	msr	BASEPRI, r6
 8006fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006fe6:	69ab      	ldr	r3, [r5, #24]
 8006fe8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  tp->u.wttrp = trp;
 8006fea:	625c      	str	r4, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8006fec:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ff0:	2003      	movs	r0, #3
  *trp = tp;
 8006ff2:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8006ff4:	f7fa f864 	bl	80010c0 <chSchGoSleepTimeoutS>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	f388 8811 	msr	BASEPRI, r8
  {
    chSysLock();
    time = chVTGetSystemTimeX();
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(1000));
    chSysUnlock();
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 8006ffe:	f505 511c 	add.w	r1, r5, #9984	; 0x2700
 8007002:	4608      	mov	r0, r1
 8007004:	3010      	adds	r0, #16
 8007006:	3113      	adds	r1, #19
 8007008:	f7ff ff5a 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 800700c:	2800      	cmp	r0, #0
 800700e:	d1d7      	bne.n	8006fc0 <rt_test_004_001_execute.lto_priv.112+0x50>
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	4910      	ldr	r1, [pc, #64]	; (8007054 <rt_test_004_001_execute.lto_priv.112+0xe4>)
 8007014:	fab0 f080 	clz	r0, r0
 8007018:	0940      	lsrs	r0, r0, #5
 800701a:	f7fb ff31 	bl	8002e80 <_test_assert>
 800701e:	2800      	cmp	r0, #0
 8007020:	d1ce      	bne.n	8006fc0 <rt_test_004_001_execute.lto_priv.112+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8007022:	f1a6 30ff 	sub.w	r0, r6, #4294967295	; 0xffffffff
 8007026:	fab0 f080 	clz	r0, r0
 800702a:	0940      	lsrs	r0, r0, #5
 800702c:	490a      	ldr	r1, [pc, #40]	; (8007058 <rt_test_004_001_execute.lto_priv.112+0xe8>)
  }
}
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 8007032:	f7fb bf25 	b.w	8002e80 <_test_assert>
 8007036:	bf00      	nop
 8007038:	2000122c 	.word	0x2000122c
 800703c:	200013d8 	.word	0x200013d8
 8007040:	08007ac8 	.word	0x08007ac8
 8007044:	20000af8 	.word	0x20000af8
 8007048:	08007061 	.word	0x08007061
 800704c:	20001160 	.word	0x20001160
 8007050:	20001354 	.word	0x20001354
 8007054:	080099ec 	.word	0x080099ec
 8007058:	0800974c 	.word	0x0800974c
 800705c:	00000000 	.word	0x00000000

08007060 <thread1>:
static THD_FUNCTION(thread1, p) {
 8007060:	b510      	push	{r4, lr}
 8007062:	2320      	movs	r3, #32
 8007064:	4604      	mov	r4, r0
 8007066:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <thread1+0x30>)
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	b120      	cbz	r0, 800707a <thread1+0x1a>
    *trp = NULL;
 8007070:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 8007072:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8007074:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8007076:	f7f9 fd6b 	bl	8000b50 <chSchReadyI>
  chSchRescheduleS();
 800707a:	f7f9 fc91 	bl	80009a0 <chSchRescheduleS>
 800707e:	2300      	movs	r3, #0
 8007080:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8007084:	7820      	ldrb	r0, [r4, #0]
}
 8007086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 800708a:	f7fb bbf9 	b.w	8002880 <test_emit_token>
 800708e:	bf00      	nop
 8007090:	20001354 	.word	0x20001354
	...

080070a0 <rt_test_003_004_execute.lto_priv.110>:
 * - [3.4.3] Raising thread priority above the boosted level.
 * - [3.4.4] Restoring original conditions.
 * .
 */

static void rt_test_003_004_execute(void) {
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	4d2f      	ldr	r5, [pc, #188]	; (8007164 <rt_test_003_004_execute.lto_priv.110+0xc4>)
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
  }

  /* [3.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 80070a6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007178 <rt_test_003_004_execute.lto_priv.110+0xd8>
 80070aa:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 80070ac:	689c      	ldr	r4, [r3, #8]
    chThdGetSelfX()->prio += 2;
 80070ae:	1ca6      	adds	r6, r4, #2
  {
    p1 = chThdSetPriority(prio + 1);
 80070b0:	1c67      	adds	r7, r4, #1
    chThdGetSelfX()->prio += 2;
 80070b2:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 80070b4:	4638      	mov	r0, r7
  test_set_step(2);
 80070b6:	2302      	movs	r3, #2
 80070b8:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 1);
 80070bc:	f7f9 fc80 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 80070c0:	1b00      	subs	r0, r0, r4
 80070c2:	fab0 f080 	clz	r0, r0
 80070c6:	4928      	ldr	r1, [pc, #160]	; (8007168 <rt_test_003_004_execute.lto_priv.110+0xc8>)
 80070c8:	0940      	lsrs	r0, r0, #5
 80070ca:	f7fb fed9 	bl	8002e80 <_test_assert>
 80070ce:	b108      	cbz	r0, 80070d4 <rt_test_003_004_execute.lto_priv.110+0x34>
 80070d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 80070d4:	69ab      	ldr	r3, [r5, #24]
 80070d6:	4925      	ldr	r1, [pc, #148]	; (800716c <rt_test_003_004_execute.lto_priv.110+0xcc>)
 80070d8:	6898      	ldr	r0, [r3, #8]
 80070da:	1b80      	subs	r0, r0, r6
 80070dc:	fab0 f080 	clz	r0, r0
 80070e0:	0940      	lsrs	r0, r0, #5
 80070e2:	f7fb fecd 	bl	8002e80 <_test_assert>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d1f2      	bne.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 80070ea:	69ab      	ldr	r3, [r5, #24]
 80070ec:	4920      	ldr	r1, [pc, #128]	; (8007170 <rt_test_003_004_execute.lto_priv.110+0xd0>)
 80070ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80070f0:	1bc0      	subs	r0, r0, r7
 80070f2:	fab0 f080 	clz	r0, r0
 80070f6:	0940      	lsrs	r0, r0, #5
 80070f8:	f7fb fec2 	bl	8002e80 <_test_assert>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d1e7      	bne.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
  }

  /* [3.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
  {
    p1 = chThdSetPriority(prio + 3);
 8007100:	1ce6      	adds	r6, r4, #3
  test_set_step(3);
 8007102:	2303      	movs	r3, #3
    p1 = chThdSetPriority(prio + 3);
 8007104:	4630      	mov	r0, r6
  test_set_step(3);
 8007106:	f8c8 3000 	str.w	r3, [r8]
    p1 = chThdSetPriority(prio + 3);
 800710a:	f7f9 fc59 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 800710e:	1a38      	subs	r0, r7, r0
 8007110:	fab0 f080 	clz	r0, r0
 8007114:	4914      	ldr	r1, [pc, #80]	; (8007168 <rt_test_003_004_execute.lto_priv.110+0xc8>)
 8007116:	0940      	lsrs	r0, r0, #5
 8007118:	f7fb feb2 	bl	8002e80 <_test_assert>
 800711c:	2800      	cmp	r0, #0
 800711e:	d1d7      	bne.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 8007120:	69ab      	ldr	r3, [r5, #24]
 8007122:	4912      	ldr	r1, [pc, #72]	; (800716c <rt_test_003_004_execute.lto_priv.110+0xcc>)
 8007124:	6898      	ldr	r0, [r3, #8]
 8007126:	1b80      	subs	r0, r0, r6
 8007128:	fab0 f080 	clz	r0, r0
 800712c:	0940      	lsrs	r0, r0, #5
 800712e:	f7fb fea7 	bl	8002e80 <_test_assert>
 8007132:	2800      	cmp	r0, #0
 8007134:	d1cc      	bne.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8007136:	69ab      	ldr	r3, [r5, #24]
 8007138:	490e      	ldr	r1, [pc, #56]	; (8007174 <rt_test_003_004_execute.lto_priv.110+0xd4>)
 800713a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800713c:	1b80      	subs	r0, r0, r6
 800713e:	fab0 f080 	clz	r0, r0
 8007142:	0940      	lsrs	r0, r0, #5
 8007144:	f7fb fe9c 	bl	8002e80 <_test_assert>
 8007148:	2800      	cmp	r0, #0
 800714a:	d1c1      	bne.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
  }

  /* [3.4.4] Restoring original conditions.*/
  test_set_step(4);
 800714c:	2304      	movs	r3, #4
 800714e:	f8c8 3000 	str.w	r3, [r8]
 8007152:	2320      	movs	r3, #32
 8007154:	f383 8811 	msr	BASEPRI, r3
  return ch.rlist.current;
 8007158:	69ab      	ldr	r3, [r5, #24]
  {
    chSysLock();
    chThdGetSelfX()->prio = prio;
 800715a:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 800715c:	63dc      	str	r4, [r3, #60]	; 0x3c
 800715e:	f380 8811 	msr	BASEPRI, r0
 8007162:	e7b5      	b.n	80070d0 <rt_test_003_004_execute.lto_priv.110+0x30>
 8007164:	2000122c 	.word	0x2000122c
 8007168:	08009964 	.word	0x08009964
 800716c:	08009988 	.word	0x08009988
 8007170:	080099a4 	.word	0x080099a4
 8007174:	080099cc 	.word	0x080099cc
 8007178:	200013d8 	.word	0x200013d8
 800717c:	00000000 	.word	0x00000000

08007180 <rt_test_003_003_execute.lto_priv.109>:
static void rt_test_003_003_execute(void) {
 8007180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007184:	4e1c      	ldr	r6, [pc, #112]	; (80071f8 <rt_test_003_003_execute.lto_priv.109+0x78>)
  test_set_step(1);
 8007186:	4f1d      	ldr	r7, [pc, #116]	; (80071fc <rt_test_003_003_execute.lto_priv.109+0x7c>)
  return chThdGetSelfX()->prio;
 8007188:	69b3      	ldr	r3, [r6, #24]
 800718a:	689c      	ldr	r4, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 800718c:	1c65      	adds	r5, r4, #1
  test_set_step(1);
 800718e:	2301      	movs	r3, #1
    p1 = chThdSetPriority(prio + 1);
 8007190:	4628      	mov	r0, r5
  test_set_step(1);
 8007192:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(prio + 1);
 8007194:	f7f9 fc14 	bl	80009c0 <chThdSetPriority>
 8007198:	4680      	mov	r8, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 800719a:	1b00      	subs	r0, r0, r4
 800719c:	fab0 f080 	clz	r0, r0
 80071a0:	0940      	lsrs	r0, r0, #5
 80071a2:	4917      	ldr	r1, [pc, #92]	; (8007200 <rt_test_003_003_execute.lto_priv.109+0x80>)
 80071a4:	f7fb fe6c 	bl	8002e80 <_test_assert>
 80071a8:	b108      	cbz	r0, 80071ae <rt_test_003_003_execute.lto_priv.109+0x2e>
 80071aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ae:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 80071b0:	4914      	ldr	r1, [pc, #80]	; (8007204 <rt_test_003_003_execute.lto_priv.109+0x84>)
 80071b2:	6898      	ldr	r0, [r3, #8]
 80071b4:	1b40      	subs	r0, r0, r5
 80071b6:	fab0 f080 	clz	r0, r0
 80071ba:	0940      	lsrs	r0, r0, #5
 80071bc:	f7fb fe60 	bl	8002e80 <_test_assert>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1f2      	bne.n	80071aa <rt_test_003_003_execute.lto_priv.109+0x2a>
  test_set_step(2);
 80071c4:	2302      	movs	r3, #2
    p1 = chThdSetPriority(p1);
 80071c6:	4640      	mov	r0, r8
  test_set_step(2);
 80071c8:	603b      	str	r3, [r7, #0]
    p1 = chThdSetPriority(p1);
 80071ca:	f7f9 fbf9 	bl	80009c0 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 80071ce:	1a28      	subs	r0, r5, r0
 80071d0:	fab0 f080 	clz	r0, r0
 80071d4:	490a      	ldr	r1, [pc, #40]	; (8007200 <rt_test_003_003_execute.lto_priv.109+0x80>)
 80071d6:	0940      	lsrs	r0, r0, #5
 80071d8:	f7fb fe52 	bl	8002e80 <_test_assert>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1e4      	bne.n	80071aa <rt_test_003_003_execute.lto_priv.109+0x2a>
 80071e0:	69b3      	ldr	r3, [r6, #24]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 80071e2:	4908      	ldr	r1, [pc, #32]	; (8007204 <rt_test_003_003_execute.lto_priv.109+0x84>)
 80071e4:	6898      	ldr	r0, [r3, #8]
 80071e6:	1b00      	subs	r0, r0, r4
 80071e8:	fab0 f080 	clz	r0, r0
 80071ec:	0940      	lsrs	r0, r0, #5
}
 80071ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 80071f2:	f7fb be45 	b.w	8002e80 <_test_assert>
 80071f6:	bf00      	nop
 80071f8:	2000122c 	.word	0x2000122c
 80071fc:	200013d8 	.word	0x200013d8
 8007200:	08009964 	.word	0x08009964
 8007204:	08009988 	.word	0x08009988
	...

08007210 <rt_test_003_002_execute.lto_priv.108>:
static void rt_test_003_002_execute(void) {
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007212:	4d54      	ldr	r5, [pc, #336]	; (8007364 <rt_test_003_002_execute.lto_priv.108+0x154>)
  test_set_step(1);
 8007214:	4e54      	ldr	r6, [pc, #336]	; (8007368 <rt_test_003_002_execute.lto_priv.108+0x158>)
  return chThdGetSelfX()->prio;
 8007216:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007218:	4b54      	ldr	r3, [pc, #336]	; (800736c <rt_test_003_002_execute.lto_priv.108+0x15c>)
 800721a:	6891      	ldr	r1, [r2, #8]
 800721c:	4854      	ldr	r0, [pc, #336]	; (8007370 <rt_test_003_002_execute.lto_priv.108+0x160>)
 800721e:	4a55      	ldr	r2, [pc, #340]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007220:	4c55      	ldr	r4, [pc, #340]	; (8007378 <rt_test_003_002_execute.lto_priv.108+0x168>)
 8007222:	3905      	subs	r1, #5
  test_set_step(1);
 8007224:	2701      	movs	r7, #1
 8007226:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007228:	f7ff f912 	bl	8006450 <chThdCreateStatic.constprop.62>
 800722c:	69ab      	ldr	r3, [r5, #24]
 800722e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007230:	6899      	ldr	r1, [r3, #8]
 8007232:	4a50      	ldr	r2, [pc, #320]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007234:	4b51      	ldr	r3, [pc, #324]	; (800737c <rt_test_003_002_execute.lto_priv.108+0x16c>)
 8007236:	4852      	ldr	r0, [pc, #328]	; (8007380 <rt_test_003_002_execute.lto_priv.108+0x170>)
 8007238:	3904      	subs	r1, #4
 800723a:	f7ff f909 	bl	8006450 <chThdCreateStatic.constprop.62>
 800723e:	69ab      	ldr	r3, [r5, #24]
 8007240:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007242:	6899      	ldr	r1, [r3, #8]
 8007244:	4a4b      	ldr	r2, [pc, #300]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007246:	4b4f      	ldr	r3, [pc, #316]	; (8007384 <rt_test_003_002_execute.lto_priv.108+0x174>)
 8007248:	484f      	ldr	r0, [pc, #316]	; (8007388 <rt_test_003_002_execute.lto_priv.108+0x178>)
 800724a:	3903      	subs	r1, #3
 800724c:	f7ff f900 	bl	8006450 <chThdCreateStatic.constprop.62>
 8007250:	69ab      	ldr	r3, [r5, #24]
 8007252:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	4a47      	ldr	r2, [pc, #284]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007258:	4b4c      	ldr	r3, [pc, #304]	; (800738c <rt_test_003_002_execute.lto_priv.108+0x17c>)
 800725a:	484d      	ldr	r0, [pc, #308]	; (8007390 <rt_test_003_002_execute.lto_priv.108+0x180>)
 800725c:	3902      	subs	r1, #2
 800725e:	f7ff f8f7 	bl	8006450 <chThdCreateStatic.constprop.62>
 8007262:	69ab      	ldr	r3, [r5, #24]
 8007264:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007266:	6899      	ldr	r1, [r3, #8]
 8007268:	4a42      	ldr	r2, [pc, #264]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 800726a:	4b4a      	ldr	r3, [pc, #296]	; (8007394 <rt_test_003_002_execute.lto_priv.108+0x184>)
 800726c:	484a      	ldr	r0, [pc, #296]	; (8007398 <rt_test_003_002_execute.lto_priv.108+0x188>)
 800726e:	3901      	subs	r1, #1
 8007270:	f7ff f8ee 	bl	8006450 <chThdCreateStatic.constprop.62>
 8007274:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8007276:	f7fb fad3 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800727a:	4948      	ldr	r1, [pc, #288]	; (800739c <rt_test_003_002_execute.lto_priv.108+0x18c>)
 800727c:	4848      	ldr	r0, [pc, #288]	; (80073a0 <rt_test_003_002_execute.lto_priv.108+0x190>)
 800727e:	f7fb fdd7 	bl	8002e30 <_test_assert_sequence>
 8007282:	b100      	cbz	r0, 8007286 <rt_test_003_002_execute.lto_priv.108+0x76>
 8007284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007286:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007288:	4b42      	ldr	r3, [pc, #264]	; (8007394 <rt_test_003_002_execute.lto_priv.108+0x184>)
 800728a:	6891      	ldr	r1, [r2, #8]
 800728c:	4842      	ldr	r0, [pc, #264]	; (8007398 <rt_test_003_002_execute.lto_priv.108+0x188>)
 800728e:	4a39      	ldr	r2, [pc, #228]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007290:	3901      	subs	r1, #1
  test_set_step(2);
 8007292:	2702      	movs	r7, #2
 8007294:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007296:	f7ff f8db 	bl	8006450 <chThdCreateStatic.constprop.62>
 800729a:	69ab      	ldr	r3, [r5, #24]
 800729c:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800729e:	6899      	ldr	r1, [r3, #8]
 80072a0:	4a34      	ldr	r2, [pc, #208]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 80072a2:	4b3a      	ldr	r3, [pc, #232]	; (800738c <rt_test_003_002_execute.lto_priv.108+0x17c>)
 80072a4:	483a      	ldr	r0, [pc, #232]	; (8007390 <rt_test_003_002_execute.lto_priv.108+0x180>)
 80072a6:	3902      	subs	r1, #2
 80072a8:	f7ff f8d2 	bl	8006450 <chThdCreateStatic.constprop.62>
 80072ac:	69ab      	ldr	r3, [r5, #24]
 80072ae:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80072b0:	6899      	ldr	r1, [r3, #8]
 80072b2:	4a30      	ldr	r2, [pc, #192]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 80072b4:	4b33      	ldr	r3, [pc, #204]	; (8007384 <rt_test_003_002_execute.lto_priv.108+0x174>)
 80072b6:	4834      	ldr	r0, [pc, #208]	; (8007388 <rt_test_003_002_execute.lto_priv.108+0x178>)
 80072b8:	3903      	subs	r1, #3
 80072ba:	f7ff f8c9 	bl	8006450 <chThdCreateStatic.constprop.62>
 80072be:	69ab      	ldr	r3, [r5, #24]
 80072c0:	60a0      	str	r0, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80072c2:	6899      	ldr	r1, [r3, #8]
 80072c4:	4a2b      	ldr	r2, [pc, #172]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 80072c6:	4b2d      	ldr	r3, [pc, #180]	; (800737c <rt_test_003_002_execute.lto_priv.108+0x16c>)
 80072c8:	482d      	ldr	r0, [pc, #180]	; (8007380 <rt_test_003_002_execute.lto_priv.108+0x170>)
 80072ca:	3904      	subs	r1, #4
 80072cc:	f7ff f8c0 	bl	8006450 <chThdCreateStatic.constprop.62>
 80072d0:	69ab      	ldr	r3, [r5, #24]
 80072d2:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80072d4:	6899      	ldr	r1, [r3, #8]
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 80072d8:	4b24      	ldr	r3, [pc, #144]	; (800736c <rt_test_003_002_execute.lto_priv.108+0x15c>)
 80072da:	4825      	ldr	r0, [pc, #148]	; (8007370 <rt_test_003_002_execute.lto_priv.108+0x160>)
 80072dc:	3905      	subs	r1, #5
 80072de:	f7ff f8b7 	bl	8006450 <chThdCreateStatic.constprop.62>
 80072e2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 80072e4:	f7fb fa9c 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80072e8:	492c      	ldr	r1, [pc, #176]	; (800739c <rt_test_003_002_execute.lto_priv.108+0x18c>)
 80072ea:	482d      	ldr	r0, [pc, #180]	; (80073a0 <rt_test_003_002_execute.lto_priv.108+0x190>)
 80072ec:	f7fb fda0 	bl	8002e30 <_test_assert_sequence>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1c7      	bne.n	8007284 <rt_test_003_002_execute.lto_priv.108+0x74>
 80072f4:	69aa      	ldr	r2, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80072f6:	4b21      	ldr	r3, [pc, #132]	; (800737c <rt_test_003_002_execute.lto_priv.108+0x16c>)
 80072f8:	6891      	ldr	r1, [r2, #8]
 80072fa:	4821      	ldr	r0, [pc, #132]	; (8007380 <rt_test_003_002_execute.lto_priv.108+0x170>)
 80072fc:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 80072fe:	3904      	subs	r1, #4
  test_set_step(3);
 8007300:	2703      	movs	r7, #3
 8007302:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007304:	f7ff f8a4 	bl	8006450 <chThdCreateStatic.constprop.62>
 8007308:	69ab      	ldr	r3, [r5, #24]
 800730a:	6060      	str	r0, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	4a19      	ldr	r2, [pc, #100]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007310:	4b16      	ldr	r3, [pc, #88]	; (800736c <rt_test_003_002_execute.lto_priv.108+0x15c>)
 8007312:	4817      	ldr	r0, [pc, #92]	; (8007370 <rt_test_003_002_execute.lto_priv.108+0x160>)
 8007314:	3905      	subs	r1, #5
 8007316:	f7ff f89b 	bl	8006450 <chThdCreateStatic.constprop.62>
 800731a:	69ab      	ldr	r3, [r5, #24]
 800731c:	6020      	str	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800731e:	6899      	ldr	r1, [r3, #8]
 8007320:	4a14      	ldr	r2, [pc, #80]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007322:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <rt_test_003_002_execute.lto_priv.108+0x184>)
 8007324:	481c      	ldr	r0, [pc, #112]	; (8007398 <rt_test_003_002_execute.lto_priv.108+0x188>)
 8007326:	3901      	subs	r1, #1
 8007328:	f7ff f892 	bl	8006450 <chThdCreateStatic.constprop.62>
 800732c:	69ab      	ldr	r3, [r5, #24]
 800732e:	6120      	str	r0, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007330:	6899      	ldr	r1, [r3, #8]
 8007332:	4a10      	ldr	r2, [pc, #64]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007334:	4b15      	ldr	r3, [pc, #84]	; (800738c <rt_test_003_002_execute.lto_priv.108+0x17c>)
 8007336:	4816      	ldr	r0, [pc, #88]	; (8007390 <rt_test_003_002_execute.lto_priv.108+0x180>)
 8007338:	3902      	subs	r1, #2
 800733a:	f7ff f889 	bl	8006450 <chThdCreateStatic.constprop.62>
 800733e:	69ab      	ldr	r3, [r5, #24]
 8007340:	60e0      	str	r0, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007342:	6899      	ldr	r1, [r3, #8]
 8007344:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <rt_test_003_002_execute.lto_priv.108+0x164>)
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <rt_test_003_002_execute.lto_priv.108+0x174>)
 8007348:	480f      	ldr	r0, [pc, #60]	; (8007388 <rt_test_003_002_execute.lto_priv.108+0x178>)
 800734a:	3903      	subs	r1, #3
 800734c:	f7ff f880 	bl	8006450 <chThdCreateStatic.constprop.62>
 8007350:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 8007352:	f7fb fa65 	bl	8002820 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007356:	4911      	ldr	r1, [pc, #68]	; (800739c <rt_test_003_002_execute.lto_priv.108+0x18c>)
 8007358:	4811      	ldr	r0, [pc, #68]	; (80073a0 <rt_test_003_002_execute.lto_priv.108+0x190>)
}
 800735a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 800735e:	f7fb bd67 	b.w	8002e30 <_test_assert_sequence>
 8007362:	bf00      	nop
 8007364:	2000122c 	.word	0x2000122c
 8007368:	200013d8 	.word	0x200013d8
 800736c:	08007a08 	.word	0x08007a08
 8007370:	20000af8 	.word	0x20000af8
 8007374:	08006f61 	.word	0x08006f61
 8007378:	20001160 	.word	0x20001160
 800737c:	08007a00 	.word	0x08007a00
 8007380:	20000c40 	.word	0x20000c40
 8007384:	08007af8 	.word	0x08007af8
 8007388:	20000d88 	.word	0x20000d88
 800738c:	08007aec 	.word	0x08007aec
 8007390:	20000ed0 	.word	0x20000ed0
 8007394:	08007ac8 	.word	0x08007ac8
 8007398:	20001018 	.word	0x20001018
 800739c:	08007a30 	.word	0x08007a30
 80073a0:	08007a04 	.word	0x08007a04
	...

080073b0 <rt_test_003_001_execute.lto_priv.107>:
static void rt_test_003_001_execute(void) {
 80073b0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80073b2:	4e2b      	ldr	r6, [pc, #172]	; (8007460 <rt_test_003_001_execute.lto_priv.107+0xb0>)
 80073b4:	2301      	movs	r3, #1
 80073b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleep(100);
 80073be:	2064      	movs	r0, #100	; 0x64
 80073c0:	f7fa f82e 	bl	8001420 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 80073c4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80073c8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80073cc:	f7ff fd78 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 80073d0:	b100      	cbz	r0, 80073d4 <rt_test_003_001_execute.lto_priv.107+0x24>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 80073d4:	2302      	movs	r3, #2
 80073d6:	6033      	str	r3, [r6, #0]
 80073d8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 80073da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073de:	f7fa f81f 	bl	8001420 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 80073e2:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 80073e6:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 80073ea:	f7ff fd69 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1ef      	bne.n	80073d2 <rt_test_003_001_execute.lto_priv.107+0x22>
  test_set_step(3);
 80073f2:	2303      	movs	r3, #3
 80073f4:	6033      	str	r3, [r6, #0]
 80073f6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepMilliseconds(100);
 80073f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073fc:	f7fa f810 	bl	8001420 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8007400:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8007404:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8007408:	f7ff fd5a 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 800740c:	2800      	cmp	r0, #0
 800740e:	d1e0      	bne.n	80073d2 <rt_test_003_001_execute.lto_priv.107+0x22>
  test_set_step(4);
 8007410:	2304      	movs	r3, #4
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    chThdSleepSeconds(1);
 8007416:	f242 7010 	movw	r0, #10000	; 0x2710
 800741a:	f7fa f801 	bl	8001420 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 800741e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8007422:	4608      	mov	r0, r1
 8007424:	3010      	adds	r0, #16
 8007426:	3113      	adds	r1, #19
 8007428:	f7ff fd4a 	bl	8006ec0 <_test_assert_time_window.constprop.2>
 800742c:	2800      	cmp	r0, #0
 800742e:	d1d0      	bne.n	80073d2 <rt_test_003_001_execute.lto_priv.107+0x22>
  test_set_step(5);
 8007430:	2305      	movs	r3, #5
 8007432:	6033      	str	r3, [r6, #0]
 8007434:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8007436:	2320      	movs	r3, #32
  return systime + (systime_t)interval;
 8007438:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	6a69      	ldr	r1, [r5, #36]	; 0x24
  if (interval > (sysinterval_t)0) {
 8007442:	1a61      	subs	r1, r4, r1
 8007444:	d002      	beq.n	800744c <rt_test_003_001_execute.lto_priv.107+0x9c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8007446:	2008      	movs	r0, #8
 8007448:	f7f9 fe3a 	bl	80010c0 <chSchGoSleepTimeoutS>
 800744c:	2300      	movs	r3, #0
 800744e:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, 100),
 8007452:	f106 0167 	add.w	r1, r6, #103	; 0x67
 8007456:	4620      	mov	r0, r4
}
 8007458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert_time_window(chTimeAddX(time, 100),
 800745c:	f7ff bd30 	b.w	8006ec0 <_test_assert_time_window.constprop.2>
 8007460:	200013d8 	.word	0x200013d8
	...

08007470 <rt_test_002_002_execute.lto_priv.104>:
static void rt_test_002_002_execute(void) {
 8007470:	b510      	push	{r4, lr}
  test_set_step(1);
 8007472:	4c31      	ldr	r4, [pc, #196]	; (8007538 <rt_test_002_002_execute.lto_priv.104+0xc8>)
 8007474:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8007476:	b086      	sub	sp, #24
  test_set_step(1);
 8007478:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800747a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 800747e:	b91b      	cbnz	r3, 8007488 <rt_test_002_002_execute.lto_priv.104+0x18>
 8007480:	f7f9 ffee 	bl	8001460 <chSysGetStatusAndLockX.part.1>
 8007484:	f7f9 ffdc 	bl	8001440 <chSysRestoreStatusX.part.2>
  test_set_step(2);
 8007488:	2302      	movs	r3, #2
 800748a:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800748c:	2320      	movs	r3, #32
 800748e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007492:	f3ef 8311 	mrs	r3, BASEPRI
 8007496:	b91b      	cbnz	r3, 80074a0 <rt_test_002_002_execute.lto_priv.104+0x30>
 8007498:	f7f9 ffe2 	bl	8001460 <chSysGetStatusAndLockX.part.1>
 800749c:	f7f9 ffd0 	bl	8001440 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80074a0:	2300      	movs	r3, #0
 80074a2:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80074a6:	2303      	movs	r3, #3
 80074a8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074aa:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 80074ae:	b913      	cbnz	r3, 80074b6 <rt_test_002_002_execute.lto_priv.104+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80074b0:	2320      	movs	r3, #32
 80074b2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b6:	f3ef 8311 	mrs	r3, BASEPRI
 80074ba:	b913      	cbnz	r3, 80074c2 <rt_test_002_002_execute.lto_priv.104+0x52>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80074bc:	2320      	movs	r3, #32
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 80074c8:	2204      	movs	r2, #4
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d2:	f3ef 8211 	mrs	r2, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 80074d6:	b10a      	cbz	r2, 80074dc <rt_test_002_002_execute.lto_priv.104+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80074d8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074dc:	f3ef 8311 	mrs	r3, BASEPRI
 80074e0:	b113      	cbz	r3, 80074e8 <rt_test_002_002_execute.lto_priv.104+0x78>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80074e2:	2300      	movs	r3, #0
 80074e4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 80074e8:	2205      	movs	r2, #5
  vtp->func = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	6022      	str	r2, [r4, #0]
 80074f0:	2320      	movs	r3, #32
 80074f2:	f383 8811 	msr	BASEPRI, r3
  if (chVTIsArmedI(vtp)) {
 80074f6:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 80074f8:	ac01      	add	r4, sp, #4
  if (chVTIsArmedI(vtp)) {
 80074fa:	b113      	cbz	r3, 8007502 <rt_test_002_002_execute.lto_priv.104+0x92>
    chVTDoResetI(vtp);
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7f9 fd67 	bl	8000fd0 <chVTDoResetI>
  chVTDoSetI(vtp, delay, vtfunc, par);
 8007502:	4620      	mov	r0, r4
 8007504:	2300      	movs	r3, #0
 8007506:	4a0d      	ldr	r2, [pc, #52]	; (800753c <rt_test_002_002_execute.lto_priv.104+0xcc>)
 8007508:	2101      	movs	r1, #1
 800750a:	f7f9 fd99 	bl	8001040 <chVTDoSetI>
 800750e:	2400      	movs	r4, #0
 8007510:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8007514:	200a      	movs	r0, #10
 8007516:	f7f9 ff83 	bl	8001420 <chThdSleep>
 800751a:	2320      	movs	r3, #32
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	9804      	ldr	r0, [sp, #16]
 8007522:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8007526:	fab0 f080 	clz	r0, r0
 800752a:	4905      	ldr	r1, [pc, #20]	; (8007540 <rt_test_002_002_execute.lto_priv.104+0xd0>)
 800752c:	0940      	lsrs	r0, r0, #5
 800752e:	f7fb fca7 	bl	8002e80 <_test_assert>
}
 8007532:	b006      	add	sp, #24
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	200013d8 	.word	0x200013d8
 800753c:	08007551 	.word	0x08007551
 8007540:	08009950 	.word	0x08009950
	...

08007550 <vtcb>:
static void vtcb(void *p) {
 8007550:	b508      	push	{r3, lr}
 8007552:	2320      	movs	r3, #32
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	2200      	movs	r2, #0
 800755a:	f382 8811 	msr	BASEPRI, r2
 800755e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007562:	f3ef 8311 	mrs	r3, BASEPRI
 8007566:	b91b      	cbnz	r3, 8007570 <vtcb+0x20>
 8007568:	f7f9 ff7a 	bl	8001460 <chSysGetStatusAndLockX.part.1>
 800756c:	f7f9 ff68 	bl	8001440 <chSysRestoreStatusX.part.2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007570:	2300      	movs	r3, #0
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	bd08      	pop	{r3, pc}
	...

08007580 <rt_test_002_001_execute.lto_priv.103>:
static void rt_test_002_001_execute(void) {
 8007580:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8007582:	4d24      	ldr	r5, [pc, #144]	; (8007614 <rt_test_002_001_execute.lto_priv.103+0x94>)
 8007584:	2001      	movs	r0, #1
 8007586:	6028      	str	r0, [r5, #0]
 8007588:	2420      	movs	r4, #32
 800758a:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800758e:	f7f9 ff6f 	bl	8001470 <chSysIntegrityCheckI>
 8007592:	2300      	movs	r3, #0
 8007594:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8007598:	f080 0001 	eor.w	r0, r0, #1
 800759c:	b2c0      	uxtb	r0, r0
 800759e:	491e      	ldr	r1, [pc, #120]	; (8007618 <rt_test_002_001_execute.lto_priv.103+0x98>)
 80075a0:	f7fb fc6e 	bl	8002e80 <_test_assert>
 80075a4:	b100      	cbz	r0, 80075a8 <rt_test_002_001_execute.lto_priv.103+0x28>
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	4606      	mov	r6, r0
  test_set_step(2);
 80075aa:	2002      	movs	r0, #2
 80075ac:	6028      	str	r0, [r5, #0]
 80075ae:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80075b2:	f7f9 ff5d 	bl	8001470 <chSysIntegrityCheckI>
 80075b6:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "virtual timers list check failed");
 80075ba:	f080 0001 	eor.w	r0, r0, #1
 80075be:	b2c0      	uxtb	r0, r0
 80075c0:	4916      	ldr	r1, [pc, #88]	; (800761c <rt_test_002_001_execute.lto_priv.103+0x9c>)
 80075c2:	f7fb fc5d 	bl	8002e80 <_test_assert>
 80075c6:	4606      	mov	r6, r0
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d1ec      	bne.n	80075a6 <rt_test_002_001_execute.lto_priv.103+0x26>
  test_set_step(3);
 80075cc:	2303      	movs	r3, #3
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80075d4:	2004      	movs	r0, #4
 80075d6:	f7f9 ff4b 	bl	8001470 <chSysIntegrityCheckI>
 80075da:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "registry list check failed");
 80075de:	f080 0001 	eor.w	r0, r0, #1
 80075e2:	b2c0      	uxtb	r0, r0
 80075e4:	490e      	ldr	r1, [pc, #56]	; (8007620 <rt_test_002_001_execute.lto_priv.103+0xa0>)
 80075e6:	f7fb fc4b 	bl	8002e80 <_test_assert>
 80075ea:	4606      	mov	r6, r0
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1da      	bne.n	80075a6 <rt_test_002_001_execute.lto_priv.103+0x26>
  test_set_step(4);
 80075f0:	2304      	movs	r3, #4
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f384 8811 	msr	BASEPRI, r4
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 80075f8:	2008      	movs	r0, #8
 80075fa:	f7f9 ff39 	bl	8001470 <chSysIntegrityCheckI>
 80075fe:	f386 8811 	msr	BASEPRI, r6
    test_assert(result == false, "port layer check failed");
 8007602:	f080 0001 	eor.w	r0, r0, #1
 8007606:	b2c0      	uxtb	r0, r0
 8007608:	4906      	ldr	r1, [pc, #24]	; (8007624 <rt_test_002_001_execute.lto_priv.103+0xa4>)
}
 800760a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 800760e:	f7fb bc37 	b.w	8002e80 <_test_assert>
 8007612:	bf00      	nop
 8007614:	200013d8 	.word	0x200013d8
 8007618:	080098e0 	.word	0x080098e0
 800761c:	080098f8 	.word	0x080098f8
 8007620:	0800991c 	.word	0x0800991c
 8007624:	08009938 	.word	0x08009938
	...

08007630 <test_execute.constprop.1>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	4681      	mov	r9, r0
  int tseq, tcase;

  test_chp = stream;
 8007636:	4c9b      	ldr	r4, [pc, #620]	; (80078a4 <test_execute.constprop.1+0x274>)
 8007638:	4b9b      	ldr	r3, [pc, #620]	; (80078a8 <test_execute.constprop.1+0x278>)
  test_println("");
 800763a:	489c      	ldr	r0, [pc, #624]	; (80078ac <test_execute.constprop.1+0x27c>)
  test_chp = stream;
 800763c:	6023      	str	r3, [r4, #0]
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800763e:	b083      	sub	sp, #12
  test_println("");
 8007640:	f7fb f936 	bl	80028b0 <test_println>
  if (tsp->name != NULL) {
 8007644:	f8d9 3000 	ldr.w	r3, [r9]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8183 	beq.w	8007954 <test_execute.constprop.1+0x324>
 800764e:	4d98      	ldr	r5, [pc, #608]	; (80078b0 <test_execute.constprop.1+0x280>)
 8007650:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	6803      	ldr	r3, [r0, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4798      	blx	r3
  while (*msgp)
 800765a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800765e:	2900      	cmp	r1, #0
 8007660:	d1f7      	bne.n	8007652 <test_execute.constprop.1+0x22>
    test_print("*** ");
    test_println(tsp->name);
 8007662:	f8d9 0000 	ldr.w	r0, [r9]
 8007666:	f7fb f923 	bl	80028b0 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 800766a:	4892      	ldr	r0, [pc, #584]	; (80078b4 <test_execute.constprop.1+0x284>)
 800766c:	4d92      	ldr	r5, [pc, #584]	; (80078b8 <test_execute.constprop.1+0x288>)
 800766e:	f7fb f91f 	bl	80028b0 <test_println>
 8007672:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 8007674:	6820      	ldr	r0, [r4, #0]
 8007676:	6803      	ldr	r3, [r0, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4798      	blx	r3
  while (*msgp)
 800767c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007680:	2900      	cmp	r1, #0
 8007682:	d1f7      	bne.n	8007674 <test_execute.constprop.1+0x44>
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8007684:	488d      	ldr	r0, [pc, #564]	; (80078bc <test_execute.constprop.1+0x28c>)
 8007686:	4d8e      	ldr	r5, [pc, #568]	; (80078c0 <test_execute.constprop.1+0x290>)
 8007688:	f7fb f912 	bl	80028b0 <test_println>
 800768c:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	6803      	ldr	r3, [r0, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4798      	blx	r3
  while (*msgp)
 8007696:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800769a:	2900      	cmp	r1, #0
 800769c:	d1f7      	bne.n	800768e <test_execute.constprop.1+0x5e>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800769e:	4889      	ldr	r0, [pc, #548]	; (80078c4 <test_execute.constprop.1+0x294>)
 80076a0:	4d89      	ldr	r5, [pc, #548]	; (80078c8 <test_execute.constprop.1+0x298>)
 80076a2:	f7fb f905 	bl	80028b0 <test_println>
 80076a6:	212a      	movs	r1, #42	; 0x2a
    streamPut(test_chp, *msgp++);
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	6803      	ldr	r3, [r0, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	4798      	blx	r3
  while (*msgp)
 80076b0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d1f7      	bne.n	80076a8 <test_execute.constprop.1+0x78>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 80076b8:	4884      	ldr	r0, [pc, #528]	; (80078cc <test_execute.constprop.1+0x29c>)
 80076ba:	9101      	str	r1, [sp, #4]
 80076bc:	f7fb f8f8 	bl	80028b0 <test_println>
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 80076c0:	487a      	ldr	r0, [pc, #488]	; (80078ac <test_execute.constprop.1+0x27c>)
  test_tokp = test_tokens_buffer;
 80076c2:	4e83      	ldr	r6, [pc, #524]	; (80078d0 <test_execute.constprop.1+0x2a0>)
 80076c4:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80078f4 <test_execute.constprop.1+0x2c4>
  test_println("");
 80076c8:	f7fb f8f2 	bl	80028b0 <test_println>

  test_global_fail = false;
 80076cc:	4b81      	ldr	r3, [pc, #516]	; (80078d4 <test_execute.constprop.1+0x2a4>)
  tseq = 0;
 80076ce:	9901      	ldr	r1, [sp, #4]
  test_global_fail = false;
 80076d0:	7019      	strb	r1, [r3, #0]
 80076d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  while (tsp->sequences[tseq] != NULL) {
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076dc:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8115 	beq.w	8007910 <test_execute.constprop.1+0x2e0>
 80076e6:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	6803      	ldr	r3, [r0, #0]
 80076ec:	213d      	movs	r1, #61	; 0x3d
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80076f2:	3d01      	subs	r5, #1
 80076f4:	d1f8      	bne.n	80076e8 <test_execute.constprop.1+0xb8>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	4977      	ldr	r1, [pc, #476]	; (80078d8 <test_execute.constprop.1+0x2a8>)
 80076fa:	6803      	ldr	r3, [r0, #0]
 80076fc:	4d77      	ldr	r5, [pc, #476]	; (80078dc <test_execute.constprop.1+0x2ac>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	4798      	blx	r3
 8007704:	213d      	movs	r1, #61	; 0x3d
    streamPut(test_chp, *msgp++);
 8007706:	6820      	ldr	r0, [r4, #0]
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4798      	blx	r3
  while (*msgp)
 800770e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007712:	2900      	cmp	r1, #0
 8007714:	d1f7      	bne.n	8007706 <test_execute.constprop.1+0xd6>
#if TEST_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	4d71      	ldr	r5, [pc, #452]	; (80078e0 <test_execute.constprop.1+0x2b0>)
 800771a:	3301      	adds	r3, #1
 800771c:	4618      	mov	r0, r3
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f7fb f83e 	bl	80027a0 <test_printn>
 8007724:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	6803      	ldr	r3, [r0, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4798      	blx	r3
  while (*msgp)
 800772e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007732:	2900      	cmp	r1, #0
 8007734:	d1f7      	bne.n	8007726 <test_execute.constprop.1+0xf6>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 8007736:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800773a:	f853 3008 	ldr.w	r3, [r3, r8]
 800773e:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8007740:	7829      	ldrb	r1, [r5, #0]
 8007742:	b139      	cbz	r1, 8007754 <test_execute.constprop.1+0x124>
    streamPut(test_chp, *msgp++);
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	6803      	ldr	r3, [r0, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	4798      	blx	r3
  while (*msgp)
 800774c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007750:	2900      	cmp	r1, #0
 8007752:	d1f7      	bne.n	8007744 <test_execute.constprop.1+0x114>
    test_println(")");
 8007754:	4863      	ldr	r0, [pc, #396]	; (80078e4 <test_execute.constprop.1+0x2b4>)
 8007756:	f7fb f8ab 	bl	80028b0 <test_println>
#endif
    tcase = 0;
 800775a:	2700      	movs	r7, #0
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800775c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007760:	f853 2008 	ldr.w	r2, [r3, r8]
 8007764:	6852      	ldr	r2, [r2, #4]
 8007766:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800776a:	00bd      	lsls	r5, r7, #2
 800776c:	2a00      	cmp	r2, #0
 800776e:	d0b2      	beq.n	80076d6 <test_execute.constprop.1+0xa6>
      print_line();
 8007770:	f8df a194 	ldr.w	sl, [pc, #404]	; 8007908 <test_execute.constprop.1+0x2d8>
 8007774:	f7fb fb9c 	bl	8002eb0 <print_line.lto_priv.86>
 8007778:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	6803      	ldr	r3, [r0, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4798      	blx	r3
  while (*msgp)
 8007782:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8007786:	2900      	cmp	r1, #0
 8007788:	d1f7      	bne.n	800777a <test_execute.constprop.1+0x14a>
      test_print("--- Test Case ");
      test_printn(tseq + 1);
 800778a:	9801      	ldr	r0, [sp, #4]
      test_print(".");
      test_printn(tcase + 1);
 800778c:	f8df a150 	ldr.w	sl, [pc, #336]	; 80078e0 <test_execute.constprop.1+0x2b0>
      test_printn(tseq + 1);
 8007790:	f7fb f806 	bl	80027a0 <test_printn>
    streamPut(test_chp, *msgp++);
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	6803      	ldr	r3, [r0, #0]
 8007798:	212e      	movs	r1, #46	; 0x2e
 800779a:	68db      	ldr	r3, [r3, #12]
      test_printn(tcase + 1);
 800779c:	3701      	adds	r7, #1
    streamPut(test_chp, *msgp++);
 800779e:	4798      	blx	r3
      test_printn(tcase + 1);
 80077a0:	4638      	mov	r0, r7
 80077a2:	f7fa fffd 	bl	80027a0 <test_printn>
 80077a6:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	6803      	ldr	r3, [r0, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	4798      	blx	r3
  while (*msgp)
 80077b0:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d1f7      	bne.n	80077a8 <test_execute.constprop.1+0x178>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 80077b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80077bc:	f853 3008 	ldr.w	r3, [r3, r8]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	595b      	ldr	r3, [r3, r5]
 80077c4:	f8d3 a000 	ldr.w	sl, [r3]
  while (*msgp)
 80077c8:	f89a 1000 	ldrb.w	r1, [sl]
 80077cc:	b139      	cbz	r1, 80077de <test_execute.constprop.1+0x1ae>
    streamPut(test_chp, *msgp++);
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	6803      	ldr	r3, [r0, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4798      	blx	r3
  while (*msgp)
 80077d6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80077da:	2900      	cmp	r1, #0
 80077dc:	d1f7      	bne.n	80077ce <test_execute.constprop.1+0x19e>
      test_println(")");
 80077de:	4841      	ldr	r0, [pc, #260]	; (80078e4 <test_execute.constprop.1+0x2b4>)
  test_local_fail = false;
 80077e0:	f8df a128 	ldr.w	sl, [pc, #296]	; 800790c <test_execute.constprop.1+0x2dc>
      test_println(")");
 80077e4:	f7fb f864 	bl	80028b0 <test_println>
  chThdSleep(delay);
 80077e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80077ec:	f7f9 fe18 	bl	8001420 <chThdSleep>
#if TEST_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 80077f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80077f4:	f853 3008 	ldr.w	r3, [r3, r8]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	595d      	ldr	r5, [r3, r5]
  test_tokp = test_tokens_buffer;
 80077fc:	f8c6 b000 	str.w	fp, [r6]
  if (tcp->setup != NULL)
 8007800:	686b      	ldr	r3, [r5, #4]
  test_local_fail = false;
 8007802:	2200      	movs	r2, #0
 8007804:	f88a 2000 	strb.w	r2, [sl]
  if (tcp->setup != NULL)
 8007808:	b103      	cbz	r3, 800780c <test_execute.constprop.1+0x1dc>
    tcp->setup();
 800780a:	4798      	blx	r3
  tcp->execute();
 800780c:	68eb      	ldr	r3, [r5, #12]
 800780e:	4798      	blx	r3
  if (tcp->teardown != NULL)
 8007810:	68ab      	ldr	r3, [r5, #8]
 8007812:	b103      	cbz	r3, 8007816 <test_execute.constprop.1+0x1e6>
    tcp->teardown();
 8007814:	4798      	blx	r3
      if (test_local_fail) {
 8007816:	f89a 3000 	ldrb.w	r3, [sl]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d03e      	beq.n	800789c <test_execute.constprop.1+0x26c>
 800781e:	4d32      	ldr	r5, [pc, #200]	; (80078e8 <test_execute.constprop.1+0x2b8>)
 8007820:	212d      	movs	r1, #45	; 0x2d
    streamPut(test_chp, *msgp++);
 8007822:	6820      	ldr	r0, [r4, #0]
 8007824:	6803      	ldr	r3, [r0, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	4798      	blx	r3
  while (*msgp)
 800782a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800782e:	2900      	cmp	r1, #0
 8007830:	d1f7      	bne.n	8007822 <test_execute.constprop.1+0x1f2>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 8007832:	4b2e      	ldr	r3, [pc, #184]	; (80078ec <test_execute.constprop.1+0x2bc>)
 8007834:	4d2e      	ldr	r5, [pc, #184]	; (80078f0 <test_execute.constprop.1+0x2c0>)
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	f7fa ffb2 	bl	80027a0 <test_printn>
 800783c:	2120      	movs	r1, #32
    streamPut(test_chp, *msgp++);
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	6803      	ldr	r3, [r0, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4798      	blx	r3
  while (*msgp)
 8007846:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800784a:	2900      	cmp	r1, #0
 800784c:	d1f7      	bne.n	800783e <test_execute.constprop.1+0x20e>
  while (cp < test_tokp)
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	455b      	cmp	r3, fp
 8007852:	d909      	bls.n	8007868 <test_execute.constprop.1+0x238>
 8007854:	4d27      	ldr	r5, [pc, #156]	; (80078f4 <test_execute.constprop.1+0x2c4>)
    streamPut(test_chp, *cp++);
 8007856:	6820      	ldr	r0, [r4, #0]
 8007858:	f815 1b01 	ldrb.w	r1, [r5], #1
 800785c:	6803      	ldr	r3, [r0, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	4798      	blx	r3
  while (cp < test_tokp)
 8007862:	6833      	ldr	r3, [r6, #0]
 8007864:	429d      	cmp	r5, r3
 8007866:	d3f6      	bcc.n	8007856 <test_execute.constprop.1+0x226>
 8007868:	4d23      	ldr	r5, [pc, #140]	; (80078f8 <test_execute.constprop.1+0x2c8>)
 800786a:	215d      	movs	r1, #93	; 0x5d
    streamPut(test_chp, *msgp++);
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	6803      	ldr	r3, [r0, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4798      	blx	r3
  while (*msgp)
 8007874:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007878:	2900      	cmp	r1, #0
 800787a:	d1f7      	bne.n	800786c <test_execute.constprop.1+0x23c>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 800787c:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <test_execute.constprop.1+0x2cc>)
 800787e:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 8007880:	7829      	ldrb	r1, [r5, #0]
 8007882:	b139      	cbz	r1, 8007894 <test_execute.constprop.1+0x264>
    streamPut(test_chp, *msgp++);
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	6803      	ldr	r3, [r0, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	4798      	blx	r3
  while (*msgp)
 800788c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007890:	2900      	cmp	r1, #0
 8007892:	d1f7      	bne.n	8007884 <test_execute.constprop.1+0x254>
        test_println("\")");
 8007894:	481a      	ldr	r0, [pc, #104]	; (8007900 <test_execute.constprop.1+0x2d0>)
 8007896:	f7fb f80b 	bl	80028b0 <test_println>
 800789a:	e75f      	b.n	800775c <test_execute.constprop.1+0x12c>
      }
      else {
        test_println("--- Result: SUCCESS");
 800789c:	4819      	ldr	r0, [pc, #100]	; (8007904 <test_execute.constprop.1+0x2d4>)
 800789e:	f7fb f807 	bl	80028b0 <test_println>
 80078a2:	e75b      	b.n	800775c <test_execute.constprop.1+0x12c>
 80078a4:	200013d4 	.word	0x200013d4
 80078a8:	20001358 	.word	0x20001358
 80078ac:	08007c10 	.word	0x08007c10
 80078b0:	080099f8 	.word	0x080099f8
 80078b4:	08009aa4 	.word	0x08009aa4
 80078b8:	08009a00 	.word	0x08009a00
 80078bc:	08009aa8 	.word	0x08009aa8
 80078c0:	08009a14 	.word	0x08009a14
 80078c4:	08009ac0 	.word	0x08009ac0
 80078c8:	08009a28 	.word	0x08009a28
 80078cc:	08009aec 	.word	0x08009aec
 80078d0:	200013ec 	.word	0x200013ec
 80078d4:	20001350 	.word	0x20001350
 80078d8:	08008598 	.word	0x08008598
 80078dc:	08009a3c 	.word	0x08009a3c
 80078e0:	08009a50 	.word	0x08009a50
 80078e4:	08009b14 	.word	0x08009b14
 80078e8:	08009a64 	.word	0x08009a64
 80078ec:	200013d8 	.word	0x200013d8
 80078f0:	08009a7c 	.word	0x08009a7c
 80078f4:	200013dc 	.word	0x200013dc
 80078f8:	08009a80 	.word	0x08009a80
 80078fc:	2000134c 	.word	0x2000134c
 8007900:	08009b18 	.word	0x08009b18
 8007904:	08009b1c 	.word	0x08009b1c
 8007908:	08009a54 	.word	0x08009a54
 800790c:	20001351 	.word	0x20001351
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8007910:	f7fb face 	bl	8002eb0 <print_line.lto_priv.86>
  test_println("");
 8007914:	4d11      	ldr	r5, [pc, #68]	; (800795c <test_execute.constprop.1+0x32c>)
 8007916:	4812      	ldr	r0, [pc, #72]	; (8007960 <test_execute.constprop.1+0x330>)
 8007918:	f7fa ffca 	bl	80028b0 <test_println>
 800791c:	2146      	movs	r1, #70	; 0x46
    streamPut(test_chp, *msgp++);
 800791e:	6820      	ldr	r0, [r4, #0]
 8007920:	6803      	ldr	r3, [r0, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	4798      	blx	r3
  while (*msgp)
 8007926:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800792a:	2900      	cmp	r1, #0
 800792c:	d1f7      	bne.n	800791e <test_execute.constprop.1+0x2ee>
  test_print("Final result: ");
  if (test_global_fail)
 800792e:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <test_execute.constprop.1+0x334>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b93b      	cbnz	r3, 8007944 <test_execute.constprop.1+0x314>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8007934:	480c      	ldr	r0, [pc, #48]	; (8007968 <test_execute.constprop.1+0x338>)
 8007936:	f7fa ffbb 	bl	80028b0 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800793a:	4b0a      	ldr	r3, [pc, #40]	; (8007964 <test_execute.constprop.1+0x334>)
 800793c:	7818      	ldrb	r0, [r3, #0]
 800793e:	b003      	add	sp, #12
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("FAILURE");
 8007944:	4809      	ldr	r0, [pc, #36]	; (800796c <test_execute.constprop.1+0x33c>)
 8007946:	f7fa ffb3 	bl	80028b0 <test_println>
}
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <test_execute.constprop.1+0x334>)
 800794c:	7818      	ldrb	r0, [r3, #0]
 800794e:	b003      	add	sp, #12
 8007950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    test_println("*** Test Suite");
 8007954:	4806      	ldr	r0, [pc, #24]	; (8007970 <test_execute.constprop.1+0x340>)
 8007956:	f7fa ffab 	bl	80028b0 <test_println>
 800795a:	e686      	b.n	800766a <test_execute.constprop.1+0x3a>
 800795c:	08009a84 	.word	0x08009a84
 8007960:	08007c10 	.word	0x08007c10
 8007964:	20001350 	.word	0x20001350
 8007968:	08009b28 	.word	0x08009b28
 800796c:	08009b30 	.word	0x08009b30
 8007970:	08009a94 	.word	0x08009a94
